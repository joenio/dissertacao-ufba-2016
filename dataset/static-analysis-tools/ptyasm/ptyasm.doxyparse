file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/libjcudd/cubeIterator.c
module cubeIterator.c
   function setMgrPtr(JNIEnv *,jobject,jint) in line 9
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
   function getMgrPtr(JNIEnv *,jobject) in line 10
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
   function checkResult(JNIEnv *,DdManager *,DdNode *) in line 11
      protection public
      24 lines of code
      3 parameters
      1 conditional paths
   function countSharingSize(JNIEnv *,jintArray) in line 12
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
   function setGenPtr(JNIEnv *,jobject,jint) in line 14
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
   function getGenPtr(JNIEnv *,jobject) in line 15
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
   function getNodePtr(JNIEnv *,jobject) in line 16
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
   function cubeToJava(JNIEnv *,int,int *,CUDD_VALUE_TYPE) in line 18
      protection public
      32 lines of code
      4 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function Java_edu_toronto_cs_cudd_CuddAdd_00024CubeIterator_firstCube(JNIEnv *,jobject) in line 21
      protection public
      35 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses function getMgrPtr(JNIEnv *,jobject) defined in cubeIterator.c
      uses function getNodePtr(JNIEnv *,jobject) defined in cubeIterator.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in cubeIterator.c
      uses function setGenPtr(JNIEnv *,jobject,jint) defined in cubeIterator.c
      uses function cubeToJava(JNIEnv *,int,int *,CUDD_VALUE_TYPE) defined in cubeIterator.c
      uses variable size defined in DdManager
      uses function Java_edu_toronto_cs_cudd_CuddAdd_00024CubeIterator_nextCube(JNIEnv *,jobject) defined in cubeIterator.c
   function Java_edu_toronto_cs_cudd_CuddAdd_00024CubeIterator_nextCube(JNIEnv *,jobject) in line 59
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses function getMgrPtr(JNIEnv *,jobject) defined in cubeIterator.c
      uses function getGenPtr(JNIEnv *,jobject) defined in cubeIterator.c
      uses function cubeToJava(JNIEnv *,int,int *,CUDD_VALUE_TYPE) defined in cubeIterator.c
      uses variable size defined in DdManager
      uses function Java_edu_toronto_cs_cudd_CuddAdd_00024CubeIterator_freeGen(JNIEnv *,jobject) defined in cubeIterator.c
   function Java_edu_toronto_cs_cudd_CuddAdd_00024CubeIterator_freeGen(JNIEnv *,jobject) in line 83
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function getGenPtr(JNIEnv *,jobject) defined in cubeIterator.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/libjcudd/CubeIterator.h
module CubeIterator.h
   function Java_edu_toronto_cs_cudd_CuddAdd_00024CubeIterator_firstCube(JNIEnv *,jobject) in line 15
      protection public
      35 lines of code
      2 parameters
      2 conditional paths
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses function getMgrPtr(JNIEnv *,jobject) defined in cubeIterator.c
      uses function getNodePtr(JNIEnv *,jobject) defined in cubeIterator.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in cubeIterator.c
      uses function setGenPtr(JNIEnv *,jobject,jint) defined in cubeIterator.c
      uses function cubeToJava(JNIEnv *,int,int *,CUDD_VALUE_TYPE) defined in cubeIterator.c
      uses variable size defined in DdManager
      uses function Java_edu_toronto_cs_cudd_CuddAdd_00024CubeIterator_nextCube(JNIEnv *,jobject) defined in cubeIterator.c
   function Java_edu_toronto_cs_cudd_CuddAdd_00024CubeIterator_nextCube(JNIEnv *,jobject) in line 23
      protection public
      22 lines of code
      2 parameters
      2 conditional paths
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses function getMgrPtr(JNIEnv *,jobject) defined in cubeIterator.c
      uses function getGenPtr(JNIEnv *,jobject) defined in cubeIterator.c
      uses function cubeToJava(JNIEnv *,int,int *,CUDD_VALUE_TYPE) defined in cubeIterator.c
      uses variable size defined in DdManager
      uses function Java_edu_toronto_cs_cudd_CuddAdd_00024CubeIterator_freeGen(JNIEnv *,jobject) defined in cubeIterator.c
   function Java_edu_toronto_cs_cudd_CuddAdd_00024CubeIterator_freeGen(JNIEnv *,jobject) in line 31
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function getGenPtr(JNIEnv *,jobject) defined in cubeIterator.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/libjcudd/Cudd.c
module Cudd.c
   function setMgrPtr(JNIEnv *,jobject,jint) in line 8
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
   function getMgrPtr(JNIEnv *,jobject) in line 9
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
   function getBDD(JNIEnv *,jobject) in line 10
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
   function bddConvert(DdManager *,DdManager *,DdNode *,int) in line 12
      protection public
      39 lines of code
      4 parameters
      4 conditional paths
      uses macro definition Cudd_Regular defined in cudd.h
      uses macro definition DD_ONE defined in cuddInt.h
      uses macro definition Cudd_IsComplement defined in cudd.h
      uses macro definition Cudd_Not defined in cudd.h
      uses variable index defined in DdNode
      uses macro definition cuddT defined in cuddInt.h
      uses macro definition cuddE defined in cuddInt.h
   function Java_edu_toronto_cs_cudd_Cudd_init(JNIEnv *,jobject,jint) in line 16
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses macro definition CUDD_UNIQUE_SLOTS defined in cudd.h
      uses macro definition CUDD_CACHE_SLOTS defined in cudd.h
      uses function setMgrPtr(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_cuddBddOnePtr(JNIEnv *,jobject) in line 29
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_cuddBddZeroPtr(JNIEnv *,jobject) in line 45
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddVarPtr(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddVarPtr(JNIEnv *,jobject,jint) in line 60
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddAndPtr(JNIEnv *,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddAndPtr(JNIEnv *,jobject,jint,jint) in line 74
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddOrPtr(JNIEnv *,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddOrPtr(JNIEnv *,jobject,jint,jint) in line 88
      protection public
      13 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddNotPtr(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddNotPtr(JNIEnv *,jobject,jint) in line 103
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses macro definition Cudd_Not defined in cudd.h
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddConstrainPtr(JNIEnv *,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddConstrainPtr(JNIEnv *,jobject,jint,jint) in line 118
      protection public
      13 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddPermutePtr(JNIEnv *,jobject,jint,jintArray) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddPermutePtr(JNIEnv *,jobject,jint,jintArray) in line 134
      protection public
      25 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_existAbstract(JNIEnv *,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_existAbstract(JNIEnv *,jobject,jint,jint) in line 162
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_forallAbstract(JNIEnv *,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_forallAbstract(JNIEnv *,jobject,jint,jint) in line 176
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_ref(JNIEnv *,jobject,jint) in line 192
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
   function Java_edu_toronto_cs_cudd_Cudd_deref(JNIEnv *,jobject,jint) in line 204
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function Java_edu_toronto_cs_cudd_Cudd_recursiveDeref(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_recursiveDeref(JNIEnv *,jobject,jint) in line 214
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_refCount(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_refCount(JNIEnv *,jobject,jint) in line 231
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition Cudd_Regular defined in cudd.h
      uses variable ref defined in DdNode
      uses function Java_edu_toronto_cs_cudd_Cudd_checkZeroRef(JNIEnv *,jobject) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_checkZeroRef(JNIEnv *,jobject) in line 243
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_quit(JNIEnv *,jobject) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_quit(JNIEnv *,jobject) in line 253
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_info(JNIEnv *,jobject) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_info(JNIEnv *,jobject) in line 265
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_reorder(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_reorder(JNIEnv *,jobject,jint) in line 273
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses enumvalue CUDD_REORDER_SIFT defined in cudd.h
      uses function Java_edu_toronto_cs_cudd_Cudd_dagSize(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_dagSize(JNIEnv *,jobject,jint) in line 281
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function Java_edu_toronto_cs_cudd_Cudd_sharingSize(JNIEnv *,jobject,jintArray) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_sharingSize(JNIEnv *,jobject,jintArray) in line 288
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function countSharingSize(JNIEnv *,jintArray) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_transferPtr(JNIEnv *,jobject,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_transferPtr(JNIEnv *,jobject,jobject,jint,jint) in line 295
      protection public
      15 lines of code
      5 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function bddConvert(DdManager *,DdManager *,DdNode *,int) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
   function checkResult(JNIEnv *,DdManager *,DdNode *) in line 353
      protection public
      24 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue CUDD_MEMORY_OUT defined in cudd.h
   function countSharingSize(JNIEnv *,jintArray) in line 379
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
   function pickRandomCube(DdManager *,DdNode *,DdNode **) in line 437
      protection public
      55 lines of code
      3 parameters
      4 conditional paths
      uses macro definition DD_ONE defined in cuddInt.h
      uses macro definition Cudd_Not defined in cudd.h
      uses macro definition Cudd_Regular defined in cudd.h
      uses macro definition cuddT defined in cuddInt.h
      uses macro definition cuddE defined in cuddInt.h
      uses macro definition Cudd_IsComplement defined in cudd.h
      uses variable index defined in DdNode
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/libjcudd/Cudd.h
module Cudd.h
   function Java_edu_toronto_cs_cudd_Cudd_init(JNIEnv *,jobject,jint) in line 17
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses macro definition CUDD_UNIQUE_SLOTS defined in cudd.h
      uses macro definition CUDD_CACHE_SLOTS defined in cudd.h
      uses function setMgrPtr(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_cuddBddOnePtr(JNIEnv *,jobject) in line 25
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_cuddBddZeroPtr(JNIEnv *,jobject) in line 33
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddVarPtr(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddVarPtr(JNIEnv *,jobject,jint) in line 41
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddAndPtr(JNIEnv *,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddAndPtr(JNIEnv *,jobject,jint,jint) in line 49
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddOrPtr(JNIEnv *,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddOrPtr(JNIEnv *,jobject,jint,jint) in line 57
      protection public
      13 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddNotPtr(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddNotPtr(JNIEnv *,jobject,jint) in line 65
      protection public
      13 lines of code
      3 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses macro definition Cudd_Not defined in cudd.h
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddConstrainPtr(JNIEnv *,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddConstrainPtr(JNIEnv *,jobject,jint,jint) in line 73
      protection public
      13 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_bddPermutePtr(JNIEnv *,jobject,jint,jintArray) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_bddPermutePtr(JNIEnv *,jobject,jint,jintArray) in line 81
      protection public
      25 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_existAbstract(JNIEnv *,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_existAbstract(JNIEnv *,jobject,jint,jint) in line 89
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_forallAbstract(JNIEnv *,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_forallAbstract(JNIEnv *,jobject,jint,jint) in line 97
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_ref(JNIEnv *,jobject,jint) in line 105
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
   function Java_edu_toronto_cs_cudd_Cudd_deref(JNIEnv *,jobject,jint) in line 113
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function Java_edu_toronto_cs_cudd_Cudd_recursiveDeref(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_recursiveDeref(JNIEnv *,jobject,jint) in line 121
      protection public
      15 lines of code
      3 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_refCount(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_refCount(JNIEnv *,jobject,jint) in line 129
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition Cudd_Regular defined in cudd.h
      uses variable ref defined in DdNode
      uses function Java_edu_toronto_cs_cudd_Cudd_checkZeroRef(JNIEnv *,jobject) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_checkZeroRef(JNIEnv *,jobject) in line 137
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_quit(JNIEnv *,jobject) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_quit(JNIEnv *,jobject) in line 145
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_info(JNIEnv *,jobject) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_info(JNIEnv *,jobject) in line 153
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_reorder(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_reorder(JNIEnv *,jobject,jint) in line 161
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses enumvalue CUDD_REORDER_SIFT defined in cudd.h
      uses function Java_edu_toronto_cs_cudd_Cudd_dagSize(JNIEnv *,jobject,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_dagSize(JNIEnv *,jobject,jint) in line 169
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function Java_edu_toronto_cs_cudd_Cudd_sharingSize(JNIEnv *,jobject,jintArray) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_sharingSize(JNIEnv *,jobject,jintArray) in line 177
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function countSharingSize(JNIEnv *,jintArray) defined in Cudd.c
      uses function Java_edu_toronto_cs_cudd_Cudd_transferPtr(JNIEnv *,jobject,jobject,jint,jint) defined in Cudd.c
   function Java_edu_toronto_cs_cudd_Cudd_transferPtr(JNIEnv *,jobject,jobject,jint,jint) in line 185
      protection public
      15 lines of code
      5 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in Cudd.c
      uses function bddConvert(DdManager *,DdManager *,DdNode *,int) defined in Cudd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in Cudd.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/libjcudd/CuddAdd.c
module CuddAdd.c
   macro definition ALGEBRA in line 10
      protection public
   macro definition DD_BOT in line 11
      protection public
   macro definition DD_TOP in line 12
      protection public
   macro definition SET_ENV in line 14
      protection public
   typedef algebra in line 185
      protection public
   function setMgrPtr(JNIEnv *,jobject,jint) in line 51
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
   function getMgrPtr(JNIEnv *,jobject) in line 52
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
   function checkResult(JNIEnv *,DdManager *,DdNode *) in line 53
      protection public
      24 lines of code
      3 parameters
      1 conditional paths
   function countSharingSize(JNIEnv *,jintArray) in line 54
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
   function Lat_addNegCallback(DdManager *,DdNode *) in line 56
      protection public
      17 lines of code
      2 parameters
      2 conditional paths
      uses variable env defined in algebra
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable f defined in mvproduct.m
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable jalgebra defined in algebra
      uses variable negID defined in algebra
      uses macro definition cuddV defined in cuddInt.h
   function Lat_addMeetCallback(DdManager *,DdNode **,DdNode **) in line 57
      protection public
      25 lines of code
      3 parameters
      6 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable env defined in algebra
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition DD_BOT defined in CuddAdd.c
      uses macro definition DD_TOP defined in CuddAdd.c
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable jalgebra defined in algebra
      uses variable meetID defined in algebra
      uses macro definition cuddV defined in cuddInt.h
   function Lat_addJoinCallback(DdManager *,DdNode **,DdNode **) in line 58
      protection public
      28 lines of code
      3 parameters
      6 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable env defined in algebra
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition DD_TOP defined in CuddAdd.c
      uses macro definition DD_BOT defined in CuddAdd.c
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable jalgebra defined in algebra
      uses variable joinID defined in algebra
      uses macro definition cuddV defined in cuddInt.h
   function Lat_addAboveCallback(DdManager *,DdNode **,DdNode **) in line 59
      protection public
      21 lines of code
      3 parameters
      2 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable env defined in algebra
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable jalgebra defined in algebra
      uses variable geqID defined in algebra
      uses macro definition cuddV defined in cuddInt.h
   function Lat_addBelowCallback(DdManager *,DdNode **,DdNode **) in line 60
      protection public
      21 lines of code
      3 parameters
      2 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable env defined in algebra
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable jalgebra defined in algebra
      uses variable leqID defined in algebra
      uses macro definition cuddV defined in cuddInt.h
   function Lat_addImplCallback(DdManager *,DdNode **,DdNode **) in line 61
      protection public
      22 lines of code
      3 parameters
      3 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable env defined in algebra
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable jalgebra defined in algebra
      uses variable implID defined in algebra
      uses macro definition cuddV defined in cuddInt.h
   function Lat_addEqual(DdManager *,DdNode **,DdNode **) in line 62
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable f defined in mvproduct.m
      uses macro definition DD_TOP defined in CuddAdd.c
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses macro definition cuddV defined in cuddInt.h
      uses macro definition DD_BOT defined in CuddAdd.c
   function ARGS((DdManager *manager, DdNode *cube)) in line 68
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cuddLatAddUnivAbstractRecur(DdManager *,DdNode *,DdNode *) in line 69
      protection public
      82 lines of code
      3 parameters
      13 conditional paths
      uses variable res defined in visual.m
      uses macro definition statLine defined in cuddInt.h
      uses macro definition DD_ONE defined in cuddInt.h
      uses macro definition DD_ZERO defined in cuddInt.h
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable f defined in mvproduct.m
      uses macro definition cuddI defined in cuddInt.h
      uses variable index defined in DdNode
      uses macro definition cuddT defined in cuddInt.h
      uses function CuddLat_addUnivAbstract(DdManager *,DdNode *,DdNode *) defined in CuddAdd.c
      uses macro definition cuddE defined in cuddInt.h
      uses macro definition cuddRef defined in cuddInt.h
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable meetfn defined in algebra
      uses macro definition cuddDeref defined in cuddInt.h
   function cuddLatAddExistAbstractRecur(DdManager *,DdNode *,DdNode *) in line 71
      protection public
      84 lines of code
      3 parameters
      13 conditional paths
      uses variable res defined in visual.m
      uses macro definition statLine defined in cuddInt.h
      uses macro definition DD_ONE defined in cuddInt.h
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable f defined in mvproduct.m
      uses macro definition cuddI defined in cuddInt.h
      uses variable index defined in DdNode
      uses macro definition cuddT defined in cuddInt.h
      uses function CuddLat_addExistAbstract(DdManager *,DdNode *,DdNode *) defined in CuddAdd.c
      uses macro definition cuddE defined in cuddInt.h
      uses macro definition cuddRef defined in cuddInt.h
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable joinfn defined in algebra
      uses macro definition cuddDeref defined in cuddInt.h
   function CuddLat_addUnivAbstract(DdManager *,DdNode *,DdNode *) in line 73
      protection public
      25 lines of code
      3 parameters
      4 conditional paths
      uses variable res defined in visual.m
      uses function addCheckPositiveCube(DdManager *,DdNode *) defined in CuddAdd.c
      uses variable err defined in DdManager
      uses variable reordered defined in DdManager
      uses function cuddLatAddUnivAbstractRecur(DdManager *,DdNode *,DdNode *) defined in CuddAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition cuddRef defined in cuddInt.h
      uses macro definition cuddDeref defined in cuddInt.h
   function CuddLat_addExistAbstract(DdManager *,DdNode *,DdNode *) in line 75
      protection public
      25 lines of code
      3 parameters
      4 conditional paths
      uses variable res defined in visual.m
      uses function addCheckPositiveCube(DdManager *,DdNode *) defined in CuddAdd.c
      uses variable err defined in DdManager
      uses variable reordered defined in DdManager
      uses function cuddLatAddExistAbstractRecur(DdManager *,DdNode *,DdNode *) defined in CuddAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition cuddRef defined in cuddInt.h
      uses macro definition cuddDeref defined in cuddInt.h
   function Java_edu_toronto_cs_cudd_CuddAdd_init(JNIEnv *,jobject,jobject,jint,jint,jint) in line 81
      protection public
      60 lines of code
      6 parameters
      1 conditional paths
      uses macro definition CUDD_UNIQUE_SLOTS defined in cudd.h
      uses macro definition CUDD_CACHE_SLOTS defined in cudd.h
      uses function malloc() defined in util.h
      uses variable top defined in algebra
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable bot defined in algebra
      uses variable jalgebra defined in algebra
      uses variable env defined in algebra
      uses variable meetID defined in algebra
      uses variable joinID defined in algebra
      uses variable negID defined in algebra
      uses variable eqID defined in algebra
      uses variable leqID defined in algebra
      uses variable geqID defined in algebra
      uses variable implID defined in algebra
      uses variable meetfn defined in algebra
      uses function Lat_addMeetCallback(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable joinfn defined in algebra
      uses function Lat_addJoinCallback(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable negfn defined in algebra
      uses function Lat_addNegCallback(DdManager *,DdNode *) defined in CuddAdd.c
      uses variable eqfn defined in algebra
      uses function Lat_addEqual(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable leqfn defined in algebra
      uses function Lat_addBelowCallback(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable geqfn defined in algebra
      uses function Lat_addAboveCallback(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable implfn defined in algebra
      uses function Lat_addImplCallback(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable plusfn defined in algebra
      uses variable data defined in DdManager
      uses variable one defined in DdManager
      uses variable zero defined in DdManager
      uses function setMgrPtr(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_topPtr(JNIEnv *,jobject) in line 146
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_botPtr(JNIEnv *,jobject) in line 162
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addVarPtr(JNIEnv *,jobject,jint) in line 178
      protection public
      14 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addConstantPtr(JNIEnv *,jobject,jint) in line 194
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addAndPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addAndPtr(JNIEnv *,jobject,jint,jint) in line 209
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable meetfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addOrPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addOrPtr(JNIEnv *,jobject,jint,jint) in line 225
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable joinfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addNotPtr(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addNotPtr(JNIEnv *,jobject,jint) in line 241
      protection public
      14 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable negfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addGeqPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addGeqPtr(JNIEnv *,jobject,jint,jint) in line 257
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable geqfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addLeqPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addLeqPtr(JNIEnv *,jobject,jint,jint) in line 274
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable leqfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addEqPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addEqPtr(JNIEnv *,jobject,jint,jint) in line 291
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable eqfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addImplPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addImplPtr(JNIEnv *,jobject,jint,jint) in line 308
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable implfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addPlusPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addPlusPtr(JNIEnv *,jobject,jint,jint) in line 325
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable plusfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addCofactorPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addCofactorPtr(JNIEnv *,jobject,jint,jint) in line 343
      protection public
      13 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addItePtr(JNIEnv *,jobject,jint,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addItePtr(JNIEnv *,jobject,jint,jint,jint) in line 358
      protection public
      20 lines of code
      5 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_isConstantPtr(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_isConstantPtr(JNIEnv *,jobject,jint) in line 381
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition cuddIsConstant defined in cuddInt.h
   function Java_edu_toronto_cs_cudd_CuddAdd_addPermutePtr(JNIEnv *,jobject,jint,jintArray) in line 393
      protection public
      25 lines of code
      4 parameters
      1 conditional paths
      uses variable env defined in algebra
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addGetValue(JNIEnv *,jobject,jint) in line 420
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition cuddV defined in cuddInt.h
   function Java_edu_toronto_cs_cudd_CuddAdd_existAbstract(JNIEnv *,jobject,jint,jint) in line 434
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses function CuddLat_addExistAbstract(DdManager *,DdNode *,DdNode *) defined in CuddAdd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_forallAbstract(JNIEnv *,jobject,jint,jint) in line 450
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses function CuddLat_addUnivAbstract(DdManager *,DdNode *,DdNode *) defined in CuddAdd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_ref(JNIEnv *,jobject,jint) in line 469
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
   function Java_edu_toronto_cs_cudd_CuddAdd_deref(JNIEnv *,jobject,jint) in line 482
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
   function Java_edu_toronto_cs_cudd_CuddAdd_recursiveDeref(JNIEnv *,jobject,jint) in line 493
      protection public
      20 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
   function Java_edu_toronto_cs_cudd_CuddAdd_checkZeroRef(JNIEnv *,jobject) in line 515
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
   function Java_edu_toronto_cs_cudd_CuddAdd_quit(JNIEnv *,jobject) in line 525
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses variable data defined in DdManager
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable jalgebra defined in algebra
      uses macro definition free defined in mnemosyne.h
      uses function Java_edu_toronto_cs_cudd_CuddAdd_gc(JNIEnv *,jobject,jboolean) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_gc(JNIEnv *,jobject,jboolean) in line 543
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function Java_edu_toronto_cs_cudd_CuddAdd_info(JNIEnv *,jobject) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_info(JNIEnv *,jobject) in line 554
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function Java_edu_toronto_cs_cudd_CuddAdd_printMintermPtr(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_printMintermPtr(JNIEnv *,jobject,jint) in line 561
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function Java_edu_toronto_cs_cudd_CuddAdd_reorder(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_reorder(JNIEnv *,jobject,jint) in line 568
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses enumvalue CUDD_REORDER_SIFT defined in cudd.h
      uses function Java_edu_toronto_cs_cudd_CuddAdd_dagSize(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_dagSize(JNIEnv *,jobject,jint) in line 576
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function Java_edu_toronto_cs_cudd_CuddAdd_sharingSize(JNIEnv *,jobject,jintArray) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_sharingSize(JNIEnv *,jobject,jintArray) in line 583
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function countSharingSize(JNIEnv *,jintArray) defined in CuddAdd.c
      uses variable env defined in algebra
   function addCheckPositiveCube(DdManager *,DdNode *) in line 979
      protection public
      10 lines of code
      2 parameters
      5 conditional paths
      uses macro definition Cudd_IsComplement defined in cudd.h
      uses macro definition DD_ONE defined in cuddInt.h
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses macro definition cuddE defined in cuddInt.h
      uses macro definition DD_ZERO defined in cuddInt.h
      uses macro definition cuddT defined in cuddInt.h
      uses function Java_edu_toronto_cs_cudd_CuddAdd_dumpDaVinciPtr(JNIEnv *,jobject,jstring,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_dumpDaVinciPtr(JNIEnv *,jobject,jstring,jint) in line 990
      protection public
      27 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
module algebra
   variable bot in line 18
      protection public
   variable env in line 36
      protection public
   variable eqfn in line 26
      protection public
   variable eqID in line 44
      protection public
   variable geqfn in line 28
      protection public
   variable geqID in line 46
      protection public
   variable implfn in line 29
      protection public
   variable implID in line 47
      protection public
   variable jalgebra in line 38
      protection public
   variable joinfn in line 24
      protection public
   variable joinID in line 42
      protection public
   variable leqfn in line 27
      protection public
   variable leqID in line 45
      protection public
   variable meetfn in line 23
      protection public
   variable meetID in line 41
      protection public
   variable negfn in line 25
      protection public
   variable negID in line 43
      protection public
   variable plusfn in line 30
      protection public
   variable top in line 19
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/libjcudd/CuddAdd.h
module CuddAdd.h
   macro definition edu_toronto_cs_cudd_CuddAdd_NO_VALUE in line 11
      protection public
   function Java_edu_toronto_cs_cudd_CuddAdd_init(JNIEnv *,jobject,jobject,jint,jint,jint) in line 19
      protection public
      60 lines of code
      6 parameters
      1 conditional paths
      uses macro definition CUDD_UNIQUE_SLOTS defined in cudd.h
      uses macro definition CUDD_CACHE_SLOTS defined in cudd.h
      uses function malloc() defined in util.h
      uses variable top defined in algebra
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable bot defined in algebra
      uses variable jalgebra defined in algebra
      uses variable env defined in algebra
      uses variable meetID defined in algebra
      uses variable joinID defined in algebra
      uses variable negID defined in algebra
      uses variable eqID defined in algebra
      uses variable leqID defined in algebra
      uses variable geqID defined in algebra
      uses variable implID defined in algebra
      uses variable meetfn defined in algebra
      uses function Lat_addMeetCallback(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable joinfn defined in algebra
      uses function Lat_addJoinCallback(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable negfn defined in algebra
      uses function Lat_addNegCallback(DdManager *,DdNode *) defined in CuddAdd.c
      uses variable eqfn defined in algebra
      uses function Lat_addEqual(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable leqfn defined in algebra
      uses function Lat_addBelowCallback(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable geqfn defined in algebra
      uses function Lat_addAboveCallback(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable implfn defined in algebra
      uses function Lat_addImplCallback(DdManager *,DdNode **,DdNode **) defined in CuddAdd.c
      uses variable plusfn defined in algebra
      uses variable data defined in DdManager
      uses variable one defined in DdManager
      uses variable zero defined in DdManager
      uses function setMgrPtr(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_topPtr(JNIEnv *,jobject) in line 27
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_botPtr(JNIEnv *,jobject) in line 35
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addVarPtr(JNIEnv *,jobject,jint) in line 43
      protection public
      14 lines of code
      3 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addConstantPtr(JNIEnv *,jobject,jint) in line 51
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addAndPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addAndPtr(JNIEnv *,jobject,jint,jint) in line 59
      protection public
      14 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable meetfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addOrPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addOrPtr(JNIEnv *,jobject,jint,jint) in line 67
      protection public
      14 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable joinfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addNotPtr(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addEqPtr(JNIEnv *,jobject,jint,jint) in line 75
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable eqfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addImplPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addLeqPtr(JNIEnv *,jobject,jint,jint) in line 83
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable leqfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addEqPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addGeqPtr(JNIEnv *,jobject,jint,jint) in line 91
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable geqfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addLeqPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addImplPtr(JNIEnv *,jobject,jint,jint) in line 99
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable implfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addPlusPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addPlusPtr(JNIEnv *,jobject,jint,jint) in line 107
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable plusfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addCofactorPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addNotPtr(JNIEnv *,jobject,jint) in line 115
      protection public
      14 lines of code
      3 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable negfn defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addGeqPtr(JNIEnv *,jobject,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addPermutePtr(JNIEnv *,jobject,jint,jintArray) in line 123
      protection public
      25 lines of code
      4 parameters
      2 conditional paths
      uses variable env defined in algebra
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addGetValue(JNIEnv *,jobject,jint) in line 131
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition cuddV defined in cuddInt.h
   function Java_edu_toronto_cs_cudd_CuddAdd_existAbstract(JNIEnv *,jobject,jint,jint) in line 139
      protection public
      14 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses function CuddLat_addExistAbstract(DdManager *,DdNode *,DdNode *) defined in CuddAdd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_forallAbstract(JNIEnv *,jobject,jint,jint) in line 147
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition SET_ENV defined in CuddAdd.c
      uses function CuddLat_addUnivAbstract(DdManager *,DdNode *,DdNode *) defined in CuddAdd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addCofactorPtr(JNIEnv *,jobject,jint,jint) in line 155
      protection public
      13 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_addItePtr(JNIEnv *,jobject,jint,jint,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_addItePtr(JNIEnv *,jobject,jint,jint,jint) in line 163
      protection public
      20 lines of code
      5 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddAdd_isConstantPtr(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_ref(JNIEnv *,jobject,jint) in line 171
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
   function Java_edu_toronto_cs_cudd_CuddAdd_deref(JNIEnv *,jobject,jint) in line 179
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
   function Java_edu_toronto_cs_cudd_CuddAdd_recursiveDeref(JNIEnv *,jobject,jint) in line 187
      protection public
      20 lines of code
      3 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
   function Java_edu_toronto_cs_cudd_CuddAdd_isConstantPtr(JNIEnv *,jobject,jint) in line 195
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses macro definition cuddIsConstant defined in cuddInt.h
   function Java_edu_toronto_cs_cudd_CuddAdd_checkZeroRef(JNIEnv *,jobject) in line 203
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
   function Java_edu_toronto_cs_cudd_CuddAdd_gc(JNIEnv *,jobject,jboolean) in line 211
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function Java_edu_toronto_cs_cudd_CuddAdd_info(JNIEnv *,jobject) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_quit(JNIEnv *,jobject) in line 219
      protection public
      16 lines of code
      2 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses variable data defined in DdManager
      uses macro definition ALGEBRA defined in CuddAdd.c
      uses variable jalgebra defined in algebra
      uses macro definition free defined in mnemosyne.h
      uses function Java_edu_toronto_cs_cudd_CuddAdd_gc(JNIEnv *,jobject,jboolean) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_info(JNIEnv *,jobject) in line 227
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function Java_edu_toronto_cs_cudd_CuddAdd_printMintermPtr(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_printMintermPtr(JNIEnv *,jobject,jint) in line 235
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses function Java_edu_toronto_cs_cudd_CuddAdd_reorder(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_reorder(JNIEnv *,jobject,jint) in line 243
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
      uses enumvalue CUDD_REORDER_SIFT defined in cudd.h
      uses function Java_edu_toronto_cs_cudd_CuddAdd_dagSize(JNIEnv *,jobject,jint) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_dagSize(JNIEnv *,jobject,jint) in line 251
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function Java_edu_toronto_cs_cudd_CuddAdd_sharingSize(JNIEnv *,jobject,jintArray) defined in CuddAdd.c
   function Java_edu_toronto_cs_cudd_CuddAdd_sharingSize(JNIEnv *,jobject,jintArray) in line 259
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function countSharingSize(JNIEnv *,jintArray) defined in CuddAdd.c
      uses variable env defined in algebra
   function Java_edu_toronto_cs_cudd_CuddAdd_dumpDaVinciPtr(JNIEnv *,jobject,jstring,jint) in line 267
      protection public
      27 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddAdd.c
      uses variable env defined in algebra
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/libjcudd/CuddLatAdd.c
module CuddLatAdd.c
   macro definition LATTICE in line 10
      protection public
   macro definition DD_BOT in line 11
      protection public
   macro definition DD_TOP in line 12
      protection public
   macro definition MEET in line 13
      protection public
   macro definition JOIN in line 14
      protection public
   macro definition NEG in line 15
      protection public
   macro definition SET_ENV in line 17
      protection public
   macro definition TABLE_LOOKUP_MODE in line 18
      protection public
   macro definition CALLBACK_MODE in line 19
      protection public
   typedef lattice in line 267
      protection public
   function setMgrPtr(JNIEnv *,jobject,jint) in line 60
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
   function getMgrPtr(JNIEnv *,jobject) in line 61
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
   function checkResult(JNIEnv *,DdManager *,DdNode *) in line 62
      protection public
      24 lines of code
      3 parameters
      3 conditional paths
      uses enumvalue CUDD_MEMORY_OUT defined in cudd.h
   function countSharingSize(JNIEnv *,jintArray) in line 63
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
   function Lat_addNeg(DdManager *,DdNode *) in line 65
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable f defined in mvproduct.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses macro definition NEG defined in CuddLatAdd.c
      uses macro definition cuddV defined in cuddInt.h
      uses variable res defined in visual.m
   function Lat_addMeet(DdManager *,DdNode **,DdNode **) in line 66
      protection public
      22 lines of code
      3 parameters
      6 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable f defined in mvproduct.m
      uses macro definition DD_BOT defined in CuddLatAdd.c
      uses macro definition DD_TOP defined in CuddLatAdd.c
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses macro definition MEET defined in CuddLatAdd.c
      uses macro definition cuddV defined in cuddInt.h
   function Lat_addJoin(DdManager *,DdNode **,DdNode **) in line 67
      protection public
      22 lines of code
      3 parameters
      6 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable f defined in mvproduct.m
      uses macro definition DD_TOP defined in CuddLatAdd.c
      uses macro definition DD_BOT defined in CuddLatAdd.c
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses macro definition JOIN defined in CuddLatAdd.c
      uses macro definition cuddV defined in cuddInt.h
   function Lat_addAbove(DdManager *,DdNode **,DdNode **) in line 68
      protection public
      16 lines of code
      3 parameters
      3 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable f defined in mvproduct.m
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses macro definition JOIN defined in CuddLatAdd.c
      uses macro definition cuddV defined in cuddInt.h
      uses macro definition DD_TOP defined in CuddLatAdd.c
      uses macro definition DD_BOT defined in CuddLatAdd.c
   function Lat_addBelow(DdManager *,DdNode **,DdNode **) in line 69
      protection public
      16 lines of code
      3 parameters
      3 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable f defined in mvproduct.m
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses macro definition MEET defined in CuddLatAdd.c
      uses macro definition cuddV defined in cuddInt.h
      uses macro definition DD_TOP defined in CuddLatAdd.c
      uses macro definition DD_BOT defined in CuddLatAdd.c
   function Lat_addEqual(DdManager *,DdNode **,DdNode **) in line 70
      protection public
      16 lines of code
      3 parameters
      3 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable f defined in mvproduct.m
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses macro definition cuddV defined in cuddInt.h
      uses macro definition DD_TOP defined in CuddLatAdd.c
      uses macro definition DD_BOT defined in CuddLatAdd.c
      uses function getIntArray(JNIEnv *,jintArray) defined in CuddLatAdd.c
      uses variable env defined in lattice
   function Lat_addNegCallback(DdManager *,DdNode *) in line 72
      protection public
      16 lines of code
      2 parameters
      2 conditional paths
      uses variable env defined in lattice
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable f defined in mvproduct.m
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable jlat defined in lattice
      uses variable negID defined in lattice
      uses macro definition cuddV defined in cuddInt.h
   function Lat_addMeetCallback(DdManager *,DdNode **,DdNode **) in line 73
      protection public
      25 lines of code
      3 parameters
      6 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable env defined in lattice
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition DD_BOT defined in CuddLatAdd.c
      uses macro definition DD_TOP defined in CuddLatAdd.c
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable jlat defined in lattice
      uses variable meetID defined in lattice
      uses macro definition cuddV defined in cuddInt.h
   function Lat_addJoinCallback(DdManager *,DdNode **,DdNode **) in line 74
      protection public
      27 lines of code
      3 parameters
      6 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable env defined in lattice
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition DD_TOP defined in CuddLatAdd.c
      uses macro definition DD_BOT defined in CuddLatAdd.c
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable jlat defined in lattice
      uses variable joinID defined in lattice
      uses macro definition cuddV defined in cuddInt.h
   function Lat_addAboveCallback(DdManager *,DdNode **,DdNode **) in line 75
      protection public
      23 lines of code
      3 parameters
      3 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable env defined in lattice
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable jlat defined in lattice
      uses variable geqID defined in lattice
      uses macro definition cuddV defined in cuddInt.h
      uses macro definition DD_TOP defined in CuddLatAdd.c
      uses macro definition DD_BOT defined in CuddLatAdd.c
   function Lat_addBelowCallback(DdManager *,DdNode **,DdNode **) in line 76
      protection public
      23 lines of code
      3 parameters
      3 conditional paths
      uses variable res defined in visual.m
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable env defined in lattice
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable jlat defined in lattice
      uses variable leqID defined in lattice
      uses macro definition cuddV defined in cuddInt.h
      uses macro definition DD_TOP defined in CuddLatAdd.c
      uses macro definition DD_BOT defined in CuddLatAdd.c
   function Lat_addEqualCallback(DdManager *,DdNode **,DdNode **) in line 77
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function Lat_addEqual(DdManager *,DdNode **,DdNode **) defined in CuddLatAdd.c
      uses variable f defined in mvproduct.m
   function getIntArray(JNIEnv *,jintArray) in line 80
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
      uses variable size defined in lattice
      uses variable env defined in lattice
      uses function malloc() defined in util.h
      uses function memcpy() defined in util.h
   function getIntIntArray(JNIEnv *,jobjectArray) in line 81
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses variable size defined in lattice
      uses variable env defined in lattice
      uses function malloc() defined in util.h
      uses function getIntArray(JNIEnv *,jintArray) defined in CuddLatAdd.c
   function buildLattice(JNIEnv *,DdManager *,int,int,jobjectArray,jobjectArray,jintArray) in line 82
      protection public
      22 lines of code
      7 parameters
      1 conditional paths
      uses function malloc() defined in util.h
      uses variable meet defined in lattice
      uses function getIntIntArray(JNIEnv *,jobjectArray) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses variable join defined in lattice
      uses variable neg defined in lattice
      uses function getIntArray(JNIEnv *,jintArray) defined in CuddLatAdd.c
      uses variable top defined in lattice
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable bot defined in lattice
   function destroyLattice(lattice *) in line 86
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses macro definition free defined in mnemosyne.h
      uses variable neg defined in lattice
      uses variable size defined in lattice
      uses variable meet defined in lattice
      uses variable join defined in lattice
      uses variable top defined in lattice
      uses variable bot defined in lattice
   function ARGS((DdManager *manager, DdNode *cube)) in line 90
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cuddLatAddUnivAbstractRecur(DdManager *,DdNode *,DdNode *) in line 91
      protection public
      96 lines of code
      3 parameters
      13 conditional paths
      uses variable res defined in visual.m
      uses macro definition statLine defined in cuddInt.h
      uses macro definition DD_ONE defined in cuddInt.h
      uses macro definition DD_ZERO defined in cuddInt.h
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable f defined in mvproduct.m
      uses macro definition cuddI defined in cuddInt.h
      uses variable index defined in DdNode
      uses macro definition cuddT defined in cuddInt.h
      uses function CuddLat_addUnivAbstract(DdManager *,DdNode *,DdNode *) defined in CuddLatAdd.c
      uses macro definition cuddE defined in cuddInt.h
      uses macro definition cuddRef defined in cuddInt.h
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable meetfn defined in lattice
      uses macro definition cuddDeref defined in cuddInt.h
   function cuddLatAddExistAbstractRecur(DdManager *,DdNode *,DdNode *) in line 93
      protection public
      99 lines of code
      3 parameters
      13 conditional paths
      uses variable res defined in visual.m
      uses macro definition statLine defined in cuddInt.h
      uses macro definition DD_ONE defined in cuddInt.h
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses variable f defined in mvproduct.m
      uses macro definition cuddI defined in cuddInt.h
      uses variable index defined in DdNode
      uses macro definition cuddT defined in cuddInt.h
      uses function CuddLat_addExistAbstract(DdManager *,DdNode *,DdNode *) defined in CuddLatAdd.c
      uses macro definition cuddE defined in cuddInt.h
      uses macro definition cuddRef defined in cuddInt.h
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable joinfn defined in lattice
      uses macro definition cuddDeref defined in cuddInt.h
   function CuddLat_addUnivAbstract(DdManager *,DdNode *,DdNode *) in line 95
      protection public
      25 lines of code
      3 parameters
      4 conditional paths
      uses variable res defined in visual.m
      uses function addCheckPositiveCube(DdManager *,DdNode *) defined in CuddLatAdd.c
      uses variable err defined in DdManager
      uses variable reordered defined in DdManager
      uses function cuddLatAddUnivAbstractRecur(DdManager *,DdNode *,DdNode *) defined in CuddLatAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition cuddRef defined in cuddInt.h
      uses macro definition cuddDeref defined in cuddInt.h
   function CuddLat_addExistAbstract(DdManager *,DdNode *,DdNode *) in line 97
      protection public
      25 lines of code
      3 parameters
      4 conditional paths
      uses variable res defined in visual.m
      uses function addCheckPositiveCube(DdManager *,DdNode *) defined in CuddLatAdd.c
      uses variable err defined in DdManager
      uses variable reordered defined in DdManager
      uses function cuddLatAddExistAbstractRecur(DdManager *,DdNode *,DdNode *) defined in CuddLatAdd.c
      uses variable f defined in mvproduct.m
      uses macro definition cuddRef defined in cuddInt.h
      uses macro definition cuddDeref defined in cuddInt.h
   function Java_edu_toronto_cs_cudd_CuddLatAdd_init__Ledu_toronto_cs_algebra_Algebra_2III(JNIEnv *,jobject,jobject,jint,jint,jint) in line 103
      protection public
      49 lines of code
      6 parameters
      1 conditional paths
      uses macro definition CUDD_UNIQUE_SLOTS defined in cudd.h
      uses macro definition CUDD_CACHE_SLOTS defined in cudd.h
      uses function malloc() defined in util.h
      uses variable mode defined in lattice
      uses macro definition CALLBACK_MODE defined in CuddLatAdd.c
      uses variable top defined in lattice
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses variable bot defined in lattice
      uses variable jlat defined in lattice
      uses variable env defined in lattice
      uses variable meetID defined in lattice
      uses variable joinID defined in lattice
      uses variable negID defined in lattice
      uses variable meetfn defined in lattice
      uses function Lat_addMeetCallback(DdManager *,DdNode **,DdNode **) defined in CuddLatAdd.c
      uses variable joinfn defined in lattice
      uses function Lat_addJoinCallback(DdManager *,DdNode **,DdNode **) defined in CuddLatAdd.c
      uses variable negfn defined in lattice
      uses function Lat_addNegCallback(DdManager *,DdNode *) defined in CuddLatAdd.c
      uses variable eqfn defined in lattice
      uses function Lat_addEqualCallback(DdManager *,DdNode **,DdNode **) defined in CuddLatAdd.c
      uses variable leqfn defined in lattice
      uses function Lat_addBelowCallback(DdManager *,DdNode **,DdNode **) defined in CuddLatAdd.c
      uses variable geqfn defined in lattice
      uses function Lat_addAboveCallback(DdManager *,DdNode **,DdNode **) defined in CuddLatAdd.c
      uses variable data defined in DdManager
      uses variable one defined in DdManager
      uses variable zero defined in DdManager
      uses function setMgrPtr(JNIEnv *,jobject,jint) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_init__III_3_3I_3_3I_3I(JNIEnv *,jobject,jint,jint,jint,jobjectArray,jobjectArray,jintArray) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_init__III_3_3I_3_3I_3I(JNIEnv *,jobject,jint,jint,jint,jobjectArray,jobjectArray,jintArray) in line 155
      protection public
      42 lines of code
      8 parameters
      1 conditional paths
      uses macro definition CUDD_UNIQUE_SLOTS defined in cudd.h
      uses macro definition CUDD_CACHE_SLOTS defined in cudd.h
      uses function buildLattice(JNIEnv *,DdManager *,int,int,jobjectArray,jobjectArray,jintArray) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses variable top defined in lattice
      uses variable bot defined in lattice
      uses variable meet defined in lattice
      uses variable join defined in lattice
      uses variable neg defined in lattice
      uses variable mode defined in lattice
      uses macro definition TABLE_LOOKUP_MODE defined in CuddLatAdd.c
      uses variable meetfn defined in lattice
      uses function Lat_addMeet(DdManager *,DdNode **,DdNode **) defined in CuddLatAdd.c
      uses variable joinfn defined in lattice
      uses function Lat_addJoin(DdManager *,DdNode **,DdNode **) defined in CuddLatAdd.c
      uses variable negfn defined in lattice
      uses function Lat_addNeg(DdManager *,DdNode *) defined in CuddLatAdd.c
      uses variable eqfn defined in lattice
      uses function Lat_addEqual(DdManager *,DdNode **,DdNode **) defined in CuddLatAdd.c
      uses variable leqfn defined in lattice
      uses function Lat_addBelow(DdManager *,DdNode **,DdNode **) defined in CuddLatAdd.c
      uses variable geqfn defined in lattice
      uses function Lat_addAbove(DdManager *,DdNode **,DdNode **) defined in CuddLatAdd.c
      uses variable data defined in DdManager
      uses variable one defined in DdManager
      uses variable zero defined in DdManager
      uses function setMgrPtr(JNIEnv *,jobject,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_cuddAddOnePtr(JNIEnv *,jobject) in line 202
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_cuddAddZeroPtr(JNIEnv *,jobject) in line 218
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_addVarPtr(JNIEnv *,jobject,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_addVarPtr(JNIEnv *,jobject,jint) in line 234
      protection public
      13 lines of code
      3 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_addConstant(JNIEnv *,jobject,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_addConstant(JNIEnv *,jobject,jint) in line 250
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses macro definition CUDD_VALUE_TYPE defined in cudd.h
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_addAndPtr(JNIEnv *,jobject,jint,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_addAndPtr(JNIEnv *,jobject,jint,jint) in line 265
      protection public
      14 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses macro definition SET_ENV defined in CuddLatAdd.c
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable meetfn defined in lattice
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_addOrPtr(JNIEnv *,jobject,jint,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_addOrPtr(JNIEnv *,jobject,jint,jint) in line 281
      protection public
      14 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses macro definition SET_ENV defined in CuddLatAdd.c
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable joinfn defined in lattice
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_addNotPtr(JNIEnv *,jobject,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_addNotPtr(JNIEnv *,jobject,jint) in line 297
      protection public
      14 lines of code
      3 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses macro definition SET_ENV defined in CuddLatAdd.c
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable negfn defined in lattice
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_addGeqPtr(JNIEnv *,jobject,jint,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_addGeqPtr(JNIEnv *,jobject,jint,jint) in line 313
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses macro definition SET_ENV defined in CuddLatAdd.c
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable geqfn defined in lattice
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_addLeqPtr(JNIEnv *,jobject,jint,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_addLeqPtr(JNIEnv *,jobject,jint,jint) in line 330
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses macro definition SET_ENV defined in CuddLatAdd.c
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable leqfn defined in lattice
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_addEqPtr(JNIEnv *,jobject,jint,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_addEqPtr(JNIEnv *,jobject,jint,jint) in line 347
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses macro definition SET_ENV defined in CuddLatAdd.c
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable eqfn defined in lattice
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_addConstrainPtr(JNIEnv *,jobject,jint,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_addConstrainPtr(JNIEnv *,jobject,jint,jint) in line 365
      protection public
      13 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_addPermutePtr(JNIEnv *,jobject,jint,jintArray) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_addPermutePtr(JNIEnv *,jobject,jint,jintArray) in line 381
      protection public
      24 lines of code
      4 parameters
      2 conditional paths
      uses variable env defined in lattice
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_addGetValue(JNIEnv *,jobject,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_addGetValue(JNIEnv *,jobject,jint) in line 408
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses macro definition cuddV defined in cuddInt.h
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_existAbstract(JNIEnv *,jobject,jint,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_existAbstract(JNIEnv *,jobject,jint,jint) in line 421
      protection public
      13 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses macro definition SET_ENV defined in CuddLatAdd.c
      uses function CuddLat_addExistAbstract(DdManager *,DdNode *,DdNode *) defined in CuddLatAdd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_forallAbstract(JNIEnv *,jobject,jint,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_forallAbstract(JNIEnv *,jobject,jint,jint) in line 436
      protection public
      13 lines of code
      4 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses macro definition SET_ENV defined in CuddLatAdd.c
      uses function CuddLat_addUnivAbstract(DdManager *,DdNode *,DdNode *) defined in CuddLatAdd.c
      uses function checkResult(JNIEnv *,DdManager *,DdNode *) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_ref(JNIEnv *,jobject,jint) in line 454
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
   function Java_edu_toronto_cs_cudd_CuddLatAdd_deref(JNIEnv *,jobject,jint) in line 467
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_recursiveDeref(JNIEnv *,jobject,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_recursiveDeref(JNIEnv *,jobject,jint) in line 478
      protection public
      19 lines of code
      3 parameters
      2 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_checkZeroRef(JNIEnv *,jobject) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_checkZeroRef(JNIEnv *,jobject) in line 499
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_quit(JNIEnv *,jobject) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_quit(JNIEnv *,jobject) in line 509
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses variable data defined in DdManager
      uses macro definition LATTICE defined in CuddLatAdd.c
      uses variable mode defined in lattice
      uses macro definition TABLE_LOOKUP_MODE defined in CuddLatAdd.c
      uses function destroyLattice(lattice *) defined in CuddLatAdd.c
      uses variable jlat defined in lattice
      uses macro definition free defined in mnemosyne.h
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_info(JNIEnv *,jobject) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_info(JNIEnv *,jobject) in line 533
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_printMintermPtr(JNIEnv *,jobject,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_printMintermPtr(JNIEnv *,jobject,jint) in line 540
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_reorder(JNIEnv *,jobject,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_reorder(JNIEnv *,jobject,jint) in line 547
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
      uses enumvalue CUDD_REORDER_SIFT defined in cudd.h
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_dagSize(JNIEnv *,jobject,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_dagSize(JNIEnv *,jobject,jint) in line 555
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_sharingSize(JNIEnv *,jobject,jintArray) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_sharingSize(JNIEnv *,jobject,jintArray) in line 562
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function countSharingSize(JNIEnv *,jintArray) defined in CuddLatAdd.c
      uses variable env defined in lattice
   function addCheckPositiveCube(DdManager *,DdNode *) in line 1146
      protection public
      10 lines of code
      2 parameters
      5 conditional paths
      uses macro definition Cudd_IsComplement defined in cudd.h
      uses macro definition DD_ONE defined in cuddInt.h
      uses macro definition cuddIsConstant defined in cuddInt.h
      uses macro definition cuddE defined in cuddInt.h
      uses macro definition DD_ZERO defined in cuddInt.h
      uses macro definition cuddT defined in cuddInt.h
      uses function Java_edu_toronto_cs_cudd_CuddLatAdd_dumpDaVinciPtr(JNIEnv *,jobject,jstring,jint) defined in CuddLatAdd.c
   function Java_edu_toronto_cs_cudd_CuddLatAdd_dumpDaVinciPtr(JNIEnv *,jobject,jstring,jint) in line 1157
      protection public
      27 lines of code
      4 parameters
      1 conditional paths
      uses function getMgrPtr(JNIEnv *,jobject) defined in CuddLatAdd.c
      uses variable env defined in lattice
module lattice
   variable bot in line 23
      protection public
   variable env in line 49
      protection public
   variable eqfn in line 31
      protection public
   variable eqID in line 54
      protection public
   variable geqfn in line 33
      protection public
   variable geqID in line 56
      protection public
   variable jlat in line 50
      protection public
   variable join in line 44
      protection public
   variable joinfn in line 29
      protection public
   variable joinID in line 52
      protection public
   variable leqfn in line 32
      protection public
   variable leqID in line 55
      protection public
   variable meet in line 43
      protection public
   variable meetfn in line 28
      protection public
   variable meetID in line 51
      protection public
   variable mode in line 40
      protection public
   variable neg in line 45
      protection public
   variable negfn in line 30
      protection public
   variable negID in line 53
      protection public
   variable size in line 46
      protection public
   variable top in line 24
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/libjcudd/cuddTest.c
module cuddTest.c
   function main(int,char **) in line 9
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CUDD_UNIQUE_SLOTS defined in cudd.h
      uses macro definition CUDD_CACHE_SLOTS defined in cudd.h
      uses variable perm defined in DdManager
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/crunch2parms.m
module crunch2parms.m
   variable usage in line 1
      protection public
   variable d in line 1
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/fnam.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/fnam1parm.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/fnam2parm.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/mvproduct.m
module mvproduct.m
   variable f in line 1
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/mvproduct2.m
module mvproduct2.m
   variable f in line 1
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/priority.m
module priority.m
   variable f in line 1
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/priority2.m
module priority2.m
   variable f in line 1
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/slurp2parms.m
module slurp2parms.m
   variable usage in line 1
      protection public
   variable d in line 1
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/sparse.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/sparsebool.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/sparsemv.m
module sparsemv.m
   variable f in line 1
      protection public
   variable i in line 4
      protection public
   variable j in line 5
      protection public
   variable k in line 6
      protection public
   function res(j,k) in line 7
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function title() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/sparser.m
module sparser.m
   variable fmt in line 6
      protection public
   variable i in line 8
      protection public
   variable j in line 9
      protection public
   function length() in line 1
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function res(j,i) in line 10
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function set(h(i),'Marker',markers(i)) in line 20
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/stuff.m
module stuff.m
   variable f in line 1
      protection public
   variable i in line 7
      protection public
   variable j in line 8
      protection public
   function res(j,i) in line 9
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function xlabel('Number of Alices') in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function set(h(i),'Marker',markers(i)) in line 21
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/varyvar.m
module varyvar.m
   variable f in line 1
      protection public
   variable fmt in line 4
      protection public
   variable legendlabels in line 5
      protection public
   variable ident in line 9
      protection public
   function legendlabels(i) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function set(h(i),'Marker',markers(i)) in line 21
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/csrc/matlab/visual.m
module visual.m
   typedef logics in line 2
      protection public
   variable markers in line 3
      protection public
   variable o in line 3
      protection public
   variable s in line 3
      protection public
   variable d in line 3
      protection public
   variable v in line 3
      protection public
   variable p in line 3
      protection public
   variable res in line 9
      protection public
   variable k in line 11
      protection public
   function sparser(0.01:0.01:0.,3,logics,markers) in line 5
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function res(k,i) in line 13
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function set(h(i),'Marker',markers(i)) in line 24
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/examples/apache.c
module apache.c
   macro definition BUF_SZ in line 1
      protection public
   function main() in line 3
      protection public
      18 lines of code
      0 parameters
      6 conditional paths
      uses macro definition BUF_SZ defined in apache.c
      uses variable i defined in sparsemv.m
      uses macro definition assert defined in util.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/examples/foo.c
module foo.c
   function main() in line 1
      protection public
      22 lines of code
      0 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses macro definition assert defined in util.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/examples/gd.c
module gd.c
   macro definition gdFTEX_Unicode in line 1
      protection public
   macro definition gdFTEX_Shift_JIS in line 2
      protection public
   macro definition gdFTEX_Big5 in line 3
      protection public
   function main() in line 5
      protection public
      41 lines of code
      0 parameters
      8 conditional paths
      uses variable i defined in sparsemv.m
      uses macro definition assert defined in util.h
      uses macro definition gdFTEX_Unicode defined in gd.c
      uses macro definition gdFTEX_Shift_JIS defined in gd.c
      uses macro definition gdFTEX_Big5 defined in gd.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/examples/MadWifi.c
module MadWifi.c
   macro definition BUFSZ in line 1
      protection public
   macro definition IESZ in line 2
      protection public
   function main() in line 4
      protection public
      18 lines of code
      0 parameters
      2 conditional paths
      uses macro definition BUFSZ defined in MadWifi.c
      uses variable p defined in visual.m
      uses macro definition IESZ defined in MadWifi.c
      uses variable i defined in sparsemv.m
      uses macro definition assert defined in util.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/cmu/sei/pacc/absdom/MvSetAbstractDomain.java
module edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   function addAtomicInfo(AtomicInfo) in line 347
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable varTable defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function getName() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses variable idTable defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function getId() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
   function alpha(Expr) in line 115
      protection public
      46 lines of code
      1 parameters
      12 conditional paths
      uses variable res defined in visual.m
      uses function isAtomic(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function atomicInfo(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function getMvSet() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses variable mvSetFactory defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function args() defined in edu::toronto::cs::expr::Expr
   function atomicInfo(Expr) in line 287
      53 lines of code
      1 parameters
      4 conditional paths
      uses function checkAtomic(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable v defined in visual.m
      uses variable varTable defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function nextId() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable mvSetFactory defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getId() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function setMvSet(MvSet) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses function addAtomicInfo(AtomicInfo) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function isVariant() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses function mainVariant() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses function addVaraint(AtomicInfo) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses variable i defined in sparsemv.m
      uses variable defaultVariantsSize defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function getName() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
   function atomicInfoById(int) in line 273
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable idTable defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   function checkAtomic(Expr) in line 492
      7 lines of code
      1 parameters
      2 conditional paths
      uses function isAtomic(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable v defined in visual.m
   function debugDump() in line 515
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable varTable defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   function doAbstract(Expr) in line 92
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alpha(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   function doConcretize(MvSet) in line 104
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function gamma(MvSet) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable v defined in visual.m
   function gamma(MvSet) in line 168
      protection public
      42 lines of code
      1 parameters
      7 conditional paths
      uses variable mvSetFactory defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable res defined in visual.m
      uses variable v defined in visual.m
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable exprFactory defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses macro definition assert defined in util.h
      uses variable top defined in algebra
      uses variable i defined in sparsemv.m
      uses function atomicInfoById(int) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function getName() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
   function getDefaultVariantsSize() in line 248
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable defaultVariantsSize defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   function getExprFactory() in line 217
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable exprFactory defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   function getMvSetFactory() in line 227
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mvSetFactory defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   function isAllocated(Expr) in line 261
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable varTable defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable v defined in visual.m
   function isAtomic(Expr) in line 363
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function nextId() in line 506
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable maxID defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   function permuteMap(Map< Expr, Expr >) in line 458
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable maxID defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable i defined in sparsemv.m
      uses variable varTable defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function getId() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
   function setDefaultVariantsSize(int) in line 238
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable defaultVariantsSize defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable v defined in visual.m
   function varSet(Collection< Expr >) in line 376
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function varSet(Collection< Expr >,int) in line 390
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses variable v defined in visual.m
      uses variable varTable defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function getNthVariant(int) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses function getId() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses variable mvSetFactory defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MvSetFactory
   function varSet(int) in line 416
      protection public
      12 lines of code
      1 parameters
      7 conditional paths
      uses macro definition assert defined in util.h
      uses variable v defined in visual.m
      uses variable varTable defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function varSet(Collection< Expr >) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable maxID defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable i defined in sparsemv.m
      uses function getNthVariant(int) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses function getId() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
   function MvSetAbstractDomain(MvSetFactory,ExprFactory) in line 61
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable mvSetFactory defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable exprFactory defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   function MvSetAbstractDomain(MvSetFactory,ExprFactory,int,int) in line 72
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses variable varTable defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable idTable defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable mvSetFactory defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable exprFactory defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable maxID defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses variable defaultVariantsSize defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   variable defaultVariantsSize in line 51
   variable exprFactory in line 25
   variable idTable in line 41
   variable maxID in line 46
   variable mvSetFactory in line 29
   variable varTable in line 35
module edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
   function addVaraint(AtomicInfo) in line 652
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isVariant() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses function variantNum() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
   function getId() in line 626
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSet() in line 646
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getName() in line 630
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNthVariant(int) in line 616
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses function isVariant() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
   function isVariant() in line 593
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function mainVariant() in line 635
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
      uses function isVariant() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
      uses function atomicInfo(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   function setMvSet(MvSet) in line 642
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toString() in line 661
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function variantNum() in line 604
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function isVariant() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
   function AtomicInfo(int,Expr) in line 563
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function AtomicInfo(int,Expr,MvSet) in line 576
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function isVariant() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain::AtomicInfo
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/cmu/sei/pacc/absdom/MvSetAbstractDomainTestCase.java
module edu::cmu::sei::pacc::absdom::MvSetAbstractDomainTestCase
   inherits from junit::framework::TestCase
   function main(String[]) in line 57
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function testSimplify() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomainTestCase
   function testSimplify() in line 16
      protection public
      40 lines of code
      0 parameters
      1 conditional paths
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function gamma(MvSet) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function alpha(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/cmu/sei/pacc/absdom/VariantOp.java
module edu::cmu::sei::pacc::absdom::VariantOp
   inherits from edu::toronto::cs::expr::NamedOp
   function aux(Expr) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses variable AUX defined in edu::cmu::sei::pacc::absdom::VariantOp
   function getVariantNum() in line 22
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isVariantExpr(Expr) in line 58
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function mainVariant(Expr) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function next(Expr) in line 47
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses variable NEXT defined in edu::cmu::sei::pacc::absdom::VariantOp
   function variantExpr(Expr,int) in line 28
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable NEXT defined in edu::cmu::sei::pacc::absdom::VariantOp
      uses variable AUX defined in edu::cmu::sei::pacc::absdom::VariantOp
      uses function VariantOp(int) defined in edu::cmu::sei::pacc::absdom::VariantOp
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   function variantNum(Expr) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function getVariantNum() defined in edu::cmu::sei::pacc::absdom::VariantOp
   function VariantOp(int) in line 16
      5 lines of code
      1 parameters
      1 conditional paths
   variable AUX in line 12
      protection public
   variable NEXT in line 11
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/AbstractTableAlgebra.java
module edu::toronto::cs::algebra::AbstractTableAlgebra
   inherits from edu::toronto::cs::algebra::IAlgebra
   abstract class
   function bot() in line 481
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function carrierSet() in line 528
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function carrierSetId() in line 522
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function size() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
   function dumpTables(PrintWriter) in line 548
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function dumpValueMap(PrintWriter) in line 556
      protection public
      5 lines of code
      1 parameters
      6 conditional paths
      uses variable i defined in sparsemv.m
      uses function getValue(String) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses variable j defined in sparsemv.m
   function eq(AlgebraValue,AlgebraValue) in line 489
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function top() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
   function geq(AlgebraValue,AlgebraValue) in line 502
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function tableLookUp(int,int,int) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function top() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
   function getJoinIrredundant(BitSet) in line 602
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getJoinTable() in line 421
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMeetTable() in line 425
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue(String) in line 442
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function noValue() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
   function getValue(int) in line 455
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function impl(AlgebraValue,AlgebraValue) in line 472
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function join(AlgebraValue,AlgebraValue) in line 466
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getValue(String) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function tableLookUp(int,int,int) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function neg(AlgebraValue) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses variable v defined in visual.m
      uses function impl(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
   function joinDecomposition(AlgebraValue) in line 534
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function leq(AlgebraValue,AlgebraValue) in line 494
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function tableLookUp(int,int,int) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function top() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
   function meet(AlgebraValue,AlgebraValue) in line 461
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getValue(String) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function tableLookUp(int,int,int) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
   function neg(AlgebraValue) in line 471
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function noValue() in line 59
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function size() in line 513
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function tableLookUp(int,int,int) in line 413
      4 lines of code
      3 parameters
      1 conditional paths
   function top() in line 476
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function AbstractTableAlgebra(AbstractTableAlgebra,AbstractTableAlgebra) in line 48
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function noValue() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
   function AbstractTableAlgebra(Collection,Collection) in line 68
      protection public
      5 lines of code
      2 parameters
      30 conditional paths
      uses function noValue() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function setId(int) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getValue(String) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses function hasNext() defined in edu::toronto::cs::util::ArrayIterator
      uses function size() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function getName() defined in edu::toronto::cs::algebra::AlgebraValue
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/AlgebraCatalog.java
module edu::toronto::cs::algebra::AlgebraCatalog
   function getAlgebra(String) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getAlgebraTag(IAlgebra) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getTags() in line 23
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function iterator() in line 18
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function registerAlgebra(String,IAlgebra) in line 38
      protection public
      5 lines of code
      2 parameters
      7 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/AlgebraValue.java
module edu::toronto::cs::algebra::AlgebraValue
   function delta(AlgebraValue[],AlgebraValue[]) in line 152
      protection public
      13 lines of code
      2 parameters
      4 conditional paths
      uses function newVector(IAlgebra,int) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable i defined in sparsemv.m
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
   function eq(AlgebraValue) in line 98
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function eq(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::algebra::IAlgebra
      uses variable v defined in visual.m
   function equals(Object) in line 63
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable o defined in visual.m
   function equals(AlgebraValue) in line 69
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
   function geq(AlgebraValue) in line 106
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function geq(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::algebra::IAlgebra
      uses variable v defined in visual.m
   function getId() in line 35
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getName() in line 39
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getParentAlgebra() in line 49
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function impl(AlgebraValue) in line 91
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function impl(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::algebra::IAlgebra
      uses variable v defined in visual.m
   function isBot() in line 116
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function bot() defined in edu::toronto::cs::algebra::IAlgebra
      uses function eq(AlgebraValue) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function top() defined in edu::toronto::cs::algebra::IAlgebra
   function isNoValue() in line 120
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function noValue() defined in edu::toronto::cs::algebra::IAlgebra
   function isTop() in line 112
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function top() defined in edu::toronto::cs::algebra::IAlgebra
      uses function eq(AlgebraValue) defined in edu::toronto::cs::algebra::AlgebraValue
   function join(AlgebraValue) in line 83
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function join(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::algebra::IAlgebra
      uses variable v defined in visual.m
   function joinDecomposition() in line 128
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function joinDecomposition(AlgebraValue) defined in edu::toronto::cs::algebra::IAlgebra
   function leq(AlgebraValue) in line 102
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function leq(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::algebra::IAlgebra
      uses variable v defined in visual.m
   function meet(AlgebraValue) in line 79
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function meet(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::algebra::IAlgebra
      uses variable v defined in visual.m
   function neg() in line 87
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function neg(AlgebraValue) defined in edu::toronto::cs::algebra::IAlgebra
   function newVector(IAlgebra,int) in line 134
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function noValue() defined in edu::toronto::cs::algebra::IAlgebra
   function renameArgs(AlgebraValue[],int[]) in line 141
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses variable v defined in visual.m
      uses function newVector(IAlgebra,int) defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable i defined in sparsemv.m
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function noValue() defined in edu::toronto::cs::algebra::IAlgebra
   function setId(int) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setName(String) in line 44
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toString() in line 28
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString(AlgebraValue) in line 166
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
   function toString(AlgebraValue[]) in line 176
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
   function AlgebraValue(IAlgebra,String,int) in line 20
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/BelnapAlgebra.java
module edu::toronto::cs::algebra::BelnapAlgebra
   inherits from edu::toronto::cs::algebra::IAlgebra
   function bot() in line 81
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function carrierSet() in line 136
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function carrierSetId() in line 132
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function eq(AlgebraValue,AlgebraValue) in line 85
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function top() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::BelnapAlgebra
   function geq(AlgebraValue,AlgebraValue) in line 98
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function leq(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::algebra::BelnapAlgebra
   function getJoinIrredundant(BitSet) in line 111
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable s defined in visual.m
      uses function top() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function infoBot() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function infoTop() defined in edu::toronto::cs::algebra::BelnapAlgebra
   function getMeetIrredundant(BitSet) in line 127
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getValue(String) in line 31
      protection public
      8 lines of code
      1 parameters
      5 conditional paths
      uses function top() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function infoBot() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function infoTop() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function noValue() defined in edu::toronto::cs::algebra::BelnapAlgebra
   function getValue(int) in line 40
      protection public
      8 lines of code
      1 parameters
      5 conditional paths
      uses function bot() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function top() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function infoBot() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function infoTop() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function noValue() defined in edu::toronto::cs::algebra::BelnapAlgebra
   function impl(AlgebraValue,AlgebraValue) in line 72
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function neg(AlgebraValue) defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function join(AlgebraValue) defined in edu::toronto::cs::algebra::AlgebraValue
   function infoBot() in line 151
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function infoJoin(AlgebraValue,AlgebraValue) in line 164
      protection public
      7 lines of code
      2 parameters
      4 conditional paths
      uses function infoBot() defined in edu::toronto::cs::algebra::BelnapAlgebra
   function infoMeet(AlgebraValue,AlgebraValue) in line 156
      protection public
      7 lines of code
      2 parameters
      4 conditional paths
      uses function infoTop() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function infoBot() defined in edu::toronto::cs::algebra::BelnapAlgebra
   function infoNeg(AlgebraValue) in line 172
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function infoTop() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function infoBot() defined in edu::toronto::cs::algebra::BelnapAlgebra
   function infoTop() in line 147
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function join(AlgebraValue,AlgebraValue) in line 57
      protection public
      7 lines of code
      2 parameters
      4 conditional paths
      uses function bot() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function top() defined in edu::toronto::cs::algebra::BelnapAlgebra
   function joinDecomposition(AlgebraValue) in line 140
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function leq(AlgebraValue,AlgebraValue) in line 89
      protection public
      8 lines of code
      2 parameters
      4 conditional paths
      uses function top() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::BelnapAlgebra
   function meet(AlgebraValue,AlgebraValue) in line 49
      protection public
      7 lines of code
      2 parameters
      4 conditional paths
      uses function top() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::BelnapAlgebra
   function neg(AlgebraValue) in line 65
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses variable v defined in visual.m
      uses function top() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::BelnapAlgebra
   function noValue() in line 26
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function size() in line 103
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function top() in line 77
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function BelnapAlgebra() in line 16
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function noValue() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function top() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function infoBot() defined in edu::toronto::cs::algebra::BelnapAlgebra
      uses function infoTop() defined in edu::toronto::cs::algebra::BelnapAlgebra
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/DeMorganAlgebra.java
module edu::toronto::cs::algebra::DeMorganAlgebra
   inherits from edu::toronto::cs::algebra::IAlgebra
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/DeMorganTableAlgebra.java
module edu::toronto::cs::algebra::DeMorganTableAlgebra
   inherits from edu::toronto::cs::algebra::AbstractTableAlgebra
   inherits from edu::toronto::cs::algebra::DeMorganAlgebra
   function dumpTables(PrintWriter) in line 99
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function getValue(String) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
   function getJoinIrredundant(BitSet) in line 115
      protection public
      22 lines of code
      1 parameters
      7 conditional paths
      uses variable res defined in visual.m
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses function getValue(String) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
   function getMeetIrredundant(BitSet) in line 139
      protection public
      22 lines of code
      1 parameters
      7 conditional paths
      uses variable res defined in visual.m
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses function getValue(String) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
   function getNegTable() in line 44
      protection public
      4 lines of code
      0 parameters
      4 conditional paths
      uses function size() defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses variable i defined in sparsemv.m
      uses function neg() defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable j defined in sparsemv.m
      uses function getValue(String) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getName() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function neg(AlgebraValue) defined in edu::toronto::cs::algebra::DeMorganTableAlgebra
   function impl(AlgebraValue,AlgebraValue) in line 37
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function neg() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function join(AlgebraValue) defined in edu::toronto::cs::algebra::AlgebraValue
   function main(String[]) in line 164
      protection public
      32 lines of code
      1 parameters
      1 conditional paths
      uses function neg(AlgebraValue) defined in edu::toronto::cs::algebra::DeMorganTableAlgebra
      uses function DeMorganTableAlgebra(DeMorganTableAlgebra,DeMorganTableAlgebra) defined in edu::toronto::cs::algebra::DeMorganTableAlgebra
      uses function dumpTables(PrintWriter) defined in edu::toronto::cs::algebra::DeMorganTableAlgebra
   function neg(AlgebraValue) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getValue(String) defined in edu::toronto::cs::algebra::AbstractTableAlgebra
      uses variable v defined in visual.m
   function DeMorganTableAlgebra(DeMorganTableAlgebra,DeMorganTableAlgebra) in line 17
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function DeMorganTableAlgebra(Collection,Collection,Collection) in line 25
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/IAlgebra.java
module edu::toronto::cs::algebra::IAlgebra
   function bot() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function carrierSet() in line 49
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function carrierSetId() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function eq(AlgebraValue,AlgebraValue) in line 31
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function geq(AlgebraValue,AlgebraValue) in line 33
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function getJoinIrredundant(BitSet) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getMeetIrredundant(BitSet) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getValue(String) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getValue(int) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function impl(AlgebraValue,AlgebraValue) in line 26
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function join(AlgebraValue,AlgebraValue) in line 22
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function joinDecomposition(AlgebraValue) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function leq(AlgebraValue,AlgebraValue) in line 32
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function meet(AlgebraValue,AlgebraValue) in line 20
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function neg(AlgebraValue) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function noValue() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function size() in line 39
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function top() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/IAlgebraBeanInfo.java
module edu::toronto::cs::algebra::IAlgebraBeanInfo
   inherits from SimpleBeanInfo
   function getBeanDescriptor() in line 11
      protection public
      20 lines of code
      0 parameters
      1 conditional paths
   function IAlgebraBeanInfo() in line 7
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/IntAlgebraWrapper.java
module edu::toronto::cs::algebra::IntAlgebraWrapper
   function bot() in line 73
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable bot defined in algebra
   function eq(int,int) in line 53
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function geq(int,int) in line 63
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function getAlgebra() in line 83
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function impl(int,int) in line 47
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function infoJoin(int,int) in line 36
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function meet(int,int) defined in edu::toronto::cs::algebra::IntAlgebraWrapper
   function infoMeet(int,int) in line 32
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function join(int,int) defined in edu::toronto::cs::algebra::IntAlgebraWrapper
   function infoNeg(int) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function join(int,int) in line 22
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function leq(int,int) in line 58
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function meet(int,int) in line 17
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function neg(int) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function noValue() in line 78
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function top() in line 69
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable top defined in algebra
   function IntAlgebraWrapper(IAlgebra) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/IntBelnapAlgebraWrapper.java
module edu::toronto::cs::algebra::IntBelnapAlgebraWrapper
   inherits from edu::toronto::cs::algebra::IntAlgebraWrapper
   function infoJoin(int,int) in line 22
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function infoJoin(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::algebra::BelnapAlgebra
   function infoMeet(int,int) in line 17
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function infoMeet(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::algebra::BelnapAlgebra
   function infoNeg(int) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function infoNeg(AlgebraValue) defined in edu::toronto::cs::algebra::BelnapAlgebra
   function IntBelnapAlgebraWrapper(BelnapAlgebra) in line 11
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/MinUpSet.java
module edu::toronto::cs::algebra::MinUpSet
   function add(AlgebraValue) in line 46
      protection public
      32 lines of code
      1 parameters
      5 conditional paths
      uses variable v defined in visual.m
      uses function iterator() defined in edu::toronto::cs::algebra::MinUpSet
      uses function leq(AlgebraValue) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function isTop() defined in edu::toronto::cs::algebra::AlgebraValue
   function addAll(MinUpSet) in line 31
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function iterator() defined in edu::toronto::cs::algebra::MinUpSet
      uses function add(AlgebraValue) defined in edu::toronto::cs::algebra::MinUpSet
   function equals(Object) in line 150
      protection public
      8 lines of code
      1 parameters
      4 conditional paths
      uses variable o defined in visual.m
   function getValues() in line 116
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 159
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isIn(AlgebraValue) in line 85
      protection public
      9 lines of code
      1 parameters
      4 conditional paths
      uses variable v defined in visual.m
      uses function iterator() defined in edu::toronto::cs::algebra::MinUpSet
   function isSubSet(MinUpSet) in line 102
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses function iterator() defined in edu::toronto::cs::algebra::MinUpSet
      uses function isIn(AlgebraValue) defined in edu::toronto::cs::algebra::MinUpSet
   function iterator() in line 127
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function size() in line 138
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 165
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function MinUpSet() in line 21
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/beans/editors/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/beans/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/binarytree/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/abstraction/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/parser/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cfa/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/clang/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/block/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/antlr/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cudd/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/davinci/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gclang/parser/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/grappa/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/jcudd/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mdd/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/openjgraph/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/parser/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tlq/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/test/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/xkripke/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/cfg/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/junit/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pgenerator/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/refiner/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/trace/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/util/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/wp/package-info.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/TwoValAlgebra.java
module edu::toronto::cs::algebra::TwoValAlgebra
   inherits from edu::toronto::cs::algebra::DeMorganAlgebra
   function bot() in line 86
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition FALSE defined in cudd.h
   function carrierSet() in line 121
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses macro definition TRUE defined in cudd.h
      uses macro definition FALSE defined in cudd.h
   function carrierSetId() in line 115
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function eq(AlgebraValue,AlgebraValue) in line 92
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition TRUE defined in cudd.h
      uses macro definition FALSE defined in cudd.h
   function geq(AlgebraValue,AlgebraValue) in line 102
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses macro definition TRUE defined in cudd.h
      uses macro definition FALSE defined in cudd.h
   function getJoinIrredundant(BitSet) in line 130
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable s defined in visual.m
      uses macro definition TRUE defined in cudd.h
      uses macro definition FALSE defined in cudd.h
   function getMeetIrredundant(BitSet) in line 144
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable s defined in visual.m
      uses macro definition FALSE defined in cudd.h
      uses macro definition TRUE defined in cudd.h
   function getValue(String) in line 36
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FALSE defined in cudd.h
      uses macro definition TRUE defined in cudd.h
   function getValue(int) in line 44
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FALSE defined in cudd.h
      uses macro definition TRUE defined in cudd.h
   function impl(AlgebraValue,AlgebraValue) in line 75
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FALSE defined in cudd.h
      uses macro definition TRUE defined in cudd.h
   function join(AlgebraValue,AlgebraValue) in line 63
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FALSE defined in cudd.h
      uses macro definition TRUE defined in cudd.h
   function joinDecomposition(AlgebraValue) in line 158
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses macro definition TRUE defined in cudd.h
   function leq(AlgebraValue,AlgebraValue) in line 97
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses macro definition TRUE defined in cudd.h
      uses macro definition FALSE defined in cudd.h
   function meet(AlgebraValue,AlgebraValue) in line 57
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition TRUE defined in cudd.h
      uses macro definition FALSE defined in cudd.h
   function neg(AlgebraValue) in line 69
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses macro definition TRUE defined in cudd.h
      uses macro definition FALSE defined in cudd.h
   function noValue() in line 27
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function size() in line 109
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function top() in line 81
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TRUE defined in cudd.h
   function TwoValAlgebra() in line 19
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition FALSE defined in cudd.h
      uses macro definition TRUE defined in cudd.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/algebra/XMLDeMorganAlgebraParser.java
module edu::toronto::cs::algebra::XMLDeMorganAlgebraParser
   function buildAlgebra(Document) in line 56
      protection public
      24 lines of code
      1 parameters
      3 conditional paths
   function buildAlgebra(Element) in line 84
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses function sanityCheck(Element) defined in edu::toronto::cs::algebra::XMLDeMorganAlgebraParser
      uses function newDeMorganTableAlgebra(List,List,List) defined in edu::toronto::cs::algebra::XMLDeMorganAlgebraParser
   function main(String[]) in line 20
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function parse(InputStream) defined in edu::toronto::cs::algebra::XMLDeMorganAlgebraParser
   function newDeMorganTableAlgebra(List,List,List) in line 101
      protection public
      4 lines of code
      3 parameters
      6 conditional paths
      uses variable i defined in sparsemv.m
   function parse(InputStream) in line 35
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function buildAlgebra(Document) defined in edu::toronto::cs::algebra::XMLDeMorganAlgebraParser
   function parse(String) in line 45
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function buildAlgebra(Document) defined in edu::toronto::cs::algebra::XMLDeMorganAlgebraParser
   function sanityCheck(Element) in line 154
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/beans/BeanUtil.java
module edu::toronto::cs::beans::BeanUtil
   function getEditorComponent(PropertyEditor) in line 52
      protection public
      46 lines of code
      1 parameters
      5 conditional paths
   function getPropertyEditor(PropertyDescriptor) in line 19
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses variable d defined in crunch2parms.m
   variable HELP_ATTRIBUTE in line 17
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/beans/editors/FileEditor.java
module edu::toronto::cs::beans::editors::FileEditor
   inherits from PropertyEditorSupport
   function getAsText() in line 32
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function getCustomEditor() in line 39
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function initFilePanel() defined in edu::toronto::cs::beans::editors::FileEditor
   function initFilePanel() in line 47
      protection public
      10 lines of code
      0 parameters
      3 conditional paths
      uses function getDocument() defined in edu::toronto::cs::util::gui::FilePanel
      uses variable p defined in visual.m
      uses macro definition assert defined in util.h
   function setAsText(String) in line 26
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function FileEditor() in line 20
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::beans::editors::FileEditor::FilePanelGlue
   inherits from PropertyChangeListener
   inherits from DocumentListener
   function changedUpdate(DocumentEvent) in line 80
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function changeToDoc() in line 85
      protection public
      13 lines of code
      0 parameters
      1 conditional paths
   function insertUpdate(DocumentEvent) in line 70
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function propertyChange(PropertyChangeEvent) in line 99
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
   function removeUpdate(DocumentEvent) in line 75
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function FilePanelGlue(FilePanel,PropertyEditor) in line 64
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/beans/editors/IAlgebraEditor.java
module edu::toronto::cs::beans::editors::IAlgebraEditor
   inherits from PropertyEditorSupport
   function getAsText() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getValue() defined in edu::toronto::cs::beans::editors::IAlgebraEditor
   function getJavaInitializationString() in line 41
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getAsText() defined in edu::toronto::cs::beans::editors::IAlgebraEditor
   function getTags() in line 13
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 30
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
   function setAsText(String) in line 18
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/beans/editors/MvSetFactoryClassEditor.java
module edu::toronto::cs::beans::editors::MvSetFactoryClassEditor
   inherits from PropertyEditorSupport
   function getAsText() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getValue() defined in edu::toronto::cs::beans::editors::MvSetFactoryClassEditor
   function getTags() in line 13
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 29
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
   function setAsText(String) in line 18
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/beans/ModelCompilerEncoder.java
module edu::toronto::cs::beans::ModelCompilerEncoder
   inherits from XMLEncoder
   function ModelCompilerEncoder(OutputStream) in line 11
      protection public
      20 lines of code
      1 parameters
      2 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/beans/ModelCompilerPropertyDialog.java
module edu::toronto::cs::beans::ModelCompilerPropertyDialog
   inherits from JDialog
   function cancel() in line 86
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getModelCompiler() in line 91
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function getModelCompiler() defined in edu::toronto::cs::beans::ModelCompilerPropertySheet
   function initialize() in line 45
      40 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 107
      protection public
      27 lines of code
      1 parameters
      2 conditional paths
      uses function ModelCompilerPropertyDialog(JFrame,String) defined in edu::toronto::cs::beans::ModelCompilerPropertyDialog
      uses function cancel() defined in edu::toronto::cs::beans::ModelCompilerPropertyDialog
      uses function getModelCompiler() defined in edu::toronto::cs::beans::ModelCompilerPropertyDialog
   function ModelCompilerPropertyDialog(JFrame,String) in line 28
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function initialize() defined in edu::toronto::cs::beans::ModelCompilerPropertyDialog
   function ModelCompilerPropertyDialog(JFrame,ModelCompiler) in line 36
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function initialize() defined in edu::toronto::cs::beans::ModelCompilerPropertyDialog
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/beans/ModelCompilerPropertySheet.java
module edu::toronto::cs::beans::ModelCompilerPropertySheet
   inherits from JPanel
   function getModelCompiler() in line 309
      protection public
      19 lines of code
      0 parameters
      3 conditional paths
   function initialize() in line 58
      10 lines of code
      0 parameters
      9 conditional paths
      uses variable i defined in sparsemv.m
      uses variable d defined in crunch2parms.m
      uses variable HELP_ATTRIBUTE defined in edu::toronto::cs::beans::BeanUtil
   function main(String[]) in line 330
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function ModelCompilerPropertySheet(String) defined in edu::toronto::cs::beans::ModelCompilerPropertySheet
   function ModelCompilerPropertySheet(String) in line 40
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function initialize() defined in edu::toronto::cs::beans::ModelCompilerPropertySheet
   function ModelCompilerPropertySheet(ModelCompiler) in line 51
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function initialize() defined in edu::toronto::cs::beans::ModelCompilerPropertySheet
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/beans/XMLBeanModelCompiler.java
module edu::toronto::cs::beans::XMLBeanModelCompiler
   inherits from edu::toronto::cs::modelchecker::ModelCompiler
   function compile() in line 30
      protection public
      16 lines of code
      0 parameters
      2 conditional paths
      uses function compile() defined in edu::toronto::cs::modelchecker::ModelCompiler
      uses macro definition assert defined in util.h
   function getXmlFile() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setXmlFile(File) in line 20
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function XMLBeanModelCompiler() in line 16
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/binarytree/BTNode.java
module edu::toronto::cs::binarytree::BTNode
   function getData() in line 56
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable Data defined in edu::toronto::cs::binarytree::BTNode
   function getLeft() in line 66
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getRight() in line 76
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable right defined in edu::toronto::cs::binarytree::BTNode
   function setData(Object) in line 84
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Data defined in edu::toronto::cs::binarytree::BTNode
      uses variable d defined in crunch2parms.m
   function setLeft(BTNode) in line 92
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setRight(BTNode) in line 100
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable right defined in edu::toronto::cs::binarytree::BTNode
   function BTNode() in line 16
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable Data defined in edu::toronto::cs::binarytree::BTNode
      uses variable right defined in edu::toronto::cs::binarytree::BTNode
   function BTNode(Object) in line 29
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Data defined in edu::toronto::cs::binarytree::BTNode
      uses variable d defined in crunch2parms.m
      uses variable right defined in edu::toronto::cs::binarytree::BTNode
   function BTNode(Object,BTNode,BTNode) in line 44
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable Data defined in edu::toronto::cs::binarytree::BTNode
      uses variable d defined in crunch2parms.m
      uses variable right defined in edu::toronto::cs::binarytree::BTNode
   variable Data in line 9
   variable right in line 10
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/abstraction/Ladder.java
module edu::toronto::cs::boolpg::abstraction::Ladder
   function getAbstraction(int,ValidityChecker) in line 35
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable truePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses function orExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable d defined in crunch2parms.m
      uses variable falsePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
   function preSmartCompute(ValidityChecker,Expr,Map,List,Ladder,int) in line 49
      protection public
      97 lines of code
      6 parameters
      10 conditional paths
      uses function importExpr(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable p defined in visual.m
      uses variable pred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function trueExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable truePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses function falseExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable falsePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable nTruePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable nFalsePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses function notExpr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable i defined in sparsemv.m
      uses function equal(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function sCompute(ValidityChecker,List,Map,Ladder) in line 25
      protection public
      10 lines of code
      4 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function preSmartCompute(ValidityChecker,Expr,Map,List,Ladder,int) defined in edu::toronto::cs::boolpg::abstraction::Ladder
   function Ladder() in line 16
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable pred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable truePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable falsePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable nTruePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable nFalsePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
   variable falsePred in line 12
      protection public
   variable nFalsePred in line 14
      protection public
   variable nTruePred in line 13
      protection public
   variable pred in line 10
      protection public
   variable truePred in line 11
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/abstraction/SmartCompute.java
module edu::toronto::cs::boolpg::abstraction::SmartCompute
   function check(Expr,Expr,List,List,ValidityChecker) in line 148
      21 lines of code
      5 parameters
      3 conditional paths
      uses function andExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable workingPred defined in edu::toronto::cs::boolpg::abstraction::SmartCompute
      uses function implies(Expr,Expr,ValidityChecker) defined in edu::toronto::cs::boolpg::abstraction::SmartCompute
      uses function notExpr() defined in edu::toronto::cs::tp::cvcl::Expr
   function implies(Expr,Expr,ValidityChecker) in line 38
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function impliesExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function printBP(Ladder,int) in line 178
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable p defined in visual.m
      uses variable truePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable nTruePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable falsePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable nFalsePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
   function setWorkingPred(Expr) in line 21
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable workingPred defined in edu::toronto::cs::boolpg::abstraction::SmartCompute
   function smartCompute(ValidityChecker,Expr,Ladder,Map,int) in line 59
      protection public
      79 lines of code
      5 parameters
      10 conditional paths
      uses function importExpr(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function equal(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable workingPred defined in edu::toronto::cs::boolpg::abstraction::SmartCompute
      uses function implies(Expr,Expr,ValidityChecker) defined in edu::toronto::cs::boolpg::abstraction::SmartCompute
      uses function notExpr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function falseExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable truePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable nFalsePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable falsePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses variable nTruePred defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses function printBP(Ladder,int) defined in edu::toronto::cs::boolpg::abstraction::SmartCompute
      uses variable p defined in visual.m
      uses variable i defined in sparsemv.m
      uses function check(Expr,Expr,List,List,ValidityChecker) defined in edu::toronto::cs::boolpg::abstraction::SmartCompute
   variable workingPred in line 11
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/abstraction/StatementAbstraction.java
module edu::toronto::cs::boolpg::abstraction::StatementAbstraction
   function branchRefinement(List,int,List) in line 71
      protection public
      66 lines of code
      3 parameters
      9 conditional paths
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable i defined in sparsemv.m
      uses function check(Expr) defined in edu::toronto::cs::boolpg::abstraction::StatementAbstraction
      uses function oldTargetExpr(int) defined in edu::toronto::cs::boolpg::abstraction::StatementAbstraction
      uses function trueExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function falseExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function findAssignment(int,List) defined in edu::toronto::cs::boolpg::abstraction::StatementAbstraction
      uses function printMe() defined in edu::toronto::cs::boolpg::abstraction::StatementAbstraction
      uses macro definition assert defined in util.h
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function check(Expr) in line 257
      7 lines of code
      1 parameters
      1 conditional paths
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function check(Expr,Expr) in line 264
      7 lines of code
      2 parameters
      1 conditional paths
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function impliesExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function check(List,Expr) in line 271
      9 lines of code
      2 parameters
      2 conditional paths
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function impliesExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function andExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function findAssignment(int,List) in line 144
      79 lines of code
      2 parameters
      20 conditional paths
      uses variable i defined in sparsemv.m
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function check(Expr) defined in edu::toronto::cs::boolpg::abstraction::StatementAbstraction
      uses function query(List,Expr) defined in edu::toronto::cs::boolpg::abstraction::StatementAbstraction
      uses function oldTargetExpr(int) defined in edu::toronto::cs::boolpg::abstraction::StatementAbstraction
      uses function orExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function andExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function notExpr() defined in edu::toronto::cs::tp::cvcl::Expr
   function getFalsePreds() in line 66
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTruePreds() in line 62
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function oldTargetExpr(int) in line 137
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function printMe() in line 281
      protection public
      17 lines of code
      0 parameters
      1 conditional paths
   function query(List,Expr) in line 224
      32 lines of code
      2 parameters
      4 conditional paths
      uses function impliesExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function andExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function push() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable i defined in sparsemv.m
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function getAssumptions(CVectorExpr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function size() defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function trueExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function equal(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function StatementAbstraction(ValidityChecker) in line 56
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/abstraction/StmtAbstraction.java
module edu::toronto::cs::boolpg::abstraction::StmtAbstraction
   function computeH(ValidityChecker,List,Expr,Map) in line 27
      protection public
      28 lines of code
      4 parameters
      3 conditional paths
      uses function print(List,Map) defined in edu::toronto::cs::boolpg::abstraction::StmtAbstraction
      uses function getEM() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function rebuildExpr(Expr) defined in edu::toronto::cs::tp::cvcl::ExprManager
      uses function preComputeH(ValidityChecker,ValidityChecker,List,Expr) defined in edu::toronto::cs::boolpg::abstraction::StmtAbstraction
      uses variable i defined in sparsemv.m
      uses function falseExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function main(String) in line 168
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function test() defined in edu::toronto::cs::boolpg::abstraction::StmtAbstraction
   function preComputeH(ValidityChecker,ValidityChecker,List,Expr) in line 68
      93 lines of code
      4 parameters
      15 conditional paths
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable i defined in sparsemv.m
      uses variable p defined in visual.m
      uses function test() defined in edu::toronto::cs::boolpg::abstraction::StmtAbstraction
      uses variable d defined in crunch2parms.m
      uses function importExpr(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function trueExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function notExpr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable j defined in sparsemv.m
      uses function andExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function impliesExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function isNull() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function assign(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function orExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function print(List,Map) in line 218
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function test() in line 177
      34 lines of code
      0 parameters
      1 conditional paths
      uses function getEM() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function varExpr(String,Type) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function realType() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function eqExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function gtExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function ratExpr(int,int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function plusExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function computeH(ValidityChecker,List,Expr,Map) defined in edu::toronto::cs::boolpg::abstraction::StmtAbstraction
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/abstraction/StmtAbstraction2.java
module edu::toronto::cs::boolpg::abstraction::StmtAbstraction2
   function computeH(ValidityChecker,List,Expr,Map) in line 27
      protection public
      29 lines of code
      4 parameters
      4 conditional paths
      uses function print(List,Map) defined in edu::toronto::cs::boolpg::abstraction::StmtAbstraction2
      uses function getEM() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function rebuildExpr(Expr) defined in edu::toronto::cs::tp::cvcl::ExprManager
      uses function substituteVars(Expr,Map) defined in edu::toronto::cs::boolpg::abstraction::StmtAbstraction2
      uses function preComputeH(ValidityChecker,ValidityChecker,List,Expr) defined in edu::toronto::cs::boolpg::abstraction::StmtAbstraction2
      uses variable i defined in sparsemv.m
      uses function falseExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function main(String) in line 193
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function test() defined in edu::toronto::cs::boolpg::abstraction::StmtAbstraction2
   function preComputeH(ValidityChecker,ValidityChecker,List,Expr) in line 94
      92 lines of code
      4 parameters
      15 conditional paths
      uses variable i defined in sparsemv.m
      uses variable p defined in visual.m
      uses function test() defined in edu::toronto::cs::boolpg::abstraction::StmtAbstraction2
      uses variable d defined in crunch2parms.m
      uses function importExpr(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function trueExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function notExpr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable j defined in sparsemv.m
      uses function andExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function impliesExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function isNull() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function assign(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function orExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function print(List,Map) in line 263
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function substituteVars(Expr,Map) in line 64
      19 lines of code
      2 parameters
      6 conditional paths
      uses function arity() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function isVar() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function toString() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function assign(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable k defined in sparsemv.m
   function test() in line 202
      54 lines of code
      0 parameters
      1 conditional paths
      uses function varExpr(String,Type) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function realType() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function ratExpr(int,int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function eqExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function gtExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function leExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function computeH(ValidityChecker,List,Expr,Map) defined in edu::toronto::cs::boolpg::abstraction::StmtAbstraction2
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/BoolProgramCompiler.java
module edu::toronto::cs::boolpg::BoolProgramCompiler
   inherits from edu::toronto::cs::modelchecker::ModelCompiler
   function compile() in line 98
      protection public
      49 lines of code
      0 parameters
      3 conditional paths
      uses function dumpNodes() defined in edu::toronto::cs::cfa::CFA
      uses function dumpEdges() defined in edu::toronto::cs::cfa::CFA
      uses function getMvRelation() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function embed(int,MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function top() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function variableMap(int,int) defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function buildCube(int[]) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function getVariableIds(int) defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function getVarNames() defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function getNumVars() defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function getCtlReWriter() defined in edu::toronto::cs::boolpg::BoolProgramCompiler
      uses function getStatePresenter() defined in edu::toronto::cs::boolpg::BoolProgramCompiler
      uses function seal() defined in edu::toronto::cs::boolpg::BoolProgramCompiler
   function getCtlReWriter() in line 188
      protection public
      77 lines of code
      0 parameters
      7 conditional paths
      uses variable o defined in visual.m
      uses function getMvSet() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function getName() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function handleUnknownVariable(String) defined in edu::toronto::cs::boolpg::BoolProgramCompiler
      uses function setMvSet(MvSet) defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getByName(String) defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function embed(int,MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function top() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function toString() defined in edu::toronto::cs::ctl::CTLEqualsNode
   function getInit() in line 60
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getInputFile() in line 51
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStatePresenter() in line 268
      protection public
      56 lines of code
      0 parameters
      6 conditional paths
      uses macro definition assert defined in util.h
      uses function getNode(int) defined in edu::toronto::cs::cfa::CFA
      uses function getState() defined in edu::toronto::cs::cfa::CFA::CFANode
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function getStrValue() defined in edu::toronto::cs::cfa::CFA::CFANode
      uses function getVariables() defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function bot() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses variable i defined in sparsemv.m
      uses function nodeSize() defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::cfa::CFA::CFANode
   function getTrans() in line 64
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getUseHyperEdges() in line 46
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function handleUnknownVariable(String) in line 174
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
   function main(String[]) in line 325
      protection public
      38 lines of code
      1 parameters
      2 conditional paths
      uses function BoolProgramCompiler() defined in edu::toronto::cs::boolpg::BoolProgramCompiler
      uses function setInputFile(File) defined in edu::toronto::cs::boolpg::BoolProgramCompiler
      uses function compile() defined in edu::toronto::cs::boolpg::BoolProgramCompiler
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function isConstant() defined in edu::toronto::cs::mvset::MvSet
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function dump() defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function variableMap(int,int) defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function getVariableIds(int) defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function getByName(String) defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function top() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function infoAnd(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function infoOr(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function seal() in line 70
      27 lines of code
      0 parameters
      4 conditional paths
      uses function setMvSetFactory(MvSetFactory) defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function getVariables() defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses variable v defined in visual.m
   function setInputFile(File) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setUseHyperEdges(boolean) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function BoolProgramCompiler() in line 34
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/BoolProgramCompilerBeanInfo.java
module edu::toronto::cs::boolpg::BoolProgramCompilerBeanInfo
   inherits from SimpleBeanInfo
   function getBeanDescriptor() in line 17
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPropertyDescriptors() in line 25
      protection public
      37 lines of code
      0 parameters
      2 conditional paths
      uses variable HELP_ATTRIBUTE defined in edu::toronto::cs::beans::BeanUtil
      uses macro definition assert defined in util.h
   function BoolProgramCompilerBeanInfo() in line 13
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/parser/TestDriver.java
module edu::toronto::cs::boolpg::parser::TestDriver
   function drawFrame(CommonAST) in line 28
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function main(String[]) in line 10
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses function drawFrame(CommonAST) defined in edu::toronto::cs::boolpg::parser::TestDriver
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/antlr/TestDriver.java
module edu::toronto::cs::ctl::antlr::TestDriver
   function drawFrame(AST) in line 31
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function main(String[]) in line 13
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses function drawFrame(AST) defined in edu::toronto::cs::ctl::antlr::TestDriver
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gclang/parser/TestDriver.java
module edu::toronto::cs::gclang::parser::TestDriver
   function drawFrame(CommonAST) in line 28
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function main(String[]) in line 10
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses function drawFrame(CommonAST) defined in edu::toronto::cs::gclang::parser::TestDriver
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/parser/TestDriver.java
module edu::toronto::cs::smv::parser::TestDriver
   function drawFrame(CommonAST) in line 54
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function main(String[]) in line 12
      protection public
      40 lines of code
      1 parameters
      2 conditional paths
      uses function drawFrame(CommonAST) defined in edu::toronto::cs::smv::parser::TestDriver
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/boolpg/parser/VariableTable.java
module edu::toronto::cs::boolpg::parser::VariableTable
   function declarePropositional(String) in line 121
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function setShadows(Variable[]) defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
      uses variable v defined in visual.m
   function dump() in line 172
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getVariables() defined in edu::toronto::cs::boolpg::parser::VariableTable
   function getByName(String) in line 149
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getMvSetFactory() in line 88
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getNumVars() in line 144
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVariableIds(int) in line 239
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses function getNumVars() defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function getVariables() defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function isShadow() defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
      uses function getShadow(int) defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
   function getVariables() in line 154
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVarNames() in line 165
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setMvSetFactory(MvSetFactory) in line 82
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
   function toString() in line 68
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
   function variableMap(int,int) in line 194
      protection public
      33 lines of code
      2 parameters
      6 conditional paths
      uses function getNumVars() defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function getVariables() defined in edu::toronto::cs::boolpg::parser::VariableTable
      uses function isShadow() defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
      uses function getShadows() defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
      uses variable i defined in sparsemv.m
      uses variable k defined in sparsemv.m
      uses function getId() defined in edu::toronto::cs::boolpg::parser::VariableTable::StateVariable
      uses function toString() defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
   function VariableTable(int) in line 51
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
   function VariableTable() in line 62
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::boolpg::parser::VariableTable::Variable
   abstract class
   function eq(Variable) in line 321
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eq(MvSet) in line 327
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eq(String) in line 328
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eqShadow(int) in line 325
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getName() in line 277
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable NAME_SUFFIX defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
   function getShadow(int) in line 291
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isShadow() defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
      uses variable i defined in sparsemv.m
   function getShadows() in line 306
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isShadow() in line 311
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setShadows(Variable[]) in line 298
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses variable v defined in visual.m
      uses macro definition assert defined in util.h
   function size() in line 333
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 332
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 316
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
      uses function eq(Variable) defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
      uses variable v defined in visual.m
      uses function eqShadow(int) defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
      uses variable i defined in sparsemv.m
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
   function Variable(String,int) in line 270
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   variable NAME_SUFFIX in line 268
      protection public
module edu::toronto::cs::boolpg::parser::VariableTable::ProcessCounter
   inherits from edu::toronto::cs::boolpg::parser::VariableTable::Variable
   function eq(Variable) in line 352
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function eq(MvSet) in line 357
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function eq(String) in line 361
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function eqShadow(int) in line 368
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 347
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ProcessCounter() in line 342
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::boolpg::parser::VariableTable::StateVariable
   inherits from edu::toronto::cs::boolpg::parser::VariableTable::Variable
   function eq(Variable) in line 442
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses variable v defined in visual.m
      uses function eq(Variable) defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
   function eq(MvSet) in line 452
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function eq(StateVariable) in line 457
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function eq(String) in line 462
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses macro definition assert defined in util.h
      uses function getName() defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
   function eqShadow(int) in line 434
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isShadow() defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
      uses function getShadow(int) defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
   function getId() in line 407
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSet() in line 412
      protection public
      15 lines of code
      0 parameters
      2 conditional paths
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function setMvSet(MvSet) in line 428
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function size() in line 396
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 472
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses function getName() defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function toString() in line 401
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::boolpg::parser::VariableTable::Variable
   function StateVariable(String,int,int) in line 390
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gclang/parser/VariableTable.java
module edu::toronto::cs::gclang::parser::VariableTable
   function declareDefine(String,MvSet) in line 103
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function declareEnumerated(String,Collection) in line 131
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function declareEnumerated(String,String[]) in line 146
      protection public
      46 lines of code
      2 parameters
      6 conditional paths
      uses variable i defined in sparsemv.m
      uses function setShadows(Variable[]) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function bitSize() defined in edu::toronto::cs::gclang::parser::VariableTable::EnumeratedVariable
      uses function setBits(int[]) defined in edu::toronto::cs::gclang::parser::VariableTable::EnumeratedVariable
      uses variable v defined in visual.m
   function declarePropositional(String) in line 200
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function setShadows(Variable[]) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses variable v defined in visual.m
   function dump() in line 251
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getVariables() defined in edu::toronto::cs::gclang::parser::VariableTable
   function getByName(String) in line 228
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getCtlReWriter() in line 273
      protection public
      102 lines of code
      0 parameters
      10 conditional paths
      uses variable o defined in visual.m
      uses function getMvSet() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function getByName(String) defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function getName() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function handleUnknownVariable(String) defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function setMvSet(MvSet) defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function getMvSet() defined in edu::toronto::cs::gclang::parser::VariableTable::StateVariable
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function eq(MvSet) defined in edu::toronto::cs::gclang::parser::VariableTable::EnumeratedVariable
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function toString() defined in edu::toronto::cs::ctl::CTLEqualsNode
      uses function getTerms() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses function getProps() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses variable i defined in sparsemv.m
      uses function setTerms(MvSet) defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function getValues() defined in edu::toronto::cs::gclang::parser::VariableTable::EnumeratedVariable
      uses macro definition assert defined in util.h
   function getMvSetFactory() in line 85
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getNumVars() in line 223
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStatePresenter() in line 378
      protection public
      38 lines of code
      0 parameters
      6 conditional paths
      uses function getVariables() defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function isShadow() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses variable i defined in sparsemv.m
   function getVariableIds(int) in line 484
      protection public
      24 lines of code
      1 parameters
      6 conditional paths
      uses function getNumVars() defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function getVariables() defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function isShadow() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function getShadow(int) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses variable i defined in sparsemv.m
      uses function bitSize() defined in edu::toronto::cs::gclang::parser::VariableTable::EnumeratedVariable
      uses function getBitId(int) defined in edu::toronto::cs::gclang::parser::VariableTable::EnumeratedVariable
   function getVariables() in line 233
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVarNames() in line 244
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function handleUnknownVariable(String) in line 259
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
   function setMvSetFactory(MvSetFactory) in line 79
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
   function toString() in line 65
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
   function variableMap(int,int) in line 430
      protection public
      42 lines of code
      2 parameters
      8 conditional paths
      uses function getNumVars() defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function getVariables() defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function isShadow() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function getShadows() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses variable i defined in sparsemv.m
      uses variable k defined in sparsemv.m
      uses function getId() defined in edu::toronto::cs::gclang::parser::VariableTable::StateVariable
      uses variable j defined in sparsemv.m
      uses function bitSize() defined in edu::toronto::cs::gclang::parser::VariableTable::EnumeratedVariable
      uses function getBitId(int) defined in edu::toronto::cs::gclang::parser::VariableTable::EnumeratedVariable
      uses function toString() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
   function VariableTable(int) in line 52
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function VariableTable() in line 59
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::gclang::parser::VariableTable::Variable
   abstract class
   function eq(Variable) in line 574
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eq(MvSet) in line 580
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eq(String) in line 581
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eqShadow(int) in line 578
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getName() in line 530
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable NAME_SUFFIX defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
   function getShadow(int) in line 544
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isShadow() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses variable i defined in sparsemv.m
   function getShadows() in line 559
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isShadow() in line 564
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setShadows(Variable[]) in line 551
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses variable v defined in visual.m
      uses macro definition assert defined in util.h
   function size() in line 586
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 585
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 569
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function eq(Variable) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses variable v defined in visual.m
      uses function eqShadow(int) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses variable i defined in sparsemv.m
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
   function Variable(String,int) in line 523
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   variable NAME_SUFFIX in line 521
      protection public
module edu::toronto::cs::gclang::parser::VariableTable::EnumeratedVariable
   inherits from edu::toronto::cs::gclang::parser::VariableTable::Variable
   function bitSize() in line 633
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ctlForValues(Object[],boolean) in line 780
      37 lines of code
      2 parameters
      5 conditional paths
      uses function getName() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses variable i defined in sparsemv.m
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function toString() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function eq(Variable) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function eq(MvSet) in line 644
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable i defined in sparsemv.m
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function eq(Variable) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses variable v defined in visual.m
   function eq(Variable) in line 666
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses variable v defined in visual.m
      uses function eq(Variable) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
   function eq(String) in line 675
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function top() defined in edu::toronto::cs::algebra::IAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::IAlgebra
      uses function bitValue(Object) defined in edu::toronto::cs::util::EnumType
      uses variable v defined in visual.m
      uses variable i defined in sparsemv.m
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
   function eq(EnumeratedVariable) in line 702
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable i defined in sparsemv.m
      uses variable v defined in visual.m
      uses function eq(Variable) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
   function eqShadow(int) in line 717
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses function isShadow() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function getShadow(int) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable i defined in sparsemv.m
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function eq(Variable) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function eq(MvSet) defined in edu::toronto::cs::gclang::parser::VariableTable::EnumeratedVariable
   function getBitId(int) in line 639
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getValues() in line 614
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setBits(int[]) in line 620
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses variable v defined in visual.m
   function size() in line 628
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 732
      protection public
      39 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function enumValues(int[]) defined in edu::toronto::cs::util::EnumType
   function toString() in line 818
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
   function EnumeratedVariable(String,int,String[]) in line 605
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function bitSize() defined in edu::toronto::cs::util::EnumType
module edu::toronto::cs::gclang::parser::VariableTable::StateVariable
   inherits from edu::toronto::cs::gclang::parser::VariableTable::Variable
   function eq(Variable) in line 882
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses variable v defined in visual.m
      uses function eq(Variable) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
   function eq(MvSet) in line 892
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function eq(StateVariable) in line 897
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function eq(String) in line 902
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses macro definition assert defined in util.h
      uses function getName() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
   function eqShadow(int) in line 874
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isShadow() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function getShadow(int) defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
   function getId() in line 856
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSet() in line 861
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function createProjection(int) defined in edu::toronto::cs::mvset::MvSetFactory
   function setMvSet(MvSet) in line 868
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function size() in line 845
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 912
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses function getName() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function toString() in line 850
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::gclang::parser::VariableTable::Variable
   function StateVariable(String,int,int) in line 839
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
module edu::toronto::cs::gclang::parser::VariableTable::DefineVariable
   inherits from edu::toronto::cs::gclang::parser::VariableTable::StateVariable
   function size() in line 944
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function DefineVariable(String,MvSet) in line 938
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/VariableTable.java
module edu::toronto::cs::smv::VariableTable
   function declareDefine(String,MvSet) in line 68
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function declareEnumerated(String,Collection) in line 85
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function declareEnumerated(String,String[]) in line 92
      protection public
      27 lines of code
      2 parameters
      3 conditional paths
      uses function setNext(Variable) defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function bitSize() defined in edu::toronto::cs::smv::VariableTable::EnumeratedVariable
      uses variable i defined in sparsemv.m
      uses function setBits(int[]) defined in edu::toronto::cs::smv::VariableTable::EnumeratedVariable
      uses function getName() defined in edu::toronto::cs::smv::VariableTable::Variable
   function declarePropositional(String) in line 121
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function getName() defined in edu::toronto::cs::smv::VariableTable::Variable
   function dump() in line 169
      protection public
      17 lines of code
      0 parameters
      2 conditional paths
      uses variable v defined in visual.m
   function getByName(String) in line 149
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getCtlReWriter() in line 201
      protection public
      102 lines of code
      0 parameters
      10 conditional paths
      uses variable o defined in visual.m
      uses function getMvSet() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function getByName(String) defined in edu::toronto::cs::smv::VariableTable
      uses function getName() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function handleUnknownVariable(String) defined in edu::toronto::cs::smv::VariableTable
      uses function setMvSet(MvSet) defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function getMvSet() defined in edu::toronto::cs::smv::VariableTable::StateVariable
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function eq(MvSet) defined in edu::toronto::cs::smv::VariableTable::EnumeratedVariable
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function toString() defined in edu::toronto::cs::ctl::CTLEqualsNode
      uses function getTerms() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses function getProps() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses variable i defined in sparsemv.m
      uses function setTerms(MvSet) defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function getValues() defined in edu::toronto::cs::smv::VariableTable::EnumeratedVariable
      uses macro definition assert defined in util.h
   function getMvSetFactory() in line 57
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getNumDDVars() in line 140
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
   function getNumVars() in line 135
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPrimedVariablesIds() in line 450
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPrimeMap() in line 347
      protection public
      33 lines of code
      0 parameters
      6 conditional paths
      uses function getNumVars() defined in edu::toronto::cs::smv::VariableTable
      uses function getVariables() defined in edu::toronto::cs::smv::VariableTable
      uses function isPostState() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function getNext() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function getId() defined in edu::toronto::cs::smv::VariableTable::StateVariable
      uses variable i defined in sparsemv.m
      uses function bitSize() defined in edu::toronto::cs::smv::VariableTable::EnumeratedVariable
      uses function getBitId(int) defined in edu::toronto::cs::smv::VariableTable::EnumeratedVariable
   function getStatePresenter() in line 306
      protection public
      39 lines of code
      0 parameters
      6 conditional paths
      uses function getVariables() defined in edu::toronto::cs::smv::VariableTable
      uses function isPostState() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses variable i defined in sparsemv.m
   function getUnPrimedVariablesIds() in line 455
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getUnPrimeMap() in line 385
      protection public
      35 lines of code
      0 parameters
      11 conditional paths
      uses function getNumVars() defined in edu::toronto::cs::smv::VariableTable
      uses function getVariables() defined in edu::toronto::cs::smv::VariableTable
      uses function isPostState() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function getNext() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function getId() defined in edu::toronto::cs::smv::VariableTable::StateVariable
      uses variable i defined in sparsemv.m
      uses function bitSize() defined in edu::toronto::cs::smv::VariableTable::EnumeratedVariable
      uses function getBitId(int) defined in edu::toronto::cs::smv::VariableTable::EnumeratedVariable
      uses function isPreState() defined in edu::toronto::cs::smv::VariableTable::Variable
   function getVariables() in line 162
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVarNames() in line 154
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function handleUnknownVariable(String) in line 187
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
   function setMvSetFactory(MvSetFactory) in line 51
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
   function toString() in line 37
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
   function VariableTable() in line 30
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::smv::VariableTable::Variable
   abstract class
   function eq(Variable) in line 502
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eq(MvSet) in line 508
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eq(String) in line 509
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eqNext() in line 506
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getName() in line 474
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNext() in line 478
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isPostState() in line 487
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function isPreState() defined in edu::toronto::cs::smv::VariableTable::Variable
   function isPreState() in line 492
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setNext(Variable) in line 482
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function size() in line 514
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 513
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 497
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function eq(Variable) defined in edu::toronto::cs::smv::VariableTable::Variable
      uses variable v defined in visual.m
      uses function eqNext() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::smv::VariableTable::Variable
   function Variable(String) in line 468
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::smv::VariableTable::EnumeratedVariable
   inherits from edu::toronto::cs::smv::VariableTable::Variable
   function __eq(EnumeratedVariable) in line 643
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses function isPostState() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses variable v defined in visual.m
      uses function getNext() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function eqNext() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function getName() defined in edu::toronto::cs::smv::VariableTable::Variable
   function bitSize() in line 560
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ctlForValues(Object[],boolean) in line 721
      37 lines of code
      2 parameters
      5 conditional paths
      uses function getName() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses variable i defined in sparsemv.m
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function toString() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function eq(Variable) defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function eq(MvSet) in line 571
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable i defined in sparsemv.m
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function eq(Variable) defined in edu::toronto::cs::smv::VariableTable::Variable
      uses variable v defined in visual.m
   function eq(Variable) in line 593
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses variable v defined in visual.m
      uses function eq(Variable) defined in edu::toronto::cs::smv::VariableTable::Variable
   function eq(String) in line 602
      protection public
      24 lines of code
      1 parameters
      3 conditional paths
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function top() defined in edu::toronto::cs::algebra::IAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::IAlgebra
      uses function bitValue(Object) defined in edu::toronto::cs::util::EnumType
      uses variable v defined in visual.m
      uses variable i defined in sparsemv.m
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
   function eq(EnumeratedVariable) in line 628
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable i defined in sparsemv.m
      uses variable v defined in visual.m
      uses function eq(Variable) defined in edu::toronto::cs::smv::VariableTable::Variable
   function eqNext() in line 659
      protection public
      12 lines of code
      0 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses function isPreState() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function getNext() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable i defined in sparsemv.m
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function eq(Variable) defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function eq(MvSet) defined in edu::toronto::cs::smv::VariableTable::EnumeratedVariable
   function getBitId(int) in line 566
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getValues() in line 542
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setBits(int[]) in line 548
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses variable v defined in visual.m
   function size() in line 555
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 673
      protection public
      39 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function enumValues(int[]) defined in edu::toronto::cs::util::EnumType
   function toString() in line 759
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::smv::VariableTable::Variable
   function EnumeratedVariable(String,String[]) in line 533
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function bitSize() defined in edu::toronto::cs::util::EnumType
module edu::toronto::cs::smv::VariableTable::StateVariable
   inherits from edu::toronto::cs::smv::VariableTable::Variable
   function eq(Variable) in line 822
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses variable v defined in visual.m
      uses function eq(Variable) defined in edu::toronto::cs::smv::VariableTable::Variable
   function eq(MvSet) in line 832
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function eq(StateVariable) in line 837
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function eq(String) in line 842
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses macro definition assert defined in util.h
      uses function getName() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
   function eqNext() in line 814
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isPreState() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function getNext() defined in edu::toronto::cs::smv::VariableTable::Variable
   function getId() in line 802
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSet() in line 807
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function createProjection(int) defined in edu::toronto::cs::mvset::MvSetFactory
   function size() in line 791
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 852
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses function getName() defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function toString() in line 796
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::smv::VariableTable::Variable
   function StateVariable(String,int) in line 779
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function StateVariable(String,MvSet) in line 784
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::smv::VariableTable::DefineVariable
   inherits from edu::toronto::cs::smv::VariableTable::StateVariable
   function size() in line 883
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function DefineVariable(String,MvSet) in line 878
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::smv::VariableTable::CaseTranslator
   function addCase(MvSet,MvSet) in line 900
      protection public
      22 lines of code
      2 parameters
      4 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function addDefault(MvSet) in line 925
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function compute() in line 932
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cfa/CFA.java
module edu::toronto::cs::cfa::CFA
   function addEdge(String,int,int,MvRelation) in line 74
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function addEdge(String,int,int,MvRelation,int) in line 84
      protection public
      11 lines of code
      5 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function addEdge(String,CFANode,CFANode,MvRelation) in line 96
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::cfa::CFA::CFANode
   function addNode(String,MvSet) in line 56
      protection public
      17 lines of code
      2 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
   function dumpEdgeList(List) in line 135
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses function isHyperEdge() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function getStrValue() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function getSourceId() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function getDestId() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function getDest2Id() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function dumpMvSet(MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function getData() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function toMvSet() defined in edu::toronto::cs::mvset::MvRelation
   function dumpEdges() in line 125
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
   function dumpMvSet(MvSet) in line 156
      5 lines of code
      1 parameters
      2 conditional paths
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
   function dumpNodes() in line 113
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function dumpMvSet(MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function getState() defined in edu::toronto::cs::cfa::CFA::CFANode
   function equals(Object) in line 208
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function equals(CFA) in line 216
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses function nodeSize() defined in edu::toronto::cs::cfa::CFA
      uses function getNodes() defined in edu::toronto::cs::cfa::CFA
      uses variable i defined in sparsemv.m
      uses function equals(Object) defined in edu::toronto::cs::cfa::CFA
   function getBwdEdges(CFANode) in line 162
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::cfa::CFA::CFANode
   function getBwdEdges(int) in line 166
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getFwdEdges(CFANode) in line 171
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::cfa::CFA::CFANode
   function getFwdEdges(int) in line 175
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getNode(int) in line 182
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getNodeBwdEdges(int) in line 191
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getNodeBwdEdges(CFANode) in line 200
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getNodeBwdEdges(int) defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::cfa::CFA::CFANode
   function getNodeFwdEdges(int) in line 187
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getNodeFwdEdges(CFANode) in line 196
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getNodeFwdEdges(int) defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::cfa::CFA::CFANode
   function getNodes() in line 103
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function nodeSize() in line 107
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toDaVinci() in line 229
      protection public
      32 lines of code
      0 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
      uses function node() defined in edu::toronto::cs::davinci::DaVinciGraph
      uses function label(String) defined in edu::toronto::cs::davinci::DaVinciGraph::FullNode
      uses function toString() defined in edu::toronto::cs::cfa::CFA::CFANode
      uses function getSourceId() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function getDestId() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function labeledEdge(Node,String) defined in edu::toronto::cs::davinci::DaVinciGraph::FullNode
      uses function toString() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function isHyperEdge() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function getDest2Id() defined in edu::toronto::cs::cfa::CFA::CFAEdge
   function toDot() in line 262
      protection public
      32 lines of code
      0 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
      uses function node() defined in edu::toronto::cs::grappa::GrappaGraph
      uses function label(String) defined in edu::toronto::cs::grappa::GrappaGraph::GrappaNode
      uses function toString() defined in edu::toronto::cs::cfa::CFA::CFANode
      uses function getSourceId() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function getDestId() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function edge(GrappaNode) defined in edu::toronto::cs::grappa::GrappaGraph::GrappaNode
      uses function label(String) defined in edu::toronto::cs::grappa::GrappaGraph::GrappaEdge
      uses function toString() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function isHyperEdge() defined in edu::toronto::cs::cfa::CFA::CFAEdge
      uses function getDest2Id() defined in edu::toronto::cs::cfa::CFA::CFAEdge
   function CFA(int) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function CFA(int,boolean) in line 32
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
module edu::toronto::cs::cfa::CFA::CFANode
   function equals(Object) in line 380
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function equals(CFANode) in line 388
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::cfa::CFA::CFANode
      uses function getState() defined in edu::toronto::cs::cfa::CFA::CFANode
   function getId() in line 344
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getState() in line 326
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getStrValue() in line 361
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function setId(int) in line 352
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function setState(MvSet) in line 334
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function setStrValue(String) in line 369
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 375
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CFANode(int,String,MvSet) in line 314
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
module edu::toronto::cs::cfa::CFA::CFAEdge
   function getData() in line 451
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getDest2Id() in line 475
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getDestId() in line 470
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSourceId() in line 493
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getStrValue() in line 513
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isHyperEdge() in line 442
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setData(MvRelation) in line 460
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setDestId(int) in line 484
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function setSourceId(int) in line 503
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function setStrValue(String) in line 521
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 525
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CFAEdge(String,int,int,MvRelation,int) in line 424
      protection public
      8 lines of code
      5 parameters
      1 conditional paths
   function CFAEdge(String,int,int,MvRelation) in line 433
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cfa/CFAMvSetFactory.java
module edu::toronto::cs::cfa::CFAMvSetFactory
   inherits from edu::toronto::cs::mvset::AbstractMvSetFactory
   function bot() in line 135
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function buildCube(int[]) in line 159
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MvSetFactory
   function createCase(int,MvSet[]) in line 150
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function createCase(int,MvSet[]) defined in edu::toronto::cs::mvset::MvSetFactory
   function createConstant(AlgebraValue) in line 84
      protection public
      9 lines of code
      1 parameters
      5 conditional paths
      uses function top() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function bot() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function infoTop() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function infoBot() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
   function createPoint(AlgebraValue[],AlgebraValue) in line 155
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function createPoint(AlgebraValue[],AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
   function createProjection(int) in line 94
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function createProjection(int) defined in edu::toronto::cs::mvset::MvSetFactory
   function dumpMvSet(MvSet) in line 743
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
   function embed(int,MvSet) in line 100
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function addNode(String,MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function makeMvSet(CFA,String) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function embedMvSet(MvSet) in line 115
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function addNode(String,MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function makeMvSet(CFA,String) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function getCFA() in line 79
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvRelation() in line 68
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSetFactory() in line 74
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function infoBot() in line 144
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function infoTop() in line 140
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function makeMvSet(CFA,String) in line 170
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function top() in line 130
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function var(int,AlgebraValue,AlgebraValue) in line 164
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
   function CFAMvSetFactory(MvSetFactory,CFA) in line 44
      protection public
      23 lines of code
      2 parameters
      1 conditional paths
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function nodeSize() defined in edu::toronto::cs::cfa::CFA
      uses function getNodes() defined in edu::toronto::cs::cfa::CFA
      uses function getAlgebra() defined in edu::toronto::cs::mvset::AbstractMvSetFactory
      uses macro definition assert defined in util.h
      uses function top() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function bot() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function infoTop() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function infoBot() defined in edu::toronto::cs::cfa::CFAMvSetFactory
module edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
   inherits from edu::toronto::cs::mvset::AbstractMvSet
   function cofactor(int,AlgebraValue) in line 315
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function addNode(String,MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function makeMvSet(CFA,String) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function cofactor(AlgebraValue[]) in line 330
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function addNode(String,MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function makeMvSet(CFA,String) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function cofactor(MvSet) in line 347
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function CFAMvSet(CFA) defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses variable v defined in visual.m
      uses function firstNonFalse(CFANode[]) defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function getNodes() defined in edu::toronto::cs::cfa::CFA
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function cofactor(int,AlgebraValue) defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function getNode(int) defined in edu::toronto::cs::cfa::CFA
      uses function getState() defined in edu::toronto::cs::cfa::CFA::CFANode
   function equals(Object) in line 471
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function equals(CFAMvSet) in line 477
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getCFA() defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function equals(Object) defined in edu::toronto::cs::cfa::CFA
      uses variable v defined in visual.m
   function evaluate(AlgebraValue[]) in line 429
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function existAbstract(MvSet) in line 370
      protection public
      24 lines of code
      1 parameters
      2 conditional paths
      uses function getCFA() defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function getNode(int) defined in edu::toronto::cs::cfa::CFA
      uses function getMvSetFactory() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable i defined in sparsemv.m
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function firstNonFalse(CFANode[]) in line 361
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function equals(Object) defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
   function forallAbstract(MvSet) in line 395
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses function getCFA() defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function getNode(int) defined in edu::toronto::cs::cfa::CFA
      uses function getMvSetFactory() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable i defined in sparsemv.m
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function getAlgebra() in line 439
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
   function getCFA() in line 218
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFactory() in line 434
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getImage() in line 531
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses function getMvSetFactory() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable i defined in sparsemv.m
      uses function getState() defined in edu::toronto::cs::cfa::CFA::CFANode
      uses function getImage() defined in edu::toronto::cs::mvset::MvSet
      uses function mintermIterator(MvSet,AlgebraValue) defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function mintermIterator(MvSet,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function embed(int,MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function getValue() in line 458
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
   function hashCode() in line 483
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function isConstant() in line 444
      protection public
      14 lines of code
      0 parameters
      5 conditional paths
      uses function top() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function bot() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function infoTop() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function infoBot() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses variable i defined in sparsemv.m
      uses function isConstant() defined in edu::toronto::cs::mvset::MvSet
   function mintermIterator(MvSet,AlgebraValue) in line 495
      protection public
      35 lines of code
      2 parameters
      3 conditional paths
      uses function CFAMvSet(CFA) defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function getCFA() defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function getNodes() defined in edu::toronto::cs::cfa::CFA
      uses function getState() defined in edu::toronto::cs::cfa::CFA::CFANode
      uses function getMvSetFactory() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable i defined in sparsemv.m
   function ptwiseCompare(int,MvSet) in line 295
      protection public
      19 lines of code
      2 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses function CFAMvSet(CFA) defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function getNodes() defined in edu::toronto::cs::cfa::CFA
      uses variable i defined in sparsemv.m
      uses function addNode(String,MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function makeMvSet(CFA,String) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function ptwiseCompose(int,MvSet) in line 223
      protection public
      53 lines of code
      2 parameters
      16 conditional paths
      uses macro definition assert defined in util.h
      uses function CFAMvSet(CFA) defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses function nodeSize() defined in edu::toronto::cs::cfa::CFA
      uses variable MEET defined in edu::toronto::cs::mvset::MvSet
      uses function top() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function bot() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses variable JOIN defined in edu::toronto::cs::mvset::MvSet
      uses function getNodes() defined in edu::toronto::cs::cfa::CFA
      uses variable i defined in sparsemv.m
      uses function addNode(String,MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function makeMvSet(CFA,String) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function ptwiseNeg() in line 277
      protection public
      17 lines of code
      0 parameters
      5 conditional paths
      uses function top() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function bot() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function infoTop() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function infoBot() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses variable i defined in sparsemv.m
      uses function addNode(String,MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function makeMvSet(CFA,String) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function renameArgs(int[]) in line 414
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function addNode(String,MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function makeMvSet(CFA,String) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function toString() in line 210
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function CFAMvSet(CFA) in line 197
      4 lines of code
      1 parameters
      1 conditional paths
   function CFAMvSet(CFA,String) in line 202
      7 lines of code
      2 parameters
      1 conditional paths
      uses function getNodes() defined in edu::toronto::cs::cfa::CFA
      uses function nodeSize() defined in edu::toronto::cs::cfa::CFA
module edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet::MintermIterator
   inherits from java::util::Iterator
   function hasNext() in line 560
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function next() in line 564
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function remove() in line 556
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function MintermIterator(int,MvSet,MvSet,AlgebraValue) in line 550
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
module edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvRelation
   inherits from edu::toronto::cs::mvset::MvRelation
   function bwdImage(MvSet) in line 627
      protection public
      49 lines of code
      1 parameters
      7 conditional paths
      uses variable v defined in visual.m
      uses function bot() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function CFAMvSet(CFA) defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses variable i defined in sparsemv.m
      uses function nodeSize() defined in edu::toronto::cs::cfa::CFA
      uses function getNode(int) defined in edu::toronto::cs::cfa::CFA
      uses function getMvSetFactory() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getFwdEdges(CFANode) defined in edu::toronto::cs::cfa::CFA
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function geq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function infoTop() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function addNode(String,MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function makeMvSet(CFA,String) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function dualBwdImage(MvSet) in line 621
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function not() defined in edu::toronto::cs::mvset::AbstractMvSet
   function fwdImage(MvSet) in line 595
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses function CFAMvSet(CFA) defined in edu::toronto::cs::cfa::CFAMvSetFactory::CFAMvSet
      uses variable v defined in visual.m
      uses variable i defined in sparsemv.m
      uses function nodeSize() defined in edu::toronto::cs::cfa::CFA
      uses function getNode(int) defined in edu::toronto::cs::cfa::CFA
      uses function getMvSetFactory() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getBwdEdges(CFANode) defined in edu::toronto::cs::cfa::CFA
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function addNode(String,MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function makeMvSet(CFA,String) defined in edu::toronto::cs::cfa::CFAMvSetFactory
   function getPostToPreMap() in line 732
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPostVariablesCube() in line 704
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreToPostMap() in line 718
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreVariablesCube() in line 691
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function setTrans(MvSet) in line 590
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function toMvSet() in line 677
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function CFAMvRelation(CFA) in line 582
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function getNodes() defined in edu::toronto::cs::cfa::CFA
      uses function nodeSize() defined in edu::toronto::cs::cfa::CFA
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/clang/CProgram.java
module edu::toronto::cs::clang::CProgram
   function allCfgFunctions() in line 63
      protection public
      27 lines of code
      0 parameters
      1 conditional paths
      uses function getDecl(int) defined in edu::toronto::cs::clang::CSymbolTable
   function functions() in line 48
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function getDecl(int) defined in edu::toronto::cs::clang::CSymbolTable
   function getCFG(Expr) in line 37
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getCFGTable() in line 27
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getCSymbolTable() in line 32
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function print(PrintWriter) in line 92
      protection public
      46 lines of code
      1 parameters
      8 conditional paths
      uses function toString() defined in edu::toronto::cs::clang::CSymbolTable
      uses function getDecl(int) defined in edu::toronto::cs::clang::CSymbolTable
      uses function getLabelMap() defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function getLabelUIDMap() defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function allBlocksFwd() defined in edu::toronto::cs::yasm::cfg::CFGraph
   function CProgram(Map< Integer, CFGraph >,CSymbolTable) in line 21
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/clang/CSymbolTable.java
module edu::toronto::cs::clang::CSymbolTable
   function decls() in line 64
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getDecl(int) in line 54
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getDeclTable() in line 59
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 69
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function typeOf(Expr) in line 42
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
   function CSymbolTable() in line 28
      1 lines of code
      0 parameters
      1 conditional paths
   function CSymbolTable(Map< Integer, Expr >,Map< Integer, Expr >) in line 30
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/CSymbolTable.java
module edu::toronto::cs::cparser::CSymbolTable
   function add(String,TNode) in line 94
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function getType() defined in edu::toronto::cs::cparser::TNode
      uses variable symTable defined in edu::toronto::cs::cparser::CSymbolTable
      uses function addCurrentScopeToName(String) defined in edu::toronto::cs::cparser::CSymbolTable
   function addCurrentScopeToName(String) in line 64
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function currentScopeAsString() defined in edu::toronto::cs::cparser::CSymbolTable
      uses function addScopeToName(String,String) defined in edu::toronto::cs::cparser::CSymbolTable
   function addScopeToName(String,String) in line 73
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
   function currentScopeAsString() in line 47
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses variable scopeStack defined in edu::toronto::cs::cparser::CSymbolTable
   function dump() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable symTable defined in edu::toronto::cs::cparser::CSymbolTable
   function lookupNameInCurrentScope(String) in line 110
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses function currentScopeAsString() defined in edu::toronto::cs::cparser::CSymbolTable
      uses function addScopeToName(String,String) defined in edu::toronto::cs::cparser::CSymbolTable
      uses variable symTable defined in edu::toronto::cs::cparser::CSymbolTable
      uses function removeOneLevelScope(String) defined in edu::toronto::cs::cparser::CSymbolTable
   function lookupScopedName(String) in line 102
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable symTable defined in edu::toronto::cs::cparser::CSymbolTable
   function lookupScopedNameInCurrentScope(String) in line 134
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses function currentScopeAsString() defined in edu::toronto::cs::cparser::CSymbolTable
      uses function addScopeToName(String,String) defined in edu::toronto::cs::cparser::CSymbolTable
      uses variable symTable defined in edu::toronto::cs::cparser::CSymbolTable
      uses function removeOneLevelScope(String) defined in edu::toronto::cs::cparser::CSymbolTable
   function popScope() in line 38
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses variable scopeStack defined in edu::toronto::cs::cparser::CSymbolTable
   function pushScope(String) in line 30
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable scopeStack defined in edu::toronto::cs::cparser::CSymbolTable
      uses variable s defined in visual.m
   function removeOneLevelScope(String) in line 81
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
   function toString() in line 151
      protection public
      13 lines of code
      0 parameters
      2 conditional paths
      uses function currentScopeAsString() defined in edu::toronto::cs::cparser::CSymbolTable
      uses variable symTable defined in edu::toronto::cs::cparser::CSymbolTable
   function CSymbolTable() in line 18
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable scopeStack defined in edu::toronto::cs::cparser::CSymbolTable
      uses variable symTable defined in edu::toronto::cs::cparser::CSymbolTable
   variable scopeStack in line 13
   variable symTable in line 16
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/block/Block.java
module edu::toronto::cs::cparser::block::Block
   inherits from edu::toronto::cs::cparser::TNode
   inherits from CILTokenTypes
   function getBlockType() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getAttribute(String) defined in edu::toronto::cs::cparser::TNode
      uses variable attribName defined in edu::toronto::cs::cparser::block::BlockType
   function getBody() in line 109
      protection public
      13 lines of code
      0 parameters
      4 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_DEFINITION defined in edu::toronto::cs::cparser::block::BlockType
      uses variable SCOPE defined in edu::toronto::cs::cparser::block::BlockType
      uses variable PROGRAM defined in edu::toronto::cs::cparser::block::BlockType
   function getCallIndex() in line 468
      protection public
      24 lines of code
      0 parameters
      5 conditional paths
      uses function getType() defined in edu::toronto::cs::cparser::TNode
      uses function getAttribute(String) defined in edu::toronto::cs::cparser::TNode
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_CALL defined in edu::toronto::cs::cparser::block::BlockType
   function getCond() in line 123
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable IF defined in edu::toronto::cs::cparser::block::BlockType
      uses variable WHILE defined in edu::toronto::cs::cparser::block::BlockType
   function getDeclName() in line 339
      protection public
      30 lines of code
      0 parameters
      6 conditional paths
      uses macro definition assert defined in util.h
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable DECLARATION defined in edu::toronto::cs::cparser::block::BlockType
      uses function getType() defined in edu::toronto::cs::cparser::TNode
   function getDecls() in line 61
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLocalDecls() defined in edu::toronto::cs::cparser::block::Block
   function getElseBlock() in line 140
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable IF defined in edu::toronto::cs::cparser::block::BlockType
      uses function getLastChild() defined in edu::toronto::cs::cparser::TNode
   function getFunctionCallArgs() in line 426
      protection public
      19 lines of code
      0 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_CALL defined in edu::toronto::cs::cparser::block::BlockType
      uses function getType() defined in edu::toronto::cs::cparser::TNode
   function getFunctionCallName() in line 394
      protection public
      17 lines of code
      0 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_CALL defined in edu::toronto::cs::cparser::block::BlockType
      uses function getType() defined in edu::toronto::cs::cparser::TNode
   function getFunctionCallReturnVarName() in line 412
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_CALL defined in edu::toronto::cs::cparser::block::BlockType
      uses function getType() defined in edu::toronto::cs::cparser::TNode
   function getFunctionName() in line 179
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_DEFINITION defined in edu::toronto::cs::cparser::block::BlockType
   function getFunctionParameterList() in line 242
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_DEFINITION defined in edu::toronto::cs::cparser::block::BlockType
      uses function getFunctionParameters() defined in edu::toronto::cs::cparser::block::Block
   function getFunctionParameters() in line 230
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_DEFINITION defined in edu::toronto::cs::cparser::block::BlockType
   function getFunctionReturnType() in line 197
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_DEFINITION defined in edu::toronto::cs::cparser::block::BlockType
   function getGotoTargetLabel() in line 258
      protection public
      12 lines of code
      0 parameters
      3 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable GOTO defined in edu::toronto::cs::cparser::block::BlockType
      uses variable BREAK defined in edu::toronto::cs::cparser::block::BlockType
   function getLabel() in line 154
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getAttribute(String) defined in edu::toronto::cs::cparser::TNode
   function getLabelledStmt() in line 289
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable LABELLED_STATEMENT defined in edu::toronto::cs::cparser::block::BlockType
   function getLocalDecls() in line 75
      protection public
      14 lines of code
      0 parameters
      1 conditional paths
      uses function getLocalDeclsRoot() defined in edu::toronto::cs::cparser::block::Block
   function getLocalDeclsRoot() in line 90
      protection public
      10 lines of code
      0 parameters
      3 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_DEFINITION defined in edu::toronto::cs::cparser::block::BlockType
      uses function getBody() defined in edu::toronto::cs::cparser::block::Block
      uses function getLocalDeclsRoot() defined in edu::toronto::cs::cparser::block::Block
      uses variable SCOPE defined in edu::toronto::cs::cparser::block::BlockType
   function getMainFunctionDef() in line 40
      protection public
      17 lines of code
      0 parameters
      4 conditional paths
      uses macro definition assert defined in util.h
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable PROGRAM defined in edu::toronto::cs::cparser::block::BlockType
      uses function Block() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_DEFINITION defined in edu::toronto::cs::cparser::block::BlockType
      uses function getFunctionName() defined in edu::toronto::cs::cparser::block::Block
   function getNumCallSites() in line 452
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses function getAttribute(String) defined in edu::toronto::cs::cparser::TNode
   function getReturnExpr() in line 271
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable RETURN defined in edu::toronto::cs::cparser::block::BlockType
   function getThenBlock() in line 132
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable IF defined in edu::toronto::cs::cparser::block::BlockType
   function getWhileBody() in line 101
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable WHILE defined in edu::toronto::cs::cparser::block::BlockType
   function isNamedDeclaration() in line 302
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable DECLARATION defined in edu::toronto::cs::cparser::block::BlockType
      uses function getType() defined in edu::toronto::cs::cparser::TNode
   function isNonVoidFunction() in line 205
      protection public
      12 lines of code
      0 parameters
      3 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable FUNCTION_DEFINITION defined in edu::toronto::cs::cparser::block::BlockType
      uses function getType() defined in edu::toronto::cs::cparser::TNode
   function mergeCons(Block,Block) in line 514
      protection public
      19 lines of code
      2 parameters
      3 conditional paths
      uses function mergeNodes(Block,Block) defined in edu::toronto::cs::cparser::block::Block
   function mergeCopy(Block) in line 535
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function mergeCons(Block,Block) defined in edu::toronto::cs::cparser::block::Block
   function mergeNodes(Block,Block) in line 497
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses function getBlockType() defined in edu::toronto::cs::cparser::block::Block
      uses variable STATEMENT_LIST defined in edu::toronto::cs::cparser::block::BlockType
      uses function Block() defined in edu::toronto::cs::cparser::block::Block
      uses function setLabel(String) defined in edu::toronto::cs::cparser::block::Block
      uses function getLabel() defined in edu::toronto::cs::cparser::block::Block
   function setBlockType(BlockType) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function setAttribute(String,Object) defined in edu::toronto::cs::cparser::TNode
      uses variable attribName defined in edu::toronto::cs::cparser::block::BlockType
   function setCallIndex(int) in line 462
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function setAttribute(String,Object) defined in edu::toronto::cs::cparser::TNode
      uses variable v defined in visual.m
   function setLabel(String) in line 159
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function setAttribute(String,Object) defined in edu::toronto::cs::cparser::TNode
   function setNumCallSites(int) in line 446
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function setAttribute(String,Object) defined in edu::toronto::cs::cparser::TNode
   function Block() in line 12
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable UNKNOWN defined in edu::toronto::cs::cparser::block::BlockType
   function Block(BlockType) in line 17
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function setType(int) defined in edu::toronto::cs::cparser::TNode
      uses function setBlockType(BlockType) defined in edu::toronto::cs::cparser::block::Block
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/block/BlockType.java
module edu::toronto::cs::cparser::block::BlockType
   function toString() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in edu::toronto::cs::cparser::block::BlockType
   function BlockType(String) in line 9
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in edu::toronto::cs::cparser::block::BlockType
   variable attribName in line 7
      protection public
   variable BREAK in line 52
      protection public
   variable DECLARATION in line 43
      protection public
   variable FUNCTION_CALL in line 46
      protection public
   variable FUNCTION_DEFINITION in line 25
      protection public
   variable GOTO in line 49
      protection public
   variable IF in line 37
      protection public
   variable LABELLED_STATEMENT in line 34
      protection public
   variable name in line 5
   variable NDGOTO in line 58
      protection public
   variable PROGRAM in line 22
      protection public
   variable RETURN in line 55
      protection public
   variable SCOPE in line 28
      protection public
   variable STATEMENT_LIST in line 31
      protection public
   variable UNKNOWN in line 19
      protection public
   variable WHILE in line 40
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/CILParserUtil.java
module edu::toronto::cs::cparser::CILParserUtil
   function getParser(Reader) in line 20
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/CILProgramBlockerUtil.java
module edu::toronto::cs::cparser::CILProgramBlockerUtil
   function getProgramBlock(Reader) in line 11
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/CILTransformerUtil.java
module edu::toronto::cs::cparser::CILTransformerUtil
   function fixedFunctionDef(ExprFactory,Expr,Map) in line 166
      16 lines of code
      3 parameters
      2 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable FUNCTION_DEF defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function getExpr(ExprFactory,String) in line 102
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function getExpr(ExprFactory,GnuCParser) in line 115
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
   function getProgram(ExprFactory,Reader) in line 19
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function getProgram(ExprFactory,Reader,int,int) in line 25
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
      uses function getProgram(ExprFactory,Reader) defined in edu::toronto::cs::cparser::CILTransformerUtil
   function getProgram(ExprFactory,Reader,boolean) in line 32
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function getProgram(ExprFactory,Reader) defined in edu::toronto::cs::cparser::CILTransformerUtil
   function getProgram(ExprFactory,Reader,boolean,int,int) in line 39
      protection public
      7 lines of code
      5 parameters
      1 conditional paths
      uses function getProgram(ExprFactory,Reader) defined in edu::toronto::cs::cparser::CILTransformerUtil
   function getProgram(ExprFactory,GnuCParser) in line 47
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getProgram(ExprFactory,Reader) defined in edu::toronto::cs::cparser::CILTransformerUtil
   function getProgram(ExprFactory,GnuCParser,boolean) in line 53
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function getProgram(ExprFactory,Reader) defined in edu::toronto::cs::cparser::CILTransformerUtil
   function getProgram(ExprFactory,GnuCParser,boolean,int,int) in line 72
      protection public
      22 lines of code
      5 parameters
      1 conditional paths
      uses function resolveFunctionCalls(ExprFactory,Expr,Map) defined in edu::toronto::cs::cparser::CILTransformerUtil
   function resolveFunctionCalls(ExprFactory,Expr,Map) in line 138
      13 lines of code
      3 parameters
      2 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable FUNCTION_DEF defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function fixedFunctionDef(ExprFactory,Expr,Map) defined in edu::toronto::cs::cparser::CILTransformerUtil
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable PROGRAM defined in edu::toronto::cs::expr::CILProgramOp
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/CILTransformerUtilTestCase.java
module edu::toronto::cs::cparser::CILTransformerUtilTestCase
   inherits from junit::framework::TestCase
   function testStringToExpr() in line 9
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/CToken.java
module edu::toronto::cs::cparser::CToken
   inherits from antlr::CommonToken
   function getSource() in line 9
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTokenNumber() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setSource(String) in line 14
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setTokenNumber(int) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function toString() in line 29
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/GnuCParserUtil.java
module edu::toronto::cs::cparser::GnuCParserUtil
   function drawFrame(String,AST) in line 71
      5 lines of code
      2 parameters
      1 conditional paths
   function getParser(Reader) in line 25
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function getParser(Reader,CSymbolTable) in line 50
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable p defined in visual.m
      uses function getParser(Reader) defined in edu::toronto::cs::cparser::GnuCParserUtil
   function main(String[]) in line 57
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function getParser(Reader) defined in edu::toronto::cs::cparser::GnuCParserUtil
      uses function drawFrame(String,AST) defined in edu::toronto::cs::cparser::GnuCParserUtil
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/LineObject.java
module edu::toronto::cs::cparser::LineObject
   function getEnteringFile() in line 73
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLine() in line 58
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getParent() in line 48
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getReturningToFile() in line 83
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSource() in line 38
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSystemHeader() in line 93
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTreatAsC() in line 103
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function newline() in line 63
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setEnteringFile(boolean) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setLine(int) in line 53
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setParent(LineObject) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setReturningToFile(boolean) in line 78
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setSource(String) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setSystemHeader(boolean) in line 88
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setTreatAsC(boolean) in line 98
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 108
      protection public
      17 lines of code
      0 parameters
      1 conditional paths
   function LineObject() in line 12
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function LineObject(LineObject) in line 17
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function LineObject(String) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/PreprocessorInfoChannel.java
module edu::toronto::cs::cparser::PreprocessorInfoChannel
   function addLineForTokenNumber(Object,Integer) in line 11
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
   function extractLinesPrecedingTokenNumber(Integer) in line 32
      protection public
      20 lines of code
      1 parameters
      6 conditional paths
      uses variable i defined in sparsemv.m
   function getMaxTokenNumber() in line 27
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 53
      protection public
      17 lines of code
      0 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/SimpleInstrumenter.java
module edu::toronto::cs::cparser::SimpleInstrumenter
   function drawFrame(String,AST) in line 30
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function main(String[]) in line 126
      protection public
      46 lines of code
      1 parameters
      1 conditional paths
   function readFileIntoString(String) in line 43
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function readInstructions(String) in line 69
      protection public
      50 lines of code
      1 parameters
      1 conditional paths
   function SimpleInstrumenter() in line 27
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/instrumenter/SimpleInstrumenter.java
module edu::toronto::cs::yasm::instrumenter::SimpleInstrumenter
   function drawFrame(String,AST) in line 22
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function main(String[]) in line 96
      protection public
      55 lines of code
      1 parameters
      2 conditional paths
      uses function readInstructions2(String) defined in edu::toronto::cs::yasm::instrumenter::SimpleInstrumenter
   function readFileIntoString(String) in line 28
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable f defined in mvproduct.m
   function readInstructions2(String) in line 43
      protection public
      47 lines of code
      1 parameters
      14 conditional paths
      uses function readFileIntoString(String) defined in edu::toronto::cs::yasm::instrumenter::SimpleInstrumenter
   function SimpleInstrumenter() in line 19
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/TestCILParser.java
module edu::toronto::cs::cparser::TestCILParser
   function drawFrame(String,AST) in line 17
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function main(String[]) in line 23
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
   function TestCILParser() in line 14
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/TestCILProgramBlocker.java
module edu::toronto::cs::cparser::TestCILProgramBlocker
   function drawFrame(String,AST) in line 17
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function main(String   []) in line 23
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function TestCILProgramBlocker() in line 14
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/TestCILTransformer.java
module edu::toronto::cs::cparser::TestCILTransformer
   function main(String   []) in line 22
      protection public
      31 lines of code
      1 parameters
      1 conditional paths
   function TestCILTransformer() in line 20
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/TNode.java
module edu::toronto::cs::cparser::TNode
   inherits from antlr::CommonAST
   function addSibling(AST) in line 201
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable left defined in edu::toronto::cs::cparser::TNode
      uses function getLastSibling() defined in edu::toronto::cs::cparser::TNode
   function deepCopy() in line 263
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses variable ttype defined in edu::toronto::cs::cparser::TNode
      uses variable text defined in edu::toronto::cs::cparser::TNode
      uses variable lineNum defined in edu::toronto::cs::cparser::TNode
      uses variable defNode defined in edu::toronto::cs::cparser::TNode
      uses variable attributes defined in edu::toronto::cs::cparser::TNode
      uses function deepCopyWithRightSiblings() defined in edu::toronto::cs::cparser::TNode
      uses function doubleLink() defined in edu::toronto::cs::cparser::TNode
   function deepCopyWithRightSiblings() in line 282
      protection public
      15 lines of code
      0 parameters
      4 conditional paths
      uses variable ttype defined in edu::toronto::cs::cparser::TNode
      uses variable text defined in edu::toronto::cs::cparser::TNode
      uses variable lineNum defined in edu::toronto::cs::cparser::TNode
      uses variable defNode defined in edu::toronto::cs::cparser::TNode
      uses variable attributes defined in edu::toronto::cs::cparser::TNode
      uses function deepCopyWithRightSiblings() defined in edu::toronto::cs::cparser::TNode
      uses function doubleLink() defined in edu::toronto::cs::cparser::TNode
   function doubleLink() in line 396
      protection public
      12 lines of code
      0 parameters
      3 conditional paths
      uses variable left defined in edu::toronto::cs::cparser::TNode
      uses function doubleLink() defined in edu::toronto::cs::cparser::TNode
      uses variable up defined in edu::toronto::cs::cparser::TNode
   function firstChildOfType(int) in line 425
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function getType() defined in edu::toronto::cs::cparser::TNode
      uses function firstSiblingOfType(int) defined in edu::toronto::cs::cparser::TNode
   function firstSiblingOfType(int) in line 436
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function getType() defined in edu::toronto::cs::cparser::TNode
      uses function firstSiblingOfType(int) defined in edu::toronto::cs::cparser::TNode
   function getAttribute(String) in line 115
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable attributes defined in edu::toronto::cs::cparser::TNode
   function getAttributesTable() in line 98
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
      uses variable attributes defined in edu::toronto::cs::cparser::TNode
   function getDefNode() in line 249
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable defNode defined in edu::toronto::cs::cparser::TNode
   function getFirstSibling() in line 181
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable left defined in edu::toronto::cs::cparser::TNode
      uses function getFirstSibling() defined in edu::toronto::cs::cparser::TNode
   function getLastChild() in line 161
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getLastSibling() defined in edu::toronto::cs::cparser::TNode
   function getLastSibling() in line 171
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getLastSibling() defined in edu::toronto::cs::cparser::TNode
   function getLineNum() in line 124
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable lineNum defined in edu::toronto::cs::cparser::TNode
   function getLocalLineNum() in line 134
      protection public
      12 lines of code
      0 parameters
      4 conditional paths
      uses variable lineNum defined in edu::toronto::cs::cparser::TNode
   function getMarker() in line 87
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable marker defined in edu::toronto::cs::cparser::TNode
   function getNameForType(int) in line 383
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
   function getParent() in line 191
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function getFirstSibling() defined in edu::toronto::cs::cparser::TNode
      uses variable up defined in edu::toronto::cs::cparser::TNode
   function getText() in line 153
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable text defined in edu::toronto::cs::cparser::TNode
   function getType() in line 77
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable ttype defined in edu::toronto::cs::cparser::TNode
   function initialize(Token) in line 58
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function setText(String) defined in edu::toronto::cs::cparser::TNode
      uses function setType(int) defined in edu::toronto::cs::cparser::TNode
      uses function setLineNum(int) defined in edu::toronto::cs::cparser::TNode
      uses function setAttribute(String,Object) defined in edu::toronto::cs::cparser::TNode
      uses function getSource() defined in edu::toronto::cs::cparser::CToken
      uses function getTokenNumber() defined in edu::toronto::cs::cparser::CToken
   function initialize(AST) in line 66
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function setText(String) defined in edu::toronto::cs::cparser::TNode
      uses function getText() defined in edu::toronto::cs::cparser::TNode
      uses function setType(int) defined in edu::toronto::cs::cparser::TNode
      uses function getType() defined in edu::toronto::cs::cparser::TNode
      uses function setLineNum(int) defined in edu::toronto::cs::cparser::TNode
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
      uses function setDefNode(TNode) defined in edu::toronto::cs::cparser::TNode
      uses function getDefNode() defined in edu::toronto::cs::cparser::TNode
      uses function getAttributesTable() defined in edu::toronto::cs::cparser::TNode
   function numberOfChildren() in line 214
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
   function parentOfType(int) in line 411
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
      uses variable up defined in edu::toronto::cs::cparser::TNode
      uses variable left defined in edu::toronto::cs::cparser::TNode
      uses function parentOfType(int) defined in edu::toronto::cs::cparser::TNode
      uses function getType() defined in edu::toronto::cs::cparser::TNode
   function printASTNode(AST,int,PrintWriter) in line 330
      49 lines of code
      3 parameters
      11 conditional paths
      uses variable i defined in sparsemv.m
      uses variable s defined in visual.m
      uses function getNameForType(int) defined in edu::toronto::cs::cparser::TNode
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
      uses function getAttribute(String) defined in edu::toronto::cs::cparser::TNode
      uses function getDefNode() defined in edu::toronto::cs::cparser::TNode
      uses function getType() defined in edu::toronto::cs::cparser::TNode
   function printTree(AST) in line 318
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function printTree(AST,PrintWriter) in line 322
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function printASTNode(AST,int,PrintWriter) defined in edu::toronto::cs::cparser::TNode
   function removeSelf() in line 227
      protection public
      19 lines of code
      0 parameters
      5 conditional paths
      uses variable up defined in edu::toronto::cs::cparser::TNode
      uses variable left defined in edu::toronto::cs::cparser::TNode
   function setAttribute(String,Object) in line 106
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable attributes defined in edu::toronto::cs::cparser::TNode
   function setDefNode(TNode) in line 254
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable defNode defined in edu::toronto::cs::cparser::TNode
   function setLineNum(int) in line 148
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable lineNum defined in edu::toronto::cs::cparser::TNode
   function setMarker(boolean) in line 92
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable marker defined in edu::toronto::cs::cparser::TNode
   function setText(String) in line 156
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable text defined in edu::toronto::cs::cparser::TNode
   function setTokenVocabulary(String) in line 53
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function setType(int) in line 80
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable ttype defined in edu::toronto::cs::cparser::TNode
   function toString() in line 300
      protection public
      15 lines of code
      0 parameters
      3 conditional paths
      uses function getNameForType(int) defined in edu::toronto::cs::cparser::TNode
      uses function getType() defined in edu::toronto::cs::cparser::TNode
      uses function getText() defined in edu::toronto::cs::cparser::TNode
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
      uses function getAttributesTable() defined in edu::toronto::cs::cparser::TNode
      uses function getAttribute(String) defined in edu::toronto::cs::cparser::TNode
   variable attributes in line 44
   variable defNode in line 40
   variable left in line 42
   variable lineNum in line 39
   variable marker in line 43
   variable text in line 38
   variable ttype in line 37
   variable up in line 41
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cparser/TNodeFactory.java
module edu::toronto::cs::cparser::TNodeFactory
   inherits from antlr::ASTFactory
   function create() in line 12
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function create(int,String) in line 17
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function create(AST) in line 25
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/AbstractCTLVisitor.java
module edu::toronto::cs::ctl::AbstractCTLVisitor
   inherits from edu::toronto::cs::ctl::CTLVisitor
   function visit(CTLNode,Object) in line 10
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function accept(CTLVisitor,Object) defined in edu::toronto::cs::ctl::CTLNode
      uses variable o defined in visual.m
   function visitAbstractNode(CTLAbstractNode,Object) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitAFNode(CTLAFNode,Object) in line 43
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitUnaryNode(CTLUnaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitAGNode(CTLAGNode,Object) in line 48
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitUnaryNode(CTLUnaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitAndNode(CTLAndNode,Object) in line 83
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitARNode(CTLARNode,Object) in line 58
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitAtomPropNode(CTLAtomPropNode,Object) in line 88
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitLeafNode(CTLLeafNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitAUiNode(CTLAUiNode,Object) in line 68
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitAUNode(CTLAUNode,Object) in line 53
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitAWNode(CTLAWNode,Object) in line 73
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitAXNode(CTLAXNode,Object) in line 78
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitUnaryNode(CTLUnaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitBinaryNode(CTLBinaryNode,Object) in line 36
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitAbstractNode(CTLAbstractNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitConstantNode(CTLConstantNode,Object) in line 138
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitLeafNode(CTLLeafNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitCTLNode(CTLNode,Object) in line 18
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function visitEFNode(CTLEFNode,Object) in line 93
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitUnaryNode(CTLUnaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitEGNode(CTLEGNode,Object) in line 98
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitUnaryNode(CTLUnaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitEqualsNode(CTLEqualsNode,Object) in line 123
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitERNode(CTLERNode,Object) in line 63
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitEUiNode(CTLEUiNode,Object) in line 108
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitEUNode(CTLEUNode,Object) in line 103
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitEWNode(CTLEWNode,Object) in line 113
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitEXNode(CTLEXNode,Object) in line 118
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitUnaryNode(CTLUnaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitIffNode(CTLIffNode,Object) in line 128
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitImplNode(CTLImplNode,Object) in line 133
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitLeafNode(CTLLeafNode,Object) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitAbstractNode(CTLAbstractNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitMvSetNode(CTLMvSetNode,Object) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitLeafNode(CTLLeafNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitNegNode(CTLNegNode,Object) in line 153
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitUnaryNode(CTLUnaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitNode(CTLNode,Object) in line 158
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function visitOrNode(CTLOrNode,Object) in line 164
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitOverNode(CTLOverNode,Object) in line 169
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitPlaceholderNode(CTLPlaceholderNode,Object) in line 148
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitLeafNode(CTLLeafNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitPreEXNode(CTLPreEXNode,Object) in line 174
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitUnaryNode(CTLUnaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitUnaryNode(CTLUnaryNode,Object) in line 32
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitAbstractNode(CTLAbstractNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
   function visitUnderNode(CTLUnderNode,Object) in line 179
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitBinaryNode(CTLBinaryNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
      uses variable o defined in visual.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/antlr/CTLNodeParser.java
module edu::toronto::cs::ctl::antlr::CTLNodeParser
   function parse(String) in line 32
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable EMPTY_ARRAY defined in edu::toronto::cs::ctl::CTLAbstractNode
   function parse(String,CTLNode[]) in line 38
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function parse(String) defined in edu::toronto::cs::ctl::antlr::CTLNodeParser
   function parse(Reader) in line 45
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function parse(String) defined in edu::toronto::cs::ctl::antlr::CTLNodeParser
      uses variable EMPTY_ARRAY defined in edu::toronto::cs::ctl::CTLAbstractNode
   function parse(Reader,CTLNode[]) in line 50
      protection public
      20 lines of code
      2 parameters
      2 conditional paths
   function safeParse(String) in line 17
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function parse(String) defined in edu::toronto::cs::ctl::antlr::CTLNodeParser
   function safeParse(String,CTLNode[]) in line 24
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function parse(String) defined in edu::toronto::cs::ctl::antlr::CTLNodeParser
module edu::toronto::cs::ctl::antlr::CTLNodeParser::CTLNodeParserException
   inherits from Exception
   function CTLNodeParserException() in line 74
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CTLNodeParserException(String) in line 79
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function CTLNodeParserException(Throwable) in line 83
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLAbstractNode.java
module edu::toronto::cs::ctl::CTLAbstractNode
   inherits from edu::toronto::cs::ctl::CTLNode
   abstract class
   function accept(CTLVisitor,Object) in line 283
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function af() in line 159
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function af(CTLNode[]) in line 163
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ag() in line 239
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ag(CTLNode[]) in line 244
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function and(CTLNode) in line 81
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ar(CTLNode) in line 202
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function au(CTLNode) in line 189
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function au(int,CTLNode) in line 197
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function aw(CTLNode) in line 212
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ax() in line 143
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ef() in line 151
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function eg() in line 225
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function eg(CTLNode[]) in line 230
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function eq(CTLNode) in line 253
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function equals(Object) in line 277
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function er(CTLNode) in line 207
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function eu(CTLNode) in line 172
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function eu(int,CTLNode) in line 180
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function ew(CTLNode) in line 216
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ex() in line 129
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFairness() in line 49
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable EMPTY_ARRAY defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function setLeft(CTLNode) defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function setRight(CTLNode) defined in edu::toronto::cs::ctl::CTLAbstractNode
   function getLeft() in line 59
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getRight() in line 65
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function iff(CTLNode) in line 121
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function impliedBy(CTLNode) in line 113
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function implies(CTLNode) in line 105
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function neg() in line 97
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function objectHashCode() in line 288
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function or(CTLNode) in line 89
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function over(CTLNode) in line 269
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function preEX() in line 134
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setLeft(CTLNode) in line 71
      1 lines of code
      1 parameters
      1 conditional paths
   function setRight(CTLNode) in line 76
      1 lines of code
      1 parameters
      1 conditional paths
   function toString(CTLNode,boolean) in line 296
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
   function under(CTLNode) in line 261
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function CTLAbstractNode() in line 22
      3 lines of code
      0 parameters
      1 conditional paths
   variable EMPTY_ARRAY in line 11
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLAFNode.java
module edu::toronto::cs::ctl::CTLAFNode
   inherits from edu::toronto::cs::ctl::CTLUnaryNode
   function accept(CTLVisitor,Object) in line 27
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 22
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function CTLAFNode(CTLNode) in line 12
      4 lines of code
      1 parameters
      1 conditional paths
   function CTLAFNode(CTLNode,CTLNode[]) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLAGNode.java
module edu::toronto::cs::ctl::CTLAGNode
   inherits from edu::toronto::cs::ctl::CTLUnaryNode
   function accept(CTLVisitor,Object) in line 27
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 22
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function CTLAGNode(CTLNode) in line 12
      4 lines of code
      1 parameters
      1 conditional paths
   function CTLAGNode(CTLNode,CTLNode[]) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLAndNode.java
module edu::toronto::cs::ctl::CTLAndNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 17
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLAndNode(CTLNode,CTLNode) in line 12
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLARNode.java
module edu::toronto::cs::ctl::CTLARNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLARNode(CTLNode,CTLNode) in line 13
      4 lines of code
      2 parameters
      1 conditional paths
   function CTLARNode(CTLNode,CTLNode,CTLNode[]) in line 18
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLAtomPropNode.java
module edu::toronto::cs::ctl::CTLAtomPropNode
   inherits from edu::toronto::cs::ctl::CTLLeafNode
   function accept(CTLVisitor,Object) in line 65
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function equals(Object) in line 70
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function equals(CTLAtomPropNode) in line 76
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getMvSet() in line 48
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getName() in line 38
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 81
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setMvSet(MvSet) in line 53
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setName(String) in line 43
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
   function toString() in line 59
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CTLAtomPropNode() in line 15
      5 lines of code
      0 parameters
      1 conditional paths
   function CTLAtomPropNode(String) in line 24
      6 lines of code
      1 parameters
      1 conditional paths
   function CTLAtomPropNode(String,MvSet) in line 31
      6 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLAUiNode.java
module edu::toronto::cs::ctl::CTLAUiNode
   inherits from edu::toronto::cs::ctl::CTLAUNode
   function accept(CTLVisitor,Object) in line 51
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function equals(Object) in line 56
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses variable bound defined in edu::toronto::cs::ctl::CTLAUiNode
      uses function CTLAUiNode(CTLNode,int,CTLNode) defined in edu::toronto::cs::ctl::CTLAUiNode
   function getI() in line 32
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable bound defined in edu::toronto::cs::ctl::CTLAUiNode
   function hashCode() in line 62
      protection public
      12 lines of code
      0 parameters
      2 conditional paths
      uses variable primes defined in edu::toronto::cs::util::Primes
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses variable bound defined in edu::toronto::cs::ctl::CTLAUiNode
      uses variable i defined in sparsemv.m
   function setI(int) in line 40
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable bound defined in edu::toronto::cs::ctl::CTLAUiNode
      uses variable i defined in sparsemv.m
   function toString() in line 45
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses variable bound defined in edu::toronto::cs::ctl::CTLAUiNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLAUiNode(CTLNode,int,CTLNode) in line 17
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable bound defined in edu::toronto::cs::ctl::CTLAUiNode
      uses variable i defined in sparsemv.m
   function CTLAUiNode(CTLNode,int,CTLNode,CTLNode[]) in line 22
      5 lines of code
      4 parameters
      1 conditional paths
      uses variable bound defined in edu::toronto::cs::ctl::CTLAUiNode
      uses variable i defined in sparsemv.m
   variable bound in line 11
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLAUNode.java
module edu::toronto::cs::ctl::CTLAUNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLAUNode(CTLNode,CTLNode) in line 13
      4 lines of code
      2 parameters
      1 conditional paths
   function CTLAUNode(CTLNode,CTLNode,CTLNode[]) in line 18
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLAWNode.java
module edu::toronto::cs::ctl::CTLAWNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLAWNode(CTLNode,CTLNode) in line 13
      4 lines of code
      2 parameters
      1 conditional paths
   function CTLAWNode(CTLNode,CTLNode,CTLNode[]) in line 18
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLAXNode.java
module edu::toronto::cs::ctl::CTLAXNode
   inherits from edu::toronto::cs::ctl::CTLUnaryNode
   function accept(CTLVisitor,Object) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function CTLAXNode(CTLNode) in line 12
      4 lines of code
      1 parameters
      1 conditional paths
   function CTLAXNode(CTLNode,CTLNode[]) in line 17
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLBinaryNode.java
module edu::toronto::cs::ctl::CTLBinaryNode
   inherits from edu::toronto::cs::ctl::CTLUnaryNode
   abstract class
   function equals(Object) in line 47
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function CTLBinaryNode() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function getLeft() in line 33
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getRight() in line 29
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 55
      protection public
      13 lines of code
      0 parameters
      2 conditional paths
      uses variable primes defined in edu::toronto::cs::util::Primes
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses variable i defined in sparsemv.m
   function setLeft(CTLNode) in line 41
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setRight(CTLNode) in line 37
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function CTLBinaryNode() in line 10
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function CTLBinaryNode(CTLNode,CTLNode) in line 16
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function CTLBinaryNode(CTLNode,CTLNode,CTLNode[]) in line 22
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLConstantNode.java
module edu::toronto::cs::ctl::CTLConstantNode
   inherits from edu::toronto::cs::ctl::CTLLeafNode
   function accept(CTLVisitor,Object) in line 35
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function equals(Object) in line 40
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function equals(CTLConstantNode) in line 47
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getValue() in line 30
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 52
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 25
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
   function CTLConstantNode(AlgebraValue) in line 17
      7 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLEFNode.java
module edu::toronto::cs::ctl::CTLEFNode
   inherits from edu::toronto::cs::ctl::CTLUnaryNode
   function accept(CTLVisitor,Object) in line 27
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 22
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function CTLEFNode(CTLNode) in line 12
      4 lines of code
      1 parameters
      1 conditional paths
   function CTLEFNode(CTLNode,CTLNode[]) in line 17
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLEGNode.java
module edu::toronto::cs::ctl::CTLEGNode
   inherits from edu::toronto::cs::ctl::CTLUnaryNode
   function accept(CTLVisitor,Object) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function CTLEGNode(CTLNode) in line 12
      4 lines of code
      1 parameters
      1 conditional paths
   function CTLEGNode(CTLNode,CTLNode[]) in line 17
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLEqualsNode.java
module edu::toronto::cs::ctl::CTLEqualsNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 17
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLEqualsNode(CTLNode,CTLNode) in line 12
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLERNode.java
module edu::toronto::cs::ctl::CTLERNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLERNode(CTLNode,CTLNode) in line 13
      4 lines of code
      2 parameters
      1 conditional paths
   function CTLERNode(CTLNode,CTLNode,CTLNode[]) in line 18
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLEUiNode.java
module edu::toronto::cs::ctl::CTLEUiNode
   inherits from edu::toronto::cs::ctl::CTLEUNode
   function accept(CTLVisitor,Object) in line 49
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function equals(Object) in line 55
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses variable bound defined in edu::toronto::cs::ctl::CTLEUiNode
      uses function CTLEUiNode(CTLNode,int,CTLNode) defined in edu::toronto::cs::ctl::CTLEUiNode
   function getI() in line 31
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable bound defined in edu::toronto::cs::ctl::CTLEUiNode
   function hashCode() in line 62
      protection public
      16 lines of code
      0 parameters
      3 conditional paths
      uses variable primes defined in edu::toronto::cs::util::Primes
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses variable bound defined in edu::toronto::cs::ctl::CTLEUiNode
      uses variable i defined in sparsemv.m
   function setI(int) in line 39
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable bound defined in edu::toronto::cs::ctl::CTLEUiNode
      uses variable i defined in sparsemv.m
   function toString() in line 44
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses variable bound defined in edu::toronto::cs::ctl::CTLEUiNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLEUiNode(CTLNode,int,CTLNode) in line 16
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable bound defined in edu::toronto::cs::ctl::CTLEUiNode
      uses variable i defined in sparsemv.m
   function CTLEUiNode(CTLNode,int,CTLNode,CTLNode[]) in line 21
      5 lines of code
      4 parameters
      1 conditional paths
      uses variable bound defined in edu::toronto::cs::ctl::CTLEUiNode
      uses variable i defined in sparsemv.m
   variable bound in line 10
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLEUNode.java
module edu::toronto::cs::ctl::CTLEUNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 29
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLEUNode(CTLNode,CTLNode) in line 13
      4 lines of code
      2 parameters
      1 conditional paths
   function CTLEUNode(CTLNode,CTLNode,CTLNode[]) in line 18
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLEWNode.java
module edu::toronto::cs::ctl::CTLEWNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLEWNode(CTLNode,CTLNode) in line 13
      4 lines of code
      2 parameters
      1 conditional paths
   function CTLEWNode(CTLNode,CTLNode,CTLNode[]) in line 18
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLEXNode.java
module edu::toronto::cs::ctl::CTLEXNode
   inherits from edu::toronto::cs::ctl::CTLUnaryNode
   function accept(CTLVisitor,Object) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 22
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function CTLEXNode(CTLNode) in line 12
      4 lines of code
      1 parameters
      1 conditional paths
   function CTLEXNode(CTLNode,CTLNode[]) in line 17
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLFactory.java
module edu::toronto::cs::ctl::CTLFactory
   function alterChildren(CTLNode,CTLNode,CTLNode) in line 290
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function makeSameNode(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
      uses function setLeft(CTLNode) defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function setRight(CTLNode) defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLAFNode(CTLNode) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function createCTLAFNode(CTLNode,CTLNode[]) in line 132
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLAGNode(CTLNode) in line 61
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function createCTLAGNode(CTLNode,CTLNode[]) in line 174
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLAndNode(CTLNode,CTLNode) in line 78
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLARNode(CTLNode,CTLNode) in line 193
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLAtomPropNode(String) in line 180
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLAUiNode(CTLNode,int,CTLNode) in line 50
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function createCTLAUiNode(CTLNode,int,CTLNode,CTLNode[]) in line 160
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLAUNode(CTLNode,CTLNode) in line 39
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function createCTLAUNode(CTLNode,CTLNode,CTLNode[]) in line 145
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLAWNode(CTLNode,CTLNode) in line 67
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function createCTLAWNode(CTLNode,CTLNode,CTLNode[]) in line 241
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLAXNode(CTLNode) in line 18
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function createCTLAXNode(CTLNode,CTLNode[]) in line 114
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLConstantNode(AlgebraValue) in line 202
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLEFNode(CTLNode) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function createCTLEFNode(CTLNode,CTLNode[]) in line 126
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLEGNode(CTLNode) in line 56
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function createCTLEGNode(CTLNode,CTLNode[]) in line 168
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLEqualsNode(CTLNode,CTLNode) in line 208
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLERNode(CTLNode,CTLNode) in line 197
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLEUiNode(CTLNode,int,CTLNode) in line 44
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function createCTLEUiNode(CTLNode,int,CTLNode,CTLNode[]) in line 152
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLEUNode(CTLNode,CTLNode) in line 34
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function createCTLEUNode(CTLNode,CTLNode,CTLNode[]) in line 138
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLEWNode(CTLNode,CTLNode) in line 72
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function createCTLEWNode(CTLNode,CTLNode,CTLNode[]) in line 249
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLEXNode(CTLNode) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function createCTLEXNode(CTLNode,CTLNode[]) in line 108
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLIffNode(CTLNode,CTLNode) in line 102
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLImplNode(CTLNode,CTLNode) in line 96
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLMvSetNode(MvSet) in line 227
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLNegNode(CTLNode) in line 90
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLOrNode(CTLNode,CTLNode) in line 84
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLOverNode(CTLNode,CTLNode) in line 221
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLPlaceholderNode(String,CTLAtomPropNode[]) in line 186
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLPreEXNode(CTLNode) in line 120
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLTransitionNode(MvSet) in line 234
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function createCTLUnderNode(CTLNode,CTLNode) in line 215
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(CTLNode) defined in edu::toronto::cs::ctl::CTLFactory
   function makeSameNode(CTLNode) in line 309
      61 lines of code
      1 parameters
      19 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLNode
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLNode
   function makeUnique(CTLNode) in line 265
      13 lines of code
      1 parameters
      2 conditional paths
   function removeCTLNode(CTLNode) in line 257
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function renew() in line 280
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLIffNode.java
module edu::toronto::cs::ctl::CTLIffNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 22
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 17
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLIffNode(CTLNode,CTLNode) in line 12
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLImplNode.java
module edu::toronto::cs::ctl::CTLImplNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 17
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLImplNode(CTLNode,CTLNode) in line 12
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLLeafNode.java
module edu::toronto::cs::ctl::CTLLeafNode
   inherits from edu::toronto::cs::ctl::CTLAbstractNode
   function getLeft() in line 12
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function getRight() in line 18
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function setLeft(CTLNode) in line 28
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function setRight(CTLNode) in line 24
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function CTLLeafNode() in line 8
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLMvSetNode.java
module edu::toronto::cs::ctl::CTLMvSetNode
   inherits from edu::toronto::cs::ctl::CTLLeafNode
   function accept(CTLVisitor,Object) in line 53
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitMvSetNode(CTLMvSetNode,Object) defined in edu::toronto::cs::ctl::CTLVisitor
   function equals(Object) in line 59
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function equals(CTLMvSetNode) in line 65
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getMvSet() in line 48
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getName() in line 34
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 70
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setName(String) in line 24
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses function getName() defined in edu::toronto::cs::ctl::CTLMvSetNode
   function toString() in line 39
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function getName() defined in edu::toronto::cs::ctl::CTLMvSetNode
   function CTLMvSetNode(MvSet) in line 18
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLNegNode.java
module edu::toronto::cs::ctl::CTLNegNode
   inherits from edu::toronto::cs::ctl::CTLUnaryNode
   function accept(CTLVisitor,Object) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 17
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function CTLNegNode(CTLNode) in line 12
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLNode.java
module edu::toronto::cs::ctl::CTLNode
   function accept(CTLVisitor,Object) in line 115
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function af() in line 82
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function af(CTLNode[]) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ag() in line 128
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ag(CTLNode[]) in line 129
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function and(CTLNode) in line 35
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ar(CTLNode) in line 108
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function au(CTLNode) in line 98
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function au(int,CTLNode) in line 103
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function aw(CTLNode) in line 112
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ax() in line 72
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ef() in line 77
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function eg() in line 121
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function eg(CTLNode[]) in line 123
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eq(CTLNode) in line 134
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function er(CTLNode) in line 110
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eu(CTLNode) in line 88
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eu(int,CTLNode) in line 93
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ew(CTLNode) in line 113
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ex() in line 65
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getFairness() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getLeft() in line 16
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getRight() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function iff(CTLNode) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function impliedBy(CTLNode) in line 55
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function implies(CTLNode) in line 50
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function neg() in line 45
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function or(CTLNode) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function over(CTLNode) in line 144
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function preEX() in line 67
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function under(CTLNode) in line 139
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLOrNode.java
module edu::toronto::cs::ctl::CTLOrNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 17
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLOrNode(CTLNode,CTLNode) in line 12
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLOverNode.java
module edu::toronto::cs::ctl::CTLOverNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function accept(CTLVisitor,Object) in line 22
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function toString() in line 17
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLOverNode(CTLNode,CTLNode) in line 12
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLPlaceholderNode.java
module edu::toronto::cs::ctl::CTLPlaceholderNode
   inherits from edu::toronto::cs::ctl::CTLLeafNode
   function accept(CTLVisitor,Object) in line 99
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPlaceholderNode(CTLPlaceholderNode,Object) defined in edu::toronto::cs::ctl::CTLVisitor
      uses variable o defined in visual.m
   function equals(Object) in line 105
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function equals(CTLPlaceholderNode) in line 111
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getName() in line 62
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getProps() in line 53
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getProps(int) in line 57
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function getTerm(int) in line 76
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function getTerms() in line 72
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 116
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isNegated() in line 43
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setNegated(boolean) in line 47
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setTerms(MvSet) in line 67
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses macro definition assert defined in util.h
   function toString() in line 82
      protection public
      16 lines of code
      0 parameters
      3 conditional paths
      uses function getName() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses variable i defined in sparsemv.m
   function CTLPlaceholderNode() in line 30
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function CTLPlaceholderNode(String,CTLAtomPropNode[]) in line 37
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLPreEXNode.java
module edu::toronto::cs::ctl::CTLPreEXNode
   inherits from edu::toronto::cs::ctl::CTLUnaryNode
   function accept(CTLVisitor,Object) in line 22
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable s defined in visual.m
   function toString() in line 17
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function CTLPreEXNode(CTLNode) in line 12
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLPrettyPrinter.java
module edu::toronto::cs::ctl::CTLPrettyPrinter
   inherits from edu::toronto::cs::ctl::AbstractCTLVisitor
   function getPrettyPrinter() in line 25
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function isTemporalOperator(CTLNode) in line 226
      17 lines of code
      1 parameters
      3 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
   function main(String[]) in line 247
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
      uses function toString(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
   function stringValue(CTLNode) in line 18
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function visit(CTLNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
   function toString(CTLNode) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getPrettyPrinter() defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
   function visitAFNode(CTLAFNode,Object) in line 109
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitAGNode(CTLAGNode,Object) in line 119
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitAndNode(CTLAndNode,Object) in line 33
      protection public
      19 lines of code
      2 parameters
      5 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function isTemporalOperator(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
   function visitARNode(CTLARNode,Object) in line 186
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAtomPropNode(CTLAtomPropNode,Object) in line 73
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::ctl::CTLAtomPropNode
   function visitAUiNode(CTLAUiNode,Object) in line 216
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getI() defined in edu::toronto::cs::ctl::CTLAUiNode
   function visitAUNode(CTLAUNode,Object) in line 178
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAWNode(CTLAWNode,Object) in line 202
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAXNode(CTLAXNode,Object) in line 129
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitConstantNode(CTLConstantNode,Object) in line 77
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function toString() defined in edu::toronto::cs::ctl::CTLConstantNode
   function visitEFNode(CTLEFNode,Object) in line 114
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitEGNode(CTLEGNode,Object) in line 124
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitEqualsNode(CTLEqualsNode,Object) in line 87
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function isTemporalOperator(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
   function visitERNode(CTLERNode,Object) in line 191
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEUiNode(CTLEUiNode,Object) in line 209
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getI() defined in edu::toronto::cs::ctl::CTLEUiNode
   function visitEUNode(CTLEUNode,Object) in line 171
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEWNode(CTLEWNode,Object) in line 197
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEXNode(CTLEXNode,Object) in line 134
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitImplNode(CTLImplNode,Object) in line 98
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function isTemporalOperator(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
   function visitMvSetNode(CTLMvSetNode,Object) in line 82
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function toString() defined in edu::toronto::cs::ctl::CTLMvSetNode
   function visitNegNode(CTLNegNode,Object) in line 139
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitOrNode(CTLOrNode,Object) in line 54
      protection public
      18 lines of code
      2 parameters
      5 conditional paths
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function isTemporalOperator(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
   function visitPlaceholderNode(CTLPlaceholderNode,Object) in line 151
      protection public
      19 lines of code
      2 parameters
      2 conditional paths
      uses function getName() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses function getProps() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses variable i defined in sparsemv.m
      uses function stringValue(CTLNode) defined in edu::toronto::cs::ctl::CTLPrettyPrinter
      uses function toString() defined in edu::toronto::cs::ctl::CTLAtomPropNode
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLStyledPrinter.java
module edu::toronto::cs::ctl::CTLStyledPrinter
   inherits from edu::toronto::cs::ctl::AbstractCTLVisitor
   function getStyledPrinter() in line 32
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function isTemporalOperator(CTLNode) in line 338
      20 lines of code
      1 parameters
      4 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
   function print(CTLNode,StyledDocumentPrinter) in line 13
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getStyledPrinter() defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
   function printNode(CTLNode,StyledDocumentPrinter) in line 19
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visit(CTLNode,Object) defined in edu::toronto::cs::ctl::AbstractCTLVisitor
   function printNode(CTLNode,Object) in line 24
      4 lines of code
      2 parameters
      1 conditional paths
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses variable o defined in visual.m
   function visitAFNode(CTLAFNode,Object) in line 148
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitAGNode(CTLAGNode,Object) in line 162
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable o defined in visual.m
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses variable i defined in sparsemv.m
   function visitAndNode(CTLAndNode,Object) in line 40
      protection public
      29 lines of code
      2 parameters
      8 conditional paths
      uses variable o defined in visual.m
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function isTemporalOperator(CTLNode) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
   function visitARNode(CTLARNode,Object) in line 255
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAtomPropNode(CTLAtomPropNode,Object) in line 102
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function getName() defined in edu::toronto::cs::ctl::CTLAtomPropNode
   function visitAUiNode(CTLAUiNode,Object) in line 321
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getI() defined in edu::toronto::cs::ctl::CTLAUiNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAUNode(CTLAUNode,Object) in line 242
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAWNode(CTLAWNode,Object) in line 281
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAXNode(CTLAXNode,Object) in line 183
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitConstantNode(CTLConstantNode,Object) in line 107
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function toString() defined in edu::toronto::cs::ctl::CTLConstantNode
   function visitEFNode(CTLEFNode,Object) in line 155
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitEGNode(CTLEGNode,Object) in line 176
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitEqualsNode(CTLEqualsNode,Object) in line 119
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses function isTemporalOperator(CTLNode) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses variable o defined in visual.m
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitERNode(CTLERNode,Object) in line 268
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEUiNode(CTLEUiNode,Object) in line 309
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getI() defined in edu::toronto::cs::ctl::CTLEUiNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEUNode(CTLEUNode,Object) in line 230
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEWNode(CTLEWNode,Object) in line 295
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEXNode(CTLEXNode,Object) in line 190
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitImplNode(CTLImplNode,Object) in line 133
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses function isTemporalOperator(CTLNode) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses variable o defined in visual.m
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitMvSetNode(CTLMvSetNode,Object) in line 113
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function toString() defined in edu::toronto::cs::ctl::CTLMvSetNode
   function visitNegNode(CTLNegNode,Object) in line 197
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses variable o defined in visual.m
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
   function visitOrNode(CTLOrNode,Object) in line 71
      protection public
      30 lines of code
      2 parameters
      8 conditional paths
      uses variable o defined in visual.m
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function isTemporalOperator(CTLNode) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
   function visitPlaceholderNode(CTLPlaceholderNode,Object) in line 211
      protection public
      18 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function getName() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses function getProps() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses variable i defined in sparsemv.m
      uses function printNode(CTLNode,StyledDocumentPrinter) defined in edu::toronto::cs::ctl::CTLStyledPrinter
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLTemplate.java
module edu::toronto::cs::ctl::CTLTemplate
   function matchCTLNode(CTLNode) in line 18
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function matchInternal(Map,CTLNode,CTLNode) defined in edu::toronto::cs::ctl::CTLTemplate
   function matchInternal(Map,CTLNode,CTLNode) in line 27
      protection public
      42 lines of code
      3 parameters
      7 conditional paths
      uses function getName() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses macro definition assert defined in util.h
   function CTLTemplate(CTLNode,Set) in line 12
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLTransitionNode.java
module edu::toronto::cs::ctl::CTLTransitionNode
   inherits from edu::toronto::cs::ctl::CTLMvSetNode
   function CTLTransitionNode(MvSet) in line 8
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLUnaryNode.java
module edu::toronto::cs::ctl::CTLUnaryNode
   inherits from edu::toronto::cs::ctl::CTLLeafNode
   abstract class
   function equals(Object) in line 49
      protection public
      21 lines of code
      1 parameters
      8 conditional paths
      uses variable o defined in visual.m
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses function CTLUnaryNode() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLNode
      uses variable i defined in sparsemv.m
   function getFairness() in line 85
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function getLeft() in line 36
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getRight() in line 32
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 71
      protection public
      12 lines of code
      0 parameters
      2 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses variable i defined in sparsemv.m
   function setLeft(CTLNode) in line 44
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function setRight(CTLNode) in line 40
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function CTLUnaryNode() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CTLUnaryNode(CTLNode) in line 19
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function CTLUnaryNode(CTLNode,CTLNode[]) in line 24
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLUnderNode.java
module edu::toronto::cs::ctl::CTLUnderNode
   inherits from edu::toronto::cs::ctl::CTLBinaryNode
   function toString() in line 17
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLUnderNode(CTLNode,CTLNode) in line 12
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLVisitor.java
module edu::toronto::cs::ctl::CTLVisitor
   function visit(CTLNode,Object) in line 10
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitAbstractNode(CTLAbstractNode,Object) in line 12
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitAFNode(CTLAFNode,Object) in line 14
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitAGNode(CTLAGNode,Object) in line 15
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitAndNode(CTLAndNode,Object) in line 22
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitARNode(CTLARNode,Object) in line 17
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitAtomPropNode(CTLAtomPropNode,Object) in line 23
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitAUiNode(CTLAUiNode,Object) in line 19
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitAUNode(CTLAUNode,Object) in line 16
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitAWNode(CTLAWNode,Object) in line 20
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitAXNode(CTLAXNode,Object) in line 21
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitConstantNode(CTLConstantNode,Object) in line 33
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitEFNode(CTLEFNode,Object) in line 24
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitEGNode(CTLEGNode,Object) in line 25
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitEqualsNode(CTLEqualsNode,Object) in line 30
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitERNode(CTLERNode,Object) in line 18
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitEUiNode(CTLEUiNode,Object) in line 27
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitEUNode(CTLEUNode,Object) in line 26
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitEWNode(CTLEWNode,Object) in line 28
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitEXNode(CTLEXNode,Object) in line 29
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitIffNode(CTLIffNode,Object) in line 31
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitImplNode(CTLImplNode,Object) in line 32
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitMvSetNode(CTLMvSetNode,Object) in line 34
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitNegNode(CTLNegNode,Object) in line 35
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitNode(CTLNode,Object) in line 36
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitOrNode(CTLOrNode,Object) in line 37
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitOverNode(CTLOverNode,Object) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitPlaceholderNode(CTLPlaceholderNode,Object) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitPreEXNode(CTLPreEXNode,Object) in line 39
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitUnderNode(CTLUnderNode,Object) in line 40
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/ctl/CTLVisitorDefaulterAncestor.java
module edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   inherits from edu::toronto::cs::ctl::CTLVisitor
   abstract class
   function visit(CTLNode,Object) in line 10
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function accept(CTLVisitor,Object) defined in edu::toronto::cs::ctl::CTLNode
   function visitAbstractNode(CTLAbstractNode,Object) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitAFNode(CTLAFNode,Object) in line 28
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitAGNode(CTLAGNode,Object) in line 30
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitAndNode(CTLAndNode,Object) in line 40
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitARNode(CTLARNode,Object) in line 46
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitAtomPropNode(CTLAtomPropNode,Object) in line 42
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitAUiNode(CTLAUiNode,Object) in line 34
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitAUNode(CTLAUNode,Object) in line 32
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitAWNode(CTLAWNode,Object) in line 36
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitAXNode(CTLAXNode,Object) in line 38
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitConstantNode(CTLConstantNode,Object) in line 70
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitCTLNode(CTLNode,Object) in line 17
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function visitEFNode(CTLEFNode,Object) in line 44
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitEGNode(CTLEGNode,Object) in line 54
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitEqualsNode(CTLEqualsNode,Object) in line 64
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitERNode(CTLERNode,Object) in line 50
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitEUiNode(CTLEUiNode,Object) in line 58
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitEUNode(CTLEUNode,Object) in line 56
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitEWNode(CTLEWNode,Object) in line 60
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitEXNode(CTLEXNode,Object) in line 62
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitIffNode(CTLIffNode,Object) in line 66
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitImplNode(CTLImplNode,Object) in line 68
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitMvSetNode(CTLMvSetNode,Object) in line 72
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitNegNode(CTLNegNode,Object) in line 74
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitNode(CTLNode,Object) in line 76
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitOrNode(CTLOrNode,Object) in line 78
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitOverNode(CTLOverNode,Object) in line 80
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitPlaceholderNode(CTLPlaceholderNode,Object) in line 86
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
      uses variable o defined in visual.m
   function visitPreEXNode(CTLPreEXNode,Object) in line 82
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function visitUnderNode(CTLUnderNode,Object) in line 84
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function visitCTLNode(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cudd/CuddAdd.java
module edu::toronto::cs::cudd::CuddAdd
   function addAndPtr(int,int) in line 73
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function addBot() in line 195
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addBotPtr() defined in edu::toronto::cs::cudd::CuddAdd
   function addBotPtr() in line 64
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function botPtr() defined in edu::toronto::cs::cudd::CuddAdd
      uses function addVarPtr(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addConstantPtr(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addAndPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addOrPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addEqPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addLeqPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addGeqPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addImplPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addPlusPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addNotPtr(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addPermutePtr(int,int[]) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addGetValue(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function existAbstract(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses variable v defined in visual.m
      uses function forallAbstract(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addCofactorPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses variable f defined in mvproduct.m
      uses function addItePtr(int,int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function ref(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function deref(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function recursiveDeref(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function isConstantPtr(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function checkZeroRef() defined in edu::toronto::cs::cudd::CuddAdd
      uses function gc() defined in edu::toronto::cs::cudd::CuddAdd
      uses function quit() defined in edu::toronto::cs::cudd::CuddAdd
      uses function info() defined in edu::toronto::cs::cudd::CuddAdd
      uses function printMintermPtr(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function reorder(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function dagSize(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function sharingSize(int[]) defined in edu::toronto::cs::cudd::CuddAdd
      uses function dumpDaVinciPtr(String,int) defined in edu::toronto::cs::cudd::CuddAdd
   function addCofactorPtr(int,int) in line 86
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function addConstant(int) in line 202
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addConstantPtr(int) defined in edu::toronto::cs::cudd::CuddAdd
   function addConstantPtr(int) in line 72
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function addEqPtr(int,int) in line 75
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function addGeqPtr(int,int) in line 77
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function addGetValue(int) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function addImplPtr(int,int) in line 78
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function addIte(int,ADD,ADD) in line 216
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addItePtr(int,int,int) defined in edu::toronto::cs::cudd::CuddAdd
   function addItePtr(int,int,int) in line 88
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function addLeqPtr(int,int) in line 76
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function addNotPtr(int) in line 80
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function addOrPtr(int,int) in line 74
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function addPermutePtr(int,int[]) in line 82
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function addPlusPtr(int,int) in line 79
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function addTop() in line 188
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addTopPtr() defined in edu::toronto::cs::cudd::CuddAdd
   function addTopPtr() in line 60
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function topPtr() defined in edu::toronto::cs::cudd::CuddAdd
   function addVar(int) in line 183
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addVarPtr(int) defined in edu::toronto::cs::cudd::CuddAdd
   function addVarPtr(int) in line 71
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function botPtr() in line 58
      1 lines of code
      0 parameters
      1 conditional paths
   function buildCube(int[]) in line 207
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function addTop() defined in edu::toronto::cs::cudd::CuddAdd
      uses variable i defined in sparsemv.m
      uses function and(ADD) defined in edu::toronto::cs::cudd::CuddAdd::ADD
      uses function addVar(int) defined in edu::toronto::cs::cudd::CuddAdd
   function buildPoint(int[],ADD) in line 222
      protection public
      16 lines of code
      2 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
      uses variable NO_VALUE defined in edu::toronto::cs::cudd::CuddAdd
      uses function addVar(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function not() defined in edu::toronto::cs::cudd::CuddAdd::ADD
      uses function and(ADD) defined in edu::toronto::cs::cudd::CuddAdd::ADD
   function checkZeroRef() in line 100
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function createADD(int) in line 303
      4 lines of code
      1 parameters
      1 conditional paths
   function cubeIterator(int) in line 308
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function dagSize(int) in line 117
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function deref(int) in line 92
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function dumpDaVinciPtr(String,int) in line 121
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function equals(Object) in line 291
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function CuddAdd(int,IAlgebra) defined in edu::toronto::cs::cudd::CuddAdd
   function existAbstract(int,int) in line 84
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function finalize() in line 136
      16 lines of code
      0 parameters
      4 conditional paths
      uses function checkZeroRef() defined in edu::toronto::cs::cudd::CuddAdd
      uses function quit() defined in edu::toronto::cs::cudd::CuddAdd
   function forallAbstract(int,int) in line 85
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function gc(boolean) in line 108
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function gc() in line 130
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getAlgebra() in line 154
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function info() in line 112
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function init(IntAlgebraWrapper,int,int,int) in line 47
      1 lines of code
      4 parameters
      1 conditional paths
   function isConstantPtr(int) in line 95
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function main(String[]) in line 245
      protection public
      28 lines of code
      1 parameters
      3 conditional paths
      uses function CuddAdd(int,IAlgebra) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addTop() defined in edu::toronto::cs::cudd::CuddAdd
      uses function addVar(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addBot() defined in edu::toronto::cs::cudd::CuddAdd
      uses function and(ADD) defined in edu::toronto::cs::cudd::CuddAdd::ADD
      uses function addConstant(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function getAlgebra() defined in edu::toronto::cs::cudd::CuddAdd
      uses function getValue(String) defined in edu::toronto::cs::algebra::IAlgebra
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function cubeIterator() defined in edu::toronto::cs::cudd::CuddAdd::ADD
      uses variable i defined in sparsemv.m
   function printMintermPtr(int) in line 114
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function quit() in line 109
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function recursiveDeref(int) in line 93
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ref(int) in line 91
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function reorder(int) in line 116
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function sharingSize(int[]) in line 118
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function topPtr() in line 54
      1 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 240
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CuddAdd(int,IAlgebra) in line 33
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function init(IntAlgebraWrapper,int,int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function topPtr() defined in edu::toronto::cs::cudd::CuddAdd
      uses function botPtr() defined in edu::toronto::cs::cudd::CuddAdd
   variable NO_VALUE in line 13
      protection public
module edu::toronto::cs::cudd::CuddAdd::ADD
   function and(ADD) in line 334
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addAndPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses variable v defined in visual.m
   function cofactor(ADD) in line 385
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addCofactorPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
   function cubeIterator() in line 323
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function cubeIterator(int) defined in edu::toronto::cs::cudd::CuddAdd
   function dagSize() in line 435
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function dagSize(int) defined in edu::toronto::cs::cudd::CuddAdd
   function eq(ADD) in line 354
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addEqPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses variable v defined in visual.m
   function equals(Object) in line 420
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function equals(ADD) in line 425
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function existAbstract(ADD) in line 372
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function existAbstract(int,int) defined in edu::toronto::cs::cudd::CuddAdd
   function finalize() in line 412
      6 lines of code
      0 parameters
      2 conditional paths
      uses function recursiveDeref(int) defined in edu::toronto::cs::cudd::CuddAdd
   function forallAbstract(ADD) in line 377
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function forallAbstract(int,int) defined in edu::toronto::cs::cudd::CuddAdd
   function geq(ADD) in line 359
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addGeqPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses variable v defined in visual.m
   function getValue() in line 430
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function addGetValue(int) defined in edu::toronto::cs::cudd::CuddAdd
   function hashCode() in line 440
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable primes defined in edu::toronto::cs::util::Primes
   function impl(ADD) in line 344
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addImplPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses variable v defined in visual.m
   function isConstant() in line 328
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function isConstantPtr(int) defined in edu::toronto::cs::cudd::CuddAdd
   function leq(ADD) in line 363
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addLeqPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses variable v defined in visual.m
   function not() in line 349
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addNotPtr(int) defined in edu::toronto::cs::cudd::CuddAdd
   function or(ADD) in line 339
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addOrPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses variable v defined in visual.m
   function permuteArgs(int[]) in line 390
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addPermutePtr(int,int[]) defined in edu::toronto::cs::cudd::CuddAdd
   function plus(ADD) in line 367
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createADD(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addPlusPtr(int,int) defined in edu::toronto::cs::cudd::CuddAdd
      uses variable v defined in visual.m
   function toString() in line 396
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function toString() defined in edu::toronto::cs::cudd::CuddAdd
   function ADD(int) in line 318
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::cudd::CuddAdd::CubeIterator
   inherits from java::util::Iterator
   function finalize() in line 490
      8 lines of code
      0 parameters
      1 conditional paths
   function firstCube() in line 500
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function freeGen() in line 502
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function hasNext() in line 475
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function next() in line 480
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
   function nextCube() in line 501
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function remove() in line 470
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CubeIterator(int) in line 457
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/cxmlparser/CXMLParser.java
module edu::toronto::cs::cxmlparser::CXMLParser
   inherits from org::xml::sax::helpers::DefaultHandler
   function buildFuncDecl(String,int,Expr) in line 254
      10 lines of code
      3 parameters
      45 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable globalContext defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses variable GLOBAL defined in edu::toronto::cs::expr::CGlobalOp
      uses variable curTypeUID defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses variable waiting defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses variable recordContext defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses function curVarContext() defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function strExpr(String) defined in edu::toronto::cs::expr::ExprFactory
      uses variable cfg defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses variable funcContext defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses variable TUPLE defined in edu::toronto::cs::expr::TupleOp
      uses function getBBSafe(int) defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses variable bb defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function isLinked() defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
      uses function linkAfter(BasicBlock) defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
      uses function addEdge(BasicBlock,BasicBlock,boolean,boolean) defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses macro definition assert defined in util.h
      uses variable DEFAULT_CASE defined in edu::toronto::cs::expr::CSwitchExprOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses function setStmts(List< Expr >) defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
      uses function args() defined in edu::toronto::cs::expr::Expr
      uses variable parseStack defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function removeCurrent() defined in edu::toronto::cs::cxmlparser::CXMLParser::StackOfList
      uses function addLabel(Expr,BasicBlock) defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function top() defined in edu::toronto::cs::cxmlparser::CXMLParser::StackOfList
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function curVarContext() in line 240
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable funcContext defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses variable globalContext defined in edu::toronto::cs::cxmlparser::CXMLParser
   function debugDump() in line 679
      12 lines of code
      0 parameters
      1 conditional paths
      uses function print(PrintWriter) defined in edu::toronto::cs::clang::CProgram
   function endDocument() in line 152
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses variable parseStack defined in edu::toronto::cs::cxmlparser::CXMLParser
   function endElement(String,String,String) in line 186
      protection public
      28 lines of code
      3 parameters
      3 conditional paths
      uses function tagName(String,String) defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses variable waiting defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses variable parseStack defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function pop() defined in edu::toronto::cs::cxmlparser::CXMLParser::StackOfList
      uses function top() defined in edu::toronto::cs::cxmlparser::CXMLParser::StackOfList
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
   function getCProgram() in line 593
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function initOps() in line 603
      75 lines of code
      0 parameters
      1 conditional paths
      uses variable ABS defined in edu::toronto::cs::expr::NumericOp
      uses variable MINUS defined in edu::toronto::cs::expr::NumericOp
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
      uses variable MULT defined in edu::toronto::cs::expr::NumericOp
      uses variable MOD defined in edu::toronto::cs::expr::NumericOp
      uses variable DIV defined in edu::toronto::cs::expr::NumericOp
      uses variable ADDR_OF defined in edu::toronto::cs::expr::CExprOp
      uses variable ARRAY_REF defined in edu::toronto::cs::expr::CExprOp
      uses variable COMPONENT_REF defined in edu::toronto::cs::expr::CExprOp
      uses variable REF defined in edu::toronto::cs::expr::CExprOp
      uses variable CALL_EXPR defined in edu::toronto::cs::expr::CCallExprOp
      uses variable MODIFY_EXPR defined in edu::toronto::cs::expr::CStmtOp
      uses variable COND_EXPR defined in edu::toronto::cs::expr::CStmtOp
      uses variable GOTO defined in edu::toronto::cs::expr::CStmtOp
      uses variable LABEL_EXPR defined in edu::toronto::cs::expr::CStmtOp
      uses variable RETURN defined in edu::toronto::cs::expr::CStmtOp
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses variable NEQ defined in edu::toronto::cs::expr::ComparisonOp
      uses variable LT defined in edu::toronto::cs::expr::ComparisonOp
      uses variable LEQ defined in edu::toronto::cs::expr::ComparisonOp
      uses variable GT defined in edu::toronto::cs::expr::ComparisonOp
      uses variable GEQ defined in edu::toronto::cs::expr::ComparisonOp
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
      uses variable AND defined in edu::toronto::cs::expr::BoolOp
      uses variable XOR defined in edu::toronto::cs::expr::BoolOp
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses variable OR defined in edu::toronto::cs::expr::BitOp
      uses variable AND defined in edu::toronto::cs::expr::BitOp
      uses variable XOR defined in edu::toronto::cs::expr::BitOp
      uses variable NOT defined in edu::toronto::cs::expr::BitOp
      uses variable LSHIFT defined in edu::toronto::cs::expr::BitOp
      uses variable RSHIFT defined in edu::toronto::cs::expr::BitOp
      uses variable SWITCH_EXPR defined in edu::toronto::cs::expr::CSwitchExprOp
      uses variable SWITCH_COND defined in edu::toronto::cs::expr::CSwitchExprOp
      uses variable SWITCH_BODY defined in edu::toronto::cs::expr::CSwitchExprOp
      uses variable CASE_LABEL_EXPR defined in edu::toronto::cs::expr::CSwitchExprOp
      uses variable MEM_REF defined in edu::toronto::cs::expr::CMemRefOp
      uses variable SYMBOL defined in edu::toronto::cs::expr::CMemRefOp
      uses variable BASE defined in edu::toronto::cs::expr::CMemRefOp
      uses variable INDEX defined in edu::toronto::cs::expr::CMemRefOp
      uses variable STEP defined in edu::toronto::cs::expr::CMemRefOp
      uses variable OFFSET defined in edu::toronto::cs::expr::CMemRefOp
      uses variable ORIGINAL defined in edu::toronto::cs::expr::CMemRefOp
      uses variable UNEQ defined in edu::toronto::cs::expr::CExprOp
      uses variable UNLT defined in edu::toronto::cs::expr::CExprOp
      uses variable UNLEQ defined in edu::toronto::cs::expr::CExprOp
      uses variable UNGT defined in edu::toronto::cs::expr::CExprOp
      uses variable UNGEQ defined in edu::toronto::cs::expr::CExprOp
      uses variable LTGT defined in edu::toronto::cs::expr::CExprOp
      uses variable PREDEC defined in edu::toronto::cs::expr::CExprOp
      uses variable PREINCR defined in edu::toronto::cs::expr::CExprOp
      uses variable POSTDEC defined in edu::toronto::cs::expr::CExprOp
      uses variable POSTINC defined in edu::toronto::cs::expr::CExprOp
      uses variable MIN defined in edu::toronto::cs::expr::CExprOp
      uses variable MAX defined in edu::toronto::cs::expr::CExprOp
      uses variable VA_ARG defined in edu::toronto::cs::expr::CExprOp
      uses variable ASM defined in edu::toronto::cs::expr::CExprOp
   function main(String[]) in line 725
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function CXMLParser(ExprFactory) defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function parse(File) defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function debugDump() defined in edu::toronto::cs::cxmlparser::CXMLParser
   function parse(File) in line 700
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function parse(String) in line 717
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function parse(File) defined in edu::toronto::cs::cxmlparser::CXMLParser
   function startDocument() in line 144
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable parseStack defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function pushEmpty() defined in edu::toronto::cs::cxmlparser::CXMLParser::StackOfList
   function startElement(String,String,String,Attributes) in line 163
      protection public
      22 lines of code
      4 parameters
      3 conditional paths
      uses function tagName(String,String) defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses variable parseStack defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function top() defined in edu::toronto::cs::cxmlparser::CXMLParser::StackOfList
      uses variable waiting defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function pushEmpty() defined in edu::toronto::cs::cxmlparser::CXMLParser::StackOfList
   function tagName(String,String) in line 228
      5 lines of code
      2 parameters
      1 conditional paths
   function CXMLParser(ExprFactory) in line 123
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable globalContext defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses variable funcContext defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses variable recordContext defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function initOps() defined in edu::toronto::cs::cxmlparser::CXMLParser
   variable bb in line 108
   variable cfg in line 103
   variable curTypeUID in line 98
   variable funcContext in line 114
   variable globalContext in line 113
   variable parseStack in line 86
   variable recordContext in line 115
   variable waiting in line 92
module edu::toronto::cs::cxmlparser::CXMLParser::StackOfList
   inherits from java::util::LinkedList
   function pop() in line 766
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function push(LinkedList< T >) in line 756
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function pushEmpty() in line 751
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function removeCurrent() in line 771
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function top() in line 761
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function StackOfList() in line 746
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/davinci/DaVinciGraph.java
module edu::toronto::cs::davinci::DaVinciGraph
   function main(String[]) in line 373
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function DaVinciGraph() defined in edu::toronto::cs::davinci::DaVinciGraph
      uses function node() defined in edu::toronto::cs::davinci::DaVinciGraph
      uses function label(String) defined in edu::toronto::cs::davinci::DaVinciGraph::FullNode
      uses function labeledEdge(Node,String) defined in edu::toronto::cs::davinci::DaVinciGraph::FullNode
      uses function ref(FullNode) defined in edu::toronto::cs::davinci::DaVinciGraph
   function node() in line 61
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function pad(int,String,char) in line 336
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses variable s defined in visual.m
      uses function length() defined in sparser.m
      uses variable i defined in sparsemv.m
   function ref(FullNode) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function node() defined in edu::toronto::cs::davinci::DaVinciGraph
   function toString() in line 31
      protection public
      4 lines of code
      0 parameters
      3 conditional paths
      uses variable s defined in visual.m
   function translateColour(Object) in line 350
      protection public
      21 lines of code
      1 parameters
      2 conditional paths
      uses function pad(int,String,char) defined in edu::toronto::cs::davinci::DaVinciGraph
   function DaVinciGraph() in line 24
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::davinci::DaVinciGraph::Term
   abstract class
   function attr(String,String) in line 117
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function equals(Object) in line 107
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function getId() defined in edu::toronto::cs::davinci::DaVinciGraph::Term
   function getId() in line 98
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 112
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setId(String) in line 102
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function Term(String,String) in line 91
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::davinci::DaVinciGraph::Node
module edu::toronto::cs::davinci::DaVinciGraph::FullNode
   inherits from edu::toronto::cs::davinci::DaVinciGraph::Term
   inherits from edu::toronto::cs::davinci::DaVinciGraph::Node
   function border(String) in line 194
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
   function box(String) in line 190
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
   function color(String) in line 177
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
   function edge(Node) in line 141
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function ref(FullNode) defined in edu::toronto::cs::davinci::DaVinciGraph
   function edge(RefNode) in line 149
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function edge(RefNode,String) in line 156
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function fontFamily(String) in line 181
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
   function fontStyle(String) in line 185
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
   function hidden(boolean) in line 199
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
   function label(String) in line 172
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
   function labeledEdge(Node,String) in line 161
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function toString() in line 209
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function FullNode(String,String) in line 134
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::davinci::DaVinciGraph::RefNode
   inherits from edu::toronto::cs::davinci::DaVinciGraph::Node
   function toString() in line 225
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function node() defined in edu::toronto::cs::davinci::DaVinciGraph
      uses function getId() defined in edu::toronto::cs::davinci::DaVinciGraph::Term
   function RefNode(FullNode) in line 221
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function node() defined in edu::toronto::cs::davinci::DaVinciGraph
module edu::toronto::cs::davinci::DaVinciGraph::Edge
   inherits from edu::toronto::cs::davinci::DaVinciGraph::Term
   function color(String) in line 243
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
      uses variable v defined in visual.m
   function dir(String) in line 251
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
      uses variable v defined in visual.m
   function head(String) in line 255
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
      uses variable v defined in visual.m
   function lineType(String) in line 247
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
      uses variable v defined in visual.m
   function toString() in line 261
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function Edge(String,String,Node) in line 237
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
module edu::toronto::cs::davinci::DaVinciGraph::LabeledEdge
   inherits from edu::toronto::cs::davinci::DaVinciGraph::Edge
   function attr(String,String) in line 293
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function attr(String,String) defined in edu::toronto::cs::davinci::DaVinciGraph::Term
   function dir(String) in line 306
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function head(String) in line 300
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function head(String) defined in edu::toronto::cs::davinci::DaVinciGraph::Edge
      uses variable v defined in visual.m
   function label(String) in line 286
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function label(String) defined in edu::toronto::cs::davinci::DaVinciGraph::FullNode
      uses variable v defined in visual.m
   function toString() in line 312
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function toString() defined in edu::toronto::cs::davinci::DaVinciGraph::Edge
   function LabeledEdge(String,String,Node) in line 276
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function border(String) defined in edu::toronto::cs::davinci::DaVinciGraph::FullNode
      uses function dir(String) defined in edu::toronto::cs::davinci::DaVinciGraph::Edge
      uses function edge(Node) defined in edu::toronto::cs::davinci::DaVinciGraph::FullNode
module edu::toronto::cs::davinci::DaVinciGraph::Attribute
   function toString() in line 330
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function Attribute(String,String) in line 325
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/AbstractExpr.java
module edu::toronto::cs::expr::AbstractExpr
   inherits from edu::toronto::cs::expr::Expr
   abstract class
   function binApply(Expr,Expr) in line 27
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function naryApply(List) defined in edu::toronto::cs::expr::AbstractExpr
   function contains(Expr) in line 36
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function contains(Expr) defined in edu::toronto::cs::expr::Expr
   function naryApply(List) in line 31
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function nullaryApply() in line 17
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function naryApply(List) defined in edu::toronto::cs::expr::AbstractExpr
      uses variable EMPTY_EXPR_ARRAY defined in edu::toronto::cs::expr::Expr
   function unaryApply(Expr) in line 22
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function naryApply(List) defined in edu::toronto::cs::expr::AbstractExpr
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/AbstractOperator.java
module edu::toronto::cs::expr::AbstractOperator
   inherits from edu::toronto::cs::expr::Operator
   abstract class
   function arity() in line 26
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function equals(Object) in line 41
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function AbstractOperator(String) defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   function isWellFormed(Expr[]) in line 21
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   function name() in line 31
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 36
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   function AbstractOperator(String) in line 9
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function AbstractOperator(String,int) in line 14
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/ArrayOp.java
module edu::toronto::cs::expr::ArrayOp
   inherits from edu::toronto::cs::expr::NamedOp
   function getArray(Expr) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getIndex(Expr) in line 67
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getUpdExpr(Expr) in line 91
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isArraySel(Expr) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable ARRAY_SEL defined in edu::toronto::cs::expr::ArrayOp
   function isArrayUpd(Expr) in line 79
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable ARRAY_UPD defined in edu::toronto::cs::expr::ArrayOp
   function sel(Expr,Expr) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable ARRAY_SEL defined in edu::toronto::cs::expr::ArrayOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function sel(Expr,int) in line 118
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable ARRAY_SEL defined in edu::toronto::cs::expr::ArrayOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function upd(Expr,Expr,Expr) in line 132
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable ARRAY_UPD defined in edu::toronto::cs::expr::ArrayOp
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
      uses variable v defined in visual.m
   function ArrayOp(String,int) in line 31
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable ARRAY_SEL in line 22
      protection public
   variable ARRAY_UPD in line 29
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/BiLatticeOp.java
module edu::toronto::cs::expr::BiLatticeOp
   inherits from edu::toronto::cs::expr::NamedOp
   function BiLatticeOp(String,int) in line 24
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable IAND in line 14
      protection public
   variable IBOT in line 8
      protection public
   variable IGEQ in line 22
      protection public
   variable ILEQ in line 21
      protection public
   variable INOT in line 16
      protection public
   variable IOR in line 15
      protection public
   variable ITOP in line 7
      protection public
   variable TAND in line 10
      protection public
   variable TBOT in line 6
      protection public
   variable TGEQ in line 19
      protection public
   variable TLEQ in line 18
      protection public
   variable TNOT in line 12
      protection public
   variable TOR in line 11
      protection public
   variable TTOP in line 5
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/BindOp.java
module edu::toronto::cs::expr::BindOp
   inherits from edu::toronto::cs::expr::NamedOp
   function bind(Expr,Expr) in line 35
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses variable BIND defined in edu::toronto::cs::expr::BindOp
      uses function type(Expr) defined in edu::toronto::cs::expr::BindOp
   function isBind(Expr) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable BIND defined in edu::toronto::cs::expr::BindOp
   function name(Expr) in line 20
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function type(Expr) in line 25
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function value(Expr) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function BindOp(String,int) in line 15
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable BIND in line 13
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/BitOp.java
module edu::toronto::cs::expr::BitOp
   inherits from edu::toronto::cs::expr::NamedOp
   function BitOp(String,int) in line 15
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable AND in line 10
      protection public
   variable LSHIFT in line 12
      protection public
   variable NOT in line 11
      protection public
   variable OR in line 8
      protection public
   variable RSHIFT in line 13
      protection public
   variable XOR in line 9
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/BoolOp.java
module edu::toronto::cs::expr::BoolOp
   inherits from edu::toronto::cs::expr::NamedOp
   function and(Expr,Expr) in line 129
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable AND defined in edu::toronto::cs::expr::BoolOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function and(List< Expr >) in line 140
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses variable AND defined in edu::toronto::cs::expr::BoolOp
   function iff(Expr,Expr) in line 202
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable IFF defined in edu::toronto::cs::expr::BoolOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function impl(Expr,Expr) in line 190
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable IMPL defined in edu::toronto::cs::expr::BoolOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function isAnd(Expr) in line 83
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable AND defined in edu::toronto::cs::expr::BoolOp
   function isFalse(Expr) in line 62
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable FALSE defined in edu::toronto::cs::expr::BoolOp
   function isImpl(Expr) in line 103
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable IMPL defined in edu::toronto::cs::expr::BoolOp
   function isLpmi(Expr) in line 113
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable LPMI defined in edu::toronto::cs::expr::BoolOp
   function isNot(Expr) in line 73
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
   function isOr(Expr) in line 93
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
   function isTrue(Expr) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable TRUE defined in edu::toronto::cs::expr::BoolOp
   function labs(Expr) in line 280
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function land(Expr,Expr) in line 244
      protection public
      10 lines of code
      2 parameters
      5 conditional paths
      uses function isTrue(Expr) defined in edu::toronto::cs::expr::BoolOp
      uses function isFalse(Expr) defined in edu::toronto::cs::expr::BoolOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function and(Expr,Expr) defined in edu::toronto::cs::expr::BoolOp
   function lnot(Expr) in line 228
      protection public
      7 lines of code
      1 parameters
      4 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function isFalse(Expr) defined in edu::toronto::cs::expr::BoolOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function isTrue(Expr) defined in edu::toronto::cs::expr::BoolOp
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function not(Expr) defined in edu::toronto::cs::expr::BoolOp
   function lor(Expr,Expr) in line 263
      protection public
      10 lines of code
      2 parameters
      5 conditional paths
      uses function isFalse(Expr) defined in edu::toronto::cs::expr::BoolOp
      uses function isTrue(Expr) defined in edu::toronto::cs::expr::BoolOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function or(Expr,Expr) defined in edu::toronto::cs::expr::BoolOp
   function lpmi(Expr,Expr) in line 214
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable LPMI defined in edu::toronto::cs::expr::BoolOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function not(Expr) in line 178
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
   function or(Expr,Expr) in line 154
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function or(List< Expr >) in line 165
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
   function terms(Expr,Set< Expr >) in line 297
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function BoolOp(String,int) defined in edu::toronto::cs::expr::BoolOp
      uses variable s defined in visual.m
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function BoolOp(String,int) in line 39
      4 lines of code
      2 parameters
      1 conditional paths
   variable AND in line 30
      protection public
   variable FALSE in line 28
      protection public
   variable IFF in line 35
      protection public
   variable IMPL in line 34
      protection public
   variable LPMI in line 36
      protection public
   variable NOT in line 33
      protection public
   variable OR in line 31
      protection public
   variable ORN in line 37
      protection public
   variable TRUE in line 27
      protection public
   variable XOR in line 32
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CArrayTypeOp.java
module edu::toronto::cs::expr::CArrayTypeOp
   inherits from edu::toronto::cs::expr::CTypeOp
   inherits from edu::toronto::cs::expr::PrefixOp
   function arrayRange(Expr) in line 22
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function arraySize(Expr) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isCArrayType(Expr) in line 17
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CArrayTypeOp(int) defined in edu::toronto::cs::expr::CArrayTypeOp
   function CArrayTypeOp(int) in line 12
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CBasicBlockOp.java
module edu::toronto::cs::expr::CBasicBlockOp
   inherits from edu::toronto::cs::expr::AbstractOperator
   function getId(Expr) in line 25
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function getStmtList(Expr) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getSuccList(Expr) in line 35
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isCBasicBlock(Expr) in line 20
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CBasicBlockOp(Integer) defined in edu::toronto::cs::expr::CBasicBlockOp
   function CBasicBlockOp(Integer) in line 14
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CCallExprOp.java
module edu::toronto::cs::expr::CCallExprOp
   inherits from edu::toronto::cs::expr::CStmtOp
   function getArgs(Expr) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getCallee(Expr) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isCCallExpr(Expr) in line 19
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable CALL_EXPR defined in edu::toronto::cs::expr::CCallExprOp
   function CCallExprOp(String,int) in line 14
      4 lines of code
      2 parameters
      1 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable CALL_EXPR in line 12
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CContextOp.java
module edu::toronto::cs::expr::CContextOp
   inherits from edu::toronto::cs::expr::NonCanonOp
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CDeclaredTypeOp.java
module edu::toronto::cs::expr::CDeclaredTypeOp
   inherits from edu::toronto::cs::expr::CTypeOp
   function isCDeclaredType(Expr) in line 16
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CDeclaredTypeOp(int) defined in edu::toronto::cs::expr::CDeclaredTypeOp
   function typeName(Expr) in line 22
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function CDeclaredTypeOp(int) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CDeclOp.java
module edu::toronto::cs::expr::CDeclOp
   inherits from edu::toronto::cs::expr::AbstractOperator
   abstract class
   function declContext(Expr) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function declUID(Expr) in line 34
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function equals(Object) in line 39
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function CDeclOp(String,int,int,Expr) defined in edu::toronto::cs::expr::CDeclOp
   function hashCode() in line 46
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function isDecl(Expr) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CDeclOp(String,int,int,Expr) defined in edu::toronto::cs::expr::CDeclOp
   function CDeclOp(String,int,int,Expr) in line 16
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CExprOp.java
module edu::toronto::cs::expr::CExprOp
   inherits from edu::toronto::cs::expr::NamedOp
   function CExprOp(String,int) in line 43
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable ADDR_OF in line 10
      protection public
   variable ARRAY_REF in line 11
      protection public
   variable ASM in line 41
      protection public
   variable CEIL_DIV in line 18
      protection public
   variable COMPONENT_REF in line 12
      protection public
   variable EXACT_DIV in line 21
      protection public
   variable FLOOR_DIV in line 19
      protection public
   variable LTGT in line 29
      protection public
   variable MAX in line 37
      protection public
   variable MIN in line 36
      protection public
   variable ORDERED in line 15
      protection public
   variable POSTDEC in line 33
      protection public
   variable POSTINC in line 34
      protection public
   variable PREDEC in line 31
      protection public
   variable PREINCR in line 32
      protection public
   variable REF in line 13
      protection public
   variable ROUND_DIV in line 20
      protection public
   variable UNEQ in line 23
      protection public
   variable UNGEQ in line 27
      protection public
   variable UNGT in line 26
      protection public
   variable UNLEQ in line 25
      protection public
   variable UNLT in line 24
      protection public
   variable UNORDERED in line 16
      protection public
   variable VA_ARG in line 39
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CFieldDeclOp.java
module edu::toronto::cs::expr::CFieldDeclOp
   inherits from edu::toronto::cs::expr::CTypedDeclOp
   function isCFieldDecl(Expr) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CFieldDeclOp(String,int,Expr) defined in edu::toronto::cs::expr::CFieldDeclOp
   function CFieldDeclOp(String,int,Expr) in line 8
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CFunctionDeclOp.java
module edu::toronto::cs::expr::CFunctionDeclOp
   inherits from edu::toronto::cs::expr::CNamedDeclOp
   inherits from edu::toronto::cs::expr::CContextOp
   function args(Expr) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function body(Expr) in line 37
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isCFunctionDecl(Expr) in line 45
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CFunctionDeclOp(String,int,Expr) defined in edu::toronto::cs::expr::CFunctionDeclOp
   function locals(Expr) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function resultDecl(Expr) in line 22
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function CFunctionDeclOp(String,int,Expr) in line 17
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CFunctionOp.java
module edu::toronto::cs::expr::CFunctionOp
   inherits from edu::toronto::cs::expr::CLocOp
   function isCFunction(Expr) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CFunctionOp(String,Integer) defined in edu::toronto::cs::expr::CFunctionOp
   function CFunctionOp(String,Integer) in line 8
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CGlobalOp.java
module edu::toronto::cs::expr::CGlobalOp
   inherits from edu::toronto::cs::expr::NamedOp
   inherits from edu::toronto::cs::expr::CContextOp
   function isCGlobal(Expr) in line 20
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable GLOBAL defined in edu::toronto::cs::expr::CGlobalOp
   variable GLOBAL in line 13
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/ChoiceOp.java
module edu::toronto::cs::expr::ChoiceOp
   inherits from edu::toronto::cs::expr::NamedOp
   function choice(Expr,Expr) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable CH defined in edu::toronto::cs::expr::ChoiceOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function isChoice(Expr) in line 23
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable CH defined in edu::toronto::cs::expr::ChoiceOp
   function lchoice(Expr,Expr) in line 33
      protection public
      14 lines of code
      2 parameters
      4 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses macro definition TRUE defined in cudd.h
      uses macro definition FALSE defined in cudd.h
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function choice(Expr,Expr) defined in edu::toronto::cs::expr::ChoiceOp
   function lgetF(Expr) in line 56
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function isChoice(Expr) defined in edu::toronto::cs::expr::ChoiceOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function lgetT(Expr) in line 48
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function isChoice(Expr) defined in edu::toronto::cs::expr::ChoiceOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function ChoiceOp(String,int) in line 18
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable CH in line 16
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILAssignOp.java
module edu::toronto::cs::expr::CILAssignOp
   inherits from edu::toronto::cs::expr::NamedOp
   function assign(Expr,Expr) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses variable ASSIGN defined in edu::toronto::cs::expr::CILAssignOp
   function assign(Expr,int) in line 33
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function assign(Expr,Expr) defined in edu::toronto::cs::expr::CILAssignOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
   function isAssign(Expr) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CILAssignOp(String,int) defined in edu::toronto::cs::expr::CILAssignOp
   function CILAssignOp(String,int) in line 11
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable ASSIGN in line 9
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILBitwiseOp.java
module edu::toronto::cs::expr::CILBitwiseOp
   inherits from edu::toronto::cs::expr::NamedOp
   function CILBitwiseOp(String,int) in line 11
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable BAND in line 5
      protection public
   variable BOR in line 6
      protection public
   variable BXOR in line 7
      protection public
   variable LSHIFT in line 8
      protection public
   variable RSHIFT in line 9
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILBreakOp.java
module edu::toronto::cs::expr::CILBreakOp
   inherits from edu::toronto::cs::expr::NamedOp
   function CILBreakOp(String,int) in line 7
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable BREAK in line 5
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILDeclarationOp.java
module edu::toronto::cs::expr::CILDeclarationOp
   inherits from edu::toronto::cs::expr::NamedOp
   function arrayDim(Expr) in line 97
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses function isArrayDecl(Expr) defined in edu::toronto::cs::expr::CILDeclarationOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getBaseType(Expr) in line 52
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function arity() defined in edu::toronto::cs::expr::Expr
   function getDeclName(Expr) in line 39
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getDeclNameExpr(Expr) defined in edu::toronto::cs::expr::CILDeclarationOp
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function name() defined in edu::toronto::cs::expr::Operator
   function getDeclNameExpr(Expr) in line 44
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function isNamedDeclaration(Expr) defined in edu::toronto::cs::expr::CILDeclarationOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getNumPtrs(Expr) in line 64
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isArrayDecl(Expr) in line 78
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isDecl(Expr) defined in edu::toronto::cs::expr::CILDeclarationOp
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isDecl(Expr) in line 103
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable DECL defined in edu::toronto::cs::expr::CILDeclarationOp
   function isNamedDeclaration(Expr) in line 32
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isDecl(Expr) defined in edu::toronto::cs::expr::CILDeclarationOp
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function CILDeclarationOp(String,int) in line 27
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable DECL in line 22
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILDeclarationPointerOp.java
module edu::toronto::cs::expr::CILDeclarationPointerOp
   inherits from edu::toronto::cs::expr::NullaryOperator
   function getNumPtrs(Expr) in line 12
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isPtr(Expr) defined in edu::toronto::cs::expr::CILDeclarationPointerOp
      uses function op() defined in edu::toronto::cs::expr::Expr
   function isPtr(Expr) in line 18
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CILDeclarationPointerOp(int) defined in edu::toronto::cs::expr::CILDeclarationPointerOp
   function name() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CILDeclarationPointerOp(int) in line 7
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILEmptyStmtOp.java
module edu::toronto::cs::expr::CILEmptyStmtOp
   inherits from edu::toronto::cs::expr::NullaryOperator
   function name() in line 11
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CILEmptyStmtOp() in line 7
      3 lines of code
      0 parameters
      1 conditional paths
   variable EMPTY in line 5
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILEnumOp.java
module edu::toronto::cs::expr::CILEnumOp
   inherits from edu::toronto::cs::expr::NamedOp
   function CILEnumOp(String,int) in line 9
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable ENUM in line 6
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILFunctionCallOp.java
module edu::toronto::cs::expr::CILFunctionCallOp
   inherits from edu::toronto::cs::expr::NamedOp
   function getArguments(Expr) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getCallIndex(Expr) in line 39
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getCallIndexExpr(Expr) in line 44
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getName(Expr) in line 19
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   function getReturnVarName(Expr) in line 34
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   function hasArguments(Expr) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isCILFunctionCall(Expr) in line 49
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable FCALL defined in edu::toronto::cs::expr::CILFunctionCallOp
   function CILFunctionCallOp(String,int) in line 14
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable FCALL in line 11
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILFunctionDefOp.java
module edu::toronto::cs::expr::CILFunctionDefOp
   inherits from edu::toronto::cs::expr::NamedOp
   function function_def(Expr   []) in line 144
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable FUNCTION_DEF defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
   function getBody(Expr) in line 95
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getFunctionName(Expr) in line 35
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function getFunctionNameFromSig(Expr) defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getFunctionNameFromSig(Expr) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   function getLocalDecls(Expr) in line 88
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getNumCallSites(Expr) in line 102
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getParameterDecls(Expr) in line 47
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getParameterNames(Expr) in line 73
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function getParameterDecls(Expr) defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable LIST defined in edu::toronto::cs::expr::CILListOp
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
   function getReturnType(Expr) in line 28
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function hasParameters(Expr) in line 58
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isCILFunctionDef(Expr) in line 151
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable FUNCTION_DEF defined in edu::toronto::cs::expr::CILFunctionDefOp
   function isNonVoid(Expr) in line 109
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function args() defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable VOID defined in edu::toronto::cs::expr::CILTypeSpecifierOp
   function verify(Expr) in line 131
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable FUNCTION_DEF defined in edu::toronto::cs::expr::CILFunctionDefOp
   function CILFunctionDefOp(String,int) in line 21
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable FUNCTION_DEF in line 16
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILGotoOp.java
module edu::toronto::cs::expr::CILGotoOp
   inherits from edu::toronto::cs::expr::NamedOp
   function getTargetLabel(Expr) in line 15
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   function isCILGoto(Expr) in line 20
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable GOTO defined in edu::toronto::cs::expr::CILGotoOp
   function CILGotoOp(String,int) in line 10
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable GOTO in line 8
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILIfStmtOp.java
module edu::toronto::cs::expr::CILIfStmtOp
   inherits from edu::toronto::cs::expr::NamedOp
   function getCond(Expr) in line 18
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILIfStmtOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getElse(Expr) in line 32
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILIfStmtOp
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getThen(Expr) in line 25
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILIfStmtOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function verify(Expr) in line 42
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable IF_THEN_ELSE defined in edu::toronto::cs::expr::CILIfStmtOp
   function CILIfStmtOp(String,int) in line 13
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable IF_THEN_ELSE in line 10
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILIndirectionOp.java
module edu::toronto::cs::expr::CILIndirectionOp
   inherits from edu::toronto::cs::expr::NamedOp
   function addrOf(Expr) in line 91
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
   function arrow(Expr,Expr) in line 80
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function deref(Expr) in line 44
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable DEREF defined in edu::toronto::cs::expr::CILIndirectionOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
   function dot(Expr,Expr) in line 56
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function dot(Expr,int) in line 68
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function dot(Expr,Expr) defined in edu::toronto::cs::expr::CILIndirectionOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function isAddrOf(Expr) in line 16
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function isArrow(Expr) in line 26
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function isDeref(Expr) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable DEREF defined in edu::toronto::cs::expr::CILIndirectionOp
   function isDot(Expr) in line 21
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function CILIndirectionOp(String,int) in line 31
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable DEREF in line 6
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILLabelledStmtOp.java
module edu::toronto::cs::expr::CILLabelledStmtOp
   inherits from edu::toronto::cs::expr::NamedOp
   function getLabel(Expr) in line 17
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILLabelledStmtOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function name() defined in edu::toronto::cs::expr::Operator
   function getStmt(Expr) in line 24
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILLabelledStmtOp
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function verify(Expr) in line 34
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable LSTMT defined in edu::toronto::cs::expr::CILLabelledStmtOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function CILLabelledStmtOp(String,int) in line 12
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable LSTMT in line 9
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILListOp.java
module edu::toronto::cs::expr::CILListOp
   inherits from edu::toronto::cs::expr::NamedOp
   function append(Expr,Expr) in line 24
      protection public
      27 lines of code
      2 parameters
      5 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable NULL defined in edu::toronto::cs::expr::CILNullOp
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable LIST defined in edu::toronto::cs::expr::CILListOp
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
   function isStatementList(Expr) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable SLIST defined in edu::toronto::cs::expr::CILListOp
   function CILListOp(String,int) in line 11
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   variable LIST in line 7
      protection public
   variable SLIST in line 8
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILNDGotoOp.java
module edu::toronto::cs::expr::CILNDGotoOp
   inherits from edu::toronto::cs::expr::NamedOp
   function getLabels(Expr) in line 18
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function args() defined in edu::toronto::cs::expr::Expr
   function CILNDGotoOp(String,int) in line 13
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable NDGOTO in line 10
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILNullOp.java
module edu::toronto::cs::expr::CILNullOp
   inherits from edu::toronto::cs::expr::NullaryOperator
   function name() in line 11
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CILNullOp() in line 7
      3 lines of code
      0 parameters
      1 conditional paths
   variable NULL in line 5
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILProgramOp.java
module edu::toronto::cs::expr::CILProgramOp
   inherits from edu::toronto::cs::expr::NamedOp
   function CILProgramOp(String,int) in line 11
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable PROGRAM in line 7
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILRecordOp.java
module edu::toronto::cs::expr::CILRecordOp
   inherits from edu::toronto::cs::expr::NamedOp
   function CILRecordOp(String,int) in line 10
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable STRUCT in line 5
      protection public
   variable UNION in line 6
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILReturnOp.java
module edu::toronto::cs::expr::CILReturnOp
   inherits from edu::toronto::cs::expr::NamedOp
   function getReturnValue(Expr) in line 25
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function hasReturnValue(Expr) in line 20
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
   function isCILReturn(Expr) in line 15
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable RETURN defined in edu::toronto::cs::expr::CILReturnOp
   function CILReturnOp(String,int) in line 10
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable RETURN in line 8
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILScopeOp.java
module edu::toronto::cs::expr::CILScopeOp
   inherits from edu::toronto::cs::expr::NamedOp
   function getBody(Expr) in line 28
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILScopeOp
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getLocalDeclarations(Expr) in line 18
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILScopeOp
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function verify(Expr) in line 38
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable SCOPE defined in edu::toronto::cs::expr::CILScopeOp
   function CILScopeOp(String,int) in line 13
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable SCOPE in line 9
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILTypeSpecifierOp.java
module edu::toronto::cs::expr::CILTypeSpecifierOp
   inherits from edu::toronto::cs::expr::NamedOp
   function isCharT(Expr) in line 25
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function isIntT(Expr) in line 20
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function CILTypeSpecifierOp(String) in line 32
      4 lines of code
      1 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   function CILTypeSpecifierOp(String,int) in line 37
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable VOID in line 9
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILUnknownOp.java
module edu::toronto::cs::expr::CILUnknownOp
   inherits from edu::toronto::cs::expr::NamedOp
   function CILUnknownOp(String,int) in line 7
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable UNKNOWN in line 5
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CILWhileOp.java
module edu::toronto::cs::expr::CILWhileOp
   inherits from edu::toronto::cs::expr::NamedOp
   function getBody(Expr) in line 19
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILWhileOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getCond(Expr) in line 12
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function verify(Expr) defined in edu::toronto::cs::expr::CILWhileOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function verify(Expr) in line 26
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable WHILE defined in edu::toronto::cs::expr::CILWhileOp
   function CILWhileOp(String,int) in line 7
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable WHILE in line 5
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CInitTypedDeclOp.java
module edu::toronto::cs::expr::CInitTypedDeclOp
   inherits from edu::toronto::cs::expr::CTypedDeclOp
   abstract class
   function initExpr(Expr) in line 26
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isCInitTypedDecl(Expr) in line 21
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CInitTypedDeclOp(String,int,Expr,String) defined in edu::toronto::cs::expr::CInitTypedDeclOp
   function CInitTypedDeclOp(String,int,Expr,String) in line 12
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CLabelDeclOp.java
module edu::toronto::cs::expr::CLabelDeclOp
   inherits from edu::toronto::cs::expr::CNamedDeclOp
   function isCLabelDecl(Expr) in line 18
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CLabelDeclOp(String,int,Expr,int) defined in edu::toronto::cs::expr::CLabelDeclOp
   function labelUID(Expr) in line 23
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function CLabelDeclOp(String,int,Expr,int) in line 12
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CLocOp.java
module edu::toronto::cs::expr::CLocOp
   inherits from edu::toronto::cs::expr::AbstractOperator
   function equals(Object) in line 31
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses function CLocOp(String,String,Integer) defined in edu::toronto::cs::expr::CLocOp
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   function hashCode() in line 43
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isCLoc(Expr) in line 21
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function CLocOp(String,String,Integer) defined in edu::toronto::cs::expr::CLocOp
   function uid(Expr) in line 26
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function CLocOp(String,String,Integer) in line 14
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/ClosureExpr.java
module edu::toronto::cs::expr::ClosureExpr
   inherits from edu::toronto::cs::expr::AbstractExpr
   function arg(int) in line 61
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function args() in line 66
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function arity() in line 56
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function debug(Expr) in line 123
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Operator
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getBody() in line 26
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFactory() in line 104
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
   function getParams() in line 30
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function guardedSubst(Map,SubstGuard) in line 90
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function hasNondet() in line 133
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function isWellFormed() in line 70
      protection public
      10 lines of code
      0 parameters
      4 conditional paths
      uses function isWellFormed() defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
   function naryApply(Expr[]) in line 41
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses function args() defined in edu::toronto::cs::expr::ClosureExpr
      uses variable i defined in sparsemv.m
      uses function subst(Map) defined in edu::toronto::cs::expr::Expr
   function op() in line 36
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable CLOSURE defined in edu::toronto::cs::expr::ClosureExpr
   function subst(Map) in line 81
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function ClosureExpr(Expr,Expr[]) defined in edu::toronto::cs::expr::ClosureExpr
      uses function subst(Map) defined in edu::toronto::cs::expr::Expr
   function substOp(Map) in line 95
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function ClosureExpr(Expr,Expr[]) defined in edu::toronto::cs::expr::ClosureExpr
      uses function substOp(Map) defined in edu::toronto::cs::expr::Expr
   function varSet(Set) in line 115
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function ClosureExpr(Expr,Expr[]) in line 20
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   variable CLOSURE in line 18
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CMemRefOp.java
module edu::toronto::cs::expr::CMemRefOp
   inherits from edu::toronto::cs::expr::CExprOp
   function CMemRefOp(String,int) in line 24
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable BASE in line 18
      protection public
   variable INDEX in line 19
      protection public
   variable MEM_REF in line 16
      protection public
   variable OFFSET in line 21
      protection public
   variable ORIGINAL in line 22
      protection public
   variable STEP in line 20
      protection public
   variable SYMBOL in line 17
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CNamedDeclOp.java
module edu::toronto::cs::expr::CNamedDeclOp
   inherits from edu::toronto::cs::expr::CDeclOp
   abstract class
   function declName(Expr) in line 21
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function isCNamedDecl(Expr) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CNamedDeclOp(String,int,int,Expr,String) defined in edu::toronto::cs::expr::CNamedDeclOp
   function CNamedDeclOp(String,int,int,Expr,String) in line 14
      protection public
      6 lines of code
      5 parameters
      1 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/ComparisonOp.java
module edu::toronto::cs::expr::ComparisonOp
   inherits from edu::toronto::cs::expr::NamedOp
   function eq(Expr,Expr) in line 26
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
   function eq(Expr,int) in line 36
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function eq(Expr,Expr) defined in edu::toronto::cs::expr::ComparisonOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function geq(Expr,Expr) in line 86
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses variable GEQ defined in edu::toronto::cs::expr::ComparisonOp
   function geq(Expr,int) in line 96
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function geq(Expr,Expr) defined in edu::toronto::cs::expr::ComparisonOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function gt(Expr,Expr) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses variable GT defined in edu::toronto::cs::expr::ComparisonOp
   function gt(Expr,int) in line 116
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function gt(Expr,Expr) defined in edu::toronto::cs::expr::ComparisonOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function isComparison(Expr) in line 147
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function ComparisonOp(String,int) defined in edu::toronto::cs::expr::ComparisonOp
   function isEq(Expr) in line 158
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
   function isGeq(Expr) in line 202
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable GEQ defined in edu::toronto::cs::expr::ComparisonOp
   function isGt(Expr) in line 180
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable GT defined in edu::toronto::cs::expr::ComparisonOp
   function isLeq(Expr) in line 213
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable LEQ defined in edu::toronto::cs::expr::ComparisonOp
   function isLt(Expr) in line 191
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable LT defined in edu::toronto::cs::expr::ComparisonOp
   function isNeq(Expr) in line 169
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable NEQ defined in edu::toronto::cs::expr::ComparisonOp
   function leq(Expr,Expr) in line 66
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses variable LEQ defined in edu::toronto::cs::expr::ComparisonOp
   function leq(Expr,int) in line 76
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function leq(Expr,Expr) defined in edu::toronto::cs::expr::ComparisonOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function lequal(Expr,Expr) in line 227
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable TRUE defined in edu::toronto::cs::expr::BoolOp
      uses variable FALSE defined in edu::toronto::cs::expr::BoolOp
      uses function eq(Expr,Expr) defined in edu::toronto::cs::expr::ComparisonOp
   function lgt(Expr,Expr) in line 249
      protection public
      15 lines of code
      2 parameters
      4 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable FALSE defined in edu::toronto::cs::expr::BoolOp
      uses variable TRUE defined in edu::toronto::cs::expr::BoolOp
      uses function gt(Expr,Expr) defined in edu::toronto::cs::expr::ComparisonOp
   function llt(Expr,Expr) in line 272
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function lgt(Expr,Expr) defined in edu::toronto::cs::expr::ComparisonOp
      uses function isGt(Expr) defined in edu::toronto::cs::expr::ComparisonOp
      uses function lt(Expr,Expr) defined in edu::toronto::cs::expr::ComparisonOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function lt(Expr,Expr) in line 126
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses variable LT defined in edu::toronto::cs::expr::ComparisonOp
   function lt(Expr,int) in line 136
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function lt(Expr,Expr) defined in edu::toronto::cs::expr::ComparisonOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function main(String[]) in line 282
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function lequal(Expr,Expr) defined in edu::toronto::cs::expr::ComparisonOp
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function neq(Expr,Expr) in line 46
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses variable NEQ defined in edu::toronto::cs::expr::ComparisonOp
   function neq(Expr,int) in line 56
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function neq(Expr,Expr) defined in edu::toronto::cs::expr::ComparisonOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function ComparisonOp(String,int) in line 14
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable EQ in line 7
      protection public
   variable GEQ in line 10
      protection public
   variable GT in line 11
      protection public
   variable LEQ in line 9
      protection public
   variable LT in line 12
      protection public
   variable NEQ in line 8
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CompoundTypeOp.java
module edu::toronto::cs::expr::CompoundTypeOp
   inherits from edu::toronto::cs::expr::NamedOp
   function arrayT(Expr,Expr) in line 78
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function dom(Expr) defined in edu::toronto::cs::expr::CompoundTypeOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable ARRAY_TYPE defined in edu::toronto::cs::expr::CompoundTypeOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function rng(Expr) defined in edu::toronto::cs::expr::CompoundTypeOp
   function dom(Expr) in line 163
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function funT(Expr,Expr) in line 53
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function dom(Expr) defined in edu::toronto::cs::expr::CompoundTypeOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable FUN_TYPE defined in edu::toronto::cs::expr::CompoundTypeOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function rng(Expr) defined in edu::toronto::cs::expr::CompoundTypeOp
   function isArrayT(Expr) in line 131
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable ARRAY_TYPE defined in edu::toronto::cs::expr::CompoundTypeOp
   function isFunT(Expr) in line 111
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable FUN_TYPE defined in edu::toronto::cs::expr::CompoundTypeOp
   function isPtrT(Expr) in line 152
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable PTR_TYPE defined in edu::toronto::cs::expr::CompoundTypeOp
   function isRngT(Expr) in line 121
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable RNG_TYPE defined in edu::toronto::cs::expr::CompoundTypeOp
   function isSubT(Expr) in line 141
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable SUB_TYPE defined in edu::toronto::cs::expr::CompoundTypeOp
   function max(Expr) in line 193
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function min(Expr) in line 183
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function pred(Expr) in line 204
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function ptrT(Expr) in line 100
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable PTR_TYPE defined in edu::toronto::cs::expr::CompoundTypeOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
   function rng(Expr) in line 173
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function rngT(Expr,Expr) in line 66
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function min(Expr) defined in edu::toronto::cs::expr::CompoundTypeOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable RNG_TYPE defined in edu::toronto::cs::expr::CompoundTypeOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function max(Expr) defined in edu::toronto::cs::expr::CompoundTypeOp
   function subT(Expr) in line 89
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function pred(Expr) defined in edu::toronto::cs::expr::CompoundTypeOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable SUB_TYPE defined in edu::toronto::cs::expr::CompoundTypeOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
   function CompoundTypeOp(String,int) in line 40
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable ARRAY_TYPE in line 24
      protection public
   variable FUN_TYPE in line 10
      protection public
   variable PTR_TYPE in line 37
      protection public
   variable RNG_TYPE in line 17
      protection public
   variable SUB_TYPE in line 31
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CParmDeclOp.java
module edu::toronto::cs::expr::CParmDeclOp
   inherits from edu::toronto::cs::expr::CInitTypedDeclOp
   function isCParmDecl(Expr) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CParmDeclOp(int,Expr,String) defined in edu::toronto::cs::expr::CParmDeclOp
   function CParmDeclOp(int,Expr,String) in line 8
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CParmOp.java
module edu::toronto::cs::expr::CParmOp
   inherits from edu::toronto::cs::expr::CLocOp
   function isCParm(Expr) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CParmOp(String,Integer) defined in edu::toronto::cs::expr::CParmOp
   function CParmOp(String,Integer) in line 8
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CPtrTypeOp.java
module edu::toronto::cs::expr::CPtrTypeOp
   inherits from edu::toronto::cs::expr::CTypeOp
   inherits from edu::toronto::cs::expr::PrefixOp
   function isCPtrType(Expr) in line 16
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CPtrTypeOp(int) defined in edu::toronto::cs::expr::CPtrTypeOp
   function pointedType(Expr) in line 21
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function CPtrTypeOp(int) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CQualTypeOp.java
module edu::toronto::cs::expr::CQualTypeOp
   inherits from edu::toronto::cs::expr::CTypeOp
   function isConst(Expr) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function isRestrict(Expr) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function isVolatile(Expr) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function mainVariant(Expr) in line 19
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function CQualTypeOp(int,boolean,boolean,boolean) in line 10
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CRecordOp.java
module edu::toronto::cs::expr::CRecordOp
   inherits from edu::toronto::cs::expr::CTypeOp
   inherits from edu::toronto::cs::expr::CContextOp
   abstract class
   function isCRecord(Expr) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CRecordOp(String,int,String) defined in edu::toronto::cs::expr::CRecordOp
   function tag(Expr) in line 19
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function CRecordOp(String,int,String) in line 13
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CRefTypeOp.java
module edu::toronto::cs::expr::CRefTypeOp
   inherits from edu::toronto::cs::expr::CTypeOp
   inherits from edu::toronto::cs::expr::PrefixOp
   function isCRefType(Expr) in line 16
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CRefTypeOp(int) defined in edu::toronto::cs::expr::CRefTypeOp
   function refType(Expr) in line 21
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function CRefTypeOp(int) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CResultDeclOp.java
module edu::toronto::cs::expr::CResultDeclOp
   inherits from edu::toronto::cs::expr::CTypedDeclOp
   function isCResultDecl(Expr) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CResultDeclOp(int,Expr) defined in edu::toronto::cs::expr::CResultDeclOp
   function CResultDeclOp(int,Expr) in line 8
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CResultOp.java
module edu::toronto::cs::expr::CResultOp
   inherits from edu::toronto::cs::expr::CLocOp
   function isCResult(Expr) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CResultOp(Integer) defined in edu::toronto::cs::expr::CResultOp
   function CResultOp(Integer) in line 8
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CSimpleTypeOp.java
module edu::toronto::cs::expr::CSimpleTypeOp
   inherits from edu::toronto::cs::expr::CTypeOp
   function isCSimpleType(Expr) in line 18
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CSimpleTypeOp(int,String) defined in edu::toronto::cs::expr::CSimpleTypeOp
   function simpleTypeName(Expr) in line 23
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function CSimpleTypeOp(int,String) in line 12
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CStmtOp.java
module edu::toronto::cs::expr::CStmtOp
   inherits from edu::toronto::cs::expr::NamedOp
   inherits from edu::toronto::cs::expr::NonCanonOp
   function condExprCond(Expr) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function condExprElse(Expr) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function condExprThen(Expr) in line 36
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function gotoDest(Expr) in line 62
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isCondExpr(Expr) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable COND_EXPR defined in edu::toronto::cs::expr::CStmtOp
   function isGoto(Expr) in line 57
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable GOTO defined in edu::toronto::cs::expr::CStmtOp
   function isLabelExpr(Expr) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable LABEL_EXPR defined in edu::toronto::cs::expr::CStmtOp
   function isModifyExpr(Expr) in line 22
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable MODIFY_EXPR defined in edu::toronto::cs::expr::CStmtOp
   function isReturn(Expr) in line 47
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable RETURN defined in edu::toronto::cs::expr::CStmtOp
   function labelExprDecl(Expr) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function modifyExpr(Expr,Expr) in line 73
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable MODIFY_EXPR defined in edu::toronto::cs::expr::CStmtOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function CStmtOp(String,int) in line 17
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable COND_EXPR in line 12
      protection public
   variable GOTO in line 15
      protection public
   variable LABEL_EXPR in line 14
      protection public
   variable MODIFY_EXPR in line 11
      protection public
   variable RETURN in line 13
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CStructOp.java
module edu::toronto::cs::expr::CStructOp
   inherits from edu::toronto::cs::expr::CRecordOp
   function isCStruct(Expr) in line 10
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CStructOp(int,String) defined in edu::toronto::cs::expr::CStructOp
   function CStructOp(int,String) in line 5
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CSwitchExprOp.java
module edu::toronto::cs::expr::CSwitchExprOp
   inherits from edu::toronto::cs::expr::CStmtOp
   function caseGoto(Expr,int) in line 62
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function switchBody(Expr) defined in edu::toronto::cs::expr::CSwitchExprOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
   function caseHigh(Expr,int) in line 80
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function caseLabel(Expr,int) defined in edu::toronto::cs::expr::CSwitchExprOp
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function caseLabel(Expr,int) in line 57
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function switchBody(Expr) defined in edu::toronto::cs::expr::CSwitchExprOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
   function caseLow(Expr,int) in line 71
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function caseLabel(Expr,int) defined in edu::toronto::cs::expr::CSwitchExprOp
      uses variable i defined in sparsemv.m
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isDefaultCase(Expr) in line 37
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable DEFAULT_CASE defined in edu::toronto::cs::expr::CSwitchExprOp
   function isSwitchExpr(Expr) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable SWITCH_EXPR defined in edu::toronto::cs::expr::CSwitchExprOp
   function numCases(Expr) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function switchBody(Expr) defined in edu::toronto::cs::expr::CSwitchExprOp
      uses function arity() defined in edu::toronto::cs::expr::Expr
   function switchBody(Expr) in line 47
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function switchCond(Expr) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function CSwitchExprOp(String,int) in line 27
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable CASE_LABEL_EXPR in line 21
      protection public
   variable DEFAULT_CASE in line 24
      protection public
   variable SWITCH_BODY in line 18
      protection public
   variable SWITCH_COND in line 15
      protection public
   variable SWITCH_EXPR in line 12
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CTLOp.java
module edu::toronto::cs::expr::CTLOp
   inherits from edu::toronto::cs::expr::NamedOp
   function CTLOp(String,int) in line 29
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable AF in line 11
      protection public
   variable AG in line 15
      protection public
   variable AR in line 27
      protection public
   variable AU in line 19
      protection public
   variable AX in line 7
      protection public
   variable bAU in line 23
      protection public
   variable bEU in line 22
      protection public
   variable EF in line 10
      protection public
   variable EG in line 14
      protection public
   variable ER in line 26
      protection public
   variable EU in line 18
      protection public
   variable EX in line 6
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CTypedDeclOp.java
module edu::toronto::cs::expr::CTypedDeclOp
   inherits from edu::toronto::cs::expr::CNamedDeclOp
   abstract class
   function declType(Expr) in line 23
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isCTypedDecl(Expr) in line 18
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CTypedDeclOp(String,int,int,Expr,String) defined in edu::toronto::cs::expr::CTypedDeclOp
   function CTypedDeclOp(String,int,int,Expr,String) in line 12
      protection public
      5 lines of code
      5 parameters
      1 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CTypeDeclOp.java
module edu::toronto::cs::expr::CTypeDeclOp
   inherits from edu::toronto::cs::expr::CTypedDeclOp
   function isCTypeDecl(Expr) in line 15
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CTypeDeclOp(int,Expr,String) defined in edu::toronto::cs::expr::CTypeDeclOp
   function CTypeDeclOp(int,Expr,String) in line 10
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CTypeOp.java
module edu::toronto::cs::expr::CTypeOp
   inherits from edu::toronto::cs::expr::AbstractOperator
   inherits from edu::toronto::cs::expr::PrefixOp
   abstract class
   function equals(Object) in line 18
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function CTypeOp(String,int,int) defined in edu::toronto::cs::expr::CTypeOp
   function hashCode() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isCType(Expr) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CTypeOp(String,int,int) defined in edu::toronto::cs::expr::CTypeOp
   function typeUID(Expr) in line 34
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
   function CTypeOp(String,int,int) in line 12
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CUnionOp.java
module edu::toronto::cs::expr::CUnionOp
   inherits from edu::toronto::cs::expr::CRecordOp
   function isCUnion(Expr) in line 10
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CUnionOp(int,String) defined in edu::toronto::cs::expr::CUnionOp
   function CUnionOp(int,String) in line 5
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CVarDeclOp.java
module edu::toronto::cs::expr::CVarDeclOp
   inherits from edu::toronto::cs::expr::CInitTypedDeclOp
   function isCVarDecl(Expr) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CVarDeclOp(int,Expr,String) defined in edu::toronto::cs::expr::CVarDeclOp
   function CVarDeclOp(int,Expr,String) in line 8
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CVarOp.java
module edu::toronto::cs::expr::CVarOp
   inherits from edu::toronto::cs::expr::CLocOp
   function isCVar(Expr) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function CVarOp(String,Integer) defined in edu::toronto::cs::expr::CVarOp
   function CVarOp(String,Integer) in line 8
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CVCLConstantMap.java
module edu::toronto::cs::expr::CVCLConstantMap
   inherits from edu::toronto::cs::tp::cvcl::JavaCVCConstants
   function getBackwardMap() in line 66
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getForwardMap() in line 62
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/CVCLExprConverter.java
module edu::toronto::cs::expr::CVCLExprConverter
   inherits from edu::toronto::cs::tp::cvcl::JavaCVCConstants
   function addrOfFromCVCL(String) in line 61
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
   function addrOfToCVCL(edu.toronto.cs.expr.Expr) in line 48
      12 lines of code
      1 parameters
      2 conditional paths
      uses function varExpr(String,Type) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function intType() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function fromCVCL(edu.toronto.cs.tp.cvcl.Expr) in line 236
      protection public
      68 lines of code
      1 parameters
      13 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable FALSE defined in edu::toronto::cs::expr::BoolOp
      uses variable TRUE defined in edu::toronto::cs::expr::BoolOp
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses function ratExpr(int,int) defined in edu::toronto::cs::expr::ExprFactory
      uses function indirectionOpFromString(String) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses variable AND defined in edu::toronto::cs::tp::cvcl::JavaCVCConstants
      uses variable OR defined in edu::toronto::cs::tp::cvcl::JavaCVCConstants
      uses macro definition assert defined in util.h
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
   function indirectionOpFromString(String) in line 108
      37 lines of code
      1 parameters
      5 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable DEREF defined in edu::toronto::cs::expr::CILIndirectionOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function indirectionOpToString(Expr) in line 91
      16 lines of code
      1 parameters
      6 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable DEREF defined in edu::toronto::cs::expr::CILIndirectionOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function linearize(edu.toronto.cs.tp.cvcl.Expr) in line 31
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function toCVCL(List) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function moveToLeft(edu.toronto.cs.expr.Expr) defined in edu::toronto::cs::expr::ExprAlgebra
      uses function fromCVCL(edu.toronto.cs.tp.cvcl.Expr) defined in edu::toronto::cs::expr::CVCLExprConverter
   function main(String[]) in line 305
      protection public
      50 lines of code
      1 parameters
      1 conditional paths
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable GEQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function varExpr(String,Type) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function intType() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function CVCLExprConverter(ExprFactory,ValidityChecker,Map) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function toCVCL(List) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function fromCVCL(edu.toronto.cs.tp.cvcl.Expr) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses variable DEREF defined in edu::toronto::cs::expr::CILIndirectionOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
   function ptrFromCVCL(String) in line 80
      8 lines of code
      1 parameters
      2 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable DEREF defined in edu::toronto::cs::expr::CILIndirectionOp
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
   function ptrToCVCL(Expr,String) in line 70
      9 lines of code
      2 parameters
      2 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable DEREF defined in edu::toronto::cs::expr::CILIndirectionOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function varExpr(String,Type) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function intType() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function toCVCL(List) in line 37
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
   function toCVCL(edu.toronto.cs.expr.Expr) in line 148
      protection public
      86 lines of code
      1 parameters
      13 conditional paths
      uses macro definition assert defined in util.h
      uses function varExpr(String,Type) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function indirectionOpToString(Expr) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function intType() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function lookupVar(String,Type) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable TRUE defined in edu::toronto::cs::expr::BoolOp
      uses function trueExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable FALSE defined in edu::toronto::cs::expr::BoolOp
      uses function falseExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function ratExpr(int,int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function getEM() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function toCVCL(List) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses variable IMPL defined in edu::toronto::cs::expr::BoolOp
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
      uses function add(Expr) defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   function CVCLExprConverter(ExprFactory,ValidityChecker,Map) in line 22
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function getForwardMap() defined in edu::toronto::cs::expr::CVCLConstantMap
      uses function getBackwardMap() defined in edu::toronto::cs::expr::CVCLConstantMap
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/DisjunctionRewriter.java
module edu::toronto::cs::expr::DisjunctionRewriter
   inherits from edu::toronto::cs::expr::IdentityRewriter
   function main(String) in line 30
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
      uses function DisjunctionRewriter() defined in edu::toronto::cs::expr::DisjunctionRewriter
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
   function rewrite(Expr) in line 19
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable ORN defined in edu::toronto::cs::expr::BoolOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function DisjunctionRewriter() in line 15
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/Expr.java
module edu::toronto::cs::expr::Expr
   function arg(int) in line 86
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function args() in line 93
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function arity() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function binApply(Expr,Expr) in line 48
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function contains(Expr) in line 146
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getFactory() in line 137
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function guardedSubst(Map,SubstGuard) in line 120
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function isWellFormed() in line 100
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function naryApply(Expr[]) in line 57
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function naryApply(List) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function nullaryApply() in line 31
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function op() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function subst(Map) in line 110
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function substOp(Map) in line 130
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function unaryApply(Expr) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function varSet(Set) in line 156
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable EMPTY_EXPR_ARRAY in line 22
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/Expr.java
module edu::toronto::cs::tp::cvcl::Expr
   function andExpr(Expr) in line 228
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function andExpr(CVectorExpr) in line 232
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
   function arity() in line 60
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function assign(Expr) in line 256
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function computeHashCode(Expr) in line 272
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function delete() in line 21
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Expr
   function eqExpr(Expr) in line 216
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function equal(Expr,Expr) in line 268
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function equals(Object) in line 33
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function equal(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function get(int) in line 260
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable i defined in sparsemv.m
   function getCPtr(Expr) in line 29
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function getIndex() in line 44
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function getKind() in line 64
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function getOp() in line 112
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function getRational() in line 56
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function hashCode() in line 39
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function computeHashCode(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function hasOp() in line 108
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function iffExpr(Expr) in line 248
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function impExpr(Expr) in line 252
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function isAnd() in line 180
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isApply() in line 148
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isBoolConst() in line 124
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isClosure() in line 136
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isEq() in line 172
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isExists() in line 204
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isFalse() in line 116
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isForall() in line 200
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isGeneric() in line 164
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isGeneric(int) in line 168
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isIff() in line 192
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isImpl() in line 196
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isITE() in line 188
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isLambda() in line 144
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isNot() in line 176
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isNull() in line 212
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isOr() in line 184
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isQuantifier() in line 140
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isRational() in line 208
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isRecord() in line 152
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isRecordAccess() in line 156
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isString() in line 132
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isTrue() in line 120
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isTupleAccess() in line 160
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function isVar() in line 128
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function iteExpr(Expr,Expr) in line 244
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function negate() in line 224
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function notExpr() in line 220
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function orExpr(Expr) in line 236
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function orExpr(CVectorExpr) in line 240
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function Expr() defined in edu::toronto::cs::tp::cvcl::Expr
   function toString() in line 264
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function Expr(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Expr
   function Expr() in line 48
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Expr(Expr) in line 52
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function Expr(ExprManager,Op) in line 68
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function Expr(ExprManager,Op,Expr) in line 72
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function Expr(ExprManager,Op,Expr,Expr) in line 76
      protection public
      3 lines of code
      4 parameters
      1 conditional paths
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function Expr(ExprManager,Op,Expr,Expr,Expr) in line 80
      protection public
      3 lines of code
      5 parameters
      1 conditional paths
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function Expr(ExprManager,Op,CVectorExpr) in line 84
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
   function Expr(ExprManager,int) in line 88
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function Expr(ExprManager,int,Expr) in line 92
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function Expr(ExprManager,int,Expr,Expr) in line 96
      protection public
      3 lines of code
      4 parameters
      1 conditional paths
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function Expr(ExprManager,int,Expr,Expr,Expr) in line 100
      protection public
      3 lines of code
      5 parameters
      1 conditional paths
      uses function getCPtr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function Expr(ExprManager,int,CVectorExpr) in line 104
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/ExprAlgebra.java
module edu::toronto::cs::expr::ExprAlgebra
   inherits from edu::toronto::cs::tp::cvcl::JavaCVCConstants
   function linearize(edu.toronto.cs.expr.Expr,int) in line 22
      protection public
      33 lines of code
      2 parameters
      10 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses variable MINUS defined in edu::toronto::cs::expr::NumericOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
   function moveToLeft(edu.toronto.cs.expr.Expr) in line 55
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable MINUS defined in edu::toronto::cs::expr::NumericOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function ExprAlgebra(ExprFactory) in line 18
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/ExprFactory.java
module edu::toronto::cs::expr::ExprFactory
   function falseExpr() in line 91
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function intExpr(int) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function nondetExpr() in line 58
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function op(Operator) in line 77
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ratExpr(int,int) in line 43
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function strExpr(String) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function trueExpr() in line 84
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function var(String) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/ExprFactoryImpl.java
module edu::toronto::cs::expr::ExprFactoryImpl
   inherits from edu::toronto::cs::expr::ExprFactory
   function canonize(Expr) in line 65
      protection public
      11 lines of code
      1 parameters
      50 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactoryImpl
      uses variable i defined in sparsemv.m
      uses function isWellFormed() defined in edu::toronto::cs::expr::Expr
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
      uses function okSubst(Expr) defined in edu::toronto::cs::expr::SubstGuard
      uses variable v defined in visual.m
      uses variable primes defined in edu::toronto::cs::util::Primes
      uses variable s defined in visual.m
      uses variable PAIR_NB defined in edu::toronto::cs::expr::TupleOp
      uses variable ARRAY_UPD defined in edu::toronto::cs::expr::ArrayOp
      uses variable ARRAY_SEL defined in edu::toronto::cs::expr::ArrayOp
      uses variable LIST defined in edu::toronto::cs::expr::CILListOp
      uses function name() defined in edu::toronto::cs::expr::Operator
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses variable AND defined in edu::toronto::cs::expr::BoolOp
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
      uses variable ORN defined in edu::toronto::cs::expr::BoolOp
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
   function falseExpr() in line 36
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactoryImpl
      uses variable FALSE defined in edu::toronto::cs::expr::BoolOp
   function intExpr(int) in line 20
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function ratExpr(int,int) defined in edu::toronto::cs::expr::ExprFactoryImpl
   function main(String[]) in line 473
      protection public
      52 lines of code
      1 parameters
      1 conditional paths
      uses function ExprFactoryImpl() defined in edu::toronto::cs::expr::ExprFactoryImpl
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function contains(Expr) defined in edu::toronto::cs::expr::Expr
      uses function subst(Map) defined in edu::toronto::cs::expr::Expr
      uses function varSet(Set) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses function nondetExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses variable MINUS defined in edu::toronto::cs::expr::NumericOp
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
      uses function guardedSubst(Map,SubstGuard) defined in edu::toronto::cs::expr::Expr
      uses variable STOP_AT_PLUS defined in edu::toronto::cs::expr::ExprFactoryImpl
   function nondetExpr() in line 44
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactoryImpl
      uses variable NONDET defined in edu::toronto::cs::expr::NondetOp
   function op(Operator) in line 55
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function canonize(Expr) defined in edu::toronto::cs::expr::ExprFactoryImpl
   function ratExpr(int,int) in line 25
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactoryImpl
      uses variable d defined in crunch2parms.m
   function strExpr(String) in line 48
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactoryImpl
      uses variable s defined in visual.m
   function trueExpr() in line 32
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactoryImpl
      uses variable TRUE defined in edu::toronto::cs::expr::BoolOp
   function var(String) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactoryImpl
   function ExprFactoryImpl() in line 14
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   variable STOP_AT_PLUS in line 459
module edu::toronto::cs::expr::ExprFactoryImpl::ExprImpl
   inherits from edu::toronto::cs::expr::AbstractExpr
   function arg(int) in line 113
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
   function args() in line 130
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function arity() in line 107
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function equals(Object) in line 238
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function equals(ExprImpl,boolean) in line 249
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
   function getFactory() in line 266
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function guardedSubst(Map,SubstGuard) in line 166
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
   function hashCode() in line 273
      protection public
      14 lines of code
      0 parameters
      1 conditional paths
   function isWellFormed() in line 135
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
   function naryApply(Expr[]) in line 99
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function op() in line 94
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function subst(Map) in line 147
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
   function substOp(Map) in line 187
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
   function toIndentedString(int) in line 403
      54 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 289
      protection public
      113 lines of code
      0 parameters
      1 conditional paths
   function varSet(Set) in line 215
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
   function ExprImpl(Operator) in line 87
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   variable hashBound in line 272
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/ExprRewriter.java
module edu::toronto::cs::expr::ExprRewriter
   function rewrite(Expr) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/Fmt.java
module edu::toronto::cs::expr::Fmt
   function disjuncts(Expr,String) in line 10
      protection public
      16 lines of code
      2 parameters
      6 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function name() defined in edu::toronto::cs::expr::Operator
      uses function args() defined in edu::toronto::cs::expr::Expr
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/FunctionApplOp.java
module edu::toronto::cs::expr::FunctionApplOp
   inherits from edu::toronto::cs::expr::NamedOp
   function apply(Expr,Expr) in line 61
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable APPL defined in edu::toronto::cs::expr::FunctionApplOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function arg(Expr) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function function(Expr) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isAppl(Expr) in line 49
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable APPL defined in edu::toronto::cs::expr::FunctionApplOp
   function FunctionApplOp(String,int) in line 16
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable APPL in line 13
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/IdentityRewriter.java
module edu::toronto::cs::expr::IdentityRewriter
   inherits from edu::toronto::cs::expr::ExprRewriter
   function rewrite(Expr) in line 22
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function args() defined in edu::toronto::cs::expr::Expr
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function op() defined in edu::toronto::cs::expr::Expr
   function IdentityRewriter() in line 18
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/IdentityRewriterTestCase.java
module edu::toronto::cs::expr::IdentityRewriterTestCase
   inherits from junit::framework::TestCase
   function testIdentity() in line 10
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function rewrite(Expr) defined in edu::toronto::cs::expr::IdentityRewriter
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/InfixOp.java
module edu::toronto::cs::expr::InfixOp
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/JavaObjectOp.java
module edu::toronto::cs::expr::JavaObjectOp
   inherits from edu::toronto::cs::expr::NullaryOperator
   function equals(Object) in line 41
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
      uses function getObject() defined in edu::toronto::cs::expr::JavaObjectOp
   function getObject() in line 36
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 31
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function name() in line 16
      protection public
      13 lines of code
      0 parameters
      2 conditional paths
   function JavaObjectOp(Object) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/NamedOp.java
module edu::toronto::cs::expr::NamedOp
   inherits from edu::toronto::cs::expr::AbstractOperator
   abstract class
   function equals(Object) in line 19
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function hashCode() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function NamedOp(String,int) in line 13
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/NonCanonOp.java
module edu::toronto::cs::expr::NonCanonOp
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/NondetOp.java
module edu::toronto::cs::expr::NondetOp
   inherits from edu::toronto::cs::expr::NullaryOperator
   function hasNondet(Expr) in line 24
      protection public
      8 lines of code
      1 parameters
      4 conditional paths
      uses function isNondet(Expr) defined in edu::toronto::cs::expr::NondetOp
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function isNondet(Expr) in line 19
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable NONDET defined in edu::toronto::cs::expr::NondetOp
   function name() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function NondetOp() in line 9
      4 lines of code
      0 parameters
      1 conditional paths
   variable NONDET in line 7
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/NullaryOperator.java
module edu::toronto::cs::expr::NullaryOperator
   inherits from edu::toronto::cs::expr::Operator
   abstract class
   function arity() in line 6
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isWellFormed(Expr[]) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/NumericOp.java
module edu::toronto::cs::expr::NumericOp
   inherits from edu::toronto::cs::expr::NamedOp
   function abs(Expr) in line 179
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable ABS defined in edu::toronto::cs::expr::NumericOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
   function DIV(Expr,Expr) in line 132
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable DIV defined in edu::toronto::cs::expr::NumericOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function DIV(Expr,int) in line 144
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable DIV defined in edu::toronto::cs::expr::NumericOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function isMinus(Expr) in line 23
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable MINUS defined in edu::toronto::cs::expr::NumericOp
   function isPlus(Expr) in line 18
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
   function minus(Expr,Expr) in line 73
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable MINUS defined in edu::toronto::cs::expr::NumericOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function minus(Expr,int) in line 85
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function minus(Expr,Expr) defined in edu::toronto::cs::expr::NumericOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function mod(Expr,Expr) in line 156
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable MOD defined in edu::toronto::cs::expr::NumericOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function mod(Expr,int) in line 168
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function mod(Expr,Expr) defined in edu::toronto::cs::expr::NumericOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function mult(Expr,Expr) in line 108
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable MULT defined in edu::toronto::cs::expr::NumericOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function mult(Expr,int) in line 120
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function mult(Expr,Expr) defined in edu::toronto::cs::expr::NumericOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function plus(Expr,Expr) in line 37
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function plus(Expr,int) in line 49
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function plus(Expr,Expr) defined in edu::toronto::cs::expr::NumericOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function plus(Expr   []) in line 60
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
   function un_minus(Expr) in line 96
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable UN_MINUS defined in edu::toronto::cs::expr::NumericOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
   function NumericOp(String,int) in line 13
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable ABS in line 11
      protection public
   variable DIV in line 9
      protection public
   variable MINUS in line 6
      protection public
   variable MOD in line 10
      protection public
   variable MULT in line 8
      protection public
   variable PLUS in line 5
      protection public
   variable UN_MINUS in line 7
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/Operator.java
module edu::toronto::cs::expr::Operator
   function arity() in line 16
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function isWellFormed(Expr[]) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function name() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/PrefixOp.java
module edu::toronto::cs::expr::PrefixOp
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/RationalOp.java
module edu::toronto::cs::expr::RationalOp
   inherits from edu::toronto::cs::expr::NullaryOperator
   function equals(Object) in line 21
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses function RationalOp(int,int) defined in edu::toronto::cs::expr::RationalOp
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
   function getD() in line 42
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
   function getD(Expr) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function getD() defined in edu::toronto::cs::expr::RationalOp
   function getN() in line 38
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getN(Expr) in line 56
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
   function hashCode() in line 32
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
   function isInt(Expr) in line 80
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function getD() defined in edu::toronto::cs::expr::RationalOp
   function name() in line 16
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
   function RationalOp(int,int) in line 10
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/SimpleTypeOp.java
module edu::toronto::cs::expr::SimpleTypeOp
   inherits from edu::toronto::cs::expr::NamedOp
   function isAddrT(Expr) in line 77
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable ADDR defined in edu::toronto::cs::expr::SimpleTypeOp
   function isCharT(Expr) in line 66
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable CHAR defined in edu::toronto::cs::expr::SimpleTypeOp
   function isIntT(Expr) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
   function SimpleTypeOp(String) in line 82
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   variable ADDR in line 47
      protection public
   variable CHAR in line 22
      protection public
   variable DUMMY in line 42
      protection public
   variable INT in line 16
      protection public
   variable REAL in line 28
      protection public
   variable VOID in line 34
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/SimplifyingRewriter.java
module edu::toronto::cs::expr::SimplifyingRewriter
   inherits from edu::toronto::cs::expr::IdentityRewriter
   function rewrite(Expr) in line 18
      protection public
      41 lines of code
      1 parameters
      15 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function simplify(Expr) in line 60
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/SimplifyingRewriterTestCase.java
module edu::toronto::cs::expr::SimplifyingRewriterTestCase
   inherits from junit::framework::TestCase
   function setUp() in line 15
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable fac defined in edu::toronto::cs::expr::SimplifyingRewriterTestCase
      uses variable simp defined in edu::toronto::cs::expr::SimplifyingRewriterTestCase
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses macro definition TRUE defined in cudd.h
      uses macro definition FALSE defined in cudd.h
      uses variable a defined in edu::toronto::cs::expr::SimplifyingRewriterTestCase
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
   function tearDown() in line 27
      3 lines of code
      0 parameters
      1 conditional paths
   function testAnd() in line 31
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in edu::toronto::cs::expr::SimplifyingRewriterTestCase
      uses variable simp defined in edu::toronto::cs::expr::SimplifyingRewriterTestCase
      uses function rewrite(Expr) defined in edu::toronto::cs::expr::SimplifyingRewriter
   function testBoolOps() in line 45
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in edu::toronto::cs::expr::SimplifyingRewriterTestCase
      uses variable simp defined in edu::toronto::cs::expr::SimplifyingRewriterTestCase
      uses function rewrite(Expr) defined in edu::toronto::cs::expr::SimplifyingRewriter
   function testMixedOps() in line 52
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in edu::toronto::cs::expr::SimplifyingRewriterTestCase
      uses variable simp defined in edu::toronto::cs::expr::SimplifyingRewriterTestCase
      uses function rewrite(Expr) defined in edu::toronto::cs::expr::SimplifyingRewriter
   function testOr() in line 38
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in edu::toronto::cs::expr::SimplifyingRewriterTestCase
      uses variable simp defined in edu::toronto::cs::expr::SimplifyingRewriterTestCase
      uses function rewrite(Expr) defined in edu::toronto::cs::expr::SimplifyingRewriter
   variable a in line 11
   variable fac in line 12
   variable simp in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/StringOp.java
module edu::toronto::cs::expr::StringOp
   inherits from edu::toronto::cs::expr::NullaryOperator
   function equals(Object) in line 24
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function StringOp(String) defined in edu::toronto::cs::expr::StringOp
   function hashCode() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isString(Expr) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function StringOp(String) defined in edu::toronto::cs::expr::StringOp
   function name() in line 30
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function str(Expr) in line 46
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function name() defined in edu::toronto::cs::expr::StringOp
   function toString() in line 35
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::StringOp
   function StringOp(String) in line 14
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/SubstGuard.java
module edu::toronto::cs::expr::SubstGuard
   function okSubst(Expr) in line 21
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/TupleOp.java
module edu::toronto::cs::expr::TupleOp
   inherits from edu::toronto::cs::expr::NamedOp
   function isPair(Expr) in line 54
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable PAIR defined in edu::toronto::cs::expr::TupleOp
   function isTuple(Expr) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function TupleOp() defined in edu::toronto::cs::expr::TupleOp
   function tuple(Expr,Expr) in line 66
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable PAIR defined in edu::toronto::cs::expr::TupleOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function tuple(Expr,int) in line 78
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function tuple(Expr,Expr) defined in edu::toronto::cs::expr::TupleOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function tuple(List< Expr >) in line 98
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
   function tupleNB(Expr,Expr) in line 90
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable PAIR_NB defined in edu::toronto::cs::expr::TupleOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
   function TupleOp() in line 28
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function TupleOp(String) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
   function TupleOp(String,int) in line 38
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
      uses function arity() defined in edu::toronto::cs::expr::AbstractOperator
   variable PAIR in line 15
      protection public
   variable PAIR_NB in line 25
      protection public
   variable TUPLE in line 18
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/TypeInferencer.java
module edu::toronto::cs::expr::TypeInferencer
   function getType(Expr) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/TypeInferencerCached.java
module edu::toronto::cs::expr::TypeInferencerCached
   inherits from edu::toronto::cs::expr::TypeInferencer
   function getType(Expr) in line 49
      protection public
      131 lines of code
      1 parameters
      19 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses variable REAL defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function typeOf(Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses macro definition assert defined in util.h
   function main(String[]) in line 181
      protection public
      52 lines of code
      1 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses function TypeInferencerCached(SymbolTable) defined in edu::toronto::cs::expr::TypeInferencerCached
      uses function getType(Expr) defined in edu::toronto::cs::expr::TypeInferencerCached
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function TypeInferencerCached(SymbolTable) in line 43
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/TypeOp.java
module edu::toronto::cs::expr::TypeOp
   inherits from edu::toronto::cs::expr::AbstractOperator
   abstract class
   function TypeOp(String) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::AbstractOperator
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/expr/VariableOp.java
module edu::toronto::cs::expr::VariableOp
   inherits from edu::toronto::cs::expr::NullaryOperator
   function equals(Object) in line 24
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable v defined in visual.m
      uses function name() defined in edu::toronto::cs::expr::VariableOp
   function hashCode() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::VariableOp
   function isVar(Expr) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function VariableOp(String) defined in edu::toronto::cs::expr::VariableOp
   function isVariable(Expr) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isVar(Expr) defined in edu::toronto::cs::expr::VariableOp
   function name() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function varName(Expr) in line 37
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function name() defined in edu::toronto::cs::expr::VariableOp
   function vars(Expr,Set< Expr >) in line 55
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses function isVar(Expr) defined in edu::toronto::cs::expr::VariableOp
      uses variable s defined in visual.m
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function VariableOp(String) in line 9
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function name() defined in edu::toronto::cs::expr::VariableOp
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gclang/parser/GCLangCompiler.java
module edu::toronto::cs::gclang::parser::GCLangCompiler
   inherits from edu::toronto::cs::modelchecker::ModelCompiler
   function compile() in line 114
      protection public
      62 lines of code
      0 parameters
      3 conditional paths
      uses function setProgName(String) defined in edu::toronto::cs::gclang::parser::GCLangCompiler
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function renameArgs(int[]) defined in edu::toronto::cs::mvset::MvSet
      uses function variableMap(int,int) defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function getNumVars() defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function size() defined in edu::toronto::cs::mvset::MvSet
      uses macro definition assert defined in util.h
      uses function isConstant() defined in edu::toronto::cs::mvset::MvSet
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getVariableIds(int) defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function getVarNames() defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function getCtlReWriter() defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function getStatePresenter() defined in edu::toronto::cs::gclang::parser::VariableTable
      uses function seal() defined in edu::toronto::cs::gclang::parser::GCLangCompiler
   function getAlgebra() in line 51
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getInit() in line 78
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getInputFile() in line 60
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSetFactoryClass() in line 46
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getProgName() in line 73
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTrans() in line 82
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 203
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses function GCLangCompiler() defined in edu::toronto::cs::gclang::parser::GCLangCompiler
      uses function setMvSetFactoryClass(Class) defined in edu::toronto::cs::gclang::parser::GCLangCompiler
      uses function setAlgebra(IAlgebra) defined in edu::toronto::cs::gclang::parser::GCLangCompiler
      uses function setInputFile(File) defined in edu::toronto::cs::gclang::parser::GCLangCompiler
      uses function compile() defined in edu::toronto::cs::gclang::parser::GCLangCompiler
      uses variable f defined in mvproduct.m
      uses function getProgName() defined in edu::toronto::cs::gclang::parser::GCLangCompiler
      uses function getInit() defined in edu::toronto::cs::gclang::parser::GCLangCompiler
      uses function toDaVinci() defined in edu::toronto::cs::mvset::MvSet
      uses function getTrans() defined in edu::toronto::cs::gclang::parser::GCLangCompiler
      uses function toMvSet() defined in edu::toronto::cs::mvset::MvRelation
   function seal() in line 90
      21 lines of code
      0 parameters
      2 conditional paths
      uses function setMvSetFactory(MvSetFactory) defined in edu::toronto::cs::gclang::parser::VariableTable
   function setAlgebra(IAlgebra) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setInputFile(File) in line 64
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setMvSetFactoryClass(Class) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setProgName(String) in line 69
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function GCLangCompiler() in line 35
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gclang/parser/GCLangCompilerBeanInfo.java
module edu::toronto::cs::gclang::parser::GCLangCompilerBeanInfo
   inherits from SimpleBeanInfo
   function getBeanDescriptor() in line 16
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function getPropertyDescriptors() in line 23
      protection public
      48 lines of code
      0 parameters
      2 conditional paths
      uses variable HELP_ATTRIBUTE defined in edu::toronto::cs::beans::BeanUtil
      uses macro definition assert defined in util.h
   function GCLangCompilerBeanInfo() in line 12
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/grappa/GrappaGraph.java
module edu::toronto::cs::grappa::GrappaGraph
   inherits from GrappaConstants
   function center(boolean) in line 60
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function editable(boolean) in line 72
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function errorWriter(PrintWriter) in line 78
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function errorWriter(OutputStream) in line 84
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function errorWriter(PrintWriter) defined in edu::toronto::cs::grappa::GrappaGraph
      uses variable v defined in visual.m
   function getGraph() in line 37
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function node() in line 45
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function orientation(String) in line 54
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function size(String) in line 66
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toString() in line 30
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function GrappaGraph() in line 20
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function GrappaGraph(String) in line 25
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::grappa::GrappaGraph::GrappaNode
   function border(String) in line 144
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function color(String) in line 112
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function color(Color) in line 117
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function color(String) defined in edu::toronto::cs::grappa::GrappaGraph::GrappaNode
   function deleteNode() in line 100
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function edge(GrappaNode) in line 151
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function fontFamily(String) in line 129
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function fontStyle(String) in line 134
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function getNode() in line 161
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function label(String) in line 106
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function shape(String) in line 122
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function style(String) in line 139
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function GrappaNode() in line 94
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::grappa::GrappaGraph::GrappaEdge
   function color(String) in line 177
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function edge(GrappaNode) defined in edu::toronto::cs::grappa::GrappaGraph::GrappaNode
      uses variable v defined in visual.m
   function color(Color) in line 183
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function color(String) defined in edu::toronto::cs::grappa::GrappaGraph::GrappaNode
   function label(String) in line 188
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function edge(GrappaNode) defined in edu::toronto::cs::grappa::GrappaGraph::GrappaNode
      uses variable v defined in visual.m
   function lineType(String) in line 195
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function edge(GrappaNode) defined in edu::toronto::cs::grappa::GrappaGraph::GrappaNode
      uses variable v defined in visual.m
   function GrappaEdge(GrappaNode,GrappaNode) in line 172
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function edge(GrappaNode) defined in edu::toronto::cs::grappa::GrappaGraph::GrappaNode
      uses function getNode() defined in edu::toronto::cs::grappa::GrappaGraph::GrappaNode
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/GrappaFrame.java
module edu::toronto::cs::gui::GrappaFrame
   inherits from JFrame
   function doGraphLayout() in line 153
      protection public
      59 lines of code
      0 parameters
      4 conditional paths
      uses variable PREFS defined in edu::toronto::cs::gui::GrappaFrame
      uses variable LAYOUT_PATH defined in edu::toronto::cs::gui::GrappaFrame
   function drawGraph() in line 213
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getGUIPreferences() in line 221
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function setFileName(String) defined in edu::toronto::cs::util::gui::FilePanel
      uses variable PREFS defined in edu::toronto::cs::gui::GrappaFrame
      uses variable DOT_PATH defined in edu::toronto::cs::gui::GrappaFrame
      uses variable LAYOUT_PATH defined in edu::toronto::cs::gui::GrappaFrame
      uses function getFileName() defined in edu::toronto::cs::util::gui::FilePanel
   function quit() in line 146
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function GrappaFrame(Graph) in line 54
      protection public
      91 lines of code
      1 parameters
      1 conditional paths
      uses function quit() defined in edu::toronto::cs::gui::GrappaFrame
      uses function drawGraph() defined in edu::toronto::cs::gui::GrappaFrame
      uses function doGraphLayout() defined in edu::toronto::cs::gui::GrappaFrame
   variable DOT_ENGINE_URL in line 34
      protection public
   variable DOT_PATH in line 43
      protection public
   variable LAYOUT_PATH in line 42
      protection public
   variable PREFS in line 37
      protection public
module edu::toronto::cs::gui::GrappaFrame::XPreferencesImplGUI
   inherits from edu::toronto::cs::util::XPreferences
   function getGroupName() in line 296
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getHelp() in line 301
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function getPreferenceEditor() in line 308
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function savePrefSettings() in line 325
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 291
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function updateComponents() in line 316
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function XPreferencesImplGUI() in line 250
      protection public
      40 lines of code
      0 parameters
      1 conditional paths
   variable INPUT_WIDTH in line 235
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/ImagePanel.java
module edu::toronto::cs::gui::ImagePanel
   inherits from JPanel
   function paintComponent(Graphics) in line 32
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
   function ImagePanel(Image) in line 22
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/InputPanel.java
module edu::toronto::cs::gui::InputPanel
   inherits from JPanel
   function addCTLKeyListener(KeyListener) in line 95
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
   function addCTLToHistory(String) in line 148
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function addRunActionListener(ActionListener) in line 111
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function addTraceActionListener(ActionListener) in line 122
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function clearCTLHistory() in line 158
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getCTLHistory() in line 176
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function getInputString() in line 127
      protection public
      15 lines of code
      0 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses macro definition assert defined in util.h
   function hasHistory() in line 189
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isCounterExampleEnabled() in line 197
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setCounterExampleEnabled(boolean) in line 205
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setCTLHistory(java.util.List) in line 166
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function clearCTLHistory() defined in edu::toronto::cs::gui::InputPanel
   function showVariables(String   []) in line 213
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function updateVariables(String   []) defined in edu::toronto::cs::gui::InputPanel
      uses variable v defined in visual.m
   function updateVariables(String   []) in line 223
      protection public
      5 lines of code
      1 parameters
      8 conditional paths
      uses variable v defined in visual.m
      uses variable i defined in sparsemv.m
   function InputPanel() in line 45
      protection public
      46 lines of code
      0 parameters
      1 conditional paths
      uses variable PREFS defined in edu::toronto::cs::gui::XChekGUI
      uses variable CNTR_EX_BL defined in edu::toronto::cs::gui::XChekGUI
module edu::toronto::cs::gui::InputPanel::VarList
   inherits from JFrame
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/KEGTreeFrame.java
module edu::toronto::cs::gui::KEGTreeFrame
   inherits from JFrame
   function getGUIPreferences() in line 228
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses variable PREFS defined in edu::toronto::cs::gui::KEGTreeFrame
      uses variable HIDE_PROOF defined in edu::toronto::cs::gui::KEGTreeFrame
      uses function setFileName(String) defined in edu::toronto::cs::util::gui::FilePanel
      uses variable DAVINCI_PATH defined in edu::toronto::cs::gui::KEGTreeFrame
      uses function getFileName() defined in edu::toronto::cs::util::gui::FilePanel
   function setProofStep(ProofStep) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setStatePresenter(StatePresenter) in line 44
      protection public
      2 lines of code
      1 parameters
      5 conditional paths
      uses variable v defined in visual.m
      uses function setProofStep(ProofStep) defined in edu::toronto::cs::proof::ProofStepListModel
      uses variable PREFS defined in edu::toronto::cs::gui::KEGTreeFrame
      uses variable HIDE_PROOF defined in edu::toronto::cs::gui::KEGTreeFrame
      uses variable p defined in visual.m
      uses variable DAVINCI_PATH defined in edu::toronto::cs::gui::KEGTreeFrame
      uses function getGraph() defined in edu::toronto::cs::grappa::GrappaGraph
      uses function doGraphLayout() defined in edu::toronto::cs::gui::GrappaFrame
      uses function getGraph() defined in edu::toronto::cs::openjgraph::OpenJGraph
      uses function getRoot() defined in edu::toronto::cs::openjgraph::OpenJGraph
      uses function showDirectedGraph() defined in edu::toronto::cs::gui::OpenJGraphFrame
      uses variable vgraph defined in edu::toronto::cs::gui::OpenJGraphFrame
   function KEGTreeFrame(ProofStep,StatePresenter) in line 31
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   variable DAVINCI_PATH in line 224
      protection public
   variable HIDE_PROOF in line 225
      protection public
   variable PREFS in line 222
      protection public
module edu::toronto::cs::gui::KEGTreeFrame::XPreferencesImplGUI
   inherits from edu::toronto::cs::util::XPreferences
   function getGroupName() in line 276
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getHelp() in line 281
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPreferenceEditor() in line 286
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function savePrefSettings() in line 298
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 272
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function updateComponents() in line 291
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function XPreferencesImplGUI() in line 241
      protection public
      30 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/OpenJGraphFrame.java
module edu::toronto::cs::gui::OpenJGraphFrame
   inherits from JFrame
   function quit() in line 41
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function showDirectedGraph() in line 48
      protection public
      28 lines of code
      0 parameters
      1 conditional paths
      uses variable vgraph defined in edu::toronto::cs::gui::OpenJGraphFrame
   function OpenJGraphFrame(DirectedGraph,Vertex) in line 25
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses function quit() defined in edu::toronto::cs::gui::OpenJGraphFrame
   variable vgraph in line 21
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/OptionsPanel.java
module edu::toronto::cs::gui::OptionsPanel
   inherits from JPanel
   function addFairness() in line 453
      11 lines of code
      0 parameters
      2 conditional paths
      uses function showTextLineDialog(String,String,String) defined in edu::toronto::cs::gui::OptionsPanel
      uses function selectedFairnessChanged() defined in edu::toronto::cs::gui::OptionsPanel
   function addMacro() in line 486
      24 lines of code
      0 parameters
      2 conditional paths
   function clearFairness() in line 323
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function clearMacros() in line 332
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function editFairness() in line 468
      14 lines of code
      0 parameters
      2 conditional paths
      uses function showTextLineDialog(String,String,String) defined in edu::toronto::cs::gui::OptionsPanel
   function editMacro() in line 514
      30 lines of code
      0 parameters
      2 conditional paths
      uses function removeSelectedMacro() defined in edu::toronto::cs::gui::OptionsPanel
   function enableFairness(boolean) in line 379
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
   function getAllFairness() in line 282
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses function getFairness() defined in edu::toronto::cs::gui::OptionsPanel
   function getFairness() in line 297
      protection public
      22 lines of code
      0 parameters
      4 conditional paths
      uses variable EMPTY_ARRAY defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses variable i defined in sparsemv.m
   function removeSelectedFairness() in line 439
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function removeSelectedMacro() in line 548
      11 lines of code
      0 parameters
      2 conditional paths
      uses function showMacroExpansion() defined in edu::toronto::cs::gui::OptionsPanel
   function selectAllFairness() in line 392
      9 lines of code
      0 parameters
      1 conditional paths
   function selectedFairnessChanged() in line 416
      12 lines of code
      0 parameters
      3 conditional paths
   function selectSomeFairness() in line 405
      7 lines of code
      0 parameters
      1 conditional paths
   function setEnableTabs(boolean) in line 370
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses function enableFairness(boolean) defined in edu::toronto::cs::gui::OptionsPanel
   function setFairness(java.util.List) in line 257
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function selectAllFairness() defined in edu::toronto::cs::gui::OptionsPanel
   function showMacroExpansion() in line 432
      3 lines of code
      0 parameters
      1 conditional paths
   function showTextLineDialog(String,String,String) in line 564
      10 lines of code
      3 parameters
      2 conditional paths
      uses function title() defined in sparsemv.m
   function OptionsPanel() in line 53
      protection public
      200 lines of code
      0 parameters
      3 conditional paths
      uses function enableFairness(boolean) defined in edu::toronto::cs::gui::OptionsPanel
      uses function selectAllFairness() defined in edu::toronto::cs::gui::OptionsPanel
      uses function selectSomeFairness() defined in edu::toronto::cs::gui::OptionsPanel
      uses function selectedFairnessChanged() defined in edu::toronto::cs::gui::OptionsPanel
      uses function addFairness() defined in edu::toronto::cs::gui::OptionsPanel
      uses function editFairness() defined in edu::toronto::cs::gui::OptionsPanel
      uses function removeSelectedFairness() defined in edu::toronto::cs::gui::OptionsPanel
      uses function showMacroExpansion() defined in edu::toronto::cs::gui::OptionsPanel
      uses function addMacro() defined in edu::toronto::cs::gui::OptionsPanel
      uses function editMacro() defined in edu::toronto::cs::gui::OptionsPanel
      uses function removeSelectedMacro() defined in edu::toronto::cs::gui::OptionsPanel
      uses variable PREFS defined in edu::toronto::cs::gui::XChekGUI
      uses variable FAIRNESS_BL defined in edu::toronto::cs::gui::XChekGUI
module edu::toronto::cs::gui::OptionsPanel::MacroEditPanel
   inherits from JPanel
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/OutputPanel.java
module edu::toronto::cs::gui::OutputPanel
   inherits from JPanel
   function append(String) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
   function append(String,String) in line 73
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
   function getStyledPrinter() in line 78
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function OutputPanel() in line 28
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function OutputPanel(String) in line 33
      protection public
      29 lines of code
      1 parameters
      1 conditional paths
      uses function title() defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/ProofTreeFrame.java
module edu::toronto::cs::gui::ProofTreeFrame
   inherits from JFrame
   function checkEntry(Object) in line 90
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function createNode(ProofStep,DefaultMutableTreeNode) in line 75
      14 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function putInHashMap(Object) in line 99
      protection public
      4 lines of code
      1 parameters
      37 conditional paths
      uses function setProofStep(ProofStep) defined in edu::toronto::cs::proof2::ProofStepListModel
      uses function createNode(ProofStep,DefaultMutableTreeNode) defined in edu::toronto::cs::gui::ProofTreeFrame
      uses function toString() defined in edu::toronto::cs::proof2::ProofStep
      uses variable i defined in sparsemv.m
      uses function checkEntry(Object) defined in edu::toronto::cs::gui::ProofTreeFrame
      uses variable k defined in sparsemv.m
      uses function getGraph() defined in edu::toronto::cs::grappa::GrappaGraph
      uses function doGraphLayout() defined in edu::toronto::cs::gui::GrappaFrame
   function setProofStep(ProofStep) in line 64
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setStatePresenter(StatePresenter) in line 68
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function ProofTreeFrame(ProofStep,StatePresenter,MvSetModelChecker) in line 53
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/XChekGUI.java
module edu::toronto::cs::gui::XChekGUI
   inherits from JFrame
   function createCTLInteraction() in line 582
      29 lines of code
      0 parameters
      2 conditional paths
      uses function addRunActionListener(ActionListener) defined in edu::toronto::cs::gui::InputPanel
      uses function runOnCTL() defined in edu::toronto::cs::gui::XChekGUI
      uses function addTraceActionListener(ActionListener) defined in edu::toronto::cs::gui::InputPanel
      uses function trace() defined in edu::toronto::cs::gui::XChekGUI
      uses function addCTLKeyListener(KeyListener) defined in edu::toronto::cs::gui::InputPanel
   function createOptions() in line 621
      5 lines of code
      0 parameters
      1 conditional paths
   function createOutputArea() in line 612
      5 lines of code
      0 parameters
      1 conditional paths
   function enableAction(String,boolean) in line 1217
      6 lines of code
      2 parameters
      20 conditional paths
      uses variable v defined in visual.m
      uses function getModelCompiler() defined in edu::toronto::cs::beans::ModelCompilerPropertyDialog
      uses variable i defined in sparsemv.m
      uses variable MODEL_PREFS defined in edu::toronto::cs::gui::XChekGUI
      uses variable MODELSLIST defined in edu::toronto::cs::gui::XChekGUI
      uses variable j defined in sparsemv.m
      uses function showException(Component,String,String,Exception) defined in edu::toronto::cs::gui::XChekGUI
      uses variable s defined in visual.m
      uses variable k defined in sparsemv.m
      uses function cancel() defined in edu::toronto::cs::beans::ModelCompilerPropertyDialog
      uses variable d defined in crunch2parms.m
   function getDefaultOptions() in line 992
      protection public
      23 lines of code
      0 parameters
      1 conditional paths
   function getGUIPreferences() in line 1844
      protection public
      6 lines of code
      0 parameters
      6 conditional paths
      uses variable PREFS defined in edu::toronto::cs::gui::XChekGUI
      uses variable CNTR_EX_BL defined in edu::toronto::cs::gui::XChekGUI
      uses variable FAIRNESS_BL defined in edu::toronto::cs::gui::XChekGUI
      uses variable EXP_FEAT_BL defined in edu::toronto::cs::gui::XChekGUI
      uses variable REMOTE_X defined in edu::toronto::cs::gui::XChekGUI
      uses function setFileName(String) defined in edu::toronto::cs::util::gui::FilePanel
      uses variable DEF_DIR defined in edu::toronto::cs::gui::XChekGUI
      uses variable MODEL_DEF_DIR defined in edu::toronto::cs::gui::XChekGUI
      uses variable CTL_DEF_DIR defined in edu::toronto::cs::gui::XChekGUI
      uses variable CTL_DEF_FILE defined in edu::toronto::cs::gui::XChekGUI
      uses variable LOOK_AND_FEEL defined in edu::toronto::cs::gui::XChekGUI
      uses function getFileName() defined in edu::toronto::cs::util::gui::FilePanel
   function getModelChecker() in line 686
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function getXKripke() defined in edu::toronto::cs::gui::XChekGUI
   function getXKripke() in line 674
      protection public
      12 lines of code
      0 parameters
      2 conditional paths
      uses function compile() defined in edu::toronto::cs::modelchecker::ModelCompiler
   function init() in line 161
      64 lines of code
      0 parameters
      2 conditional paths
      uses function initApp() defined in edu::toronto::cs::gui::XChekGUI
      uses function initUserActChains() defined in edu::toronto::cs::gui::XChekGUI
      uses function initActionMap() defined in edu::toronto::cs::gui::XChekGUI
      uses function createOutputArea() defined in edu::toronto::cs::gui::XChekGUI
      uses function createOptions() defined in edu::toronto::cs::gui::XChekGUI
      uses function createCTLInteraction() defined in edu::toronto::cs::gui::XChekGUI
      uses function getDefaultOptions() defined in edu::toronto::cs::gui::XChekGUI
      uses variable PREFS defined in edu::toronto::cs::gui::XChekGUI
      uses variable CTL_DEF_FILE defined in edu::toronto::cs::gui::XChekGUI
      uses function loadCTLHistory() defined in edu::toronto::cs::gui::XChekGUI
      uses function setEnabled(boolean) defined in edu::toronto::cs::gui::XChekGUI
   function initActionMap() in line 235
      148 lines of code
      0 parameters
      1 conditional paths
      uses variable openBDDIcon defined in edu::toronto::cs::gui::XChekGUI
      uses variable loadFairnessIcon defined in edu::toronto::cs::gui::XChekGUI
      uses function loadFairness() defined in edu::toronto::cs::gui::XChekGUI
      uses variable saveFairnessIcon defined in edu::toronto::cs::gui::XChekGUI
      uses function saveFairness() defined in edu::toronto::cs::gui::XChekGUI
      uses variable loadCTLIcon defined in edu::toronto::cs::gui::XChekGUI
      uses function loadCTLHistory() defined in edu::toronto::cs::gui::XChekGUI
      uses variable saveCTLIcon defined in edu::toronto::cs::gui::XChekGUI
      uses function saveCTLHistory() defined in edu::toronto::cs::gui::XChekGUI
      uses variable preferencesIcon defined in edu::toronto::cs::gui::XChekGUI
      uses function openPreferences() defined in edu::toronto::cs::gui::XChekGUI
      uses variable quitIcon defined in edu::toronto::cs::gui::XChekGUI
      uses variable modelInfoIcon defined in edu::toronto::cs::gui::XChekGUI
      uses function showModelInfo() defined in edu::toronto::cs::gui::XChekGUI
      uses variable latticeIcon defined in edu::toronto::cs::gui::XChekGUI
      uses function showAlgebraInfo() defined in edu::toronto::cs::gui::XChekGUI
      uses variable varIcon defined in edu::toronto::cs::gui::XChekGUI
      uses function showVariables() defined in edu::toronto::cs::gui::XChekGUI
      uses function showHelp() defined in edu::toronto::cs::gui::XChekGUI
      uses function showAbout() defined in edu::toronto::cs::gui::XChekGUI
   function initApp() in line 226
      4 lines of code
      0 parameters
      1 conditional paths
   function initCloseModel() in line 438
      92 lines of code
      0 parameters
      8 conditional paths
      uses function hasHistory() defined in edu::toronto::cs::gui::InputPanel
      uses function setExpress() defined in edu::toronto::cs::util::UserAct
      uses function getName() defined in edu::toronto::cs::util::UserAct
      uses function saveCTLHistory() defined in edu::toronto::cs::gui::XChekGUI
      uses function add(UserActChain) defined in edu::toronto::cs::util::UserActChain
      uses function getFairness() defined in edu::toronto::cs::gui::OptionsPanel
      uses function saveFairness() defined in edu::toronto::cs::gui::XChekGUI
      uses function setEnabled(boolean) defined in edu::toronto::cs::gui::XChekGUI
      uses function append(String) defined in edu::toronto::cs::gui::OutputPanel
   function initLoadModelChain() in line 399
      38 lines of code
      0 parameters
      3 conditional paths
      uses function showException(Component,String,String,Exception) defined in edu::toronto::cs::gui::XChekGUI
      uses function setModelCompiler(ModelCompiler) defined in edu::toronto::cs::gui::XChekGUI
      uses function getXKripke() defined in edu::toronto::cs::gui::XChekGUI
      uses function setEnabled(boolean) defined in edu::toronto::cs::gui::XChekGUI
   function initQuitAction() in line 531
      45 lines of code
      0 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::util::UserAct
      uses function getActionEvent() defined in edu::toronto::cs::util::UserAct
      uses function confirm() defined in edu::toronto::cs::util::UserActChain
      uses function execute(UserAct) defined in edu::toronto::cs::util::UserActChain
      uses function setExpress() defined in edu::toronto::cs::util::UserAct
   function initUserActChains() in line 388
      10 lines of code
      0 parameters
      1 conditional paths
      uses function initCloseModel() defined in edu::toronto::cs::gui::XChekGUI
      uses function initQuitAction() defined in edu::toronto::cs::gui::XChekGUI
      uses function initLoadModelChain() defined in edu::toronto::cs::gui::XChekGUI
   function loadCTLHistory() in line 1094
      31 lines of code
      0 parameters
      6 conditional paths
      uses variable f defined in mvproduct.m
      uses function setCTLHistory(java.util.List) defined in edu::toronto::cs::gui::InputPanel
      uses function showException(Component,String,String,Exception) defined in edu::toronto::cs::gui::XChekGUI
   function loadCTLHistory(File) in line 1130
      29 lines of code
      1 parameters
      5 conditional paths
      uses variable f defined in mvproduct.m
      uses function setCTLHistory(java.util.List) defined in edu::toronto::cs::gui::InputPanel
      uses function showException(Component,String,String,Exception) defined in edu::toronto::cs::gui::XChekGUI
   function loadFairness() in line 1058
      3 lines of code
      0 parameters
      1 conditional paths
   function main(String   []) in line 1802
      protection public
      38 lines of code
      1 parameters
      7 conditional paths
      uses variable PREFS defined in edu::toronto::cs::gui::XChekGUI
      uses variable LOOK_AND_FEEL defined in edu::toronto::cs::gui::XChekGUI
      uses variable REMOTE_X defined in edu::toronto::cs::gui::XChekGUI
      uses function XChekGUI() defined in edu::toronto::cs::gui::XChekGUI
   function openPreferences() in line 1164
      4 lines of code
      0 parameters
      1 conditional paths
   function parseCTL(String) in line 715
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses function getFairness() defined in edu::toronto::cs::gui::OptionsPanel
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLNode
      uses function showException(Component,String,String,Exception) defined in edu::toronto::cs::gui::XChekGUI
   function prepareCTL(String) in line 739
      protection public
      7 lines of code
      1 parameters
      5 conditional paths
      uses function parseCTL(String) defined in edu::toronto::cs::gui::XChekGUI
      uses function getStyledPrinter() defined in edu::toronto::cs::gui::OutputPanel
      uses function println() defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function rewriteCTL(CTLNode) defined in edu::toronto::cs::gui::XChekGUI
      uses function getXKripke() defined in edu::toronto::cs::gui::XChekGUI
      uses function getAlgebra() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function renew() defined in edu::toronto::cs::tlq::PlaceholderReWriter
      uses function renew() defined in edu::toronto::cs::tlq::MvSetPlaceholderReWriter
      uses function getModelChecker() defined in edu::toronto::cs::gui::XChekGUI
      uses function renew() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
   function quit() in line 1045
      11 lines of code
      0 parameters
      2 conditional paths
   function resetApp() in line 151
      9 lines of code
      0 parameters
      1 conditional paths
      uses function setEnabled(boolean) defined in edu::toronto::cs::gui::XChekGUI
   function rewriteCTL(CTLNode) in line 692
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLNode
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CTLReWriter
      uses macro definition assert defined in util.h
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::SyntaxChecker
   function runOnCTL() in line 783
      protection public
      64 lines of code
      0 parameters
      5 conditional paths
      uses function getXKripke() defined in edu::toronto::cs::gui::XChekGUI
      uses function getInputString() defined in edu::toronto::cs::gui::InputPanel
      uses function prepareCTL(String) defined in edu::toronto::cs::gui::XChekGUI
      uses function addCTLToHistory(String) defined in edu::toronto::cs::gui::InputPanel
      uses function getModelChecker() defined in edu::toronto::cs::gui::XChekGUI
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getStyledPrinter() defined in edu::toronto::cs::gui::OutputPanel
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function italicln(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function toString() defined in edu::toronto::cs::util::StopWatch
      uses function getInit() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function isCounterExampleEnabled() defined in edu::toronto::cs::gui::InputPanel
      uses variable PREFS defined in edu::toronto::cs::gui::XChekGUI
      uses variable EXP_FEAT_BL defined in edu::toronto::cs::gui::XChekGUI
      uses function showException(Component,String,String,Exception) defined in edu::toronto::cs::gui::XChekGUI
   function saveCTLHistory() in line 1065
      29 lines of code
      0 parameters
      6 conditional paths
      uses variable f defined in mvproduct.m
      uses function getCTLHistory() defined in edu::toronto::cs::gui::InputPanel
      uses function showException(Component,String,String,Exception) defined in edu::toronto::cs::gui::XChekGUI
   function saveFairness() in line 1061
      4 lines of code
      0 parameters
      1 conditional paths
   function setEnabled(boolean) in line 1022
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses function setEnableTabs(boolean) defined in edu::toronto::cs::gui::OptionsPanel
      uses variable PREFS defined in edu::toronto::cs::gui::XChekGUI
      uses variable FAIRNESS_BL defined in edu::toronto::cs::gui::XChekGUI
      uses function enableFairness(boolean) defined in edu::toronto::cs::gui::OptionsPanel
      uses function clearFairness() defined in edu::toronto::cs::gui::OptionsPanel
      uses function clearMacros() defined in edu::toronto::cs::gui::OptionsPanel
   function setModelCompiler(ModelCompiler) in line 628
      protection public
      46 lines of code
      1 parameters
      3 conditional paths
      uses variable v defined in visual.m
      uses function getXKripke() defined in edu::toronto::cs::gui::XChekGUI
   function showAbout() in line 1194
      8 lines of code
      0 parameters
      1 conditional paths
   function showAlgebraInfo() in line 1184
      3 lines of code
      0 parameters
      1 conditional paths
   function showException(Component,String,String,Exception) in line 1204
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses function title() defined in sparsemv.m
   function showHelp() in line 1188
      5 lines of code
      0 parameters
      1 conditional paths
   function showModelInfo() in line 1172
      3 lines of code
      0 parameters
      1 conditional paths
   function showVariables() in line 1179
      3 lines of code
      0 parameters
      1 conditional paths
   function trace() in line 851
      protection public
      8 lines of code
      0 parameters
      5 conditional paths
      uses function getModelChecker() defined in edu::toronto::cs::gui::XChekGUI
      uses function getXKripke() defined in edu::toronto::cs::gui::XChekGUI
      uses function getStyledPrinter() defined in edu::toronto::cs::gui::OutputPanel
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function italicln(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getAlgebra() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getSolutions(AlgebraValue,StatePresenter) defined in edu::toronto::cs::tlq::PlaceholderReWriter
      uses function getSolutions(AlgebraValue,StatePresenter) defined in edu::toronto::cs::tlq::MvSetPlaceholderReWriter
      uses variable i defined in sparsemv.m
      uses function boldln(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function println() defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses function getInit() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function addProofRule(ProofRule) defined in edu::toronto::cs::proof2::CTLProver
      uses function expand(ProofStep) defined in edu::toronto::cs::proof2::CTLProver
      uses function discharge() defined in edu::toronto::cs::proof::ProofStep
      uses function append(String) defined in edu::toronto::cs::gui::OutputPanel
   function XChekGUI() in line 142
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function init() defined in edu::toronto::cs::gui::XChekGUI
      uses function resetApp() defined in edu::toronto::cs::gui::XChekGUI
   variable CNTR_EX_BL in line 64
      protection public
   variable CTL_DEF_DIR in line 62
      protection public
   variable CTL_DEF_FILE in line 63
      protection public
   variable DEF_DIR in line 60
      protection public
   variable EXP_FEAT_BL in line 66
      protection public
   variable FAIRNESS_BL in line 65
      protection public
   variable latticeIcon in line 1794
      protection public
   variable loadCTLIcon in line 1786
      protection public
   variable loadFairnessIcon in line 1782
      protection public
   variable LOOK_AND_FEEL in line 67
      protection public
   variable MODEL_DEF_DIR in line 61
      protection public
   variable MODEL_PREFS in line 54
      protection public
   variable modelInfoIcon in line 1792
      protection public
   variable MODELSLIST in line 72
      protection public
   variable openBDDIcon in line 1780
      protection public
   variable openXMLIcon in line 1778
      protection public
   variable preferencesIcon in line 1798
      protection public
   variable PREFS in line 51
      protection public
   variable quitIcon in line 1790
      protection public
   variable REMOTE_X in line 70
      protection public
   variable saveCTLIcon in line 1788
      protection public
   variable saveFairnessIcon in line 1784
      protection public
   variable varIcon in line 1796
      protection public
module edu::toronto::cs::gui::XChekGUI::PickModelCompiler
   function pickModelCompiler(JFrame) in line 1320
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::gui::XChekGUI::PickModelCompiler::ModelDescription
   function getClassName() in line 1246
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getModelName() in line 1251
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setClassName(String) in line 1237
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setModelName(String) in line 1241
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 1256
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::gui::XChekGUI::LoadModelFromFile
   function loadModel(JFileChooser) in line 1744
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::gui::XChekGUI::XPreferencesImplGUI
   inherits from edu::toronto::cs::util::XPreferences
   function cntrExBlChkStatus() in line 2058
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getGroupName() in line 1976
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getHelp() in line 1981
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPreferenceEditor() in line 1986
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function savePrefSettings() in line 2012
      protection public
      44 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 1971
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function updateComponents() in line 1994
      protection public
      14 lines of code
      0 parameters
      1 conditional paths
   function XPreferencesImplGUI() in line 1881
      protection public
      89 lines of code
      0 parameters
      1 conditional paths
   variable INPUT_WIDTH in line 1857
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/XChekMenuBar.java
module edu::toronto::cs::gui::XChekMenuBar
   inherits from JMenuBar
   function XChekMenuBar(ActionMap) in line 54
      protection public
      104 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/XChekToolbar.java
module edu::toronto::cs::gui::XChekToolbar
   inherits from JToolBar
   function XChekToolbar(ActionMap) in line 48
      protection public
      50 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/gui/XPreferencesPresenter.java
module edu::toronto::cs::gui::XPreferencesPresenter
   inherits from JDialog
   function doExport() in line 249
      protection public
      25 lines of code
      0 parameters
      3 conditional paths
      uses variable PARENTPREFS defined in edu::toronto::cs::gui::XPreferencesPresenter
   function doImport() in line 230
      protection public
      18 lines of code
      0 parameters
      2 conditional paths
      uses function updateComponents() defined in edu::toronto::cs::util::XPreferences
   function init() in line 136
      protection public
      74 lines of code
      0 parameters
      2 conditional paths
      uses function savePrefSettings() defined in edu::toronto::cs::util::XPreferences
      uses function updateComponents() defined in edu::toronto::cs::util::XPreferences
      uses function doImport() defined in edu::toronto::cs::gui::XPreferencesPresenter
      uses function doExport() defined in edu::toronto::cs::gui::XPreferencesPresenter
      uses function getPreferenceEditor() defined in edu::toronto::cs::util::XPreferences
   function setCurrent(int) in line 123
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
      uses function setCurrentPreference(XPreferences) defined in edu::toronto::cs::gui::XPreferencesPresenter
   function setCurrentPreference(XPreferences) in line 129
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function switchSelection(int) in line 212
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function getPreferenceEditor() defined in edu::toronto::cs::util::XPreferences
      uses function setCurrent(int) defined in edu::toronto::cs::gui::XPreferencesPresenter
      uses variable i defined in sparsemv.m
   function XPreferencesPresenter() in line 46
      protection public
      64 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function switchSelection(int) defined in edu::toronto::cs::gui::XPreferencesPresenter
      uses function setCurrent(int) defined in edu::toronto::cs::gui::XPreferencesPresenter
      uses function init() defined in edu::toronto::cs::gui::XPreferencesPresenter
      uses variable p defined in visual.m
   variable PARENTPREFS in line 25
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/jcudd/CIntArray.java
module edu::toronto::cs::jcudd::CIntArray
   function cast() in line 53
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntArray
   function delete() in line 29
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntArray
      uses variable swigCMemOwn defined in edu::toronto::cs::jcudd::CIntArray
   function finalize() in line 25
      3 lines of code
      0 parameters
      1 conditional paths
   function frompointer(SWIGTYPE_p_int) in line 58
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function CIntArray() defined in edu::toronto::cs::jcudd::CIntArray
   function getCPtr(CIntArray) in line 37
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntArray
   function getitem(int) in line 45
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntArray
   function setitem(int,int) in line 49
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntArray
   function CIntArray(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::jcudd::CIntArray
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntArray
   function CIntArray() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   function CIntArray(int) in line 41
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/CIntArray.java
module edu::toronto::cs::tp::cvcl::CIntArray
   function cast() in line 53
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CIntArray
   function delete() in line 29
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CIntArray
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::CIntArray
   function finalize() in line 25
      3 lines of code
      0 parameters
      1 conditional paths
   function frompointer(SWIGTYPE_p_int) in line 58
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function CIntArray() defined in edu::toronto::cs::tp::cvcl::CIntArray
   function getCPtr(CIntArray) in line 37
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CIntArray
   function getitem(int) in line 45
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CIntArray
   function setitem(int,int) in line 49
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CIntArray
   function CIntArray(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::CIntArray
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CIntArray
   function CIntArray() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   function CIntArray(int) in line 41
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/jcudd/CIntPtr.java
module edu::toronto::cs::jcudd::CIntPtr
   function assign(int) in line 41
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntPtr
      uses function value() defined in edu::toronto::cs::jcudd::CIntPtr
   function cast() in line 49
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntPtr
   function delete() in line 25
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntPtr
      uses variable swigCMemOwn defined in edu::toronto::cs::jcudd::CIntPtr
   function finalize() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   function frompointer(SWIGTYPE_p_int) in line 54
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function CIntPtr() defined in edu::toronto::cs::jcudd::CIntPtr
   function getCPtr(CIntPtr) in line 33
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntPtr
   function value() in line 45
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntPtr
   function CIntPtr(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::jcudd::CIntPtr
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CIntPtr
   function CIntPtr() in line 37
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/jcudd/CuddCube.java
module edu::toronto::cs::jcudd::CuddCube
   function delete() in line 25
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CuddCube
      uses variable swigCMemOwn defined in edu::toronto::cs::jcudd::CuddCube
   function finalize() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   function getCPtr(CuddCube) in line 33
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CuddCube
   function getCube() in line 41
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CuddCube
   function getValue() in line 50
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CuddCube
   function setCube(SWIGTYPE_p_int) in line 37
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CuddCube
   function setValue(int) in line 46
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CuddCube
   function CuddCube(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::jcudd::CuddCube
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::CuddCube
   function CuddCube() in line 54
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/jcudd/JMVLCudd.java
module edu::toronto::cs::jcudd::JMVLCudd
   inherits from edu::toronto::cs::jcudd::JMVLCuddConstants
   function Cudd_addConst(int,int) in line 107
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Cudd_addIte(int,int,int,int) in line 109
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function Cudd_addIthVar(int,int) in line 105
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function Cudd_addNewVar(int) in line 103
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_addPermute(int,int,SWIGTYPE_p_int) in line 111
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_AutodynDisable(int) in line 21
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function Cudd_AutodynEnable(int,int) in line 17
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function Cudd_bddAnd(int,int,int) in line 83
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function Cudd_bddAndAbstract(int,int,int,int) in line 101
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function Cudd_bddExistAbstract(int,int,int) in line 91
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function Cudd_bddIte(int,int,int,int) in line 87
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function Cudd_bddIthVar(int,int) in line 95
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function Cudd_bddNewVar(int) in line 93
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_bddOr(int,int,int) in line 85
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function Cudd_bddPermute(int,int,SWIGTYPE_p_int) in line 99
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_bddUnivAbstract(int,int,int) in line 89
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function Cudd_bddXor(int,int,int) in line 97
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function Cudd_CheckZeroRef(int) in line 39
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function Cudd_Cofactor(int,int,int) in line 113
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function Cudd_DagSize(int) in line 59
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function Cudd_FirstCube(int,int,CuddCube) in line 63
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_GenFree(int) in line 69
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function Cudd_IsConstant(int) in line 47
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function Cudd_NextCube(int,CuddCube) in line 65
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function Cudd_Not(int) in line 81
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_PrintMinterm(int,int) in line 35
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function Cudd_ReadLogicZero(int) in line 79
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_ReadOne(int) in line 77
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_RecursiveDeref(int,int) in line 31
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function Cudd_Ref(int) in line 55
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function cuddGarbageCollect(int,int) in line 51
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function cuddV(int) in line 43
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function ddSize(int) in line 73
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isCube(int,int) in line 13
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function jmvlCudd_Above(int,int,int) in line 123
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function jmvlCudd_And(int,int,int) in line 117
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function jmvlCudd_Below(int,int,int) in line 125
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function jmvlCudd_Eq(int,int,int) in line 121
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function jmvlCudd_infoAbove(int,int,int) in line 133
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function jmvlCudd_infoBelow(int,int,int) in line 135
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function jmvlCudd_infoJoin(int,int,int) in line 131
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function jmvlCudd_infoMeet(int,int,int) in line 129
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function jmvlCudd_infoNot(int,int) in line 127
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function jmvlCudd_Init(int,Object,int,int,int,int) in line 25
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function jmvlCudd_Not(int,int) in line 115
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function jmvlCudd_Or(int,int,int) in line 119
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function jmvlCudd_Quit(int) in line 27
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function mvlCudd_bddNextMinterm(int,int,int,int,int) in line 149
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function mvlCudd_CubeDiff(int,int,int) in line 145
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function mvlCudd_ExistAbstract(int,int,int) in line 137
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function mvlCudd_ExistMeetAbstract(int,int,int,int) in line 141
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function mvlCudd_HasNextMinterm(int,int) in line 153
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function mvlCudd_MintermIterator(int,int) in line 151
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function mvlCudd_NextMinterm(int,int,int,int,int) in line 147
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function mvlCudd_Support(int,int) in line 143
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function mvlCudd_UnivAbstract(int,int,int) in line 139
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/jcudd/JMVLCuddConstants.java
module edu::toronto::cs::jcudd::JMVLCuddConstants
   variable CUDD_REORDER_ANNEALING in line 30
      protection public
   variable CUDD_REORDER_EXACT in line 34
      protection public
   variable CUDD_REORDER_GENETIC in line 31
      protection public
   variable CUDD_REORDER_GROUP_SIFT in line 28
      protection public
   variable CUDD_REORDER_GROUP_SIFT_CONV in line 29
      protection public
   variable CUDD_REORDER_LINEAR in line 32
      protection public
   variable CUDD_REORDER_LINEAR_CONVERGE in line 33
      protection public
   variable CUDD_REORDER_NONE in line 15
      protection public
   variable CUDD_REORDER_RANDOM in line 16
      protection public
   variable CUDD_REORDER_RANDOM_PIVOT in line 17
      protection public
   variable CUDD_REORDER_SAME in line 14
      protection public
   variable CUDD_REORDER_SIFT in line 18
      protection public
   variable CUDD_REORDER_SIFT_CONVERGE in line 19
      protection public
   variable CUDD_REORDER_SYMM_SIFT in line 20
      protection public
   variable CUDD_REORDER_SYMM_SIFT_CONV in line 21
      protection public
   variable CUDD_REORDER_WINDOW2 in line 22
      protection public
   variable CUDD_REORDER_WINDOW2_CONV in line 25
      protection public
   variable CUDD_REORDER_WINDOW3 in line 23
      protection public
   variable CUDD_REORDER_WINDOW3_CONV in line 26
      protection public
   variable CUDD_REORDER_WINDOW4 in line 24
      protection public
   variable CUDD_REORDER_WINDOW4_CONV in line 27
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/jcudd/JMVLCuddJNI.java
module edu::toronto::cs::jcudd::JMVLCuddJNI
   function CIntArray_cast(long) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CIntArray_frompointer(long) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CIntArray_getitem(long,int) in line 15
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function CIntArray_setitem(long,int,int) in line 16
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CIntPtr_assign(long,int) in line 21
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function CIntPtr_cast(long) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CIntPtr_frompointer(long) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CIntPtr_value(long) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_addConst(int,int) in line 84
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Cudd_addIte(int,int,int,int) in line 85
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function Cudd_addIthVar(int,int) in line 83
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Cudd_addNewVar(int) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_addPermute(int,int,long) in line 86
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_AutodynDisable(int) in line 54
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_AutodynEnable(int,int) in line 53
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Cudd_bddAnd(int,int,int) in line 72
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_bddAndAbstract(int,int,int,int) in line 81
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function Cudd_bddExistAbstract(int,int,int) in line 76
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_bddIte(int,int,int,int) in line 74
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function Cudd_bddIthVar(int,int) in line 78
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Cudd_bddNewVar(int) in line 77
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_bddOr(int,int,int) in line 73
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_bddPermute(int,int,long) in line 80
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_bddUnivAbstract(int,int,int) in line 75
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_bddXor(int,int,int) in line 79
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_CheckZeroRef(int) in line 59
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_Cofactor(int,int,int) in line 87
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_DagSize(int) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_FirstCube(int,int,CuddCube) in line 65
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Cudd_GenFree(int) in line 67
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_IsConstant(int) in line 61
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_NextCube(int,CuddCube) in line 66
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Cudd_Not(int) in line 71
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_PrintMinterm(int,int) in line 58
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Cudd_ReadLogicZero(int) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_ReadOne(int) in line 69
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Cudd_RecursiveDeref(int,int) in line 57
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Cudd_Ref(int) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cuddGarbageCollect(int,int) in line 62
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cuddV(int) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ddSize(int) in line 68
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function delete_CIntArray(long) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function delete_CIntPtr(long) in line 20
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function delete_CuddCube(long) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get_CUDD_REORDER_ANNEALING() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_EXACT() in line 51
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_GENETIC() in line 48
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_GROUP_SIFT() in line 45
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_GROUP_SIFT_CONV() in line 46
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_LINEAR() in line 49
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_LINEAR_CONVERGE() in line 50
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_NONE() in line 32
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_RANDOM() in line 33
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_RANDOM_PIVOT() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_SAME() in line 31
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_SIFT() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_SIFT_CONVERGE() in line 36
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_SYMM_SIFT() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_SYMM_SIFT_CONV() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_WINDOW2() in line 39
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_WINDOW2_CONV() in line 42
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_WINDOW3() in line 40
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_WINDOW3_CONV() in line 43
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_WINDOW4() in line 41
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CUDD_REORDER_WINDOW4_CONV() in line 44
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CuddCube_cube(long) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get_CuddCube_value(long) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function isCube(int,int) in line 52
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function jmvlCudd_Above(int,int,int) in line 92
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function jmvlCudd_And(int,int,int) in line 89
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function jmvlCudd_Below(int,int,int) in line 93
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function jmvlCudd_Eq(int,int,int) in line 91
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function jmvlCudd_infoAbove(int,int,int) in line 97
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function jmvlCudd_infoBelow(int,int,int) in line 98
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function jmvlCudd_infoJoin(int,int,int) in line 96
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function jmvlCudd_infoMeet(int,int,int) in line 95
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function jmvlCudd_infoNot(int,int) in line 94
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function jmvlCudd_Init(int,Object,int,int,int,int) in line 55
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function jmvlCudd_Not(int,int) in line 88
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function jmvlCudd_Or(int,int,int) in line 90
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function jmvlCudd_Quit(int) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mvlCudd_bddNextMinterm(int,int,int,int,int) in line 105
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function mvlCudd_CubeDiff(int,int,int) in line 103
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function mvlCudd_ExistAbstract(int,int,int) in line 99
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function mvlCudd_ExistMeetAbstract(int,int,int,int) in line 101
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function mvlCudd_HasNextMinterm(int,int) in line 107
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function mvlCudd_MintermIterator(int,int) in line 106
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function mvlCudd_NextMinterm(int,int,int,int,int) in line 104
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function mvlCudd_Support(int,int) in line 102
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function mvlCudd_UnivAbstract(int,int,int) in line 100
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_CIntArray(int) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function new_CIntPtr() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function new_CuddCube() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function set_CuddCube_cube(long,long) in line 25
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function set_CuddCube_value(long,int) in line 27
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/jcudd/SWIGTYPE_p_int.java
module edu::toronto::cs::jcudd::SWIGTYPE_p_int
   function getCPtr(SWIGTYPE_p_int) in line 23
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::SWIGTYPE_p_int
   function SWIGTYPE_p_int(long,boolean) in line 15
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::SWIGTYPE_p_int
   function SWIGTYPE_p_int() in line 19
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::jcudd::SWIGTYPE_p_int
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/SWIGTYPE_p_int.java
module edu::toronto::cs::tp::cvcl::SWIGTYPE_p_int
   function getCPtr(SWIGTYPE_p_int) in line 23
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_int
   function SWIGTYPE_p_int(long,boolean) in line 15
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_int
   function SWIGTYPE_p_int() in line 19
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_int
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mdd/ApplyFunctions.java
module edu::toronto::cs::mdd::ApplyFunctions
module edu::toronto::cs::mdd::ApplyFunctions::ApplyFunction
   function isCacheable() in line 10
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::BinApplyFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::ApplyFunction
   function binApply(MDDNode,MDDNode) in line 15
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function isSymetric() in line 16
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::UnaryApplyFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::ApplyFunction
   function unaryApply(MDDNode) in line 21
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::QuantifyFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::ApplyFunction
   function canTerminate(int,MDDNode) in line 28
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function getIdentity(int) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getOperator(int) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::AbstractApplyFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::ApplyFunction
   abstract class
   function isCacheable() in line 33
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::TerminalBinApplyFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::AbstractApplyFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::BinApplyFunction
   abstract class
   function binApply(MDDNode,MDDNode) in line 48
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
   function binApply(int,int) in line 57
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function isSymetric() in line 56
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function TerminalBinApplyFunction(MDDManager) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::AlgebraFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::TerminalBinApplyFunction
   abstract class
   function AlgebraFunction(MDDManager,IAlgebra) in line 68
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses variable top defined in algebra
      uses variable bot defined in algebra
module edu::toronto::cs::mdd::ApplyFunctions::BelnapFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::AbstractApplyFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::BinApplyFunction
   abstract class
   function isSymetric() in line 91
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function BelnapFunction(MDDManager,BelnapAlgebra) in line 84
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
module edu::toronto::cs::mdd::ApplyFunctions::InfoMeetFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::BelnapFunction
   function binApply(MDDNode,MDDNode) in line 105
      protection public
      9 lines of code
      2 parameters
      5 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
   function InfoMeetFunction(MDDManager,BelnapAlgebra) in line 100
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::InfoJoinFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::BelnapFunction
   function binApply(MDDNode,MDDNode) in line 123
      protection public
      9 lines of code
      2 parameters
      5 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
   function InfoJoinFunction(MDDManager,BelnapAlgebra) in line 118
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::MeetFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::AlgebraFunction
   function binApply(MDDNode,MDDNode) in line 148
      protection public
      9 lines of code
      2 parameters
      5 conditional paths
   function binApply(int,int) in line 157
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function isSymetric() in line 143
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function MeetFunction(MDDManager,IAlgebra) in line 139
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::JoinFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::AlgebraFunction
   function binApply(MDDNode,MDDNode) in line 174
      protection public
      10 lines of code
      2 parameters
      5 conditional paths
   function binApply(int,int) in line 184
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function isSymetric() in line 169
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function JoinFunction(MDDManager,IAlgebra) in line 165
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::ImpliesFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::AlgebraFunction
   function binApply(MDDNode,MDDNode) in line 201
      protection public
      10 lines of code
      2 parameters
      4 conditional paths
   function binApply(int,int) in line 211
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function isSymetric() in line 196
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ImpliesFunction(MDDManager,IAlgebra) in line 192
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::EqualsFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::AlgebraFunction
   function binApply(MDDNode,MDDNode) in line 234
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
   function binApply(int,int) in line 244
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function isSymetric() in line 229
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function EqualsFunction(MDDManager,IAlgebra) in line 223
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses variable top defined in algebra
      uses variable bot defined in algebra
module edu::toronto::cs::mdd::ApplyFunctions::BelowFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::AlgebraFunction
   function binApply(MDDNode,MDDNode) in line 261
      protection public
      11 lines of code
      2 parameters
      5 conditional paths
   function binApply(int,int) in line 272
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function isSymetric() in line 256
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function BelowFunction(MDDManager,IAlgebra) in line 252
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::AboveFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::AlgebraFunction
   function binApply(MDDNode,MDDNode) in line 289
      protection public
      11 lines of code
      2 parameters
      5 conditional paths
   function binApply(int,int) in line 300
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function isSymetric() in line 284
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function AboveFunction(MDDManager,IAlgebra) in line 280
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::mdd::ApplyFunctions::NegFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::AbstractApplyFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::UnaryApplyFunction
   function unaryApply(MDDNode) in line 325
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
   function NegFunction(MDDManager,IAlgebra) in line 316
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses variable top defined in algebra
      uses variable bot defined in algebra
module edu::toronto::cs::mdd::ApplyFunctions::UniformQuantify
   inherits from edu::toronto::cs::mdd::ApplyFunctions::AbstractApplyFunction
   inherits from edu::toronto::cs::mdd::ApplyFunctions::QuantifyFunction
   function canTerminate(int,MDDNode) in line 363
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function getIdentity(int) in line 355
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getOperator(int) in line 359
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function isCacheable() in line 367
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function UniformQuantify(MDDNode,BinApplyFunction,MDDNode) in line 347
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mdd/MDDCacheStub.java
module edu::toronto::cs::mdd::MDDCacheStub
   inherits from edu::toronto::cs::mdd::MDDNodeCache
   function cleanup() in line 48
      protection public
      5 lines of code
      0 parameters
      3 conditional paths
      uses variable o defined in visual.m
      uses function objectHashCode() defined in edu::toronto::cs::mdd::MDDNode
      uses variable primes defined in edu::toronto::cs::mdd::MDDNode
   function find(Object,MDDNode,MDDNode) in line 27
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function get(Object) defined in edu::toronto::cs::util::SoftHashMap
   function find(Object,MDDNode) in line 32
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function find(Object,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDCacheStub
   function insert(Object,MDDNode,MDDNode,MDDNode) in line 37
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function put(Object,Object) defined in edu::toronto::cs::util::SoftHashMap
   function insert(Object,MDDNode,MDDNode) in line 43
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function insert(Object,MDDNode,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDCacheStub
   function MDDCacheStub() in line 20
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::mdd::MDDCacheStub::MDDCacheKey
   function equals(Object) in line 96
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function equals(MDDCacheKey) in line 103
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function hashCode() in line 110
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
   function MDDCacheKey() in line 70
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function MDDCacheKey(Object,MDDNode) in line 76
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function MDDCacheKey(Object,MDDNode,MDDNode) in line 81
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mdd/MDDLeafNode.java
module edu::toronto::cs::mdd::MDDLeafNode
   inherits from edu::toronto::cs::mdd::MDDNode
   function childrenSize() in line 53
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function equals(Object) in line 74
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function equals(MDDLeafNode) in line 81
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getValue() defined in edu::toronto::cs::mdd::MDDLeafNode
   function getChild(int) in line 62
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function getChildren() in line 57
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function getCubeLastVar() in line 92
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getImage() in line 29
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 25
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVarIndex() in line 69
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 86
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function getValue() defined in edu::toronto::cs::mdd::MDDLeafNode
      uses variable primes defined in edu::toronto::cs::mdd::MDDNode
   function isConstant() in line 49
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setValue(int) in line 34
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
   function toString() in line 97
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function MDDLeafNode() in line 15
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function MDDLeafNode(int) in line 20
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function setValue(int) defined in edu::toronto::cs::mdd::MDDLeafNode
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mdd/MDDManager.java
module edu::toronto::cs::mdd::MDDManager
   function apply(BinApplyFunction,MDDNode,MDDNode) in line 290
      protection public
      81 lines of code
      3 parameters
      11 conditional paths
      uses function objectHashCode() defined in edu::toronto::cs::mdd::MDDNode
      uses function find(Object,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDNodeCache
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
      uses macro definition assert defined in util.h
      uses function childrenSize() defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
      uses function getChild(int) defined in edu::toronto::cs::mdd::MDDNode
      uses function makeUnique(int,MDDNode[]) defined in edu::toronto::cs::mdd::MDDManager
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function insert(Object,MDDNode,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDNodeCache
   function apply(UnaryApplyFunction,MDDNode) in line 375
      protection public
      29 lines of code
      2 parameters
      6 conditional paths
      uses function find(Object,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDNodeCache
      uses function childrenSize() defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
      uses function apply(BinApplyFunction,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
      uses function getChild(int) defined in edu::toronto::cs::mdd::MDDNode
      uses function makeUnique(int,MDDNode[]) defined in edu::toronto::cs::mdd::MDDManager
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
      uses function insert(Object,MDDNode,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDNodeCache
   function buildCube(int[],MDDNode,MDDNode) in line 620
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function buildCube(int[],int,MDDNode,MDDNode) in line 625
      protection public
      31 lines of code
      4 parameters
      6 conditional paths
      uses variable i defined in sparsemv.m
      uses function ensureCapacity(int) defined in edu::toronto::cs::mdd::MDDManager
      uses function sortVars(int[]) defined in edu::toronto::cs::mdd::MDDManager
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses function makeUnique(int,MDDNode[]) defined in edu::toronto::cs::mdd::MDDManager
   function buildPoint(int[],MDDNode,MDDNode) in line 657
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function buildPoint(int[],int,MDDNode,MDDNode) in line 662
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function buildPoint(int[],MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
   function buildPoint(int[],int,int,MDDNode,MDDNode) in line 680
      31 lines of code
      5 parameters
      6 conditional paths
      uses function ensureCapacity(int) defined in edu::toronto::cs::mdd::MDDManager
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses variable i defined in sparsemv.m
      uses variable res defined in visual.m
      uses function makeUnique(int,MDDNode[]) defined in edu::toronto::cs::mdd::MDDManager
   function buildVar(int,int,MDDNode,MDDNode) in line 601
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
   function buildVar(int,int,int,MDDNode,MDDNode) in line 606
      protection public
      13 lines of code
      5 parameters
      1 conditional paths
      uses function makeUnique(int,MDDNode[]) defined in edu::toronto::cs::mdd::MDDManager
   function cofactor(MDDNode,MDDNode,MDDNode) in line 406
      protection public
      32 lines of code
      3 parameters
      9 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function childrenSize() defined in edu::toronto::cs::mdd::MDDNode
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
      uses function getChild(int) defined in edu::toronto::cs::mdd::MDDNode
      uses function makeUnique(int,MDDNode[]) defined in edu::toronto::cs::mdd::MDDManager
      uses macro definition assert defined in util.h
   function cofactor(MDDNode,int,int) in line 441
      protection public
      30 lines of code
      3 parameters
      5 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
      uses function childrenSize() defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
      uses function cofactor(MDDNode,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
      uses function getChild(int) defined in edu::toronto::cs::mdd::MDDNode
      uses function makeUnique(int,MDDNode[]) defined in edu::toronto::cs::mdd::MDDManager
      uses macro definition assert defined in util.h
   function collectValues(MDDNode) in line 754
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function cubeIterator(MDDNode,MDDNode) in line 767
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function dagSize(MDDNode) in line 714
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function ensureCapacity(int) in line 188
      36 lines of code
      1 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses variable v defined in visual.m
      uses variable i defined in sparsemv.m
   function getLeafNode(int) in line 150
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function setValue(int) defined in edu::toronto::cs::mdd::MDDLeafNode
   function getNvars() in line 122
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function kase(int,MDDNode[]) in line 172
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function makeUnique(int,MDDNode[]) defined in edu::toronto::cs::mdd::MDDManager
   function makeUnique(int,MDDNode[]) in line 234
      protection public
      52 lines of code
      2 parameters
      7 conditional paths
      uses macro definition assert defined in util.h
      uses variable i defined in sparsemv.m
      uses function ensureCapacity(int) defined in edu::toronto::cs::mdd::MDDManager
      uses function setVarIndex(int) defined in edu::toronto::cs::mdd::MDDTreeNode
      uses function setChildren(MDDNode[]) defined in edu::toronto::cs::mdd::MDDTreeNode
   function mintermIterator(MDDNode,MDDNode,MDDNode,int) in line 772
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
   function quantify(QuantifyFunction,MDDNode,MDDNode) in line 476
      protection public
      66 lines of code
      3 parameters
      11 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function getCubeLastVar() defined in edu::toronto::cs::mdd::MDDNode
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
      uses function getChild(int) defined in edu::toronto::cs::mdd::MDDNode
      uses function find(Object,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDNodeCache
      uses function childrenSize() defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
      uses function makeUnique(int,MDDNode[]) defined in edu::toronto::cs::mdd::MDDManager
      uses function apply(BinApplyFunction,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
      uses function insert(Object,MDDNode,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDNodeCache
   function renameVars(MDDNode,int[]) in line 544
      protection public
      35 lines of code
      2 parameters
      6 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function find(Object,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDNodeCache
      uses function childrenSize() defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
      uses function getChild(int) defined in edu::toronto::cs::mdd::MDDNode
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
      uses function makeUnique(int,MDDNode[]) defined in edu::toronto::cs::mdd::MDDManager
      uses function insert(Object,MDDNode,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDNodeCache
   function renew() in line 107
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses function cleanup() defined in edu::toronto::cs::mdd::MDDNodeCache
   function setCaching(boolean) in line 135
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function sharedSize(MDDNode[]) in line 720
      protection public
      8 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function childrenSize() defined in edu::toronto::cs::mdd::MDDNode
      uses function getChild(int) defined in edu::toronto::cs::mdd::MDDNode
   function sortVars(int[]) in line 587
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses variable i defined in sparsemv.m
   function toDaVinci(MDDNode) in line 780
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function MDDManager(int,int) in line 71
      protection public
      30 lines of code
      2 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   variable NO_VALUE in line 26
      protection public
module edu::toronto::cs::mdd::MDDManager::MDDMintermIterator
   inherits from java::util::Iterator
   function hasNext() in line 810
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function next() in line 815
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function remove() in line 820
      protection public
      5 lines of code
      0 parameters
      12 conditional paths
      uses function hasNext() defined in edu::toronto::cs::mdd::MDDManager::MDDMintermIterator
      uses function hasNext() defined in edu::toronto::cs::mdd::MDDManager::MDDCubeIterator
      uses function next() defined in edu::toronto::cs::mdd::MDDManager::MDDCubeIterator
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function buildPoint(int[],MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses function getChild(int) defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
      uses variable res defined in visual.m
      uses function childrenSize() defined in edu::toronto::cs::mdd::MDDNode
      uses function makeUnique(int,MDDNode[]) defined in edu::toronto::cs::mdd::MDDManager
   function MDDMintermIterator(MDDNode,MDDNode,MDDNode,int) in line 799
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
module edu::toronto::cs::mdd::MDDManager::MDDCubeIterator
   inherits from java::util::Iterator
   function firstCube() in line 975
      protection public
      49 lines of code
      0 parameters
      5 conditional paths
      uses function getNvars() defined in edu::toronto::cs::mdd::MDDManager
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
      uses function getChildren() defined in edu::toronto::cs::mdd::MDDNode
      uses function getChild(int) defined in edu::toronto::cs::mdd::MDDNode
   function hasNext() in line 947
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function next() in line 954
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function nextCube() in line 1025
      43 lines of code
      0 parameters
      12 conditional paths
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
      uses function getChildren() defined in edu::toronto::cs::mdd::MDDNode
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses function getChild(int) defined in edu::toronto::cs::mdd::MDDNode
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDTreeNode
      uses function getChildren() defined in edu::toronto::cs::mdd::MDDTreeNode
   function remove() in line 961
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function MDDCubeIterator(MDDNode,MDDNode) in line 928
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function MDDCubeIterator(MDDNode,MDDNode,boolean) in line 934
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
module edu::toronto::cs::mdd::MDDManager::UniqueTable
   function cannonize(MDDTreeNode) in line 1328
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
   function newMap() in line 1363
      5 lines of code
      0 parameters
      1 conditional paths
   function put(MDDTreeNode) in line 1313
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
   function resize(int) in line 1353
      9 lines of code
      1 parameters
      1 conditional paths
   function UniqueTable(int) in line 1306
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mdd/MDDNode.java
module edu::toronto::cs::mdd::MDDNode
   abstract class
   function childrenSize() in line 18
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getChild(int) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getChildren() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getCubeLastVar() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getImage() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getVarIndex() in line 21
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function isConstant() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function objectHashCode() in line 32
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   variable hashChildren in line 14
      protection public
   variable primes in line 12
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mdd/MDDNodeCache.java
module edu::toronto::cs::mdd::MDDNodeCache
   function cleanup() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function find(Object,MDDNode,MDDNode) in line 12
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function find(Object,MDDNode) in line 13
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function insert(Object,MDDNode,MDDNode,MDDNode) in line 15
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function insert(Object,MDDNode,MDDNode) in line 16
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mdd/MDDPoint.java
module edu::toronto::cs::mdd::MDDPoint
   function getNode() in line 15
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 20
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setNode(MDDNode) in line 25
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setValue(int) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function MDDPoint(MDDNode,int) in line 9
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mdd/MDDToDaVinci.java
module edu::toronto::cs::mdd::MDDToDaVinci
   function main(String[]) in line 62
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function toDavinci(MDDNode) in line 21
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function MDDToDaVinci() defined in edu::toronto::cs::mdd::MDDToDaVinci
      uses function toDavinciRecur(MDDNode) defined in edu::toronto::cs::mdd::MDDToDaVinci
   function toDavinciRecur(MDDNode) in line 29
      protection public
      31 lines of code
      1 parameters
      4 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function node() defined in edu::toronto::cs::davinci::DaVinciGraph
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
      uses function getChildren() defined in edu::toronto::cs::mdd::MDDNode
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
   function MDDToDaVinci() in line 15
      5 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mdd/MDDTreeNode.java
module edu::toronto::cs::mdd::MDDTreeNode
   inherits from edu::toronto::cs::mdd::MDDNode
   function childrenSize() in line 51
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function cloneImage() in line 127
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function equals(Object) in line 138
      protection public
      8 lines of code
      1 parameters
      4 conditional paths
      uses variable o defined in visual.m
   function equals(MDDTreeNode) in line 146
      protection public
      9 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
   function getChild(int) in line 67
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function getChildren() in line 59
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getCubeLastVar() in line 94
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function getCubeLastVarRecur() defined in edu::toronto::cs::mdd::MDDTreeNode
   function getCubeLastVarRecur() in line 101
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getChild(int) defined in edu::toronto::cs::mdd::MDDTreeNode
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDTreeNode
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDTreeNode
      uses function getCubeLastVar() defined in edu::toronto::cs::mdd::MDDNode
   function getImage() in line 132
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 83
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function getVarIndex() in line 73
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 156
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable primes defined in edu::toronto::cs::mdd::MDDNode
      uses variable hashChildren defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
   function inImage(int) in line 122
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function isConstant() in line 55
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function recalcImage() in line 111
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function getImage() defined in edu::toronto::cs::mdd::MDDNode
   function setChildren(MDDNode[]) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setVarIndex(int) in line 77
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function MDDTreeNode() in line 25
      4 lines of code
      0 parameters
      1 conditional paths
   function MDDTreeNode(int,MDDNode[]) in line 31
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function recalcImage() defined in edu::toronto::cs::mdd::MDDTreeNode
   variable EMPTY_BIT_SET in line 12
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mdd/MDDValueCollector.java
module edu::toronto::cs::mdd::MDDValueCollector
   function collectValues(MDDNode,int) in line 19
      protection public
      4 lines of code
      2 parameters
      4 conditional paths
      uses function MDDValueCollector(int) defined in edu::toronto::cs::mdd::MDDValueCollector
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
      uses function getChildren() defined in edu::toronto::cs::mdd::MDDNode
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
   function MDDValueCollector(int) in line 14
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/CloningRewriter.java
module edu::toronto::cs::modelchecker::CloningRewriter
   inherits from edu::toronto::cs::ctl::AbstractCTLVisitor
   inherits from edu::toronto::cs::modelchecker::CTLReWriter
   function rewrite(CTLNode) in line 7
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function accept(CTLVisitor,Object) defined in edu::toronto::cs::ctl::CTLNode
   function visitAFNode(CTLAFNode,Object) in line 17
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses variable i defined in sparsemv.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitAGNode(CTLAGNode,Object) in line 26
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses variable i defined in sparsemv.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitAndNode(CTLAndNode,Object) in line 72
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitARNode(CTLARNode,Object) in line 41
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAUiNode(CTLAUiNode,Object) in line 61
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getI() defined in edu::toronto::cs::ctl::CTLAUiNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAUNode(CTLAUNode,Object) in line 36
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAWNode(CTLAWNode,Object) in line 50
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAXNode(CTLAXNode,Object) in line 67
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitEFNode(CTLEFNode,Object) in line 78
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitEGNode(CTLEGNode,Object) in line 83
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses variable i defined in sparsemv.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitEqualsNode(CTLEqualsNode,Object) in line 108
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitERNode(CTLERNode,Object) in line 45
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEUiNode(CTLEUiNode,Object) in line 97
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getI() defined in edu::toronto::cs::ctl::CTLEUiNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEUNode(CTLEUNode,Object) in line 92
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEWNode(CTLEWNode,Object) in line 55
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEXNode(CTLEXNode,Object) in line 103
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitIffNode(CTLIffNode,Object) in line 113
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitImplNode(CTLImplNode,Object) in line 118
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitLeafNode(CTLLeafNode,Object) in line 12
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function visitNegNode(CTLNegNode,Object) in line 124
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitOrNode(CTLOrNode,Object) in line 130
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitOverNode(CTLOverNode,Object) in line 135
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitPlaceholderNode(CTLPlaceholderNode,Object) in line 151
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses function getProps() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses variable i defined in sparsemv.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
   function visitPreEXNode(CTLPreEXNode,Object) in line 140
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitUnderNode(CTLUnderNode,Object) in line 145
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/CTLReWriter.java
module edu::toronto::cs::modelchecker::CTLReWriter
   function rewrite(CTLNode) in line 8
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/CTLUntilExpander.java
module edu::toronto::cs::modelchecker::CTLUntilExpander
   inherits from edu::toronto::cs::modelchecker::CloningRewriter
   function visitAFNode(CTLAFNode,Object) in line 24
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses function au(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitEFNode(CTLEFNode,Object) in line 19
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function eu(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitIffNode(CTLIffNode,Object) in line 32
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function visitImplNode(CTLImplNode,Object) in line 38
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function CTLUntilExpander(MvSet) in line 14
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/CTLWeakUntilExpander.java
module edu::toronto::cs::modelchecker::CTLWeakUntilExpander
   inherits from edu::toronto::cs::modelchecker::CloningRewriter
   function visitAWNode(CTLAWNode,Object) in line 27
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function ar(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function visitEWNode(CTLEWNode,Object) in line 17
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function er(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function CTLWeakUntilExpander() in line 12
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/ExistentialRewriter.java
module edu::toronto::cs::modelchecker::ExistentialRewriter
   inherits from edu::toronto::cs::modelchecker::CloningRewriter
   function visitAFNode(CTLAFNode,Object) in line 8
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses function eg() defined in edu::toronto::cs::ctl::CTLNode
      uses function neg() defined in edu::toronto::cs::ctl::CTLAbstractNode
   function visitAGNode(CTLAGNode,Object) in line 16
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses function ef() defined in edu::toronto::cs::ctl::CTLNode
      uses function neg() defined in edu::toronto::cs::ctl::CTLAbstractNode
   function visitAUiNode(CTLAUiNode,Object) in line 37
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function visitAUNode(CTLAUNode,Object) in line 24
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable p defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function neg() defined in edu::toronto::cs::ctl::CTLNode
      uses function eg() defined in edu::toronto::cs::ctl::CTLAbstractNode
   function visitAXNode(CTLAXNode,Object) in line 43
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses function ex() defined in edu::toronto::cs::ctl::CTLNode
      uses function neg() defined in edu::toronto::cs::ctl::CTLAbstractNode
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/ModelCompiler.java
module edu::toronto::cs::modelchecker::ModelCompiler
   function compile() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/MvSetModelChecker.java
module edu::toronto::cs::modelchecker::MvSetModelChecker
   function __checkCTL(CTLNode,MvSet) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function existAbstract(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getUnPrimeCube() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
   function checkCTL(CTLNode,MvSet) in line 110
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable res defined in visual.m
      uses function cofactor(int,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses macro definition assert defined in util.h
   function checkCTL(CTLNode) in line 123
      protection public
      43 lines of code
      1 parameters
      37 conditional paths
      uses variable v defined in visual.m
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getXKripke() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLNode
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLNode
      uses function toMvSet() defined in edu::toronto::cs::mvset::MvRelation
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses macro definition assert defined in util.h
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function renameArgs(int[]) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function forallAbstract(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable i defined in sparsemv.m
      uses function eu(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function ex() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function au(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function ax() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function ar(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function neg() defined in edu::toronto::cs::ctl::CTLNode
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function ex() defined in edu::toronto::cs::ctl::CTLNode
      uses function ax() defined in edu::toronto::cs::ctl::CTLNode
      uses function computeFair(CTLNode[]) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
   function computeFair(CTLNode[]) in line 474
      8 lines of code
      1 parameters
      7 conditional paths
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function eg() defined in edu::toronto::cs::ctl::CTLNode
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function neg() defined in edu::toronto::cs::ctl::CTLNode
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function ax() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function ex() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses variable i defined in sparsemv.m
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function eu(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function getMvSetFactory() in line 83
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPrime() in line 94
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTrans() in line 88
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getUnPrimeCube() in line 98
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getXKripke() in line 68
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function renew() in line 76
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function renew() defined in edu::toronto::cs::mvset::MvSetFactory
   function MvSetModelChecker(MvRelation,MvSet,MvSet,int[]) in line 43
      14 lines of code
      4 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses macro definition assert defined in util.h
   function MvSetModelChecker(XKripkeStructure) in line 61
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function getTrans() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getPrimeCube() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getUnPrimeCube() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getPrime() defined in edu::toronto::cs::modelchecker::XKripkeStructure
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/NormalFormRewriter.java
module edu::toronto::cs::modelchecker::NormalFormRewriter
   inherits from edu::toronto::cs::ctl::AbstractCTLVisitor
   inherits from edu::toronto::cs::modelchecker::CTLReWriter
   function rewrite(CTLNode) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
      uses function accept(CTLVisitor,Object) defined in edu::toronto::cs::ctl::CTLNode
   function visitAFNode(CTLAFNode,Object) in line 40
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable o defined in visual.m
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitAGNode(CTLAGNode,Object) in line 53
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function getFairness() defined in edu::toronto::cs::ctl::CTLUnaryNode
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitAndNode(CTLAndNode,Object) in line 93
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitARNode(CTLARNode,Object) in line 71
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAUNode(CTLAUNode,Object) in line 63
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitAXNode(CTLAXNode,Object) in line 86
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitBinaryNode(CTLBinaryNode,Object) in line 33
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function visitEFNode(CTLEFNode,Object) in line 106
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitEGNode(CTLEGNode,Object) in line 114
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitEqualsNode(CTLEqualsNode,Object) in line 141
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function neg() defined in edu::toronto::cs::ctl::CTLNode
   function visitERNode(CTLERNode,Object) in line 78
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEUNode(CTLEUNode,Object) in line 131
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitEXNode(CTLEXNode,Object) in line 123
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitImplNode(CTLImplNode,Object) in line 100
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function neg() defined in edu::toronto::cs::ctl::CTLNode
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses variable o defined in visual.m
   function visitLeafNode(CTLLeafNode,Object) in line 22
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function neg() defined in edu::toronto::cs::ctl::CTLAbstractNode
   function visitNegNode(CTLNegNode,Object) in line 152
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getRight() defined in edu::toronto::cs::ctl::CTLUnaryNode
   function visitOrNode(CTLOrNode,Object) in line 161
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::NormalFormRewriter
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses variable o defined in visual.m
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
   function visitOverNode(CTLOverNode,Object) in line 166
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function visitPlaceholderNode(CTLPlaceholderNode,Object) in line 185
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function setNegated(boolean) defined in edu::toronto::cs::ctl::CTLPlaceholderNode
   function visitPreEXNode(CTLPreEXNode,Object) in line 172
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function visitUnaryNode(CTLUnaryNode,Object) in line 28
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function visitUnderNode(CTLUnderNode,Object) in line 178
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/StatePresenter.java
module edu::toronto::cs::modelchecker::StatePresenter
   function toCTL(AlgebraValue[]) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function toCTL(AlgebraValue) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function toCTL(MvSet) in line 20
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/SyntaxChecker.java
module edu::toronto::cs::modelchecker::SyntaxChecker
   inherits from edu::toronto::cs::ctl::AbstractCTLVisitor
   inherits from edu::toronto::cs::modelchecker::CTLReWriter
   function rewrite(CTLNode) in line 7
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function accept(CTLVisitor,Object) defined in edu::toronto::cs::ctl::CTLNode
   function visitAtomPropNode(CTLAtomPropNode,Object) in line 12
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function getMvSet() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function getName() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses variable o defined in visual.m
module edu::toronto::cs::modelchecker::SyntaxChecker::SyntaxException
   inherits from RuntimeException
   function SyntaxException() in line 22
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function SyntaxException(String) in line 26
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/modelchecker/XKripkeStructure.java
module edu::toronto::cs::modelchecker::XKripkeStructure
   inherits from edu::toronto::cs::modelchecker::CTLReWriter
   function getAlgebra() in line 116
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getInit() in line 100
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSetFactory() in line 112
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
   function getName() in line 134
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNumDDVars() in line 120
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPrime() in line 124
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPrimeCube() in line 104
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSingleState(AlgebraValue[]) in line 149
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable bot defined in algebra
   function getSingleState(AlgebraValue[],AlgebraValue) in line 156
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function getPrime() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses variable i defined in sparsemv.m
   function getStatePresenter() in line 144
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTrans() in line 96
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getUnPrime() in line 129
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getUnPrimeCube() in line 108
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function rewrite(CTLNode) in line 90
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CTLReWriter
   function setName(String) in line 139
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function XKripkeStructure(MvRelation,MvSet,int[],MvSet,MvSet,String[],IAlgebra,int,int,CTLReWriter,StatePresenter) in line 49
      protection public
      11 lines of code
      11 parameters
      1 conditional paths
   function XKripkeStructure(MvRelation,MvSet,int[],MvSet,MvSet,String[],IAlgebra,int,int,CTLReWriter,StatePresenter,String) in line 60
      protection public
      29 lines of code
      12 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/AbstractMvSet.java
module edu::toronto::cs::mvset::AbstractMvSet
   inherits from edu::toronto::cs::mvset::MvSet
   abstract class
   function and(MvSet) in line 12
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptwiseCompose(int,MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable MEET defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function cofactor(MvSet) in line 73
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function cubeIterator() in line 78
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function eq(MvSet) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptwiseCompare(int,MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable EQ defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function expandToArray() in line 83
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function geq(MvSet) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptwiseCompare(int,MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable GEQ defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function getImage() in line 93
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPreImageArray(AlgebraValue) in line 98
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function impl(MvSet) in line 22
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptwiseCompose(int,MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable IMPL defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function infoAnd(MvSet) in line 49
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptwiseCompose(int,MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable INFO_AND defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function infoNot() in line 57
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function infoOr(MvSet) in line 53
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptwiseCompose(int,MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable INFO_OR defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function leq(MvSet) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptwiseCompare(int,MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable LEQ defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function mintermIterator(MvSet,AlgebraValue) in line 103
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function not() in line 28
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function ptwiseNeg() defined in edu::toronto::cs::mvset::MvSet
   function or(MvSet) in line 17
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptwiseCompose(int,MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable JOIN defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function reorder() in line 63
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function size() in line 68
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toDaVinci() in line 88
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toMvRelation(MvSet,MvSet,MvSet,int[],int[]) in line 108
      protection public
      8 lines of code
      5 parameters
      1 conditional paths
   function toMvRelation(MvSet,MvSet,MvSet,MvSet,int[],int[]) in line 117
      protection public
      11 lines of code
      6 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/AbstractMvSetFactory.java
module edu::toronto::cs::mvset::AbstractMvSetFactory
   inherits from edu::toronto::cs::mvset::MvSetFactory
   abstract class
   function getAlgebra() in line 30
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function infoBot() in line 39
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function infoTop() in line 35
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function renew() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function AbstractMvSetFactory(IAlgebra) in line 15
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable top defined in algebra
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable bot defined in algebra
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/CUADDMvSetFactory.java
module edu::toronto::cs::mvset::CUADDMvSetFactory
   inherits from edu::toronto::cs::mvset::AbstractMvSetFactory
   function bot() in line 80
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
   function buildCube(int[]) in line 70
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
      uses function buildCube(int[]) defined in edu::toronto::cs::cudd::CuddAdd
   function createCase(int,MvSet[]) in line 162
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function createIte(int,MvSet,MvSet) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
   function createConstant(AlgebraValue) in line 65
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
      uses function addConstant(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses variable v defined in visual.m
   function createIte(int,MvSet,MvSet) in line 169
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
      uses function addIte(int,ADD,ADD) defined in edu::toronto::cs::cudd::CuddAdd
   function createMvSet(ADD) in line 179
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function createPoint(AlgebraValue[],AlgebraValue) in line 104
      protection public
      27 lines of code
      2 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
      uses variable NO_VALUE defined in edu::toronto::cs::cudd::CuddAdd
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses macro definition assert defined in util.h
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
      uses function buildPoint(int[],ADD) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addConstant(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
   function createProjection(int) in line 91
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
      uses function addVar(int) defined in edu::toronto::cs::cudd::CuddAdd
   function getCudd() in line 185
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function initialize() in line 46
      5 lines of code
      0 parameters
      1 conditional paths
      uses function addTop() defined in edu::toronto::cs::cudd::CuddAdd
      uses function addBot() defined in edu::toronto::cs::cudd::CuddAdd
   function newMvSetFactory(IAlgebra,int) in line 39
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function CUADDMvSetFactory(IAlgebra,int) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
   function renew() in line 52
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function gc(boolean) defined in edu::toronto::cs::cudd::CuddAdd
   function top() in line 76
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
   function var(int,AlgebraValue,AlgebraValue) in line 133
      protection public
      16 lines of code
      3 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
      uses function addIte(int,ADD,ADD) defined in edu::toronto::cs::cudd::CuddAdd
      uses function addConstant(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function addVar(int) defined in edu::toronto::cs::cudd::CuddAdd
      uses function not() defined in edu::toronto::cs::cudd::CuddAdd::ADD
   function CUADDMvSetFactory(IAlgebra,int) in line 32
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function initialize() defined in edu::toronto::cs::mvset::CUADDMvSetFactory
module edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
   inherits from edu::toronto::cs::mvset::AbstractMvSet
   function cofactor(int,AlgebraValue) in line 287
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function cofactor(AlgebraValue[]) in line 292
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function cubeIterator() in line 375
      protection public
      29 lines of code
      0 parameters
      2 conditional paths
      uses function getAddNode() defined in edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
      uses variable i defined in sparsemv.m
      uses variable NO_VALUE defined in edu::toronto::cs::cudd::CuddAdd
   function equals(Object) in line 354
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function equals(CUADDMvSet) in line 360
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function getAddNode() defined in edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
      uses variable v defined in visual.m
   function evaluate(AlgebraValue[]) in line 329
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function existAbstract(MvSet) in line 300
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function CUADDMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
   function forallAbstract(MvSet) in line 307
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function CUADDMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
   function getAddNode() in line 341
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getAlgebra() in line 335
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
   function getFactory() in line 347
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 209
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isConstant() defined in edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
      uses function getValue(String) defined in edu::toronto::cs::algebra::IAlgebra
   function hashCode() in line 368
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function getAddNode() defined in edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
   function isConstant() in line 204
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ptwiseCompare(int,MvSet) in line 261
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function ptwiseCompose(int,MvSet) defined in edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
   function ptwiseCompose(int,MvSet) in line 230
      protection public
      30 lines of code
      2 parameters
      7 conditional paths
      uses function CUADDMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
      uses variable MEET defined in edu::toronto::cs::mvset::MvSet
      uses variable JOIN defined in edu::toronto::cs::mvset::MvSet
      uses variable IMPL defined in edu::toronto::cs::mvset::MvSet
      uses variable GEQ defined in edu::toronto::cs::mvset::MvSet
      uses variable LEQ defined in edu::toronto::cs::mvset::MvSet
      uses variable EQ defined in edu::toronto::cs::mvset::MvSet
      uses macro definition assert defined in util.h
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
   function ptwiseNeg() in line 271
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
   function renameArgs(int[]) in line 319
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createMvSet(ADD) defined in edu::toronto::cs::mvset::CUADDMvSetFactory
   function size() in line 276
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 215
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function getAlgebra() defined in edu::toronto::cs::mvset::CUADDMvSetFactory::CUADDMvSet
      uses function getValue(String) defined in edu::toronto::cs::algebra::IAlgebra
   function CUADDMvSet(ADD) in line 197
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/JADDMvSetFactory.java
module edu::toronto::cs::mvset::JADDMvSetFactory
   inherits from edu::toronto::cs::mvset::AbstractMvSetFactory
   function bot() in line 179
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function buildCube(int[]) in line 160
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
      uses function buildCube(int[],MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
   function createCase(int,MvSet[]) in line 290
      protection public
      17 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function apply(BinApplyFunction,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
      uses variable JOIN defined in edu::toronto::cs::mvset::MvSet
      uses variable MEET defined in edu::toronto::cs::mvset::MvSet
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::JADDMvSetFactory
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function createConstant(AlgebraValue) in line 155
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses variable v defined in visual.m
   function createMvSet(MDDNode) in line 309
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function createPoint(AlgebraValue[],AlgebraValue) in line 210
      protection public
      32 lines of code
      2 parameters
      6 conditional paths
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses function bitValue(Object) defined in edu::toronto::cs::util::EnumType
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
      uses function buildPoint(int[],MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
   function createProjection(int) in line 190
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses function createCase(int,MvSet[]) defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function getMddManager() in line 315
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function initialize() in line 79
      9 lines of code
      0 parameters
      1 conditional paths
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses function top() defined in edu::toronto::cs::mvset::JADDMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::JADDMvSetFactory
      uses function bitSize() defined in edu::toronto::cs::util::EnumType
      uses function setupApplyFunctions() defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function logCeil(int) in line 68
      9 lines of code
      1 parameters
      2 conditional paths
   function newMvSetFactory(IAlgebra,int) in line 60
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function JADDMvSetFactory(IAlgebra,int) defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function setCaching(boolean) in line 145
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function setCaching(boolean) defined in edu::toronto::cs::mdd::MDDManager
      uses variable v defined in visual.m
   function setupApplyFunctions() in line 89
      33 lines of code
      0 parameters
      1 conditional paths
      uses variable MEET defined in edu::toronto::cs::mvset::MvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::AbstractMvSetFactory
      uses variable JOIN defined in edu::toronto::cs::mvset::MvSet
      uses variable NEG defined in edu::toronto::cs::mvset::MvSet
      uses variable IMPL defined in edu::toronto::cs::mvset::MvSet
      uses variable GEQ defined in edu::toronto::cs::mvset::MvSet
      uses variable LEQ defined in edu::toronto::cs::mvset::MvSet
      uses variable EQ defined in edu::toronto::cs::mvset::MvSet
      uses variable EXISTS defined in edu::toronto::cs::mvset::MvSet
      uses variable FORALL defined in edu::toronto::cs::mvset::MvSet
   function top() in line 175
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function var(int,AlgebraValue,AlgebraValue) in line 244
      protection public
      24 lines of code
      3 parameters
      5 conditional paths
      uses function getNvars() defined in edu::toronto::cs::mdd::MDDManager
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses function bitValue(Object) defined in edu::toronto::cs::util::EnumType
      uses variable i defined in sparsemv.m
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
      uses function buildPoint(int[],MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getAlgebra() defined in edu::toronto::cs::mvset::AbstractMvSetFactory
   function JADDMvSetFactory(IAlgebra,int) in line 38
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function bitSize() defined in edu::toronto::cs::util::EnumType
      uses function initialize() defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function JADDMvSetFactory(IAlgebra,MDDManager) in line 49
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function initialize() defined in edu::toronto::cs::mvset::JADDMvSetFactory
      uses macro definition assert defined in util.h
module edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
   inherits from edu::toronto::cs::mvset::AbstractMvSet
   function cofactor(int,AlgebraValue) in line 386
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
      uses function cofactorMDD(MDDNode,int,AlgebraValue) defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
   function cofactor(AlgebraValue[]) in line 391
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function cofactorMDD(MDDNode,int,AlgebraValue) defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function cofactorMDD(MDDNode,int,AlgebraValue) in line 403
      14 lines of code
      3 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function cofactorMDD(int,AlgebraValue) in line 419
      4 lines of code
      2 parameters
      1 conditional paths
      uses function cofactorMDD(MDDNode,int,AlgebraValue) defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
   function equals(Object) in line 504
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function equals(JADDMvSet) in line 510
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function getMddNode() defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
      uses variable v defined in visual.m
   function evaluate(AlgebraValue[]) in line 471
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function cofactorMDD(MDDNode,int,AlgebraValue) defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
   function existAbstract(MvSet) in line 432
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function JADDMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function expandToArray() in line 523
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function forallAbstract(MvSet) in line 440
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function JADDMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function getAlgebra() in line 482
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
   function getFactory() in line 497
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getImage() in line 487
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getImage() defined in edu::toronto::cs::mdd::MDDNode
   function getMddNode() in line 492
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPreImageArray(AlgebraValue) in line 425
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function getValue() in line 338
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
   function hashCode() in line 518
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getMddNode() defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
   function isConstant() in line 334
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
   function ptwiseCompare(int,MvSet) in line 359
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function ptwiseCompose(int,MvSet) defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
   function ptwiseCompose(int,MvSet) in line 351
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function getMddNode() defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function ptwiseNeg() in line 369
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable NEG defined in edu::toronto::cs::mvset::MvSet
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function renameArgs(int[]) in line 454
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::JADDMvSetFactory
   function size() in line 375
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toDaVinci() in line 528
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getMddNode() defined in edu::toronto::cs::mvset::JADDMvSetFactory::JADDMvSet
   function JADDMvSet(MDDNode) in line 327
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/JCUDDBelnapMvSetFactory.java
module edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   inherits from edu::toronto::cs::mvset::AbstractMvSetFactory
   function bot() in line 210
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function buildCube(int[]) in line 185
      protection public
      20 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function createCase(int,MvSet[]) in line 322
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function createIte(int,MvSet,MvSet) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function createConstant(AlgebraValue) in line 175
      protection public
      9 lines of code
      1 parameters
      5 conditional paths
      uses variable v defined in visual.m
   function createIte(int,MvSet,MvSet) in line 329
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function createMvSet(int) in line 349
      protection public
      13 lines of code
      1 parameters
      5 conditional paths
      uses function killDeadNodes(boolean) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function createPoint(AlgebraValue[],AlgebraValue) in line 244
      protection public
      27 lines of code
      2 parameters
      4 conditional paths
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses variable i defined in sparsemv.m
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses variable bot defined in algebra
      uses function quickNot(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function createProjection(int) in line 231
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function finalize() in line 373
      10 lines of code
      0 parameters
      1 conditional paths
      uses function killDeadNodes(boolean) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function getDd() in line 368
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function infoBot() in line 219
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function infoTop() in line 214
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function internalCreateMvSet(int) in line 363
      4 lines of code
      1 parameters
      1 conditional paths
   function killDeadNodes(boolean) in line 136
      protection public
      30 lines of code
      1 parameters
      4 conditional paths
   function main(String[]) in line 1230
      protection public
      68 lines of code
      1 parameters
      3 conditional paths
      uses function JCUDDBelnapMvSetFactory(IAlgebra,int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function createProjection(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function and(MvSet) defined in edu::toronto::cs::mvset::AbstractMvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function infoBot() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses function mintermIterator(MvSet,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function existAbstract(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function infoOr(MvSet) defined in edu::toronto::cs::mvset::AbstractMvSet
      uses function infoTop() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function newMvSetFactory(IAlgebra,int) in line 121
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function JCUDDBelnapMvSetFactory(IAlgebra,int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function quickNot(int) in line 385
      4 lines of code
      1 parameters
      1 conditional paths
   function renew() in line 130
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function killDeadNodes(boolean) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function top() in line 206
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function var(int,AlgebraValue,AlgebraValue) in line 273
      protection public
      29 lines of code
      3 parameters
      4 conditional paths
      uses macro definition assert defined in util.h
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function quickNot(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function JCUDDBelnapMvSetFactory(IAlgebra,int) in line 70
      protection public
      50 lines of code
      2 parameters
      1 conditional paths
      uses function top() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function infoTop() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function infoBot() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function quickNot(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function internalCreateMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses variable CUDD_REORDER_SIFT defined in edu::toronto::cs::jcudd::JMVLCuddConstants
module edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
   inherits from edu::toronto::cs::mvset::AbstractMvSet
   function cofactor(int,AlgebraValue) in line 663
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function cofactor(AlgebraValue[]) in line 668
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function cofactor(MvSet) in line 673
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable res defined in visual.m
      uses function getCPtr() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function cubeIterator() in line 782
      protection public
      91 lines of code
      0 parameters
      7 conditional paths
      uses function getCube() defined in edu::toronto::cs::jcudd::CuddCube
      uses function getitem(int) defined in edu::toronto::cs::jcudd::CIntArray
      uses variable i defined in sparsemv.m
      uses function finalize() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
   function doEquals(int) in line 511
      11 lines of code
      1 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::AbstractMvSet
      uses function quickNot(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses variable res defined in visual.m
   function doGeqConstant(int) in line 523
      6 lines of code
      1 parameters
      2 conditional paths
   function doImpl(int) in line 530
      11 lines of code
      1 parameters
      1 conditional paths
      uses function quickNot(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function impl(MvSet) defined in edu::toronto::cs::mvset::AbstractMvSet
      uses variable res defined in visual.m
   function doInfoJoin(int) in line 542
      23 lines of code
      1 parameters
      1 conditional paths
      uses variable res defined in visual.m
   function doInfoMeet(int) in line 566
      22 lines of code
      1 parameters
      1 conditional paths
      uses variable res defined in visual.m
   function equals(Object) in line 751
      protection public
      7 lines of code
      1 parameters
      4 conditional paths
      uses variable o defined in visual.m
      uses function JCUDDBelnapMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
   function evaluate(AlgebraValue[]) in line 731
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function existAbstract(MvSet) in line 690
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function JCUDDBelnapMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function isConstantQuick() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function getCPtr() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function finalize() in line 404
      9 lines of code
      0 parameters
      1 conditional paths
   function forallAbstract(MvSet) in line 701
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function JCUDDBelnapMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function getAlgebra() in line 737
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
   function getCPtr() in line 415
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFactory() in line 744
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 437
      protection public
      8 lines of code
      0 parameters
      5 conditional paths
   function hashCode() in line 759
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable primes defined in edu::toronto::cs::util::Primes
   function infoNot() in line 630
      protection public
      21 lines of code
      0 parameters
      5 conditional paths
      uses variable res defined in visual.m
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function isConstant() in line 421
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function isConstantQuick() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
   function isConstantQuick() in line 427
      8 lines of code
      0 parameters
      1 conditional paths
   function mintermIterator(MvSet,AlgebraValue) in line 874
      protection public
      92 lines of code
      2 parameters
      10 conditional paths
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable res defined in visual.m
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function finalize() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function getCPtr() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function JCUDDBelnapMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function infoNot() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses variable v defined in visual.m
      uses variable i defined in sparsemv.m
      uses function setitem(int,int) defined in edu::toronto::cs::jcudd::CIntArray
      uses function cast() defined in edu::toronto::cs::jcudd::CIntArray
      uses function quickNot(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function ptwiseCompare(int,MvSet) in line 591
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function ptwiseCompose(int,MvSet) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
   function ptwiseCompose(int,MvSet) in line 459
      protection public
      51 lines of code
      2 parameters
      22 conditional paths
      uses function JCUDDBelnapMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses variable MEET defined in edu::toronto::cs::mvset::MvSet
      uses variable JOIN defined in edu::toronto::cs::mvset::MvSet
      uses variable GEQ defined in edu::toronto::cs::mvset::MvSet
      uses function isConstant() defined in edu::toronto::cs::mvset::MvSet
      uses function doGeqConstant(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function leq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable LEQ defined in edu::toronto::cs::mvset::MvSet
      uses function doImpl(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses variable EQ defined in edu::toronto::cs::mvset::MvSet
      uses function doEquals(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses variable INFO_AND defined in edu::toronto::cs::mvset::MvSet
      uses function doInfoMeet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses variable INFO_OR defined in edu::toronto::cs::mvset::MvSet
      uses function doInfoJoin(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses macro definition assert defined in util.h
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function ptwiseNeg() in line 601
      protection public
      28 lines of code
      0 parameters
      5 conditional paths
      uses function quickNot(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses variable res defined in visual.m
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
   function renameArgs(int[]) in line 713
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function isConstantQuick() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses variable i defined in sparsemv.m
      uses function setitem(int,int) defined in edu::toronto::cs::jcudd::CIntArray
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory
      uses function cast() defined in edu::toronto::cs::jcudd::CIntArray
   function size() in line 652
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toMvRelation(MvSet,MvSet,MvSet,int[],int[]) in line 767
      protection public
      13 lines of code
      5 parameters
      1 conditional paths
   function toString() in line 446
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function getValue() defined in edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvSet
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
   function JCUDDBelnapMvSet(int) in line 398
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::mvset::JCUDDBelnapMvSetFactory::JCUDDBelnapMvRelation
   inherits from edu::toronto::cs::mvset::MvRelation
   function bwdImage(MvSet) in line 1118
      protection public
      42 lines of code
      1 parameters
      1 conditional paths
   function dualBwdImage(MvSet) in line 1082
      protection public
      34 lines of code
      1 parameters
      1 conditional paths
   function fwdImage(MvSet) in line 1038
      protection public
      43 lines of code
      1 parameters
      1 conditional paths
   function getPostToPreMap() in line 1216
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPostVariablesCube() in line 1188
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreToPostMap() in line 1202
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreVariablesCube() in line 1175
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function setTrans(MvSet) in line 1017
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setTrans(JCUDDBelnapMvSet) in line 1022
      5 lines of code
      1 parameters
      1 conditional paths
   function toCIntArray(int[]) in line 1029
      7 lines of code
      1 parameters
      1 conditional paths
   function toMvSet() in line 1163
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function JCUDDBelnapMvRelation(JCUDDBelnapMvSet,JCUDDBelnapMvSet,JCUDDBelnapMvSet,JCUDDBelnapMvSet,int[],int[]) in line 986
      protection public
      30 lines of code
      6 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/JCUDDMvSetFactory.java
module edu::toronto::cs::mvset::JCUDDMvSetFactory
   inherits from edu::toronto::cs::mvset::AbstractMvSetFactory
   function bot() in line 200
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function buildCube(int[]) in line 178
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function createCase(int,MvSet[]) in line 310
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function createIte(int,MvSet,MvSet) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function createConstant(AlgebraValue) in line 167
      protection public
      10 lines of code
      1 parameters
      5 conditional paths
      uses variable v defined in visual.m
      uses function killDeadNodes(boolean) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function createIte(int,MvSet,MvSet) in line 317
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function createMvSet(int) in line 337
      protection public
      9 lines of code
      1 parameters
      5 conditional paths
   function createPoint(AlgebraValue[],AlgebraValue) in line 234
      protection public
      24 lines of code
      2 parameters
      4 conditional paths
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable i defined in sparsemv.m
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses variable bot defined in algebra
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function createProjection(int) in line 221
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function finalize() in line 357
      7 lines of code
      0 parameters
      1 conditional paths
      uses function killDeadNodes(boolean) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function getDd() in line 352
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function infoBot() in line 209
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function infoTop() in line 204
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function internalCreateMvSet(int) in line 347
      4 lines of code
      1 parameters
      1 conditional paths
   function killDeadNodes(boolean) in line 131
      protection public
      28 lines of code
      1 parameters
      4 conditional paths
   function main(String[]) in line 773
      protection public
      53 lines of code
      1 parameters
      8 conditional paths
      uses function JCUDDMvSetFactory(IAlgebra,int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function createProjection(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function and(MvSet) defined in edu::toronto::cs::mvset::AbstractMvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses function mintermIterator(MvSet,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function infoBot() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function existAbstract(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable i defined in sparsemv.m
      uses function setitem(int,int) defined in edu::toronto::cs::jcudd::CIntArray
      uses variable v defined in visual.m
      uses function JCUDDMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function getCPtr() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses variable res defined in visual.m
      uses function cast() defined in edu::toronto::cs::jcudd::CIntArray
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function not() defined in edu::toronto::cs::mvset::AbstractMvSet
   function newMvSetFactory(IAlgebra,int) in line 116
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function JCUDDMvSetFactory(IAlgebra,int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function renew() in line 125
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function killDeadNodes(boolean) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function top() in line 196
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function var(int,AlgebraValue,AlgebraValue) in line 260
      protection public
      31 lines of code
      3 parameters
      4 conditional paths
      uses macro definition assert defined in util.h
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function JCUDDMvSetFactory(IAlgebra,int) in line 66
      protection public
      49 lines of code
      2 parameters
      2 conditional paths
      uses function top() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function infoTop() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function infoBot() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function top() defined in edu::toronto::cs::algebra::IAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::IAlgebra
      uses function internalCreateMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
module edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
   inherits from edu::toronto::cs::mvset::AbstractMvSet
   function cofactor(int,AlgebraValue) in line 511
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function cofactor(AlgebraValue[]) in line 516
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function cofactor(MvSet) in line 521
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable res defined in visual.m
      uses function getCPtr() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function cubeIterator() in line 625
      protection public
      71 lines of code
      0 parameters
      3 conditional paths
      uses function getValue() defined in edu::toronto::cs::jcudd::CuddCube
      uses function getCube() defined in edu::toronto::cs::jcudd::CuddCube
      uses variable i defined in sparsemv.m
      uses function getitem(int) defined in edu::toronto::cs::jcudd::CIntArray
      uses function finalize() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
   function equals(Object) in line 594
      protection public
      7 lines of code
      1 parameters
      4 conditional paths
      uses variable o defined in visual.m
      uses function JCUDDMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
   function evaluate(AlgebraValue[]) in line 574
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function existAbstract(MvSet) in line 533
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function JCUDDMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function isConstantQuick() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function getCPtr() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function finalize() in line 381
      9 lines of code
      0 parameters
      1 conditional paths
   function forallAbstract(MvSet) in line 544
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function JCUDDMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function getAlgebra() in line 580
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
   function getCPtr() in line 391
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFactory() in line 587
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 418
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isConstant() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function getValue(String) defined in edu::toronto::cs::algebra::IAlgebra
   function hashCode() in line 602
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable primes defined in edu::toronto::cs::util::Primes
   function isConstant() in line 397
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
   function isConstantQuick() in line 408
      8 lines of code
      0 parameters
      1 conditional paths
   function mintermIterator(MvSet,AlgebraValue) in line 697
      protection public
      72 lines of code
      2 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function finalize() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function getCPtr() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
   function ptwiseCompare(int,MvSet) in line 485
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function ptwiseCompose(int,MvSet) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
   function ptwiseCompose(int,MvSet) in line 437
      protection public
      47 lines of code
      2 parameters
      20 conditional paths
      uses function JCUDDMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses variable MEET defined in edu::toronto::cs::mvset::MvSet
      uses variable JOIN defined in edu::toronto::cs::mvset::MvSet
      uses variable GEQ defined in edu::toronto::cs::mvset::MvSet
      uses variable LEQ defined in edu::toronto::cs::mvset::MvSet
      uses variable EQ defined in edu::toronto::cs::mvset::MvSet
      uses variable INFO_AND defined in edu::toronto::cs::mvset::MvSet
      uses variable INFO_OR defined in edu::toronto::cs::mvset::MvSet
      uses macro definition assert defined in util.h
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function ptwiseNeg() in line 495
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
   function renameArgs(int[]) in line 556
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function isConstantQuick() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses variable i defined in sparsemv.m
      uses function setitem(int,int) defined in edu::toronto::cs::jcudd::CIntArray
      uses function createMvSet(int) defined in edu::toronto::cs::mvset::JCUDDMvSetFactory
      uses function cast() defined in edu::toronto::cs::jcudd::CIntArray
   function size() in line 500
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toMvRelation(MvSet,MvSet,MvSet,int[],int[]) in line 610
      protection public
      13 lines of code
      5 parameters
      1 conditional paths
   function toString() in line 424
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function getValue() defined in edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvSet
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
   function JCUDDMvSet(int) in line 375
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::mvset::JCUDDMvSetFactory::JCUDDMvRelation
   inherits from edu::toronto::cs::mvset::MvRelation
   function bwdImage(MvSet) in line 914
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
   function dualBwdImage(MvSet) in line 909
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function fwdImage(MvSet) in line 868
      protection public
      40 lines of code
      1 parameters
      1 conditional paths
   function getPostToPreMap() in line 1003
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPostVariablesCube() in line 975
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreToPostMap() in line 989
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreVariablesCube() in line 962
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function setTrans(MvSet) in line 950
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toCIntArray(int[]) in line 859
      7 lines of code
      1 parameters
      1 conditional paths
   function toMvSet() in line 945
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function JCUDDMvRelation(JCUDDMvSet,JCUDDMvSet,JCUDDMvSet,JCUDDMvSet,int[],int[]) in line 841
      protection public
      17 lines of code
      6 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/MDDMvSetFactory.java
module edu::toronto::cs::mvset::MDDMvSetFactory
   inherits from edu::toronto::cs::mvset::AbstractMvSetFactory
   function bot() in line 186
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function buildCube(int[]) in line 173
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function createCase(int,MvSet[]) in line 261
      protection public
      17 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable JOIN defined in edu::toronto::cs::mvset::MvSet
      uses variable MEET defined in edu::toronto::cs::mvset::MvSet
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function createConstant(AlgebraValue) in line 168
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses variable v defined in visual.m
   function createMvSet(MDDNode) in line 282
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function createPoint(AlgebraValue[],AlgebraValue) in line 229
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function createProjection(int) in line 209
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function getMddManager() in line 288
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function infoBot() in line 196
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function infoTop() in line 191
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function initialize() in line 62
      22 lines of code
      0 parameters
      2 conditional paths
      uses function top() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function getAlgebra() defined in edu::toronto::cs::mvset::AbstractMvSetFactory
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function setupApplyFunctions() defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function newMvSetFactory(IAlgebra,int) in line 55
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function MDDMvSetFactory(IAlgebra,int) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function renew() in line 85
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setCaching(boolean) in line 158
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setupApplyFunctions() in line 90
      45 lines of code
      0 parameters
      2 conditional paths
      uses variable MEET defined in edu::toronto::cs::mvset::MvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::AbstractMvSetFactory
      uses variable JOIN defined in edu::toronto::cs::mvset::MvSet
      uses variable NEG defined in edu::toronto::cs::mvset::MvSet
      uses variable IMPL defined in edu::toronto::cs::mvset::MvSet
      uses variable GEQ defined in edu::toronto::cs::mvset::MvSet
      uses variable LEQ defined in edu::toronto::cs::mvset::MvSet
      uses variable EQ defined in edu::toronto::cs::mvset::MvSet
      uses variable EXISTS defined in edu::toronto::cs::mvset::MvSet
      uses variable FORALL defined in edu::toronto::cs::mvset::MvSet
      uses variable INFO_AND defined in edu::toronto::cs::mvset::MvSet
      uses variable INFO_OR defined in edu::toronto::cs::mvset::MvSet
   function top() in line 181
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function var(int,AlgebraValue,AlgebraValue) in line 246
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
   function MDDMvSetFactory(IAlgebra,int) in line 38
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function initialize() defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function MDDMvSetFactory(IAlgebra,MDDManager) in line 45
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function initialize() defined in edu::toronto::cs::mvset::MDDMvSetFactory
module edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
   inherits from edu::toronto::cs::mvset::AbstractMvSet
   function __expandToArray() in line 611
      protection public
      25 lines of code
      0 parameters
      4 conditional paths
      uses function getMddNode() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses macro definition assert defined in util.h
   function blankAssignmentVector() in line 531
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses variable i defined in sparsemv.m
   function cofactor(MvSet) in line 380
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable res defined in visual.m
      uses function getMddNode() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function cofactor(int,AlgebraValue) in line 393
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
   function cofactor(AlgebraValue[]) in line 398
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function cubeIterator() in line 546
      protection public
      30 lines of code
      0 parameters
      2 conditional paths
      uses function getMddNode() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses variable i defined in sparsemv.m
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
   function dumpMvSet(MvSet) in line 327
      10 lines of code
      1 parameters
      2 conditional paths
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses function toString() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
   function equals(Object) in line 517
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
      uses function getMddNode() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function MDDMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
   function equals(MDDMvSet) in line 524
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function getMddNode() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses variable v defined in visual.m
   function evaluate(AlgebraValue[]) in line 484
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
   function existAbstract(MvSet) in line 452
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function MDDMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function forallAbstract(MvSet) in line 460
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function MDDMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function getAlgebra() in line 495
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
   function getFactory() in line 510
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getImage() in line 500
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getImage() defined in edu::toronto::cs::mdd::MDDNode
   function getMddNode() in line 505
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPreImageArray(AlgebraValue) in line 417
      protection public
      33 lines of code
      1 parameters
      6 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
      uses variable v defined in visual.m
      uses function blankAssignmentVector() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function getImage() defined in edu::toronto::cs::mdd::MDDNode
      uses function getChildren() defined in edu::toronto::cs::mdd::MDDNode
      uses variable i defined in sparsemv.m
      uses function getImage() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function getPreImageArray(AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function getVarIndex() defined in edu::toronto::cs::mdd::MDDNode
   function getValue() in line 311
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function getValue(String) defined in edu::toronto::cs::algebra::IAlgebra
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
   function hashCode() in line 540
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getMddNode() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
   function isConstant() in line 306
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
   function mintermIterator(MvSet,AlgebraValue) in line 577
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function MDDMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function getMddNode() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function ptwiseCompare(int,MvSet) in line 358
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function ptwiseCompose(int,MvSet) defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
   function ptwiseCompose(int,MvSet) in line 344
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses function getMddNode() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function ptwiseNeg() in line 368
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable NEG defined in edu::toronto::cs::mvset::MvSet
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function renameArgs(int[]) in line 474
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function createMvSet(MDDNode) defined in edu::toronto::cs::mvset::MDDMvSetFactory
   function size() in line 374
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toDaVinci() in line 636
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getMddNode() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
   function toString() in line 319
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
      uses function getValue(String) defined in edu::toronto::cs::algebra::IAlgebra
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
      uses function dumpMvSet(MvSet) defined in edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet
   function MDDMvSet(MDDNode) in line 300
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::mvset::MDDMvSetFactory::MDDMvSet::MintermIterator
   inherits from java::util::Iterator
   function hasNext() in line 600
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function next() in line 604
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function remove() in line 596
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function MintermIterator(Iterator) in line 591
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/MvRelation.java
module edu::toronto::cs::mvset::MvRelation
   function bwdImage(MvSet) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function dualBwdImage(MvSet) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function fwdImage(MvSet) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getPostToPreMap() in line 84
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getPostVariablesCube() in line 73
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getPreToPostMap() in line 78
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getPreVariablesCube() in line 65
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setTrans(MvSet) in line 58
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function toMvSet() in line 50
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/MvSet.java
module edu::toronto::cs::mvset::MvSet
   function and(MvSet) in line 162
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cofactor(int,AlgebraValue) in line 102
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cofactor(AlgebraValue[]) in line 108
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cofactor(MvSet) in line 110
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cubeIterator() in line 183
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function eq(MvSet) in line 167
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function evaluate(AlgebraValue[]) in line 136
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function existAbstract(MvSet) in line 121
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function forallAbstract(MvSet) in line 123
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function geq(MvSet) in line 166
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getAlgebra() in line 153
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getFactory() in line 150
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getImage() in line 155
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getPreImageArray(AlgebraValue) in line 146
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getValue() in line 180
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function impl(MvSet) in line 168
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function infoAnd(MvSet) in line 171
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function infoNot() in line 173
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function infoOr(MvSet) in line 172
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function isConstant() in line 177
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function leq(MvSet) in line 165
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mintermIterator(MvSet,AlgebraValue) in line 186
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function not() in line 164
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function or(MvSet) in line 163
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ptwiseCompare(int,MvSet) in line 95
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ptwiseCompose(int,MvSet) in line 84
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ptwiseNeg() in line 90
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function renameArgs(int[]) in line 130
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function reorder() in line 157
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function size() in line 159
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function toDaVinci() in line 190
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function toMvRelation(MvSet,MvSet,MvSet,int[],int[]) in line 192
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function toMvRelation(MvSet,MvSet,MvSet,MvSet,int[],int[]) in line 197
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   variable EQ in line 54
      protection public
   variable EXISTS in line 59
      protection public
   variable FORALL in line 64
      protection public
   variable GEQ in line 44
      protection public
   variable IMPL in line 39
      protection public
   variable INFO_AND in line 69
      protection public
   variable INFO_OR in line 74
      protection public
   variable JOIN in line 29
      protection public
   variable LEQ in line 49
      protection public
   variable MEET in line 24
      protection public
   variable NEG in line 34
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/MvSetCatalog.java
module edu::toronto::cs::mvset::MvSetCatalog
   function getFactoryClass(String) in line 25
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getFactoryTag(Class) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getTags() in line 18
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function registerMvSetFactory(String,Class) in line 35
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/MvSetFactory.java
module edu::toronto::cs::mvset::MvSetFactory
   function bot() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function buildCube(int[]) in line 58
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function createCase(int,MvSet[]) in line 45
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function createConstant(AlgebraValue) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function createPoint(AlgebraValue[],AlgebraValue) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function createProjection(int) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getAlgebra() in line 69
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function infoBot() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function infoTop() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function renew() in line 71
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function top() in line 26
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function var(int,AlgebraValue,AlgebraValue) in line 64
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   variable DONT_CARE in line 10
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/MvSetMvRelation.java
module edu::toronto::cs::mvset::MvSetMvRelation
   inherits from edu::toronto::cs::mvset::MvRelation
   function bwdImage(MvSet) in line 144
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable v defined in visual.m
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function compose(MvSetMvRelation) in line 244
      protection public
      38 lines of code
      1 parameters
      1 conditional paths
   function dualBwdImage(MvSet) in line 160
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvSetMvRelation
      uses variable v defined in visual.m
   function fwdImage(MvSet) in line 166
      protection public
      43 lines of code
      1 parameters
      4 conditional paths
      uses variable v defined in visual.m
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function existAbstract(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function getPostToPreMap() in line 318
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPostVariablesCube() in line 299
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPreToPostMap() in line 308
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPreVariablesCube() in line 289
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setTrans(MvSet) in line 216
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses macro definition assert defined in util.h
      uses function existAbstract(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function isConstant() defined in edu::toronto::cs::mvset::MvSet
   function toMvSet() in line 210
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function MvSetMvRelation(MvSet,MvSet,MvSet,int[],int[]) in line 63
      protection public
      9 lines of code
      5 parameters
      1 conditional paths
   function MvSetMvRelation(MvSet,MvSet,MvSet,MvSet,int[],int[]) in line 85
      protection public
      22 lines of code
      6 parameters
      2 conditional paths
      uses variable doAssert defined in edu::toronto::cs::mvset::MvSetMvRelation
      uses macro definition assert defined in util.h
      uses function existAbstract(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function isConstant() defined in edu::toronto::cs::mvset::MvSet
   function MvSetMvRelation(MvSet,MvSet,MvSet,MvSet,MvSet,int[],int[]) in line 120
      protection public
      22 lines of code
      7 parameters
      2 conditional paths
      uses variable doAssert defined in edu::toronto::cs::mvset::MvSetMvRelation
      uses macro definition assert defined in util.h
      uses function existAbstract(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function isConstant() defined in edu::toronto::cs::mvset::MvSet
   variable doAssert in line 61
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/mvset/SeqMvRelation.java
module edu::toronto::cs::mvset::SeqMvRelation
   inherits from edu::toronto::cs::mvset::MvRelation
   function bwdImage(MvSet) in line 35
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses variable v defined in visual.m
   function dualBwdImage(MvSet) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function dualBwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses variable v defined in visual.m
   function fwdImage(MvSet) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function fwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses variable v defined in visual.m
   function getFirst() in line 45
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPostToPreMap() in line 128
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPostVariablesCube() in line 100
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreToPostMap() in line 114
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreVariablesCube() in line 87
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getSecond() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function seqAfter(MvRelation) in line 56
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function SeqMvRelation(MvRelation,MvRelation) defined in edu::toronto::cs::mvset::SeqMvRelation
      uses variable v defined in visual.m
   function seqBefore(MvRelation) in line 60
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function SeqMvRelation(MvRelation,MvRelation) defined in edu::toronto::cs::mvset::SeqMvRelation
      uses variable v defined in visual.m
   function setTrans(MvSet) in line 65
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function toMvSet() in line 73
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function SeqMvRelation(MvRelation,MvRelation) in line 24
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/openjgraph/AbstractGridLayout2.java
module edu::toronto::cs::openjgraph::AbstractGridLayout2
   inherits from GraphGridLayoutManager
   inherits from Runnable
   abstract class
   function alternateMedianPlacement(VisualVertex,Set,int,int,Grid) in line 412
      56 lines of code
      5 parameters
      12 conditional paths
      uses function getIncidentEdgesLength(Set,int,int,Grid) defined in edu::toronto::cs::openjgraph::AbstractGridLayout2
   function alternateMinimalEdgePlacement(VisualVertex,VisualVertex,Point,Point,List,Grid,int,int) in line 682
      110 lines of code
      8 parameters
      20 conditional paths
   function alternateMinimalEdgePlacement(VisualVertex,VisualVertex,Point,Point,List,Grid,int,int,int,int) in line 793
      61 lines of code
      10 parameters
      13 conditional paths
      uses variable i defined in sparsemv.m
   function appendGrid(Grid) in line 871
      3 lines of code
      1 parameters
      11 conditional paths
      uses function getGrid() defined in edu::toronto::cs::openjgraph::AbstractGridLayout2
   function drawLayout() in line 216
      protection public
      28 lines of code
      0 parameters
      2 conditional paths
   function generalPosition(java.util.List,Grid) in line 275
      protection public
      25 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function getDrawgrid() in line 178
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getGrid() in line 187
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getIncidentEdgesLength(Set,int,int,Grid) in line 479
      14 lines of code
      4 parameters
      2 conditional paths
   function getStartAt() in line 148
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getXGridDistance() in line 158
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getYGridDistance() in line 168
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isInitialized() in line 253
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function layout() in line 212
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function medianPlacement(VisualVertex,List) in line 315
      5 lines of code
      2 parameters
      1 conditional paths
      uses function medianPlacement() defined in edu::toronto::cs::openjgraph::AbstractGridLayout2
   function medianPlacement(VisualVertex,Set,Grid,List) in line 338
      63 lines of code
      4 parameters
      7 conditional paths
      uses function minimalEdgePlacement(VisualVertex,VisualVertex,List,Grid) defined in edu::toronto::cs::openjgraph::AbstractGridLayout2
      uses function alternateMedianPlacement(VisualVertex,Set,int,int,Grid) defined in edu::toronto::cs::openjgraph::AbstractGridLayout2
   function medianPlacement() in line 498
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function minimalEdgePlacement(VisualVertex,VisualVertex,List,Grid) in line 519
      103 lines of code
      4 parameters
      14 conditional paths
      uses function alternateMinimalEdgePlacement(VisualVertex,VisualVertex,Point,Point,List,Grid,int,int) defined in edu::toronto::cs::openjgraph::AbstractGridLayout2
   function run() in line 857
      protection public
      13 lines of code
      0 parameters
      2 conditional paths
   function setDrawGrid(boolean) in line 138
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function setGraphLayoutListener(GraphLayoutListener) in line 199
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function setStartAt(Point) in line 110
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function setXGridDistance(int) in line 119
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function setYGridDistance(int) in line 128
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function AbstractGridLayout2(VisualGraph) in line 101
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::openjgraph::NumberofEdgesComparator
   inherits from Comparator
   inherits from Serializable
   function compare(Object,Object) in line 911
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
   function equals(Object) in line 935
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::openjgraph::FinalPlacedComparator
   inherits from Comparator
   inherits from Serializable
   function compare(Object,Object) in line 947
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function equals(Object) in line 956
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function FinalPlacedComparator(List) in line 943
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::openjgraph::ThreadQueueObject
   inherits from Serializable
   function getConnectedset() in line 970
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getGrid() in line 974
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ThreadQueueObject(List,Grid) in line 965
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::openjgraph::ThreadQueue
   inherits from Serializable
   function add(Object) in line 986
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function remove() in line 990
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function ThreadQueue() in line 982
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::openjgraph::VisualVertexPositionComparator
   inherits from Comparator
   inherits from Serializable
   function compare(Object,Object) in line 1012
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
   function equals(Object) in line 1022
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function setCompareXY(int) in line 1008
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function VisualVertexPositionComparator(Grid) in line 1004
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/openjgraph/LayeredGraphLayout.java
module edu::toronto::cs::openjgraph::LayeredGraphLayout
   inherits from edu::toronto::cs::openjgraph::AbstractGridLayout2
   inherits from Visitor
   function addEdge(VisualEdge) in line 317
      protection public
      3 lines of code
      1 parameters
      11 conditional paths
      uses variable i defined in sparsemv.m
      uses function visit(Vertex) defined in edu::toronto::cs::openjgraph::LayeredGraphLayout
   function addVertex(VisualVertex) in line 305
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function initGridsOfVertices() in line 66
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function layout() in line 44
      protection public
      21 lines of code
      0 parameters
      1 conditional paths
      uses function initGridsOfVertices() defined in edu::toronto::cs::openjgraph::LayeredGraphLayout
      uses function drawLayout() defined in edu::toronto::cs::openjgraph::AbstractGridLayout2
   function layout(Vertex,List) in line 79
      133 lines of code
      2 parameters
      13 conditional paths
      uses variable i defined in sparsemv.m
      uses function layout() defined in edu::toronto::cs::openjgraph::LayeredGraphLayout
   function removeEdge(VisualEdge) in line 309
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function removeVertex(VisualVertex) in line 313
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function routeEdge(Graphics2D,VisualEdge) in line 283
      protection public
      21 lines of code
      2 parameters
      1 conditional paths
   function visit(Vertex) in line 216
      protection public
      66 lines of code
      1 parameters
      8 conditional paths
      uses function layout() defined in edu::toronto::cs::openjgraph::LayeredGraphLayout
   function LayeredGraphLayout(VisualGraph,Vertex) in line 35
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::openjgraph::DirectedGraphGridAdjuster
   inherits from Visitor
   function adjust() in line 353
      protection public
      45 lines of code
      0 parameters
      1 conditional paths
   function visit(Vertex) in line 399
      protection public
      41 lines of code
      1 parameters
      1 conditional paths
   function DirectedGraphGridAdjuster(VisualGraph,Vertex,Grid,int) in line 343
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/openjgraph/OpenJGraph.java
module edu::toronto::cs::openjgraph::OpenJGraph
   function getGraph() in line 48
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable graph defined in edu::toronto::cs::openjgraph::OpenJGraph
   function getRoot() in line 54
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String) in line 247
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function OpenJGraph() defined in edu::toronto::cs::openjgraph::OpenJGraph
      uses function node() defined in edu::toronto::cs::openjgraph::OpenJGraph
      uses function label(String) defined in edu::toronto::cs::openjgraph::OpenJGraph::OpenJNode
      uses function edge(OpenJNode) defined in edu::toronto::cs::openjgraph::OpenJGraph::OpenJNode
      uses function getGraph() defined in edu::toronto::cs::openjgraph::OpenJGraph
      uses function getRoot() defined in edu::toronto::cs::openjgraph::OpenJGraph
      uses function showDirectedGraph() defined in edu::toronto::cs::gui::OpenJGraphFrame
      uses variable vgraph defined in edu::toronto::cs::gui::OpenJGraphFrame
   function node() in line 68
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function setRoot(OpenJNode) in line 58
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toString() in line 39
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
   function OpenJGraph() in line 28
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable graph defined in edu::toronto::cs::openjgraph::OpenJGraph
   variable graph in line 25
      protection public
module edu::toronto::cs::openjgraph::OpenJGraph::OpenJNode
   function border(String) in line 173
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function color(String) in line 143
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function color(Color) in line 148
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function color(String) defined in edu::toronto::cs::openjgraph::OpenJGraph::OpenJNode
   function edge(OpenJNode) in line 180
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function fontFamily(String) in line 158
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function fontStyle(String) in line 163
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function getNode() in line 186
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function label(String) in line 138
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function shape(String) in line 153
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function style(String) in line 168
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function OpenJNode() in line 124
      protection public
      14 lines of code
      0 parameters
      2 conditional paths
      uses variable graph defined in edu::toronto::cs::openjgraph::OpenJGraph
      uses macro definition assert defined in util.h
module edu::toronto::cs::openjgraph::OpenJGraph::OpenJEdge
   function color(String) in line 214
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function color(Color) in line 226
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function color(String) defined in edu::toronto::cs::openjgraph::OpenJGraph::OpenJNode
   function fixLabel() in line 220
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function edge(OpenJNode) defined in edu::toronto::cs::openjgraph::OpenJGraph::OpenJNode
   function label(String) in line 231
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function edge(OpenJNode) defined in edu::toronto::cs::openjgraph::OpenJGraph::OpenJNode
      uses variable v defined in visual.m
   function lineType(String) in line 238
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function OpenJEdge(OpenJNode,OpenJNode) in line 197
      protection public
      16 lines of code
      2 parameters
      2 conditional paths
      uses function edge(OpenJNode) defined in edu::toronto::cs::openjgraph::OpenJGraph::OpenJNode
      uses variable graph defined in edu::toronto::cs::openjgraph::OpenJGraph
      uses function getNode() defined in edu::toronto::cs::openjgraph::OpenJGraph::OpenJNode
      uses macro definition assert defined in util.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/openjgraph/SampleTreeLayout.java
module edu::toronto::cs::openjgraph::SampleTreeLayout
   inherits from JFrame
   function initTree() in line 20
      34 lines of code
      0 parameters
      1 conditional paths
   function main(String) in line 84
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function SampleTreeLayout() defined in edu::toronto::cs::openjgraph::SampleTreeLayout
      uses function initTree() defined in edu::toronto::cs::openjgraph::SampleTreeLayout
      uses function showTree(Tree) defined in edu::toronto::cs::openjgraph::SampleTreeLayout
   function showTree(Tree) in line 55
      28 lines of code
      1 parameters
      1 conditional paths
   function SampleTreeLayout() in line 18
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/AbstractProofVisitor.java
module edu::toronto::cs::proof::AbstractProofVisitor
   inherits from edu::toronto::cs::proof::ProofVisitor
   abstract class
   function visit(ProofStep,Object) in line 5
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
   function visitAndStep(ProofStep,Object) in line 31
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitGeneric(ProofStep,Object) defined in edu::toronto::cs::proof::AbstractProofVisitor
   function visitEGStep(ProofStep,Object) in line 51
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitGeneric(ProofStep,Object) defined in edu::toronto::cs::proof::AbstractProofVisitor
   function visitEUiStep(ProofStep,Object) in line 41
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitGeneric(ProofStep,Object) defined in edu::toronto::cs::proof::AbstractProofVisitor
   function visitEUStep(ProofStep,Object) in line 36
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitGeneric(ProofStep,Object) defined in edu::toronto::cs::proof::AbstractProofVisitor
   function visitEXStep(ProofStep,Object) in line 46
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitGeneric(ProofStep,Object) defined in edu::toronto::cs::proof::AbstractProofVisitor
   function visitGeneric(ProofStep,Object) in line 14
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function visitNegStep(ProofStep,Object) in line 19
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitGeneric(ProofStep,Object) defined in edu::toronto::cs::proof::AbstractProofVisitor
   function visitOrStep(ProofStep,Object) in line 27
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitGeneric(ProofStep,Object) defined in edu::toronto::cs::proof::AbstractProofVisitor
   function visitPropStep(ProofStep,Object) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitGeneric(ProofStep,Object) defined in edu::toronto::cs::proof::AbstractProofVisitor
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/ConjProofStep.java
module edu::toronto::cs::proof::ConjProofStep
   inherits from edu::toronto::cs::proof::ProofStep
   function accept(ProofVisitor,Object) in line 75
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitAndStep(ProofStep,Object) defined in edu::toronto::cs::proof::ProofVisitor
   function unfold() in line 17
      protection public
      57 lines of code
      0 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
      uses function makeSingleState() defined in edu::toronto::cs::proof::ProofStep
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLNode
      uses function getValue() defined in edu::toronto::cs::proof::ProofStep
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
   function ConjProofStep(AlgebraValue,MvSet,String,CTLNode) in line 11
      5 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/DisjProofStep.java
module edu::toronto::cs::proof::DisjProofStep
   inherits from edu::toronto::cs::proof::ProofStep
   function accept(ProofVisitor,Object) in line 74
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitOrStep(ProofStep,Object) defined in edu::toronto::cs::proof::ProofVisitor
   function unfold() in line 23
      protection public
      50 lines of code
      0 parameters
      3 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function makeSingleState() defined in edu::toronto::cs::proof::ProofStep
      uses variable i defined in sparsemv.m
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLNode
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function choosePaths(AlgebraValue[],CTLNode[]) defined in edu::toronto::cs::proof::ProofStrategy
   function DisjProofStep(AlgebraValue,MvSet,String,CTLNode,DisjProofStrategy) in line 15
      protection public
      6 lines of code
      5 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/DisjProofStrategy.java
module edu::toronto::cs::proof::DisjProofStrategy
   inherits from edu::toronto::cs::proof::ProofStrategy
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/EGProofStep.java
module edu::toronto::cs::proof::EGProofStep
   inherits from edu::toronto::cs::proof::ProofStep
   function accept(ProofVisitor,Object) in line 39
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitEGStep(ProofStep,Object) defined in edu::toronto::cs::proof::ProofVisitor
   function unfold() in line 21
      protection public
      16 lines of code
      0 parameters
      1 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses variable s defined in visual.m
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function eu(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function ex() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function eg() defined in edu::toronto::cs::ctl::CTLAbstractNode
   function EGProofStep(AlgebraValue,MvSet,String,CTLNode) in line 13
      7 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/EUiProofStep.java
module edu::toronto::cs::proof::EUiProofStep
   inherits from edu::toronto::cs::proof::ProofStep
   function accept(ProofVisitor,Object) in line 53
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitEUiStep(ProofStep,Object) defined in edu::toronto::cs::proof::ProofVisitor
   function unfold() in line 25
      protection public
      27 lines of code
      0 parameters
      2 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSet
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLNode
   function EUiProofStep(AlgebraValue,MvSet,String,CTLNode,int) in line 13
      protection public
      9 lines of code
      5 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/EUProofStep.java
module edu::toronto::cs::proof::EUProofStep
   inherits from edu::toronto::cs::proof::ProofStep
   function accept(ProofVisitor,Object) in line 56
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitEUStep(ProofStep,Object) defined in edu::toronto::cs::proof::ProofVisitor
   function unfold() in line 23
      protection public
      31 lines of code
      0 parameters
      2 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSet
      uses variable res defined in visual.m
      uses function makeSingleState() defined in edu::toronto::cs::proof::ProofStep
      uses variable i defined in sparsemv.m
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLNode
      uses function eu(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
   function EUProofStep(AlgebraValue,MvSet,String,CTLNode) in line 13
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/EXProofStep.java
module edu::toronto::cs::proof::EXProofStep
   inherits from edu::toronto::cs::proof::ProofStep
   function accept(ProofVisitor,Object) in line 87
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitEXStep(ProofStep,Object) defined in edu::toronto::cs::proof::ProofVisitor
   function unfold() in line 28
      protection public
      58 lines of code
      0 parameters
      2 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSet
      uses function getTrans() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function fwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getJoinIrredundant(BitSet) defined in edu::toronto::cs::algebra::IAlgebra
      uses function getImage() defined in edu::toronto::cs::mvset::MvSet
      uses function mintermIterator(MvSet,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function getUnPrimeCube() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getValue() defined in edu::toronto::cs::proof::ProofStep
   function EXProofStep(AlgebraValue,MvSet,String,CTLNode) in line 20
      7 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/GenericDisjStrategy.java
module edu::toronto::cs::proof::GenericDisjStrategy
   inherits from edu::toronto::cs::proof::DisjProofStrategy
   function choosePaths(AlgebraValue[],CTLNode[]) in line 16
      protection public
      20 lines of code
      2 parameters
      4 conditional paths
      uses function size() defined in edu::toronto::cs::algebra::IAlgebra
      uses variable i defined in sparsemv.m
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getJoinIrredundant(BitSet) defined in edu::toronto::cs::algebra::IAlgebra
   function GenericDisjStrategy(IAlgebra) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/GrappaNodePair.java
module edu::toronto::cs::proof::GrappaNodePair
   function GrappaNodePair(GrappaNode,GrappaNode) in line 15
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable fst defined in edu::toronto::cs::proof::GrappaNodePair
      uses variable snd defined in edu::toronto::cs::proof::GrappaNodePair
   variable fst in line 12
      protection public
   variable snd in line 13
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/GrappaNodePair.java
module edu::toronto::cs::proof2::GrappaNodePair
   function GrappaNodePair(GrappaNode,GrappaNode) in line 15
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable fst defined in edu::toronto::cs::proof2::GrappaNodePair
      uses variable snd defined in edu::toronto::cs::proof2::GrappaNodePair
   variable fst in line 12
      protection public
   variable snd in line 13
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/LinearWitnessVisitor.java
module edu::toronto::cs::proof::LinearWitnessVisitor
   inherits from edu::toronto::cs::proof::AbstractProofVisitor
   function toString(Object[]) in line 71
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function traverse(ProofStep) in line 23
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function noValue() defined in edu::toronto::cs::algebra::IAlgebra
      uses function getStateAsArray() defined in edu::toronto::cs::proof::ProofStep
      uses function getStateName() defined in edu::toronto::cs::proof::ProofStep
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
   function visitAndStep(ProofStep,Object) in line 108
      protection public
      17 lines of code
      2 parameters
      2 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
   function visitEUiStep(ProofStep,Object) in line 96
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
   function visitEUStep(ProofStep,Object) in line 90
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
   function visitEXStep(ProofStep,Object) in line 127
      protection public
      40 lines of code
      2 parameters
      3 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
      uses function getStateAsArray() defined in edu::toronto::cs::proof::ProofStep
      uses function getPrime() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getTrans() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function toMvSet() defined in edu::toronto::cs::mvset::MvRelation
      uses function cofactor(int,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function isConstant() defined in edu::toronto::cs::mvset::MvSet
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getStateName() defined in edu::toronto::cs::proof::ProofStep
      uses function WitnessStep(AlgebraValue,AlgebraValue[],String) defined in edu::toronto::cs::proof::LinearWitnessVisitor::WitnessStep
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
   function visitNegStep(ProofStep,Object) in line 79
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
   function visitOrStep(ProofStep,Object) in line 102
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
   function visitPropStep(ProofStep,Object) in line 85
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function LinearWitnessVisitor() in line 15
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses function getTrans() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function toMvSet() defined in edu::toronto::cs::mvset::MvRelation
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSet
module edu::toronto::cs::proof::LinearWitnessVisitor::WitnessStep
   function getSuccessor() in line 45
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTransValue() in line 40
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toString() in line 60
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
   function WitnessStep(AlgebraValue,AlgebraValue[],String) in line 50
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses variable v defined in visual.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/NegProofStep.java
module edu::toronto::cs::proof::NegProofStep
   inherits from edu::toronto::cs::proof::ProofStep
   function accept(ProofVisitor,Object) in line 35
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitNegStep(ProofStep,Object) defined in edu::toronto::cs::proof::ProofVisitor
   function unfold() in line 24
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function neg() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
   function NegProofStep(AlgebraValue,MvSet,String,CTLNode) in line 15
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/NodePair.java
module edu::toronto::cs::proof::NodePair
   function NodePair(FullNode,FullNode) in line 15
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable fst defined in edu::toronto::cs::proof::NodePair
      uses variable snd defined in edu::toronto::cs::proof::NodePair
   variable fst in line 12
      protection public
   variable snd in line 13
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/OpenJNodePair.java
module edu::toronto::cs::proof::OpenJNodePair
   function OpenJNodePair(OpenJNode,OpenJNode) in line 15
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable fst defined in edu::toronto::cs::proof::OpenJNodePair
      uses variable snd defined in edu::toronto::cs::proof::OpenJNodePair
   variable fst in line 12
      protection public
   variable snd in line 13
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/Proof.java
module edu::toronto::cs::proof::Proof
   abstract class
   function searchProof(CTLNode) in line 16
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/Proof.java
module edu::toronto::cs::tp::cvcl::Proof
   function delete() in line 25
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Proof
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Proof
   function getCPtr(Proof) in line 33
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Proof
   function toString() in line 37
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Proof
   function Proof(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Proof
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Proof
   function Proof() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/ProofStep.java
module edu::toronto::cs::proof::ProofStep
   abstract class
   function accept(ProofVisitor,Object) in line 144
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function discharge() in line 105
      protection public
      19 lines of code
      0 parameters
      3 conditional paths
      uses function toString() defined in edu::toronto::cs::proof::ProofStep
      uses function unfold() defined in edu::toronto::cs::proof::ProofStep
      uses function ProofStep(AlgebraValue,MvSet,String,CTLNode) defined in edu::toronto::cs::proof::ProofStep
      uses function discharge() defined in edu::toronto::cs::proof::ProofStep
   function getAntecedents() in line 92
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getConsequent() in line 87
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSingleState(AlgebraValue[],IAlgebra) in line 74
      11 lines of code
      2 parameters
      3 conditional paths
      uses function getPrime() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses variable i defined in sparsemv.m
      uses variable bot defined in algebra
   function getState() in line 45
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStateAsArray() in line 53
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses function getPreImageArray(AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
      uses function getSingleState(AlgebraValue[],IAlgebra) defined in edu::toronto::cs::proof::ProofStep
   function getStateName() in line 40
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 35
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function isDischarged() in line 100
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function makeSingleState() in line 64
      6 lines of code
      0 parameters
      1 conditional paths
      uses function mintermIterator(MvSet,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function getUnPrimeCube() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses variable v defined in visual.m
   function toString() in line 150
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function unfold() in line 126
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ProofStep(AlgebraValue,MvSet,String,CTLNode) in line 129
      13 lines of code
      4 parameters
      1 conditional paths
      uses variable v defined in visual.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/ProofStep.java
module edu::toronto::cs::proof2::ProofStep
   abstract class
   function getChildLength() in line 64
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFormula() in line 38
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getParent() in line 44
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function newProofStep(Formula) in line 56
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable f defined in mvproduct.m
   function toString() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ProofStep(Formula,ProofStep) in line 30
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/ProofStepFactory.java
module edu::toronto::cs::proof::ProofStepFactory
   function getMC() in line 66
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSNG() in line 55
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStructure() in line 44
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function makeProofStep(AlgebraValue,MvSet,CTLNode) in line 86
      protection public
      53 lines of code
      3 parameters
      11 conditional paths
      uses function makeStateName(MvSet) defined in edu::toronto::cs::proof::ProofStepFactory
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses macro definition assert defined in util.h
   function makeStateName(MvSet) in line 71
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getFreshName() defined in edu::toronto::cs::proof::StateNameGenerator
   function setMC(MvSetModelChecker) in line 61
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setSNG(StateNameGenerator) in line 50
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setStructure(XKripkeStructure) in line 39
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/ProofStepFactory.java
module edu::toronto::cs::proof2::ProofStepFactory
   function dynamicTree(ProofStep,ProofStep) in line 35
      protection public
      33 lines of code
      2 parameters
      5 conditional paths
      uses function getParent() defined in edu::toronto::cs::proof2::ProofStep
      uses variable i defined in sparsemv.m
   function getStateAsArray(Formula) in line 22
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/ProofStepListModel.java
module edu::toronto::cs::proof::ProofStepListModel
   inherits from ListModel
   function addListDataListener(ListDataListener) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getElementAt(int) in line 34
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
   function getSize() in line 40
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function removeListDataListener(ListDataListener) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setProofStep(ProofStep) in line 48
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getStateName() defined in edu::toronto::cs::proof::ProofStep
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::modelchecker::StatePresenter
      uses function getState() defined in edu::toronto::cs::proof::ProofStep
   function ProofStepListModel(StatePresenter) in line 17
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/ProofStepListModel.java
module edu::toronto::cs::proof2::ProofStepListModel
   inherits from ListModel
   function addListDataListener(ListDataListener) in line 26
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getElementAt(int) in line 36
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
   function getSize() in line 42
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function removeListDataListener(ListDataListener) in line 31
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setProofStep(ProofStep) in line 50
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
      uses function getState() defined in edu::toronto::cs::proof2::Formula
      uses function getStateName() defined in edu::toronto::cs::proof2::Formula
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::modelchecker::StatePresenter
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
   function ProofStepListModel(StatePresenter) in line 19
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/ProofStrategy.java
module edu::toronto::cs::proof::ProofStrategy
   function choosePaths(AlgebraValue[],CTLNode[]) in line 9
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/ProofStrategyCatalog.java
module edu::toronto::cs::proof::ProofStrategyCatalog
   abstract class
   function getStrategy(String) in line 40
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function iterator(CTLNode) in line 46
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function registerStrategy(String,IAlgebra,Class) in line 19
      protection public
      5 lines of code
      3 parameters
      2 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/ProofToDaVinci.java
module edu::toronto::cs::proof::ProofToDaVinci
   inherits from edu::toronto::cs::proof::AbstractProofVisitor
   function toDaVinci(ProofStep,boolean) in line 105
      protection public
      23 lines of code
      2 parameters
      1 conditional paths
      uses function ProofToDaVinci(boolean) defined in edu::toronto::cs::proof::ProofToDaVinci
      uses function getStateName() defined in edu::toronto::cs::proof::ProofStep
      uses function getState() defined in edu::toronto::cs::proof::ProofStep
      uses function getConsequent() defined in edu::toronto::cs::proof::ProofStep
      uses function getValue() defined in edu::toronto::cs::proof::ProofStep
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
   function visitEXStep(ProofStep,Object) in line 151
      protection public
      58 lines of code
      2 parameters
      2 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
      uses function getStateName() defined in edu::toronto::cs::proof::ProofStep
      uses function getState() defined in edu::toronto::cs::proof::ProofStep
      uses function getValue() defined in edu::toronto::cs::proof::ProofStep
      uses function getTrans() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses variable fst defined in edu::toronto::cs::proof::NodePair
      uses function ref(FullNode) defined in edu::toronto::cs::davinci::DaVinciGraph
      uses function toString() defined in edu::toronto::cs::davinci::DaVinciGraph::RefNode
      uses variable snd defined in edu::toronto::cs::proof::NodePair
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
   function visitGeneric(ProofStep,Object) in line 131
      protection public
      19 lines of code
      2 parameters
      2 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
      uses function getConsequent() defined in edu::toronto::cs::proof::ProofStep
      uses function getValue() defined in edu::toronto::cs::proof::ProofStep
      uses variable fst defined in edu::toronto::cs::proof::NodePair
      uses function ref(FullNode) defined in edu::toronto::cs::davinci::DaVinciGraph
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
      uses variable snd defined in edu::toronto::cs::proof::NodePair
   function ProofToDaVinci(boolean) in line 97
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/ProofToGrappa.java
module edu::toronto::cs::proof::ProofToGrappa
   inherits from edu::toronto::cs::proof::AbstractProofVisitor
   function toGrappa(ProofStep) in line 95
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses function getStateName() defined in edu::toronto::cs::proof::ProofStep
      uses function getState() defined in edu::toronto::cs::proof::ProofStep
      uses function getConsequent() defined in edu::toronto::cs::proof::ProofStep
      uses function getValue() defined in edu::toronto::cs::proof::ProofStep
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
   function visitEXStep(ProofStep,Object) in line 143
      protection public
      55 lines of code
      2 parameters
      2 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
      uses function getStateName() defined in edu::toronto::cs::proof::ProofStep
      uses function getState() defined in edu::toronto::cs::proof::ProofStep
      uses function getValue() defined in edu::toronto::cs::proof::ProofStep
      uses function getTrans() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses variable snd defined in edu::toronto::cs::proof::GrappaNodePair
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
   function visitGeneric(ProofStep,Object) in line 120
      protection public
      22 lines of code
      2 parameters
      2 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
      uses function getConsequent() defined in edu::toronto::cs::proof::ProofStep
      uses function getValue() defined in edu::toronto::cs::proof::ProofStep
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
      uses variable snd defined in edu::toronto::cs::proof::GrappaNodePair
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/ProofToGrappa.java
module edu::toronto::cs::proof2::ProofToGrappa
   function toGrappa(ProofStep,MvSetModelChecker) in line 137
      protection public
      27 lines of code
      2 parameters
      1 conditional paths
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
      uses function getStateName() defined in edu::toronto::cs::proof2::Formula
      uses function getConsequent() defined in edu::toronto::cs::proof2::Formula
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
      uses function visitGeneric(ProofStep,Object,MvSetModelChecker,int) defined in edu::toronto::cs::proof2::ProofToGrappa
   function toGrappaState(ProofStep,MvSetModelChecker) in line 96
      protection public
      36 lines of code
      2 parameters
      2 conditional paths
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
      uses function getStateName() defined in edu::toronto::cs::proof2::Formula
      uses function getConsequent() defined in edu::toronto::cs::proof2::Formula
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
      uses function visitGeneric(ProofStep,Object,MvSetModelChecker,int) defined in edu::toronto::cs::proof2::ProofToGrappa
   function visitAXStep(ProofStep,Object,MvSetModelChecker,int) in line 323
      protection public
      95 lines of code
      4 parameters
      10 conditional paths
      uses function getXKripke() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses variable i defined in sparsemv.m
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
      uses function getStateName() defined in edu::toronto::cs::proof2::Formula
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
      uses function getTrans() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getState() defined in edu::toronto::cs::proof2::Formula
      uses function renameArgs(int[]) defined in edu::toronto::cs::mvset::MvSet
      uses function getPrime() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getPrimeCube() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getUnPrimeCube() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses variable k defined in sparsemv.m
      uses variable fst defined in edu::toronto::cs::proof2::GrappaNodePair
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable snd defined in edu::toronto::cs::proof2::GrappaNodePair
      uses function getConsequent() defined in edu::toronto::cs::proof2::Formula
      uses function visitEXStep(ProofStep,Object,MvSetModelChecker,int) defined in edu::toronto::cs::proof2::ProofToGrappa
      uses function visitGeneric(ProofStep,Object,MvSetModelChecker,int) defined in edu::toronto::cs::proof2::ProofToGrappa
   function visitEXStep(ProofStep,Object,MvSetModelChecker,int) in line 225
      protection public
      93 lines of code
      4 parameters
      10 conditional paths
      uses function getXKripke() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses variable i defined in sparsemv.m
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
      uses function getStateName() defined in edu::toronto::cs::proof2::Formula
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
      uses function getTrans() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getState() defined in edu::toronto::cs::proof2::Formula
      uses function renameArgs(int[]) defined in edu::toronto::cs::mvset::MvSet
      uses function getPrime() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getPrimeCube() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getUnPrimeCube() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses variable k defined in sparsemv.m
      uses variable fst defined in edu::toronto::cs::proof2::GrappaNodePair
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable snd defined in edu::toronto::cs::proof2::GrappaNodePair
      uses function getConsequent() defined in edu::toronto::cs::proof2::Formula
      uses function visitAXStep(ProofStep,Object,MvSetModelChecker,int) defined in edu::toronto::cs::proof2::ProofToGrappa
      uses function visitGeneric(ProofStep,Object,MvSetModelChecker,int) defined in edu::toronto::cs::proof2::ProofToGrappa
   function visitGeneric(ProofStep,Object,MvSetModelChecker,int) in line 167
      protection public
      55 lines of code
      4 parameters
      9 conditional paths
      uses variable i defined in sparsemv.m
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
      uses function getConsequent() defined in edu::toronto::cs::proof2::Formula
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
      uses variable k defined in sparsemv.m
      uses variable fst defined in edu::toronto::cs::proof2::GrappaNodePair
      uses function visitEXStep(ProofStep,Object,MvSetModelChecker,int) defined in edu::toronto::cs::proof2::ProofToGrappa
      uses variable snd defined in edu::toronto::cs::proof2::GrappaNodePair
      uses function visitAXStep(ProofStep,Object,MvSetModelChecker,int) defined in edu::toronto::cs::proof2::ProofToGrappa
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/ProofToOpenJ.java
module edu::toronto::cs::proof::ProofToOpenJ
   inherits from edu::toronto::cs::proof::AbstractProofVisitor
   function toOpenJ(ProofStep) in line 88
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
      uses function getStateName() defined in edu::toronto::cs::proof::ProofStep
      uses function getState() defined in edu::toronto::cs::proof::ProofStep
      uses function getConsequent() defined in edu::toronto::cs::proof::ProofStep
      uses function getValue() defined in edu::toronto::cs::proof::ProofStep
      uses function setRoot(OpenJNode) defined in edu::toronto::cs::openjgraph::OpenJGraph
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
   function visitEXStep(ProofStep,Object) in line 136
      protection public
      54 lines of code
      2 parameters
      2 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
      uses function getStateName() defined in edu::toronto::cs::proof::ProofStep
      uses function getState() defined in edu::toronto::cs::proof::ProofStep
      uses function getValue() defined in edu::toronto::cs::proof::ProofStep
      uses function getTrans() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses variable fst defined in edu::toronto::cs::proof::OpenJNodePair
      uses variable snd defined in edu::toronto::cs::proof::OpenJNodePair
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
   function visitGeneric(ProofStep,Object) in line 118
      protection public
      17 lines of code
      2 parameters
      2 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
      uses function getConsequent() defined in edu::toronto::cs::proof::ProofStep
      uses function getValue() defined in edu::toronto::cs::proof::ProofStep
      uses variable fst defined in edu::toronto::cs::proof::OpenJNodePair
      uses function accept(ProofVisitor,Object) defined in edu::toronto::cs::proof::ProofStep
      uses variable snd defined in edu::toronto::cs::proof::OpenJNodePair
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/ProofTreeModel.java
module edu::toronto::cs::proof::ProofTreeModel
   inherits from TreeModel
   function addTreeModelListener(TreeModelListener) in line 16
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function getChild(Object,int) in line 20
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getAntecedents() defined in edu::toronto::cs::proof::ProofStep
   function getChildCount(Object) in line 26
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getIndexOfChild(Object,Object) in line 31
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function getRoot() in line 36
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isLeaf(Object) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function removeTreeModelListener(TreeModelListener) in line 46
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function valueForPathChanged(TreePath,Object) in line 50
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function ProofTreeModel(ProofStep) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/ProofVisitor.java
module edu::toronto::cs::proof::ProofVisitor
   function visit(ProofStep,Object) in line 5
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitAndStep(ProofStep,Object) in line 9
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitEGStep(ProofStep,Object) in line 13
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitEUiStep(ProofStep,Object) in line 11
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitEUStep(ProofStep,Object) in line 10
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitEXStep(ProofStep,Object) in line 12
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitNegStep(ProofStep,Object) in line 6
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitOrStep(ProofStep,Object) in line 8
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitPropStep(ProofStep,Object) in line 7
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/PropProofStep.java
module edu::toronto::cs::proof::PropProofStep
   inherits from edu::toronto::cs::proof::ProofStep
   function accept(ProofVisitor,Object) in line 33
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPropStep(ProofStep,Object) defined in edu::toronto::cs::proof::ProofVisitor
   function discharge() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function unfold() in line 28
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function PropProofStep(AlgebraValue,MvSet,String,CTLNode) in line 13
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/Simple2ValDisjStrategy.java
module edu::toronto::cs::proof::Simple2ValDisjStrategy
   inherits from edu::toronto::cs::proof::DisjProofStrategy
   function choosePaths(AlgebraValue[],CTLNode[]) in line 9
      protection public
      55 lines of code
      2 parameters
      9 conditional paths
      uses function getParentAlgebra() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function top() defined in edu::toronto::cs::algebra::IAlgebra
      uses variable i defined in sparsemv.m
      uses variable k defined in sparsemv.m
      uses variable j defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/SimpleNameGenerator.java
module edu::toronto::cs::proof::SimpleNameGenerator
   inherits from edu::toronto::cs::proof::StateNameGenerator
   function getFreshName() in line 35
      protection public
      28 lines of code
      0 parameters
      3 conditional paths
   function main(String) in line 64
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function SimpleNameGenerator() defined in edu::toronto::cs::proof::SimpleNameGenerator
      uses variable i defined in sparsemv.m
      uses function getFreshName() defined in edu::toronto::cs::proof::SimpleNameGenerator
   function returnName(String) in line 28
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function SimpleNameGenerator() in line 20
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof/StateNameGenerator.java
module edu::toronto::cs::proof::StateNameGenerator
   function getFreshName() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function returnName(String) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/AboveFormula.java
module edu::toronto::cs::proof2::AboveFormula
   inherits from edu::toronto::cs::proof2::ComparisonFormula
   function operatorToString() in line 18
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function AboveFormula(CTLNode,AlgebraValue,MvSet) in line 13
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/AbstractProofRule.java
module edu::toronto::cs::proof2::AbstractProofRule
   inherits from edu::toronto::cs::proof2::ProofRule
   abstract class
   function apply(Formula) in line 38
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function toArray(Formula) in line 40
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable f defined in mvproduct.m
   function AbstractProofRule(MvSetModelChecker) in line 24
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function getXKripke() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getAlgebra() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function getMvSetFactory() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function apply(Formula) defined in edu::toronto::cs::proof2::AbstractProofRule
      uses variable f defined in mvproduct.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/Axiomatic.java
module edu::toronto::cs::proof2::Axiomatic
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/BelowFormula.java
module edu::toronto::cs::proof2::BelowFormula
   inherits from edu::toronto::cs::proof2::ComparisonFormula
   function operatorToString() in line 18
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function BelowFormula(CTLNode,AlgebraValue,MvSet) in line 13
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/ComparisonFormula.java
module edu::toronto::cs::proof2::ComparisonFormula
   inherits from edu::toronto::cs::proof2::Formula
   abstract class
   function operatorToString() in line 18
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 20
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function getConsequent() defined in edu::toronto::cs::proof2::Formula
      uses function getStateName() defined in edu::toronto::cs::proof2::Formula
      uses function operatorToString() defined in edu::toronto::cs::proof2::ComparisonFormula
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
   function ComparisonFormula(CTLNode,AlgebraValue,MvSet) in line 13
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function operatorToString() defined in edu::toronto::cs::proof2::ComparisonFormula
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/ConstantFormula.java
module edu::toronto::cs::proof2::ConstantFormula
   inherits from edu::toronto::cs::proof2::Formula
   function toString() in line 18
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
   function ConstantFormula(AlgebraValue) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/CTLProver.java
module edu::toronto::cs::proof2::CTLProver
   function addProofRule(ProofRule) in line 82
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function applyProofRule(TreeProofStep,ProofRule) in line 117
      18 lines of code
      2 parameters
      3 conditional paths
      uses function apply(Formula) defined in edu::toronto::cs::proof2::ProofRule
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
      uses variable i defined in sparsemv.m
      uses function newProofStep(Formula) defined in edu::toronto::cs::proof2::ProofStep
      uses function setChildren(ProofStep[]) defined in edu::toronto::cs::proof2::TreeProofStep
      uses function setProofRule(ProofRule) defined in edu::toronto::cs::proof2::TreeProofStep
   function dumpMvSet(MvSet,AlgebraValue) in line 1292
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses function mintermIterator(MvSet,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
   function expand(ProofStep) in line 94
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses function applyProofRule(TreeProofStep,ProofRule) defined in edu::toronto::cs::proof2::CTLProver
   function expandFully(ProofStep) in line 144
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses function expand(ProofStep) defined in edu::toronto::cs::proof2::CTLProver
   function getModelChecker() in line 70
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CTLProver(MvSetModelChecker,ProofStep) in line 35
      protection public
      30 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::EqualsProofRule
   inherits from edu::toronto::cs::proof2::ProofRule
   function apply(Formula) in line 167
      protection public
      20 lines of code
      1 parameters
      2 conditional paths
      uses function getConsequent() defined in edu::toronto::cs::proof2::Formula
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
      uses function getState() defined in edu::toronto::cs::proof2::Formula
      uses function setParentFormula(Formula) defined in edu::toronto::cs::proof2::Formula
module edu::toronto::cs::proof2::CTLProver::CheckingTopBottom
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   inherits from edu::toronto::cs::proof2::Axiomatic
   function apply(Formula) in line 203
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable f defined in mvproduct.m
      uses function setParentFormula(Formula) defined in edu::toronto::cs::proof2::Formula
   function CheckingTopBottom(MvSetModelChecker) in line 198
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::NegationProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 227
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function applyRule(Formula) in line 236
      protection public
      29 lines of code
      1 parameters
      7 conditional paths
      uses function getConsequent() defined in edu::toronto::cs::proof2::Formula
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
      uses function neg() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getState() defined in edu::toronto::cs::proof2::Formula
      uses function setParentFormula(Formula) defined in edu::toronto::cs::proof2::Formula
   function NegationProofRule(MvSetModelChecker) in line 222
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::EqNegationProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 281
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function applyRule(Formula) in line 290
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses function getConsequent() defined in edu::toronto::cs::proof2::Formula
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
      uses function neg() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getState() defined in edu::toronto::cs::proof2::Formula
      uses function setParentFormula(Formula) defined in edu::toronto::cs::proof2::Formula
   function EqNegationProofRule(MvSetModelChecker) in line 276
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::AtomicProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   inherits from edu::toronto::cs::proof2::Axiomatic
   function apply(Formula) in line 325
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function getConsequent() defined in edu::toronto::cs::proof2::Formula
      uses variable f defined in mvproduct.m
   function AtomicProofRule(MvSetModelChecker) in line 320
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::AndOrProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 350
      protection public
      30 lines of code
      1 parameters
      3 conditional paths
      uses variable f defined in mvproduct.m
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function setParentFormula(Formula) defined in edu::toronto::cs::proof2::Formula
   function AndOrProofRule(MvSetModelChecker) in line 345
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::EUProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 390
      protection public
      41 lines of code
      1 parameters
      5 conditional paths
      uses variable f defined in mvproduct.m
      uses variable i defined in sparsemv.m
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function eu(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable j defined in sparsemv.m
   function EUProofRule(MvSetModelChecker) in line 385
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::EUiProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 455
      protection public
      54 lines of code
      1 parameters
      5 conditional paths
      uses variable f defined in mvproduct.m
      uses function setParentFormula(Formula) defined in edu::toronto::cs::proof2::Formula
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function eu(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function ex() defined in edu::toronto::cs::ctl::CTLAbstractNode
   function minimizeBound(Formula) in line 522
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable f defined in mvproduct.m
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function eu(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
   function EUiProofRule(MvSetModelChecker,boolean) in line 443
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function EUiProofRule(MvSetModelChecker) in line 449
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::AUProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 547
      protection public
      43 lines of code
      1 parameters
      5 conditional paths
      uses variable f defined in mvproduct.m
      uses variable i defined in sparsemv.m
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function au(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable j defined in sparsemv.m
   function AUProofRule(MvSetModelChecker) in line 542
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::AUiProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 604
      protection public
      41 lines of code
      1 parameters
      5 conditional paths
      uses variable f defined in mvproduct.m
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function au(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function ax() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses variable j defined in sparsemv.m
   function minimizeBound(Formula) in line 658
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable f defined in mvproduct.m
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function au(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
   function AUiProofRule(MvSetModelChecker) in line 599
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::AXProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 689
      protection public
      77 lines of code
      1 parameters
      6 conditional paths
      uses variable f defined in mvproduct.m
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getImage() defined in edu::toronto::cs::mvset::MvSet
      uses function mintermIterator(MvSet,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function getName() defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function neg() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses variable j defined in sparsemv.m
   function AXProofRule(MvSetModelChecker) in line 684
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::EGProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 782
      protection public
      46 lines of code
      1 parameters
      3 conditional paths
      uses variable f defined in mvproduct.m
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses variable stateName defined in edu::toronto::cs::proof2::Formula
      uses function getStateName(Object) defined in edu::toronto::cs::util::StateName
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function getName() defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function eu(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function ex() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function eg() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function setParentFormula(Formula) defined in edu::toronto::cs::proof2::Formula
   function EGProofRule(MvSetModelChecker) in line 777
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::BaseEXProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   abstract class
   function apply(Formula) in line 857
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses variable f defined in mvproduct.m
   function exApply(Formula) in line 855
      1 lines of code
      1 parameters
      1 conditional paths
   function getImageMap() in line 881
      1 lines of code
      0 parameters
      1 conditional paths
   function getSingleState(AlgebraValue[],AlgebraValue) in line 845
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable f defined in mvproduct.m
   function getSuccessorMap(MvSet,String,CTLNode) in line 885
      protection public
      17 lines of code
      3 parameters
      2 conditional paths
      uses function getTrans() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function fwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getName() defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
   function BaseEXProofRule(MvSetModelChecker) in line 838
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::PreferAvoidEXProofRule
   inherits from edu::toronto::cs::proof2::CTLProver::BaseEXProofRule
   abstract class
   function exApply(Formula) in line 914
      21 lines of code
      1 parameters
      2 conditional paths
      uses variable f defined in mvproduct.m
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
   function getPreferred(MvSet) in line 912
      1 lines of code
      1 parameters
      1 conditional paths
   function PreferAvoidEXProofRule(MvSetModelChecker) in line 907
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::NewEXProofRule
   inherits from edu::toronto::cs::proof2::CTLProver::BaseEXProofRule
   function exApply(Formula) in line 956
      40 lines of code
      1 parameters
      3 conditional paths
      uses variable f defined in mvproduct.m
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function setParentFormula(Formula) defined in edu::toronto::cs::proof2::Formula
   function getImageMap() in line 950
      5 lines of code
      0 parameters
      1 conditional paths
   function NewEXProofRule(MvSetModelChecker) in line 944
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::EXProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 1016
      protection public
      104 lines of code
      1 parameters
      7 conditional paths
      uses variable f defined in mvproduct.m
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getTrans() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function fwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function getImage() defined in edu::toronto::cs::mvset::MvSet
      uses function getName() defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function mintermIterator(MvSet,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function setParentFormula(Formula) defined in edu::toronto::cs::proof2::Formula
   function getSingleState(AlgebraValue[],AlgebraValue) in line 1123
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function EXProofRule(MvSetModelChecker,boolean) in line 1006
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function EXProofRule(MvSetModelChecker) in line 1011
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::EXAboveMProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 1145
      protection public
      47 lines of code
      1 parameters
      5 conditional paths
      uses variable f defined in mvproduct.m
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getTrans() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function fwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function getName() defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function setParentFormula(Formula) defined in edu::toronto::cs::proof2::Formula
   function EXAboveMProofRule(MvSetModelChecker) in line 1139
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::proof2::CTLProver::EXCexProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 1207
      protection public
      56 lines of code
      1 parameters
      7 conditional paths
      uses variable f defined in mvproduct.m
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getPreImageArray(AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses variable bot defined in algebra
      uses variable i defined in sparsemv.m
      uses function createPoint(AlgebraValue[],AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable top defined in algebra
      uses function getName() defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses variable j defined in sparsemv.m
   function getStateAsArray(Formula) in line 1265
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function EXCexProofRule(MvSetModelChecker) in line 1202
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/DepthProofRule.java
module edu::toronto::cs::proof2::DepthProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 18
      protection public
      75 lines of code
      1 parameters
      9 conditional paths
      uses variable f defined in mvproduct.m
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
      uses function leq(AlgebraValue) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function isTop() defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable d defined in crunch2parms.m
      uses function ctlDepth(CTLNode) defined in edu::toronto::cs::proof2::DepthVisitor
      uses function geq(AlgebraValue) defined in edu::toronto::cs::algebra::AlgebraValue
   function DepthProofRule(MvSetModelChecker) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/DepthVisitor.java
module edu::toronto::cs::proof2::DepthVisitor
   inherits from edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function binaryNontemporalVisit(CTLNode,Object) in line 26
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function visit(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
   function binaryTemporalVisit(CTLNode,Object) in line 47
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
      uses function visit(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
   function ctlDepth(CTLNode) in line 9
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function visit(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
   function unaryNontemporalVisit(CTLNode,Object) in line 19
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function visit(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
   function unaryTemporalVisit(CTLNode,Object) in line 39
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
      uses function visit(CTLNode,Object) defined in edu::toronto::cs::ctl::CTLVisitorDefaulterAncestor
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
   function visitAFNode(CTLAFNode,Object) in line 63
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function unaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitAGNode(CTLAGNode,Object) in line 69
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function unaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitAndNode(CTLAndNode,Object) in line 100
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function binaryNontemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitARNode(CTLARNode,Object) in line 80
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
      uses variable o defined in visual.m
   function visitAtomPropNode(CTLAtomPropNode,Object) in line 106
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function visitAUiNode(CTLAUiNode,Object) in line 85
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitAUNode(CTLAUNode,Object) in line 74
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitAWNode(CTLAWNode,Object) in line 90
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitAXNode(CTLAXNode,Object) in line 95
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function unaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitConstantNode(CTLConstantNode,Object) in line 158
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function visitEFNode(CTLEFNode,Object) in line 113
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function unaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitEGNode(CTLEGNode,Object) in line 118
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function unaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitEqualsNode(CTLEqualsNode,Object) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryNontemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitEUiNode(CTLEUiNode,Object) in line 128
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitEUNode(CTLEUNode,Object) in line 123
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitEWNode(CTLEWNode,Object) in line 133
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitEXNode(CTLEXNode,Object) in line 138
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function unaryTemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitIffNode(CTLIffNode,Object) in line 148
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryNontemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitImplNode(CTLImplNode,Object) in line 153
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryNontemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitMvSetNode(CTLMvSetNode,Object) in line 164
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function visitNegNode(CTLNegNode,Object) in line 169
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function unaryNontemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitOrNode(CTLOrNode,Object) in line 175
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryNontemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitOverNode(CTLOverNode,Object) in line 180
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryNontemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
   function visitPlaceholderNode(CTLPlaceholderNode,Object) in line 197
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function visitPreEXNode(CTLPreEXNode,Object) in line 185
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function visitUnderNode(CTLUnderNode,Object) in line 192
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function binaryNontemporalVisit(CTLNode,Object) defined in edu::toronto::cs::proof2::DepthVisitor
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/DynamicProofDisplay.java
module edu::toronto::cs::proof2::DynamicProofDisplay
   function showProof(CTLProver,ProofStep) in line 31
      protection public
      17 lines of code
      2 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses function expand(ProofStep) defined in edu::toronto::cs::proof2::CTLProver
   function DynamicProofDisplay() in line 25
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::proof2::DynamicProofDisplay::ProofTreeSelectionListener
   inherits from TreeSelectionListener
   function valueChanged(TreeSelectionEvent) in line 58
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/DynamicTree.java
module edu::toronto::cs::proof2::DynamicTree
   inherits from JPanel
   function addObject(Object) in line 131
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable tree defined in edu::toronto::cs::proof2::DynamicTree
      uses function getRootNode() defined in edu::toronto::cs::proof2::DynamicTree
   function addObject(DefaultMutableTreeNode,Object) in line 145
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function addObject(Object) defined in edu::toronto::cs::proof2::DynamicTree
   function addObject(DefaultMutableTreeNode,Object,boolean) in line 151
      protection public
      19 lines of code
      3 parameters
      3 conditional paths
      uses variable rootNode defined in edu::toronto::cs::proof2::DynamicTree
      uses variable treeModel defined in edu::toronto::cs::proof2::DynamicTree
      uses variable tree defined in edu::toronto::cs::proof2::DynamicTree
   function clear() in line 96
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable rootNode defined in edu::toronto::cs::proof2::DynamicTree
      uses variable treeModel defined in edu::toronto::cs::proof2::DynamicTree
   function getRootNode() in line 103
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable rootNode defined in edu::toronto::cs::proof2::DynamicTree
   function removeCurrentNode() in line 111
      protection public
      16 lines of code
      0 parameters
      3 conditional paths
      uses variable tree defined in edu::toronto::cs::proof2::DynamicTree
      uses variable treeModel defined in edu::toronto::cs::proof2::DynamicTree
      uses variable toolkit defined in edu::toronto::cs::proof2::DynamicTree
   function DynamicTree(ProofStep) in line 21
      protection public
      73 lines of code
      1 parameters
      3 conditional paths
      uses variable rootNode defined in edu::toronto::cs::proof2::DynamicTree
      uses variable treeModel defined in edu::toronto::cs::proof2::DynamicTree
      uses variable tree defined in edu::toronto::cs::proof2::DynamicTree
   variable currentColor in line 17
   variable palette in line 16
   variable rootNode in line 11
   variable statesToColors in line 18
   variable toolkit in line 14
   variable tree in line 13
   variable treeModel in line 12
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/EqualFormula.java
module edu::toronto::cs::proof2::EqualFormula
   inherits from edu::toronto::cs::proof2::ComparisonFormula
   function operatorToString() in line 18
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function EqualFormula(CTLNode,AlgebraValue,MvSet) in line 13
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/Formula.java
module edu::toronto::cs::proof2::Formula
   function duplicate(Formula,CTLNode,AlgebraValue,MvSet) in line 94
      protection public
      11 lines of code
      4 parameters
      4 conditional paths
      uses variable f defined in mvproduct.m
   function getConsequent() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getParentFormula() in line 65
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getState() in line 79
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStateName() in line 84
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 72
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setParentFormula(Formula) in line 57
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function Formula(CTLNode,AlgebraValue,MvSet) in line 41
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
   variable ABOVE in line 17
      protection public
   variable BELOW in line 16
      protection public
   variable EQUAL in line 18
      protection public
   variable stateName in line 31
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/FormulaRenderer.java
module edu::toronto::cs::proof2::FormulaRenderer
   inherits from DefaultTreeCellRenderer
   function getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean) in line 11
      protection public
      40 lines of code
      7 parameters
      3 conditional paths
      uses function getColourForState(String) defined in edu::toronto::cs::proof2::NewProofTreeModel
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
      uses function getStateName() defined in edu::toronto::cs::proof2::Formula
   function printNode(Object) in line 52
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable v defined in visual.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/LeafProofStep.java
module edu::toronto::cs::proof2::LeafProofStep
   inherits from edu::toronto::cs::proof2::ProofStep
   function LeafProofStep(Formula,ProofStep) in line 13
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/NewProofTreeModel.java
module edu::toronto::cs::proof2::NewProofTreeModel
   inherits from TreeModel
   function addTreeModelListener(TreeModelListener) in line 62
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getChild(Object,int) in line 71
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
   function getChildCount(Object) in line 81
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function getColourForState(String) in line 26
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable s defined in visual.m
   function getIndexOfChild(Object,Object) in line 91
      protection public
      13 lines of code
      2 parameters
      4 conditional paths
      uses variable k defined in sparsemv.m
      uses variable i defined in sparsemv.m
      uses function getChildLength() defined in edu::toronto::cs::proof2::TreeProofStep
      uses function getChild(int) defined in edu::toronto::cs::proof2::TreeProofStep
   function getRoot() in line 108
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isLeaf(Object) in line 116
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function removeTreeModelListener(TreeModelListener) in line 127
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function valueForPathChanged(TreePath,Object) in line 136
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function NewProofTreeModel(ProofStep) in line 45
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/ProofRule.java
module edu::toronto::cs::proof2::ProofRule
   function apply(Formula) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/ProofStepTreeModel.java
module edu::toronto::cs::proof2::ProofStepTreeModel
   inherits from TreeModel
   function addTreeModelListener(TreeModelListener) in line 16
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function getChild(Object,int) in line 20
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function getChild(int) defined in edu::toronto::cs::proof2::TreeProofStep
   function getChildCount(Object) in line 27
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
   function getIndexOfChild(Object,Object) in line 33
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function getChildLength() defined in edu::toronto::cs::proof2::TreeProofStep
      uses function getChild(int) defined in edu::toronto::cs::proof2::TreeProofStep
   function getRoot() in line 43
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isLeaf(Object) in line 48
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function getChildLength() defined in edu::toronto::cs::proof2::ProofStep
   function removeTreeModelListener(TreeModelListener) in line 54
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function valueForPathChanged(TreePath,Object) in line 58
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function ProofStepTreeModel(ProofStep) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/TreeProofStep.java
module edu::toronto::cs::proof2::TreeProofStep
   inherits from edu::toronto::cs::proof2::ProofStep
   function getChild(int) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function getChildLength() in line 47
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
   function getChildren() in line 25
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getChildrenFormula() in line 30
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable f defined in mvproduct.m
      uses variable i defined in sparsemv.m
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
   function getProofRule() in line 61
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setChildren(ProofStep[]) in line 56
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setProofRule(ProofRule) in line 65
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function TreeProofStep(Formula,ProofStep) in line 18
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/proof2/VisitedEXProofRule.java
module edu::toronto::cs::proof2::VisitedEXProofRule
   inherits from edu::toronto::cs::proof2::AbstractProofRule
   function apply(Formula) in line 49
      protection public
      93 lines of code
      1 parameters
      9 conditional paths
      uses variable f defined in mvproduct.m
      uses function matchCTLNode(CTLNode) defined in edu::toronto::cs::ctl::CTLTemplate
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function leq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable j defined in sparsemv.m
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getState() defined in edu::toronto::cs::proof2::Formula
      uses function geq(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function VisitedEXProofRule(MvSetModelChecker,MvSet) in line 24
      protection public
      23 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/ConditionPanel.java
module edu::toronto::cs::simulator::ConditionPanel
   inherits from JPanel
   function ConditionPanel(ActionMap) in line 21
      protection public
      25 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/DummySimulator.java
module edu::toronto::cs::simulator::DummySimulator
   inherits from edu::toronto::cs::simulator::XCSimulator
   function isMultiStateSupported() in line 82
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function loadScript() in line 60
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function makeStep(XCTraceState) in line 74
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function newStatesOnly() in line 87
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/FileSimulator.java
module edu::toronto::cs::simulator::FileSimulator
   inherits from edu::toronto::cs::simulator::XCSimulator
   function applyScriptChanges() in line 261
      6 lines of code
      0 parameters
      1 conditional paths
      uses function resetScript() defined in edu::toronto::cs::simulator::FileSimulator
      uses function readScript() defined in edu::toronto::cs::simulator::FileSimulator
   function bigAnd(Vector) in line 606
      8 lines of code
      1 parameters
      1 conditional paths
   function canSkipLoops() in line 582
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function findCurrSimStep(XCTraceState) in line 565
      12 lines of code
      1 parameters
      1 conditional paths
   function getDoVector() in line 643
      19 lines of code
      0 parameters
      1 conditional paths
   function getTryVector() in line 662
      19 lines of code
      0 parameters
      1 conditional paths
   function getUnchangedCTLPart(Vector,CTLNode   []) in line 706
      18 lines of code
      2 parameters
      1 conditional paths
   function getUnchangedVector(Vector) in line 686
      15 lines of code
      1 parameters
      1 conditional paths
   function loadScript() in line 175
      protection public
      43 lines of code
      0 parameters
      6 conditional paths
      uses variable f defined in mvproduct.m
      uses function applyScriptChanges() defined in edu::toronto::cs::simulator::FileSimulator
      uses function showException(Component,String,String,Exception) defined in edu::toronto::cs::simulator::FileSimulator
   function makeStep(XCTraceState) in line 496
      protection public
      66 lines of code
      1 parameters
      1 conditional paths
   function makeStepCond(CTLNode,CTLNode   []) in line 728
      11 lines of code
      2 parameters
      1 conditional paths
   function newStatesOnly() in line 744
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function niceLineRead(BufferedReader) in line 436
      22 lines of code
      1 parameters
      4 conditional paths
      uses variable s defined in visual.m
      uses variable i defined in sparsemv.m
   function readBreak(BufferedReader) in line 360
      26 lines of code
      1 parameters
      8 conditional paths
      uses function niceLineRead(BufferedReader) defined in edu::toronto::cs::simulator::FileSimulator
   function readScript() in line 303
      24 lines of code
      0 parameters
      2 conditional paths
      uses function readVariables(BufferedReader) defined in edu::toronto::cs::simulator::FileSimulator
      uses function readBreak(BufferedReader) defined in edu::toronto::cs::simulator::FileSimulator
      uses function readSteps(BufferedReader) defined in edu::toronto::cs::simulator::FileSimulator
      uses function showException(Component,String,String,Exception) defined in edu::toronto::cs::simulator::FileSimulator
   function readSteps(BufferedReader) in line 390
      41 lines of code
      1 parameters
      6 conditional paths
      uses function niceLineRead(BufferedReader) defined in edu::toronto::cs::simulator::FileSimulator
   function readVariables(BufferedReader) in line 333
      23 lines of code
      1 parameters
      7 conditional paths
      uses function niceLineRead(BufferedReader) defined in edu::toronto::cs::simulator::FileSimulator
   function reset() in line 293
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function setStep(int) defined in edu::toronto::cs::simulator::FileSimulator
   function resetScript() in line 271
      17 lines of code
      0 parameters
      1 conditional paths
   function saveScript() in line 222
      protection public
      35 lines of code
      0 parameters
      5 conditional paths
      uses variable f defined in mvproduct.m
      uses variable s defined in visual.m
      uses function showException(Component,String,String,Exception) defined in edu::toronto::cs::simulator::FileSimulator
   function setSimStep(int) in line 629
      9 lines of code
      1 parameters
      1 conditional paths
   function setStep(int) in line 618
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function showException(Component,String,String,Exception) in line 462
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses function title() defined in sparsemv.m
   function skip() in line 594
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::simulator::SimStep
   function getAction() in line 770
      4 lines of code
      0 parameters
      1 conditional paths
   function getCTL() in line 766
      4 lines of code
      0 parameters
      1 conditional paths
   function getNumStep() in line 774
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 779
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function SimStep(int,String,CTLNode) in line 756
      9 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/SimpleVariablePanel.java
module edu::toronto::cs::simulator::SimpleVariablePanel
   inherits from edu::toronto::cs::simulator::VariablePanel
   function clear() in line 66
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function init() in line 35
      14 lines of code
      0 parameters
      1 conditional paths
   function show(XCTraceState) in line 55
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
      uses function clear() defined in edu::toronto::cs::simulator::SimpleVariablePanel
      uses function stateToArray(XCStateInfo) defined in edu::toronto::cs::simulator::XCTraceTree
   function SimpleVariablePanel() in line 27
      1 lines of code
      0 parameters
      1 conditional paths
   function SimpleVariablePanel(XCTraceTree) in line 28
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function init() defined in edu::toronto::cs::simulator::SimpleVariablePanel
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/StateInfoPanel.java
module edu::toronto::cs::simulator::StateInfoPanel
   inherits from JPanel
   function clear() in line 121
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function clear() defined in edu::toronto::cs::simulator::VariablePanel
   function init() in line 41
      63 lines of code
      0 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
   function show(XCTraceState) in line 109
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function getInfo() defined in edu::toronto::cs::simulator::XCTraceState
      uses function getLabel() defined in edu::toronto::cs::simulator::XCStateInfo
      uses function getTransition() defined in edu::toronto::cs::simulator::XCStateInfo
      uses function show(XCTraceState) defined in edu::toronto::cs::simulator::VariablePanel
   function StateInfoPanel() in line 30
      3 lines of code
      0 parameters
      1 conditional paths
   function StateInfoPanel(XCTraceTree) in line 34
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function init() defined in edu::toronto::cs::simulator::StateInfoPanel
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/TraceToolBar.java
module edu::toronto::cs::simulator::TraceToolBar
   inherits from JToolBar
   function TraceToolBar(ActionMap) in line 27
      protection public
      24 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/TraceTreeBrowser.java
module edu::toronto::cs::simulator::TraceTreeBrowser
   inherits from JScrollPane
   function addTreeMouseListener(MouseListener) in line 77
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function defaultAction(TreePath) in line 282
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses function isMultiState() defined in edu::toronto::cs::simulator::XCTraceState
   function findChild(XCTraceState,CTLNode) in line 515
      18 lines of code
      2 parameters
      3 conditional paths
      uses function getMvSetFactory() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getChildren() defined in edu::toronto::cs::simulator::XCTraceState
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getInfo() defined in edu::toronto::cs::simulator::XCTraceState
      uses function getVariables() defined in edu::toronto::cs::simulator::XCStateInfo
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
   function fireSelectedInfoChanged() in line 65
      6 lines of code
      0 parameters
      1 conditional paths
   function getSelectedState() in line 97
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
   function getTreeModel() in line 324
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function init() in line 144
      63 lines of code
      0 parameters
      5 conditional paths
      uses function fireSelectedInfoChanged() defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function defaultAction(TreePath) defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function showPopupMenu(Component,int,int) defined in edu::toronto::cs::simulator::TraceTreeBrowser
   function initActions(ActionMap) in line 226
      51 lines of code
      1 parameters
      1 conditional paths
      uses function makeOneStep(XCTraceState) defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function makeStep(XCTraceState) defined in edu::toronto::cs::simulator::XCSimulator
      uses function getStepCond() defined in edu::toronto::cs::simulator::XCSimulator
      uses function split(XCTraceState,CTLNode) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function showNewState(XCTraceState) defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function getLastAdded() defined in edu::toronto::cs::simulator::XCTraceTree
      uses function remove(XCTraceState) defined in edu::toronto::cs::simulator::XCTraceTree
   function makeOneStep(XCTraceState) in line 444
      29 lines of code
      1 parameters
      4 conditional paths
      uses function makeStep(XCTraceState) defined in edu::toronto::cs::simulator::XCSimulator
      uses function getStepCond() defined in edu::toronto::cs::simulator::XCSimulator
      uses function getElseCond() defined in edu::toronto::cs::simulator::XCSimulator
      uses function getInfo() defined in edu::toronto::cs::simulator::XCTraceState
      uses function equals(Object) defined in edu::toronto::cs::simulator::XCStateInfo
      uses function canSkipLoops() defined in edu::toronto::cs::simulator::XCSimulator
      uses function skip() defined in edu::toronto::cs::simulator::XCSimulator
      uses function showNewState(XCTraceState) defined in edu::toronto::cs::simulator::TraceTreeBrowser
   function makeOneStep(XCTraceState,CTLNode) in line 476
      24 lines of code
      2 parameters
      5 conditional paths
      uses function newStatesOnly() defined in edu::toronto::cs::simulator::XCSimulator
      uses function findChild(XCTraceState,CTLNode) defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function getLastAdded() defined in edu::toronto::cs::simulator::XCTraceTree
      uses function isMultiStateSupported() defined in edu::toronto::cs::simulator::XCSimulator
      uses function expand(XCTraceState,CTLNode) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function expandOne(XCTraceState,CTLNode) defined in edu::toronto::cs::simulator::XCTraceTree
   function mustBreak(CTLNode   [],MvSet) in line 418
      20 lines of code
      2 parameters
      3 conditional paths
      uses function getMvSetFactory() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses variable i defined in sparsemv.m
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses variable s defined in visual.m
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
   function parseCTL(String) in line 332
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
   function runScript(XCSimulator) in line 348
      protection public
      64 lines of code
      1 parameters
      5 conditional paths
      uses function makeOneStep(XCTraceState) defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function getBreakCond() defined in edu::toronto::cs::simulator::XCSimulator
      uses function mustBreak(CTLNode   [],MvSet) defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function getInfo() defined in edu::toronto::cs::simulator::XCTraceState
      uses function getVariables() defined in edu::toronto::cs::simulator::XCStateInfo
      uses function getStep() defined in edu::toronto::cs::simulator::XCSimulator
      uses function getPath(XCTraceState) defined in edu::toronto::cs::simulator::XCTraceTree
   function setMC(MvSetModelChecker) in line 111
      29 lines of code
      1 parameters
      3 conditional paths
      uses function setTreeModel(XCTraceTree) defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function getXKripke() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getAlgebra() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function addTreeModelListener(TreeModelListener) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function fireSelectedInfoChanged() defined in edu::toronto::cs::simulator::TraceTreeBrowser
   function setSimulator(XCSimulator) in line 87
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function setTreeModel(XCTraceTree) in line 314
      5 lines of code
      1 parameters
      1 conditional paths
   function showNewState(XCTraceState) in line 504
      6 lines of code
      1 parameters
      1 conditional paths
      uses function getPath(XCTraceState) defined in edu::toronto::cs::simulator::XCTraceTree
      uses variable s defined in visual.m
   function showPopupMenu(Component,int,int) in line 211
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in visual.m
      uses function getSelectedState() defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function isMultiStateSupported() defined in edu::toronto::cs::simulator::XCSimulator
   function toggleTree(int,TreePath) in line 304
      5 lines of code
      2 parameters
      2 conditional paths
   function TraceTreeBrowser(MvSetModelChecker,ActionMap) in line 46
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function initActions(ActionMap) defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function init() defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function setMC(MvSetModelChecker) defined in edu::toronto::cs::simulator::TraceTreeBrowser
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/UserSimulator.java
module edu::toronto::cs::simulator::UserSimulator
   inherits from edu::toronto::cs::simulator::XCSimulator
   function isMultiStateSupported() in line 105
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function loadScript() in line 73
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function makeStep(XCTraceState) in line 97
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function step(XCTraceState) defined in edu::toronto::cs::simulator::UserSimulator
      uses variable s defined in visual.m
   function newStatesOnly() in line 110
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function step(XCTraceState) in line 81
      13 lines of code
      1 parameters
      3 conditional paths
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function neg() defined in edu::toronto::cs::ctl::CTLNode
module edu::toronto::cs::simulator::LabelAndText
   inherits from JPanel
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/VariablePanel.java
module edu::toronto::cs::simulator::VariablePanel
   inherits from JPanel
   abstract class
   function clear() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function show(XCTraceState) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/XCSimulator.java
module edu::toronto::cs::simulator::XCSimulator
   inherits from JFrame
   abstract class
   function canSkipLoops() in line 100
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getBreakCond() in line 131
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getElseCond() in line 124
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStep() in line 73
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStepCond() in line 116
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isMultiStateSupported() in line 154
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function makeStep(XCTraceState) in line 94
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function newStatesOnly() in line 160
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function reset() in line 66
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setStep(int) in line 80
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function showException(Component,String,String,Exception) in line 139
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
   function skip() in line 109
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function XCSimulator(IAlgebra,String) in line 43
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in visual.m
      uses function bot() defined in edu::toronto::cs::algebra::IAlgebra
      uses function top() defined in edu::toronto::cs::algebra::IAlgebra
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/XCStateInfo.java
module edu::toronto::cs::simulator::XCStateInfo
   function equals(Object) in line 65
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function XCStateInfo() defined in edu::toronto::cs::simulator::XCStateInfo
   function getLabel() in line 86
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTransition() in line 126
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVariables() in line 106
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setLabel(String) in line 96
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 145
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function XCStateInfo() in line 22
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function XCStateInfo(MvSet) in line 34
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function XCStateInfo(String,MvSet) in line 48
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/XCTraceState.java
module edu::toronto::cs::simulator::XCTraceState
   function addChild(XCTraceState) in line 135
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function remove() defined in edu::toronto::cs::simulator::XCTraceState
   function equals(Object) in line 57
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function equals(Object) defined in edu::toronto::cs::simulator::XCStateInfo
   function getChild(int) in line 114
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getChildIndex(XCTraceState) in line 125
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getChildren() in line 101
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function getInfo() in line 69
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNumChildren() in line 91
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getParent() in line 166
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isMultiState() in line 201
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function remove() in line 150
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
   function setInfo(XCStateInfo,boolean) in line 80
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function setParent(XCTraceState) in line 177
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function addChild(XCTraceState) defined in edu::toronto::cs::simulator::XCTraceState
   function toString() in line 192
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getLabel() defined in edu::toronto::cs::simulator::XCStateInfo
   function XCTraceState() in line 23
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function XCTraceState(XCTraceState,XCStateInfo,boolean) in line 39
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/XCTraceTree.java
module edu::toronto::cs::simulator::XCTraceTree
   inherits from TreeModel
   function addChild(XCTraceState,XCTraceState) in line 158
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses function addChild(XCTraceState) defined in edu::toronto::cs::simulator::XCTraceState
      uses function getChildIndex(XCTraceState) defined in edu::toronto::cs::simulator::XCTraceState
      uses function fireTreeNodesInserted(TreeModelEvent) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function getPath(XCTraceState) defined in edu::toronto::cs::simulator::XCTraceTree
   function addPath(TreePath) in line 183
      protection public
      22 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
      uses function getRoot() defined in edu::toronto::cs::simulator::XCTraceTree
      uses function getIndexOfChild(Object,Object) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function addChild(XCTraceState,XCTraceState) defined in edu::toronto::cs::simulator::XCTraceTree
   function addTreeModelListener(TreeModelListener) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function expand(XCTraceState,CTLNode) in line 307
      protection public
      35 lines of code
      2 parameters
      3 conditional paths
      uses function getInfo() defined in edu::toronto::cs::simulator::XCTraceState
      uses function getVariables() defined in edu::toronto::cs::simulator::XCStateInfo
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function newStateCondition(XCTraceState,boolean) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function preEX() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function getXKripke() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getUnPrime() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getPreImageArray(AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses variable top defined in algebra
      uses function getStateName(Object) defined in edu::toronto::cs::util::StateName
      uses function addChild(XCTraceState,XCTraceState) defined in edu::toronto::cs::simulator::XCTraceTree
   function expandOne(XCTraceState,CTLNode) in line 347
      protection public
      23 lines of code
      2 parameters
      2 conditional paths
      uses function getInfo() defined in edu::toronto::cs::simulator::XCTraceState
      uses function getVariables() defined in edu::toronto::cs::simulator::XCStateInfo
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function newStateCondition(XCTraceState,boolean) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function preEX() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function getXKripke() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getUnPrime() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function extractState(MvSet) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function getStateName(Object) defined in edu::toronto::cs::util::StateName
      uses function addChild(XCTraceState,XCTraceState) defined in edu::toronto::cs::simulator::XCTraceTree
   function extractState(MvSet) in line 515
      8 lines of code
      1 parameters
      1 conditional paths
   function fireTreeNodesChanged(TreeModelEvent) in line 259
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function fireTreeNodesInserted(TreeModelEvent) in line 270
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function fireTreeNodesRemoved(TreeModelEvent) in line 281
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function fireTreeStructureChanged(TreeModelEvent) in line 293
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function getAlgebra() in line 149
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function getChild(Object,int) in line 77
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
   function getChildCount(Object) in line 87
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function getIndexOfChild(Object,Object) in line 97
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
   function getInitialState() in line 502
      12 lines of code
      0 parameters
      1 conditional paths
   function getLastAdded() in line 528
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPath(XCTraceState) in line 239
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
      uses function getParent() defined in edu::toronto::cs::simulator::XCTraceState
   function getRoot() in line 109
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isLeaf(Object) in line 117
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function newStateCondition(XCTraceState,boolean) in line 471
      27 lines of code
      2 parameters
      1 conditional paths
   function remove(XCTraceState) in line 213
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
      uses function getChildIndex(XCTraceState) defined in edu::toronto::cs::simulator::XCTraceState
      uses function fireTreeNodesRemoved(TreeModelEvent) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function getPath(XCTraceState) defined in edu::toronto::cs::simulator::XCTraceTree
   function removeTreeModelListener(TreeModelListener) in line 127
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function split(XCTraceState,CTLNode) in line 381
      protection public
      63 lines of code
      2 parameters
      6 conditional paths
      uses function isMultiState() defined in edu::toronto::cs::simulator::XCTraceState
      uses function getInfo() defined in edu::toronto::cs::simulator::XCTraceState
      uses function getVariables() defined in edu::toronto::cs::simulator::XCStateInfo
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function newStateCondition(XCTraceState,boolean) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function extractState(MvSet) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function getStateName(Object) defined in edu::toronto::cs::util::StateName
      uses function addChild(XCTraceState,XCTraceState) defined in edu::toronto::cs::simulator::XCTraceTree
      uses function getParent() defined in edu::toronto::cs::simulator::XCTraceState
      uses function not() defined in edu::toronto::cs::mvset::MvSet
   function stateToArray(XCStateInfo) in line 457
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function valueForPathChanged(TreePath,Object) in line 136
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function fireTreeNodesChanged(TreeModelEvent) defined in edu::toronto::cs::simulator::XCTraceTree
   function XCTraceTree(MvSetModelChecker) in line 44
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function getMvSetFactory() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getXKripke() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getStatePresenter() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getAlgebra() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses variable bot defined in algebra
      uses variable top defined in algebra
      uses function getInitialState() defined in edu::toronto::cs::simulator::XCTraceTree
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/simulator/XCTraceViewer.java
module edu::toronto::cs::simulator::XCTraceViewer
   inherits from JFrame
   function createConditionPanel() in line 295
      6 lines of code
      0 parameters
      1 conditional paths
   function createStateInfoBrowser() in line 306
      6 lines of code
      0 parameters
      1 conditional paths
      uses function getTreeModel() defined in edu::toronto::cs::simulator::TraceTreeBrowser
   function createToolbar() in line 275
      6 lines of code
      0 parameters
      1 conditional paths
   function createTreeBrowser() in line 285
      6 lines of code
      0 parameters
      1 conditional paths
   function init() in line 82
      54 lines of code
      0 parameters
      1 conditional paths
      uses function getXKripke() defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getAlgebra() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function initActionMap() defined in edu::toronto::cs::simulator::XCTraceViewer
      uses function createTreeBrowser() defined in edu::toronto::cs::simulator::XCTraceViewer
      uses function createConditionPanel() defined in edu::toronto::cs::simulator::XCTraceViewer
      uses function createStateInfoBrowser() defined in edu::toronto::cs::simulator::XCTraceViewer
      uses function getTreeModel() defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function setSimulator(XCSimulator) defined in edu::toronto::cs::simulator::XCTraceViewer
   function initActionMap() in line 140
      131 lines of code
      0 parameters
      3 conditional paths
      uses function updateStateView() defined in edu::toronto::cs::simulator::XCTraceViewer
      uses function runScript(XCSimulator) defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function setSimulator(XCSimulator) defined in edu::toronto::cs::simulator::XCTraceViewer
   function setSimulator(XCSimulator) in line 331
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
      uses function setSimulator(XCSimulator) defined in edu::toronto::cs::simulator::TraceTreeBrowser
   function updateStateView() in line 316
      11 lines of code
      0 parameters
      2 conditional paths
      uses function getSelectedState() defined in edu::toronto::cs::simulator::TraceTreeBrowser
      uses function clear() defined in edu::toronto::cs::simulator::StateInfoPanel
      uses function show(XCTraceState) defined in edu::toronto::cs::simulator::StateInfoPanel
   function XCTraceViewer(MvSetModelChecker) in line 72
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function init() defined in edu::toronto::cs::simulator::XCTraceViewer
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/AxelEx1a.java
module edu::toronto::cs::smv::AxelEx1a
   inherits from edu::toronto::cs::smv::SMVModule
   function computeInit() in line 33
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function computeTrans() in line 45
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function computeTrans1() defined in edu::toronto::cs::smv::AxelEx1a
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function computeTrans2() defined in edu::toronto::cs::smv::AxelEx1a
      uses function computeTrans3() defined in edu::toronto::cs::smv::AxelEx1a
      uses function computeTrans4() defined in edu::toronto::cs::smv::AxelEx1a
      uses function computeTrans5() defined in edu::toronto::cs::smv::AxelEx1a
   function computeTrans1() in line 76
      7 lines of code
      0 parameters
      1 conditional paths
   function computeTrans2() in line 84
      5 lines of code
      0 parameters
      1 conditional paths
   function computeTrans3() in line 62
      7 lines of code
      0 parameters
      1 conditional paths
   function computeTrans4() in line 70
      5 lines of code
      0 parameters
      1 conditional paths
   function computeTrans5() in line 53
      8 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function AxelEx1a() in line 19
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/AxelEx1b.java
module edu::toronto::cs::smv::AxelEx1b
   inherits from edu::toronto::cs::smv::SMVModule
   function computeInit() in line 36
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses function not() defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
   function computeInitSingleState() in line 30
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses function not() defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
   function computeTrans() in line 45
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function computeTrans1() defined in edu::toronto::cs::smv::AxelEx1b
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function computeTrans2() defined in edu::toronto::cs::smv::AxelEx1b
      uses function computeTrans3() defined in edu::toronto::cs::smv::AxelEx1b
      uses function computeTrans4() defined in edu::toronto::cs::smv::AxelEx1b
   function computeTrans1() in line 66
      7 lines of code
      0 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses function and(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses function not() defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
   function computeTrans2() in line 74
      5 lines of code
      0 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
   function computeTrans3() in line 52
      7 lines of code
      0 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses function and(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
   function computeTrans4() in line 60
      5 lines of code
      0 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
   function AxelEx1b() in line 18
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/AxelEx2.java
module edu::toronto::cs::smv::AxelEx2
   inherits from edu::toronto::cs::smv::SMVModule
   function computeInit() in line 31
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function computeInitSingleState() in line 26
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function computeTrans() in line 38
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function computeTrans1() defined in edu::toronto::cs::smv::AxelEx2
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function computeTrans2() defined in edu::toronto::cs::smv::AxelEx2
   function computeTrans1() in line 49
      6 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function computeTrans2() in line 43
      5 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function AxelEx2() in line 16
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/AxelEx4.java
module edu::toronto::cs::smv::AxelEx4
   inherits from edu::toronto::cs::smv::SMVModule
   function computeInit() in line 26
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function not() defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable p defined in visual.m
   function computeTrans() in line 35
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function computeTrans1() defined in edu::toronto::cs::smv::AxelEx4
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function computeTrans2() defined in edu::toronto::cs::smv::AxelEx4
   function computeTrans1() in line 47
      5 lines of code
      0 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses variable p defined in visual.m
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function computeTrans2() in line 40
      6 lines of code
      0 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses variable p defined in visual.m
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function AxelEx4() in line 16
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
      uses variable p defined in visual.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/ConcurExample.java
module edu::toronto::cs::smv::ConcurExample
   inherits from edu::toronto::cs::smv::SMVModule
   function computeInit() in line 21
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable p defined in visual.m
   function computeTrans() in line 26
      protection public
      14 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable p defined in visual.m
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getAlgebra() defined in edu::toronto::cs::smv::SMVModule
   function ConcurExample() in line 14
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable p defined in visual.m
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/FairTester.java
module edu::toronto::cs::smv::FairTester
   inherits from edu::toronto::cs::smv::SMVModule
   function computeInit() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable p defined in visual.m
   function computeTrans() in line 24
      protection public
      23 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable p defined in visual.m
   function FairTester() in line 12
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable p defined in visual.m
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/Game.java
module edu::toronto::cs::smv::Game
   inherits from edu::toronto::cs::smv::SMVModule
   function computeInit() in line 50
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function computeTrans() in line 31
      protection public
      16 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function initModule(String[]) in line 56
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function Game() defined in edu::toronto::cs::smv::Game
      uses function setAlgebra(IAlgebra) defined in edu::toronto::cs::smv::SMVModule
      uses function setMvSetFactoryClass(Class) defined in edu::toronto::cs::smv::SMVModule
      uses function toString() defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
   function main(String[]) in line 70
      protection public
      31 lines of code
      1 parameters
      2 conditional paths
      uses function Game() defined in edu::toronto::cs::smv::Game
      uses function initModule(String[]) defined in edu::toronto::cs::smv::Game
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
   function Game() in line 24
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/GameBeanTest.java
module edu::toronto::cs::smv::GameBeanTest
   function main(String[]) in line 17
      protection public
      70 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/GameCheckCE.java
module edu::toronto::cs::smv::GameCheckCE
   function main(String[]) in line 17
      protection public
      98 lines of code
      1 parameters
      6 conditional paths
      uses function compile() defined in edu::toronto::cs::modelchecker::ModelCompiler
      uses function getMvSetFactory() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getInit() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getUnPrimeCube() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function discharge() defined in edu::toronto::cs::proof::ProofStep
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/GameChecker.java
module edu::toronto::cs::smv::GameChecker
   function main(String[]) in line 18
      protection public
      119 lines of code
      1 parameters
      15 conditional paths
      uses function compile() defined in edu::toronto::cs::modelchecker::ModelCompiler
      uses function getMvSetFactory() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getAlgebra() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function getTrans() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function toMvSet() defined in edu::toronto::cs::mvset::MvRelation
      uses function toDaVinci() defined in edu::toronto::cs::mvset::MvSet
      uses function getInit() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getStatePresenter() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getUnPrimeCube() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::modelchecker::StatePresenter
      uses variable i defined in sparsemv.m
      uses function length() defined in sparser.m
      uses variable bot defined in algebra
      uses variable j defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/Helmut.java
module edu::toronto::cs::smv::Helmut
   inherits from edu::toronto::cs::smv::SMVModule
   function computeInit() in line 25
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function stateA() defined in edu::toronto::cs::smv::Helmut
   function computeTrans() in line 32
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses function stateA() defined in edu::toronto::cs::smv::Helmut
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function stateB() defined in edu::toronto::cs::smv::Helmut
      uses function stateBD() defined in edu::toronto::cs::smv::Helmut
      uses function stateC() defined in edu::toronto::cs::smv::Helmut
      uses function stateD() defined in edu::toronto::cs::smv::Helmut
   function stateA() in line 42
      5 lines of code
      0 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses function not() defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses variable d defined in crunch2parms.m
   function stateB() in line 47
      5 lines of code
      0 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses function not() defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses variable d defined in crunch2parms.m
   function stateBD() in line 63
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
      uses function not() defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
   function stateC() in line 52
      5 lines of code
      0 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses function not() defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
      uses variable d defined in crunch2parms.m
   function stateD() in line 57
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
      uses function not() defined in edu::toronto::cs::smv::SMVModule::AlgebraDefine
   function Helmut() in line 15
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
      uses variable d defined in crunch2parms.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/IntApplyFunctions.java
module edu::toronto::cs::smv::IntApplyFunctions
module edu::toronto::cs::smv::IntApplyFunctions::PlusFunction
   inherits from TerminalBinApplyFunction
   function binApply(MDDNode,MDDNode) in line 18
      protection public
      10 lines of code
      2 parameters
      4 conditional paths
      uses function isConstant() defined in edu::toronto::cs::mdd::MDDNode
      uses function getValue() defined in edu::toronto::cs::mdd::MDDNode
   function binApply(int,int) in line 33
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function isSymetric() in line 29
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function PlusFunction(MDDManager) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::smv::IntApplyFunctions::LtFunction
   inherits from TerminalBinApplyFunction
   function binApply(MDDNode,MDDNode) in line 52
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
   function binApply(int,int) in line 64
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function isSymetric() in line 60
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function LtFunction(MDDManager,int,int) in line 45
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/Lift.java
module edu::toronto::cs::smv::Lift
   inherits from edu::toronto::cs::smv::SMVModule
   function computeCall(Button[]) in line 77
      protection public
      32 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
      uses function addCase(Variable,MvSet) defined in edu::toronto::cs::smv::SMVModule::CaseStatement
      uses function getRequest() defined in edu::toronto::cs::smv::Lift::Button
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function getFloor() defined in edu::toronto::cs::smv::Lift::LiftCabin
      uses function gt(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses function intConstant(int) defined in edu::toronto::cs::smv::SMVModule
      uses function lt(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses function getDir() defined in edu::toronto::cs::smv::Lift::LiftCabin
      uses function compute() defined in edu::toronto::cs::smv::SMVModule::CaseStatement
      uses function eq(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses function getDoor() defined in edu::toronto::cs::smv::Lift::LiftCabin
      uses function setLandingCall(IntDefine) defined in edu::toronto::cs::smv::Lift::LiftCabin
      uses function setNoCall(AlgebraDefine) defined in edu::toronto::cs::smv::Lift::LiftCabin
      uses function declareAlgebraDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses function declareIntDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses function getFloors() defined in edu::toronto::cs::smv::Lift
   function computeInit() in line 47
      protection public
      7 lines of code
      0 parameters
      3 conditional paths
      uses function computeInit() defined in edu::toronto::cs::smv::Lift::LiftCabin
      uses variable i defined in sparsemv.m
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function computeInit() defined in edu::toronto::cs::smv::Lift::Button
      uses function getRequest() defined in edu::toronto::cs::smv::Lift::Button
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function computeCall(Button[]) defined in edu::toronto::cs::smv::Lift
      uses function setMvSet(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
   function computeTrans() in line 35
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses function computeTrans() defined in edu::toronto::cs::smv::Lift::LiftCabin
      uses variable i defined in sparsemv.m
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function computeTrans() defined in edu::toronto::cs::smv::Lift::Button
   function getFloors() in line 25
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 358
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function Lift() defined in edu::toronto::cs::smv::Lift
   function setFloors(int) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function Lift() in line 19
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::smv::Lift::Button
   function computeInit() in line 173
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function computeTrans() in line 166
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function getRequest() in line 178
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function setReset(MvSet) in line 160
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function Button(String) in line 153
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
module edu::toronto::cs::smv::Lift::LiftCabin
   function computeInit() in line 277
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable i defined in sparsemv.m
      uses function computeInit() defined in edu::toronto::cs::smv::Lift::Button
   function computeTrans() in line 285
      protection public
      12 lines of code
      0 parameters
      3 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable i defined in sparsemv.m
      uses function computeTrans() defined in edu::toronto::cs::smv::Lift::Button
      uses function compute() defined in edu::toronto::cs::smv::SMVModule::CaseStatement
      uses function getRequest() defined in edu::toronto::cs::smv::Lift::Button
      uses function computeCall(Button[]) defined in edu::toronto::cs::smv::Lift
   function getDir() in line 255
      protection public
      4 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function setReset(MvSet) defined in edu::toronto::cs::smv::Lift::Button
   function getDoor() in line 251
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFloor() in line 247
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setLandingCall(IntDefine) in line 268
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setNoCall(AlgebraDefine) in line 272
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function LiftCabin(String) in line 230
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
      uses function declareIntVariable(String,int,int) defined in edu::toronto::cs::smv::SMVModule
      uses function declareAlgebraDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses function declareIntDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses variable i defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/LiftAbstract.java
module edu::toronto::cs::smv::LiftAbstract
   inherits from edu::toronto::cs::smv::SMVModule
   function computeCall(Button[]) in line 86
      protection public
      32 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
      uses function addCase(Variable,MvSet) defined in edu::toronto::cs::smv::SMVModule::CaseStatement
      uses function getRequest() defined in edu::toronto::cs::smv::LiftAbstract::Button
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function getFloor() defined in edu::toronto::cs::smv::LiftAbstract::LiftCabin
      uses function gt(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses function intConstant(int) defined in edu::toronto::cs::smv::SMVModule
      uses function lt(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses function getDir() defined in edu::toronto::cs::smv::LiftAbstract::LiftCabin
      uses function compute() defined in edu::toronto::cs::smv::SMVModule::CaseStatement
      uses function eq(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses function getDoor() defined in edu::toronto::cs::smv::LiftAbstract::LiftCabin
      uses function setLandingCall(IntDefine) defined in edu::toronto::cs::smv::LiftAbstract::LiftCabin
      uses function setNoCall(AlgebraDefine) defined in edu::toronto::cs::smv::LiftAbstract::LiftCabin
      uses function declareAlgebraDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses function declareIntDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses function getFloors() defined in edu::toronto::cs::smv::LiftAbstract
      uses function getMvSetFactory() defined in edu::toronto::cs::smv::SMVModule
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getAlgebra() defined in edu::toronto::cs::smv::SMVModule
   function computeInit() in line 56
      protection public
      7 lines of code
      0 parameters
      3 conditional paths
      uses function computeInit() defined in edu::toronto::cs::smv::LiftAbstract::LiftCabin
      uses variable i defined in sparsemv.m
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function computeInit() defined in edu::toronto::cs::smv::LiftAbstract::Button
      uses function getRequest() defined in edu::toronto::cs::smv::LiftAbstract::Button
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function computeCall(Button[]) defined in edu::toronto::cs::smv::LiftAbstract
      uses function setMvSet(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
   function computeTrans() in line 44
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses function computeTrans() defined in edu::toronto::cs::smv::LiftAbstract::LiftCabin
      uses variable i defined in sparsemv.m
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function computeTrans() defined in edu::toronto::cs::smv::LiftAbstract::Button
   function getFloors() in line 29
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 377
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setAlgebra(IAlgebra) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setFloors(int) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function LiftAbstract() in line 22
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::smv::LiftAbstract::Button
   function computeInit() in line 182
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function computeTrans() in line 176
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function getRequest() in line 187
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function setReset(MvSet) in line 170
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function Button(String) in line 163
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
module edu::toronto::cs::smv::LiftAbstract::LiftCabin
   function computeInit() in line 296
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable i defined in sparsemv.m
      uses function computeInit() defined in edu::toronto::cs::smv::LiftAbstract::Button
   function computeTrans() in line 304
      protection public
      12 lines of code
      0 parameters
      3 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable i defined in sparsemv.m
      uses function computeTrans() defined in edu::toronto::cs::smv::LiftAbstract::Button
      uses function compute() defined in edu::toronto::cs::smv::SMVModule::CaseStatement
      uses function getRequest() defined in edu::toronto::cs::smv::LiftAbstract::Button
      uses function computeCall(Button[]) defined in edu::toronto::cs::smv::LiftAbstract
   function getDir() in line 274
      protection public
      4 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function setReset(MvSet) defined in edu::toronto::cs::smv::LiftAbstract::Button
   function getDoor() in line 270
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFloor() in line 266
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setLandingCall(IntDefine) in line 287
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setNoCall(AlgebraDefine) in line 291
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function LiftCabin(String) in line 249
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
      uses function declareIntVariable(String,int,int) defined in edu::toronto::cs::smv::SMVModule
      uses function declareAlgebraDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses function declareIntDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses variable i defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/MainLift.java
module edu::toronto::cs::smv::MainLift
   inherits from edu::toronto::cs::smv::SMVModule
   function computeCall(Button[]) in line 77
      protection public
      32 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
      uses function addCase(Variable,MvSet) defined in edu::toronto::cs::smv::SMVModule::CaseStatement
      uses function getPressed() defined in edu::toronto::cs::smv::MainLift::Button
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function getFloor() defined in edu::toronto::cs::smv::MainLift::Lift
      uses function gt(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses function intConstant(int) defined in edu::toronto::cs::smv::SMVModule
      uses function lt(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses function getDir() defined in edu::toronto::cs::smv::MainLift::Lift
      uses function compute() defined in edu::toronto::cs::smv::SMVModule::CaseStatement
      uses function eq(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses function getDoor() defined in edu::toronto::cs::smv::MainLift::Lift
      uses function setLandingCall(IntDefine) defined in edu::toronto::cs::smv::MainLift::Lift
      uses function setNoCall(AlgebraDefine) defined in edu::toronto::cs::smv::MainLift::Lift
      uses function declareAlgebraDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses function declareIntDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses function getFloors() defined in edu::toronto::cs::smv::MainLift
   function computeInit() in line 47
      protection public
      7 lines of code
      0 parameters
      3 conditional paths
      uses function computeInit() defined in edu::toronto::cs::smv::MainLift::Lift
      uses variable i defined in sparsemv.m
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function computeInit() defined in edu::toronto::cs::smv::MainLift::Button
      uses function getPressed() defined in edu::toronto::cs::smv::MainLift::Button
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function computeCall(Button[]) defined in edu::toronto::cs::smv::MainLift
      uses function setMvSet(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
   function computeTrans() in line 35
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses function computeTrans() defined in edu::toronto::cs::smv::MainLift::Lift
      uses variable i defined in sparsemv.m
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function computeTrans() defined in edu::toronto::cs::smv::MainLift::Button
   function getFloors() in line 25
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 337
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function MainLift() defined in edu::toronto::cs::smv::MainLift
   function setFloors(int) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function MainLift() in line 19
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::smv::MainLift::Button
   function computeInit() in line 171
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
   function computeTrans() in line 164
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function getPressed() in line 176
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
   function setReset(MvSet) in line 158
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function Button(String) in line 152
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
module edu::toronto::cs::smv::MainLift::Lift
   function computeInit() in line 256
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable i defined in sparsemv.m
      uses function computeInit() defined in edu::toronto::cs::smv::MainLift::Button
   function computeTrans() in line 264
      protection public
      12 lines of code
      0 parameters
      3 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable i defined in sparsemv.m
      uses function computeTrans() defined in edu::toronto::cs::smv::MainLift::Button
      uses function compute() defined in edu::toronto::cs::smv::SMVModule::CaseStatement
      uses function getPressed() defined in edu::toronto::cs::smv::MainLift::Button
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function computeCall(Button[]) defined in edu::toronto::cs::smv::MainLift
   function getDir() in line 234
      protection public
      4 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function setReset(MvSet) defined in edu::toronto::cs::smv::MainLift::Button
   function getDoor() in line 230
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFloor() in line 226
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setLandingCall(IntDefine) in line 247
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setNoCall(AlgebraDefine) in line 251
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function Lift(String) in line 209
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
      uses function declareIntVariable(String,int,int) defined in edu::toronto::cs::smv::SMVModule
      uses function declareAlgebraDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses function declareIntDefine(String) defined in edu::toronto::cs::smv::SMVModule
      uses variable i defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/MyGame.java
module edu::toronto::cs::smv::MyGame
   inherits from edu::toronto::cs::smv::SMVModule
   function computeInit() in line 50
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function computeTrans() in line 31
      protection public
      16 lines of code
      0 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function initModule(String[]) in line 56
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function MyGame() defined in edu::toronto::cs::smv::MyGame
      uses function setAlgebra(IAlgebra) defined in edu::toronto::cs::smv::SMVModule
      uses function setMvSetFactoryClass(Class) defined in edu::toronto::cs::smv::SMVModule
      uses function toString() defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
   function main(String[]) in line 69
      protection public
      31 lines of code
      1 parameters
      2 conditional paths
      uses function MyGame() defined in edu::toronto::cs::smv::MyGame
      uses function initModule(String[]) defined in edu::toronto::cs::smv::MyGame
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
   function MyGame() in line 24
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/OneBtn.java
module edu::toronto::cs::smv::OneBtn
   inherits from edu::toronto::cs::smv::SMVModule
   function computeInit() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable p defined in visual.m
      uses variable f defined in mvproduct.m
   function computeTrans() in line 23
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable f defined in mvproduct.m
      uses variable p defined in visual.m
      uses function not() defined in edu::toronto::cs::mvset::MvSet
   function OneBtn() in line 11
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable p defined in visual.m
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
      uses variable f defined in mvproduct.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/parser/ExprAST.java
module edu::toronto::cs::smv::parser::ExprAST
   inherits from antlr::CommonAST
   function isEnum() in line 27
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function setEnum(List) in line 52
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function setProp() in line 45
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function ExprAST() in line 15
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ExprAST(Token) in line 20
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/parser/FlatSmvCompiler.java
module edu::toronto::cs::smv::parser::FlatSmvCompiler
   inherits from edu::toronto::cs::modelchecker::ModelCompiler
   function compile() in line 72
      protection public
      44 lines of code
      0 parameters
      3 conditional paths
      uses function getMvSetFactory() defined in edu::toronto::cs::smv::VariableTable
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getUnPrimedVariablesIds() defined in edu::toronto::cs::smv::VariableTable
      uses function getPrimedVariablesIds() defined in edu::toronto::cs::smv::VariableTable
      uses function getPrimeMap() defined in edu::toronto::cs::smv::VariableTable
      uses function getUnPrimeMap() defined in edu::toronto::cs::smv::VariableTable
      uses function getVarNames() defined in edu::toronto::cs::smv::VariableTable
      uses function getNumVars() defined in edu::toronto::cs::smv::VariableTable
      uses function getCtlReWriter() defined in edu::toronto::cs::smv::VariableTable
      uses function getStatePresenter() defined in edu::toronto::cs::smv::VariableTable
   function getAlgebra() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getInputFile() in line 59
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSetFactoryClass() in line 45
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setAlgebra(IAlgebra) in line 54
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setInputFile(File) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setMvSetFactoryClass(Class) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function FlatSmvCompiler() in line 34
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/parser/FlatSmvCompilerBeanInfo.java
module edu::toronto::cs::smv::parser::FlatSmvCompilerBeanInfo
   inherits from SimpleBeanInfo
   function getBeanDescriptor() in line 16
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function getPropertyDescriptors() in line 23
      protection public
      48 lines of code
      0 parameters
      2 conditional paths
      uses variable HELP_ATTRIBUTE defined in edu::toronto::cs::beans::BeanUtil
      uses macro definition assert defined in util.h
   function FlatSmvCompilerBeanInfo() in line 12
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/parser/FullTestDriver.java
module edu::toronto::cs::smv::parser::FullTestDriver
   function drawFrame(CommonAST) in line 38
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function main(String[]) in line 14
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses function drawFrame(CommonAST) defined in edu::toronto::cs::smv::parser::FullTestDriver
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/parser/SmvCompiler.java
module edu::toronto::cs::smv::parser::SmvCompiler
   inherits from edu::toronto::cs::modelchecker::ModelCompiler
   function compile() in line 95
      protection public
      58 lines of code
      0 parameters
      3 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function renameArgs(int[]) defined in edu::toronto::cs::mvset::MvSet
      uses function getPrimeMap() defined in edu::toronto::cs::smv::VariableTable
      uses function getNumVars() defined in edu::toronto::cs::smv::VariableTable
      uses function size() defined in edu::toronto::cs::mvset::MvSet
      uses macro definition assert defined in util.h
      uses function isConstant() defined in edu::toronto::cs::mvset::MvSet
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getUnPrimedVariablesIds() defined in edu::toronto::cs::smv::VariableTable
      uses function getPrimedVariablesIds() defined in edu::toronto::cs::smv::VariableTable
      uses function getUnPrimeMap() defined in edu::toronto::cs::smv::VariableTable
      uses function getVarNames() defined in edu::toronto::cs::smv::VariableTable
      uses function getCtlReWriter() defined in edu::toronto::cs::smv::VariableTable
      uses function getStatePresenter() defined in edu::toronto::cs::smv::VariableTable
      uses function seal() defined in edu::toronto::cs::smv::parser::SmvCompiler
   function getAlgebra() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getInputFile() in line 59
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSetFactoryClass() in line 45
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 180
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function SmvCompiler() defined in edu::toronto::cs::smv::parser::SmvCompiler
      uses function setMvSetFactoryClass(Class) defined in edu::toronto::cs::smv::parser::SmvCompiler
      uses function setAlgebra(IAlgebra) defined in edu::toronto::cs::smv::parser::SmvCompiler
      uses function setInputFile(File) defined in edu::toronto::cs::smv::parser::SmvCompiler
      uses function compile() defined in edu::toronto::cs::smv::parser::SmvCompiler
   function seal() in line 71
      21 lines of code
      0 parameters
      2 conditional paths
      uses function setMvSetFactory(MvSetFactory) defined in edu::toronto::cs::smv::VariableTable
   function setAlgebra(IAlgebra) in line 54
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setInputFile(File) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setMvSetFactoryClass(Class) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function SmvCompiler() in line 34
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/parser/SmvCompilerBeanInfo.java
module edu::toronto::cs::smv::parser::SmvCompilerBeanInfo
   inherits from SimpleBeanInfo
   function getBeanDescriptor() in line 16
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function getPropertyDescriptors() in line 23
      protection public
      48 lines of code
      0 parameters
      2 conditional paths
      uses variable HELP_ATTRIBUTE defined in edu::toronto::cs::beans::BeanUtil
      uses macro definition assert defined in util.h
   function SmvCompilerBeanInfo() in line 12
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/Simple.java
module edu::toronto::cs::smv::Simple
   inherits from edu::toronto::cs::smv::SMVModule
   function computeInit() in line 20
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function eq(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function computeTrans() in line 25
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function Simple() in line 11
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule
      uses function declareIntVariable(String,int,int) defined in edu::toronto::cs::smv::SMVModule
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/SMVModule.java
module edu::toronto::cs::smv::SMVModule
   inherits from edu::toronto::cs::modelchecker::ModelCompiler
   abstract class
   function compile() in line 127
      protection public
      30 lines of code
      0 parameters
      4 conditional paths
      uses function computeTrans() defined in edu::toronto::cs::smv::SMVModule
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getUnPrimedVariablesIds() defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
      uses function getPrimedVariablesIds() defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
      uses function getPrimeMap() defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
      uses function getUnPrimeMap() defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
      uses function computeInit() defined in edu::toronto::cs::smv::SMVModule
      uses function getVarNames() defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
      uses function getAlgebra() defined in edu::toronto::cs::smv::SMVModule
      uses function getNumDDVars() defined in edu::toronto::cs::smv::SMVModule
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function renameArgs(int[]) defined in edu::toronto::cs::mvset::MvSet
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses macro definition assert defined in util.h
      uses variable top defined in algebra
      uses variable bot defined in algebra
   function computeInit() in line 125
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function computeTrans() in line 123
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function declareAlgebraDefine(String) in line 66
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function declareAlgebraDefine(String) defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
   function declareAlgebraVariable(String) in line 56
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function declareAlgebraVariable(String) defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
   function declareIntDefine(String) in line 70
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function declareIntDefine(String) defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
   function declareIntVariable(String,int,int) in line 61
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function declareIntVariable(String,int,int) defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
   function getAlgebra() in line 108
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSetFactory() in line 98
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSetFactoryClass() in line 93
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getName() in line 83
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNumDDVars() in line 77
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getNumDDVars() defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
   function intConstant(int) in line 114
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses variable i defined in sparsemv.m
      uses function computeTrans() defined in edu::toronto::cs::smv::SMVModule
      uses function computeInit() defined in edu::toronto::cs::smv::SMVModule
   function next(AlgebraVariable) in line 210
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function next(IntVariable) in line 214
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setAlgebra(IAlgebra) in line 103
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setMvSetFactoryClass(Class) in line 88
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function SMVModule(String) in line 50
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   variable NEXT_SUFFIX in line 22
      protection public
   variable VAR_SEP in line 21
      protection public
module edu::toronto::cs::smv::SMVModule::DestructivePropertyFiller
   inherits from edu::toronto::cs::modelchecker::CloningRewriter
   function buildTerms(CTLAtomPropNode) in line 291
      20 lines of code
      1 parameters
      4 conditional paths
      uses function get(String) defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
      uses function getName() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function getValues() defined in edu::toronto::cs::smv::SMVModule::IntVariable
      uses variable i defined in sparsemv.m
      uses function eq(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses macro definition assert defined in util.h
   function visitAtomPropNode(CTLAtomPropNode,Object) in line 225
      protection public
      21 lines of code
      2 parameters
      4 conditional paths
      uses function getMvSet() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function get(String) defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
      uses function getName() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function setMvSet(MvSet) defined in edu::toronto::cs::ctl::CTLAtomPropNode
   function visitEqualsNode(CTLEqualsNode,Object) in line 247
      protection public
      31 lines of code
      2 parameters
      4 conditional paths
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses variable o defined in visual.m
      uses function get(String) defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
      uses function getName() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function eq(int) defined in edu::toronto::cs::smv::SMVModule::IntDefine
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function toString() defined in edu::toronto::cs::ctl::CTLEqualsNode
      uses macro definition assert defined in util.h
   function visitPlaceholderNode(CTLPlaceholderNode,Object) in line 279
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses function getProps() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses variable i defined in sparsemv.m
      uses function buildTerms(CTLAtomPropNode) defined in edu::toronto::cs::smv::SMVModule::DestructivePropertyFiller
      uses function setTerms(MvSet) defined in edu::toronto::cs::ctl::CTLPlaceholderNode
module edu::toronto::cs::smv::SMVModule::SMVStatePresenter
   inherits from edu::toronto::cs::modelchecker::StatePresenter
   function toCTL(AlgebraValue[]) in line 318
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses function getVariables() defined in edu::toronto::cs::smv::SMVModule::DeclaredVariables
      uses function getNext() defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::smv::SMVModule::Variable
   function toCTL(MvSet) in line 337
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
   function toCTL(AlgebraValue) in line 342
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
module edu::toronto::cs::smv::SMVModule::DeclaredVariables
   function declareAlgebraDefine(String) in line 429
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::smv::SMVModule::Variable
   function declareAlgebraVariable(String) in line 385
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function setNext(Variable) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function getName() defined in edu::toronto::cs::smv::SMVModule::Variable
   function declareIntDefine(String) in line 436
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::smv::SMVModule::Variable
   function declareIntVariable(String,int,int) in line 401
      protection public
      27 lines of code
      3 parameters
      3 conditional paths
      uses function setNext(Variable) defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function bitSize() defined in edu::toronto::cs::smv::SMVModule::IntVariable
      uses variable i defined in sparsemv.m
      uses function setBits(int[]) defined in edu::toronto::cs::smv::SMVModule::IntVariable
      uses function getName() defined in edu::toronto::cs::smv::SMVModule::Variable
   function get(String) in line 446
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getNumDDVars() in line 477
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
   function getPrimedVariablesIds() in line 491
      protection public
      21 lines of code
      0 parameters
      6 conditional paths
      uses function getNumDDVars() defined in edu::toronto::cs::smv::SMVModule
      uses function getNext() defined in edu::toronto::cs::smv::SMVModule::Variable
      uses variable i defined in sparsemv.m
      uses function bitSize() defined in edu::toronto::cs::smv::SMVModule::IntVariable
   function getPrimeMap() in line 567
      protection public
      29 lines of code
      0 parameters
      6 conditional paths
      uses function getNumDDVars() defined in edu::toronto::cs::smv::SMVModule
      uses function getNext() defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function getId() defined in edu::toronto::cs::smv::SMVModule::AlgebraVariable
      uses variable i defined in sparsemv.m
      uses function bitSize() defined in edu::toronto::cs::smv::SMVModule::IntVariable
   function getUnPrimedVariablesIds() in line 514
      protection public
      21 lines of code
      0 parameters
      6 conditional paths
      uses function getNumDDVars() defined in edu::toronto::cs::smv::SMVModule
      uses function getNext() defined in edu::toronto::cs::smv::SMVModule::Variable
      uses variable i defined in sparsemv.m
      uses function bitSize() defined in edu::toronto::cs::smv::SMVModule::IntVariable
   function getUnPrimeMap() in line 536
      protection public
      30 lines of code
      0 parameters
      6 conditional paths
      uses function getNumDDVars() defined in edu::toronto::cs::smv::SMVModule
      uses function getNext() defined in edu::toronto::cs::smv::SMVModule::Variable
      uses function getId() defined in edu::toronto::cs::smv::SMVModule::AlgebraVariable
      uses variable i defined in sparsemv.m
      uses function bitSize() defined in edu::toronto::cs::smv::SMVModule::IntVariable
   function getVariables() in line 380
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVarNames() in line 486
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function size() in line 471
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function toString() in line 597
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
   function DeclaredVariables() in line 360
      protection public
      5 lines of code
      0 parameters
      3 conditional paths
      uses function getName() defined in edu::toronto::cs::smv::SMVModule::Variable
module edu::toronto::cs::smv::SMVModule::Variable
   abstract class
   function eq(MvSet) in line 653
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function eq(Variable) in line 657
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getName() in line 630
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNext() in line 635
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function mvSet() in line 624
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function setMvSet(MvSet) in line 620
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setNext(Variable) in line 639
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toCTL(AlgebraValue[]) in line 663
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 645
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::smv::SMVModule
   function Variable(String) in line 614
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::smv::SMVModule::AlgebraDefine
   inherits from edu::toronto::cs::smv::SMVModule::Variable
   function and(MvSet) in line 689
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function and(AlgebraVariable) in line 703
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function not() in line 697
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function not() defined in edu::toronto::cs::mvset::MvSet
   function or(MvSet) in line 693
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function or(AlgebraVariable) in line 707
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function size() in line 680
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function AlgebraDefine(String) in line 674
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::smv::SMVModule::AlgebraVariable
   inherits from edu::toronto::cs::smv::SMVModule::AlgebraDefine
   function getId() in line 724
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function size() in line 730
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function createProjection(int) defined in edu::toronto::cs::mvset::MvSetFactory
   function toCTL(AlgebraValue[]) in line 740
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function getName() defined in edu::toronto::cs::smv::SMVModule
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function AlgebraVariable(String,int) in line 718
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::smv::SMVModule::IntDefine
   inherits from edu::toronto::cs::smv::SMVModule::Variable
   function buildMvSet() in line 765
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function eq(int) in line 786
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses function apply(BinApplyFunction,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
   function geq(int) in line 798
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function gt(int) in line 809
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses function apply(BinApplyFunction,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
   function leq(int) in line 794
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function lt(int) in line 802
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses function apply(BinApplyFunction,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
   function minus(int) in line 781
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function plus(int) in line 771
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses function apply(BinApplyFunction,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
   function size() in line 760
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function IntDefine(String) in line 755
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::smv::SMVModule::IntVariable
   inherits from edu::toronto::cs::smv::SMVModule::IntDefine
   function bitSize() in line 853
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function buildMvSet() in line 865
      protection public
      19 lines of code
      0 parameters
      5 conditional paths
      uses function getLeafNode(int) defined in edu::toronto::cs::mdd::MDDManager
      uses variable i defined in sparsemv.m
      uses function apply(BinApplyFunction,MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
      uses function bitValue(Object) defined in edu::toronto::cs::util::EnumType
      uses function getNvars() defined in edu::toronto::cs::mdd::MDDManager
      uses variable NO_VALUE defined in edu::toronto::cs::mdd::MDDManager
      uses function buildPoint(int[],MDDNode,MDDNode) defined in edu::toronto::cs::mdd::MDDManager
   function getValues() in line 842
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setBits(int[]) in line 859
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function size() in line 848
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 914
      protection public
      24 lines of code
      1 parameters
      7 conditional paths
      uses variable i defined in sparsemv.m
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function enumValues(int[]) defined in edu::toronto::cs::util::EnumType
      uses function getName() defined in edu::toronto::cs::smv::SMVModule
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function IntVariable(String,int,int) in line 830
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function bitSize() defined in edu::toronto::cs::util::EnumType
module edu::toronto::cs::smv::SMVModule::CaseStatement
   function addCase(Variable,MvSet) in line 982
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function addCase(MvSet,MvSet) in line 990
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function addDefault(MvSet) in line 1007
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function compute() in line 1014
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CaseStatement() in line 979
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::smv::SMVModule::BoolCaseStatement
   function addCase(MvSet,MvSet) in line 1038
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function addDefault(MvSet) in line 1055
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function compute() in line 1062
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function BoolCaseStatement(MvSet) in line 1031
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/smv/SMVModuleBeanInfo.java
module edu::toronto::cs::smv::SMVModuleBeanInfo
   inherits from SimpleBeanInfo
   function getBeanDescriptor() in line 16
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function getPropertyDescriptors() in line 23
      protection public
      38 lines of code
      0 parameters
      2 conditional paths
      uses variable HELP_ATTRIBUTE defined in edu::toronto::cs::beans::BeanUtil
      uses macro definition assert defined in util.h
   function SMVModuleBeanInfo() in line 12
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tlq/MvSetCrossProductAlgebra.java
module edu::toronto::cs::tlq::MvSetCrossProductAlgebra
   inherits from edu::toronto::cs::algebra::DeMorganAlgebra
   function bot() in line 173
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function carrierSet() in line 212
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function carrierSetId() in line 208
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function eq(AlgebraValue,AlgebraValue) in line 198
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function geq(AlgebraValue,AlgebraValue) in line 147
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function leq(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
   function getJoinIrredundant(BitSet) in line 218
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getMeetIrredundant(BitSet) in line 223
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getValue(String) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getValue(int) in line 72
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function impl(AlgebraValue,AlgebraValue) in line 194
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function join(AlgebraValue,AlgebraValue) in line 129
      protection public
      17 lines of code
      2 parameters
      4 conditional paths
      uses function length() defined in sparser.m
      uses function size() defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra::CrossProductValue
      uses variable i defined in sparsemv.m
      uses function getValue(int) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra::CrossProductValue
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function makeUnique(List) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
   function joinDecomposition(AlgebraValue) in line 228
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function leq(AlgebraValue,AlgebraValue) in line 152
      protection public
      20 lines of code
      2 parameters
      5 conditional paths
      uses function size() defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra::CrossProductValue
      uses function length() defined in sparser.m
      uses variable i defined in sparsemv.m
      uses function getValue(int) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra::CrossProductValue
      uses function leq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function top() defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
   function main(String[]) in line 317
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function MvSetCrossProductAlgebra() defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
   function makeUnique(List) in line 90
      4 lines of code
      1 parameters
      1 conditional paths
   function makeUnique(CrossProductValue) in line 97
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
   function meet(AlgebraValue,AlgebraValue) in line 111
      protection public
      17 lines of code
      2 parameters
      5 conditional paths
      uses function length() defined in sparser.m
      uses function size() defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra::CrossProductValue
      uses variable i defined in sparsemv.m
      uses function getValue(int) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra::CrossProductValue
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function makeUnique(List) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
   function neg(AlgebraValue) in line 186
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable v defined in visual.m
   function newValue(int,MvSet) in line 81
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function bot() defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
      uses variable v defined in visual.m
      uses function makeUnique(List) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
   function noValue() in line 181
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setMvSetFactory(MvSetFactory) in line 60
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function bot() defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function top() defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
   function size() in line 204
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function top() in line 177
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function MvSetCrossProductAlgebra(MvSetFactory) in line 48
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function setMvSetFactory(MvSetFactory) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
   function MvSetCrossProductAlgebra() in line 54
      5 lines of code
      0 parameters
      1 conditional paths
      uses function makeUnique(List) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
module edu::toronto::cs::tlq::MvSetCrossProductAlgebra::CrossProductValue
   inherits from edu::toronto::cs::algebra::AlgebraValue
   function equals(Object) in line 281
      protection public
      7 lines of code
      1 parameters
      4 conditional paths
      uses variable o defined in visual.m
   function equals(CrossProductValue) in line 288
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getValue(int) in line 274
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function bot() defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
   function getValues() in line 264
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 293
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function setValues(List) in line 246
      16 lines of code
      1 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses variable v defined in visual.m
      uses function bot() defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
   function size() in line 269
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 303
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function getName() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function length() defined in sparser.m
   function CrossProductValue(List) in line 240
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function setValues(List) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra::CrossProductValue
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tlq/MvSetPlaceholderReWriter.java
module edu::toronto::cs::tlq::MvSetPlaceholderReWriter
   inherits from edu::toronto::cs::modelchecker::CloningRewriter
   function buildTerms(Iterator) in line 93
      22 lines of code
      1 parameters
      4 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function combineTerms(List,int) in line 116
      18 lines of code
      2 parameters
      3 conditional paths
      uses function getValueForTerm(int,MvSet) defined in edu::toronto::cs::tlq::MvSetPlaceholderReWriter
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function getOneSolution(MvSet,StatePresenter,boolean) in line 188
      protection public
      37 lines of code
      3 parameters
      8 conditional paths
      uses variable v defined in visual.m
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::modelchecker::StatePresenter
      uses variable j defined in sparsemv.m
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function getSolution(CrossProductValue,StatePresenter) in line 166
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function getOneSolution(MvSet,StatePresenter,boolean) defined in edu::toronto::cs::tlq::MvSetPlaceholderReWriter
      uses variable v defined in visual.m
      uses function isNegated() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function getSolutions(AlgebraValue,StatePresenter) in line 144
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses variable v defined in visual.m
      uses function getSolution(CrossProductValue,StatePresenter) defined in edu::toronto::cs::tlq::MvSetPlaceholderReWriter
   function getValueForTerm(int,MvSet) in line 135
      6 lines of code
      2 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getJoinIrreducible(int,MvSet) defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
   function renew() in line 43
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function visitPlaceholderNode(CTLPlaceholderNode,Object) in line 51
      protection public
      40 lines of code
      2 parameters
      3 conditional paths
      uses function getTerms() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function setMvSetFactory(MvSetFactory) defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function combineTerms(List,int) defined in edu::toronto::cs::tlq::MvSetPlaceholderReWriter
      uses function buildTerms(Iterator) defined in edu::toronto::cs::tlq::MvSetPlaceholderReWriter
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function toString() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
   function MvSetPlaceholderReWriter(MvSetUpsetAlgebra) in line 36
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::tlq::MvSetPlaceholderReWriter::PlaceholderInfo
   function getCTL() in line 238
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getId() in line 243
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function PlaceholderInfo(CTLPlaceholderNode,int) in line 231
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tlq/MvSetUpsetAlgebra.java
module edu::toronto::cs::tlq::MvSetUpsetAlgebra
   inherits from edu::toronto::cs::algebra::IAlgebra
   function bot() in line 153
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function carrierSet() in line 323
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function carrierSetId() in line 311
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function eq(AlgebraValue,AlgebraValue) in line 257
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function top() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function bot() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
   function geq(AlgebraValue,AlgebraValue) in line 288
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function leq(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
   function getCrossProductAlgebra() in line 79
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getJoinIrreducible(int,MvSet) in line 94
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function newValue(int,MvSet) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
      uses variable i defined in sparsemv.m
   function getJoinIrreducible(CrossProductValue) in line 106
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getJoinIrredundant(BitSet) in line 335
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getMeetIrredundant(BitSet) in line 346
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getValue(int) in line 120
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function top() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function bot() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
   function getValue(String) in line 133
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function top() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function bot() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function noValue() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
   function impl(AlgebraValue,AlgebraValue) in line 245
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function join(AlgebraValue,AlgebraValue) in line 206
      protection public
      16 lines of code
      2 parameters
      5 conditional paths
      uses function top() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function bot() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses variable s defined in visual.m
      uses function getValues() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra::MvSetUpsetValue
   function joinDecomposition(AlgebraValue) in line 357
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function leq(AlgebraValue,AlgebraValue) in line 269
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function top() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function getValues() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra::MvSetUpsetValue
      uses function isSubSet(MinUpSet) defined in edu::toronto::cs::algebra::MinUpSet
      uses function bot() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
   function meet(AlgebraValue,AlgebraValue) in line 174
      protection public
      24 lines of code
      2 parameters
      7 conditional paths
      uses function bot() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function top() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function getValues() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra::MvSetUpsetValue
      uses function iterator() defined in edu::toronto::cs::algebra::MinUpSet
      uses function add(AlgebraValue) defined in edu::toronto::cs::algebra::MinUpSet
      uses function join(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
   function neg(AlgebraValue) in line 229
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable v defined in visual.m
      uses function top() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function bot() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
   function noValue() in line 162
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function renew() in line 56
      protection public
      15 lines of code
      0 parameters
      1 conditional paths
      uses function noValue() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function bot() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function setName(String) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function top() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function getJoinIrreducible(int,MvSet) defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
   function setMvSetFactory(MvSetFactory) in line 44
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses function setMvSetFactory(MvSetFactory) defined in edu::toronto::cs::tlq::MvSetCrossProductAlgebra
      uses macro definition assert defined in util.h
   function size() in line 299
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function top() in line 144
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function MvSetUpsetAlgebra() in line 39
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function renew() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
module edu::toronto::cs::tlq::MvSetUpsetAlgebra::MvSetUpsetValue
   inherits from edu::toronto::cs::algebra::AlgebraValue
   function equals(Object) in line 395
      protection public
      7 lines of code
      1 parameters
      4 conditional paths
      uses variable o defined in visual.m
      uses function equals(Object) defined in edu::toronto::cs::algebra::MinUpSet
      uses function getValues() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra::MvSetUpsetValue
   function getValues() in line 385
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 403
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses function iterator() defined in edu::toronto::cs::algebra::MinUpSet
   function setValues(MinUpSet) in line 390
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toString() in line 416
      protection public
      6 lines of code
      0 parameters
      5 conditional paths
      uses function getName() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function length() defined in sparser.m
      uses function toString() defined in edu::toronto::cs::algebra::MinUpSet
      uses function MvSetUpsetValue(MvSetUpsetAlgebra,String,int,MinUpSet) defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra::MvSetUpsetValue
      uses function noValue() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses macro definition assert defined in util.h
      uses function getValue(int) defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses variable v defined in visual.m
      uses function setValues(MinUpSet) defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra::MvSetUpsetValue
      uses function size() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra
      uses function equals(Object) defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra::MvSetUpsetValue
      uses function hashCode() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra::MvSetUpsetValue
      uses function getValues() defined in edu::toronto::cs::tlq::MvSetUpsetAlgebra::MvSetUpsetValue
      uses function getValues() defined in edu::toronto::cs::algebra::MinUpSet
      uses function equals(Object) defined in edu::toronto::cs::algebra::MinUpSet
      uses function hashCode() defined in edu::toronto::cs::algebra::MinUpSet
      uses function iterator() defined in edu::toronto::cs::algebra::MinUpSet
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
   function MvSetUpsetValue(MvSetUpsetAlgebra,String,int,MinUpSet) in line 372
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
   function MvSetUpsetValue(MvSetUpsetAlgebra) in line 379
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::tlq::MvSetUpsetAlgebra::UniqueTable
   function UniqueTable() in line 432
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tlq/PlaceholderReWriter.java
module edu::toronto::cs::tlq::PlaceholderReWriter
   inherits from edu::toronto::cs::modelchecker::CloningRewriter
   function buildTerms(Iterator) in line 94
      22 lines of code
      1 parameters
      4 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function combineTerms(List) in line 117
      21 lines of code
      1 parameters
      3 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getNextFreeValue() defined in edu::toronto::cs::tlq::PlaceholderReWriter
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function getNextFreeValue() in line 139
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getUpMinTerm(int) defined in edu::toronto::cs::tlq::UpSetAlgebra
   function getOneSolution(int,StatePresenter,boolean) in line 194
      protection public
      44 lines of code
      3 parameters
      11 conditional paths
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable i defined in sparsemv.m
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::modelchecker::StatePresenter
      uses variable j defined in sparsemv.m
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
      uses function or(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function getSolution(int,StatePresenter) in line 169
      protection public
      21 lines of code
      2 parameters
      3 conditional paths
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function getOneSolution(int,StatePresenter,boolean) defined in edu::toronto::cs::tlq::PlaceholderReWriter
      uses function isNegated() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses function and(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function getSolutions(AlgebraValue,StatePresenter) in line 147
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses variable v defined in visual.m
      uses variable i defined in sparsemv.m
      uses function getSolution(int,StatePresenter) defined in edu::toronto::cs::tlq::PlaceholderReWriter
   function renew() in line 42
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function visitPlaceholderNode(CTLPlaceholderNode,Object) in line 60
      protection public
      32 lines of code
      2 parameters
      2 conditional paths
      uses function combineTerms(List) defined in edu::toronto::cs::tlq::PlaceholderReWriter
      uses function buildTerms(Iterator) defined in edu::toronto::cs::tlq::PlaceholderReWriter
      uses function getTerms() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
      uses function getMvSet() defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function toString() defined in edu::toronto::cs::ctl::CTLPlaceholderNode
   function PlaceholderReWriter(UpSetAlgebra) in line 36
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function PlaceholderReWriter(UpSetAlgebra,int) in line 50
      8 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::tlq::PlaceholderReWriter::PlaceholderInfo
   function extractBits(int) in line 258
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function getCTL() in line 253
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function PlaceholderInfo(CTLPlaceholderNode,int,int) in line 245
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tlq/UpSetAlgebra.java
module edu::toronto::cs::tlq::UpSetAlgebra
   inherits from edu::toronto::cs::algebra::DeMorganAlgebra
   function bot() in line 102
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function carrierSet() in line 135
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function carrierSetId() in line 129
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function eq(AlgebraValue,AlgebraValue) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function top() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function bot() defined in edu::toronto::cs::tlq::UpSetAlgebra
   function geq(AlgebraValue,AlgebraValue) in line 119
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function leq(AlgebraValue,AlgebraValue) defined in edu::toronto::cs::tlq::UpSetAlgebra
   function getJoinIrredundant(BitSet) in line 396
      protection public
      26 lines of code
      1 parameters
      7 conditional paths
      uses variable res defined in visual.m
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses function getValue(String) defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function leq(AlgebraValue) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function top() defined in edu::toronto::cs::tlq::UpSetAlgebra
   function getMeetIrredundant(BitSet) in line 423
      protection public
      30 lines of code
      1 parameters
      15 conditional paths
      uses variable res defined in visual.m
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses function getValue(String) defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function leq(AlgebraValue) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function top() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses variable v defined in visual.m
      uses variable o defined in visual.m
      uses variable primes defined in edu::toronto::cs::util::Primes
      uses function length() defined in sparser.m
   function getUpMinTerm(int) in line 170
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses function getUpSetElement(int) defined in edu::toronto::cs::tlq::UpSetAlgebra
   function getUpSetElement(int) in line 177
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getValue(String) defined in edu::toronto::cs::tlq::UpSetAlgebra
   function getValue(String) in line 32
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses function top() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function bot() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function noValue() defined in edu::toronto::cs::tlq::UpSetAlgebra
   function getValue(int) in line 39
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses function top() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function getId() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function bot() defined in edu::toronto::cs::tlq::UpSetAlgebra
   function impl(AlgebraValue,AlgebraValue) in line 94
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function join(AlgebraValue,AlgebraValue) in line 70
      protection public
      15 lines of code
      2 parameters
      5 conditional paths
      uses function top() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function bot() defined in edu::toronto::cs::tlq::UpSetAlgebra
   function joinDecomposition(AlgebraValue) in line 139
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function leq(AlgebraValue,AlgebraValue) in line 110
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function top() defined in edu::toronto::cs::tlq::UpSetAlgebra
   function leq(int[],int[]) in line 191
      protection public
      23 lines of code
      2 parameters
      23 conditional paths
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses function bot() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function top() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function getValue(String) defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses variable v defined in visual.m
   function main(String[]) in line 603
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses function UpSetAlgebra() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function getUpSetElement(int) defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses variable v defined in visual.m
   function meet(AlgebraValue,AlgebraValue) in line 47
      protection public
      22 lines of code
      2 parameters
      7 conditional paths
      uses function bot() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function top() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
   function neg(AlgebraValue) in line 86
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable v defined in visual.m
      uses function top() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function bot() defined in edu::toronto::cs::tlq::UpSetAlgebra
   function noValue() in line 28
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function renew() in line 146
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
      uses function bot() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function getValue(String) defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function setName(String) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function top() defined in edu::toronto::cs::tlq::UpSetAlgebra
      uses function noValue() defined in edu::toronto::cs::tlq::UpSetAlgebra
   function size() in line 123
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function top() in line 98
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function UpSetAlgebra() in line 163
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function renew() defined in edu::toronto::cs::tlq::UpSetAlgebra
module edu::toronto::cs::tlq::UpSetAlgebra::UpSetValue
   inherits from edu::toronto::cs::algebra::AlgebraValue
   function equals(Object) in line 494
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function equals(UpSetValue) in line 502
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function getData() in line 476
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLength() in line 480
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 515
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
   function setData(int[]) in line 485
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setLength(int) in line 489
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 527
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
   function UpSetValue(UpSetAlgebra,String,int,int[],int) in line 461
      protection public
      7 lines of code
      5 parameters
      1 conditional paths
   function UpSetValue(IAlgebra) in line 469
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   variable primes in line 513
      protection public
module edu::toronto::cs::tlq::UpSetAlgebra::UniqueTable
   function clear() in line 556
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function UniqueTable(UpSetAlgebra) in line 563
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/AbstractTheoremProver.java
module edu::toronto::cs::tp::AbstractTheoremProver
   inherits from edu::toronto::cs::tp::ITheoremProver
   abstract class
   function assertFormula(List< Expr >) in line 106
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
   function checkTruth(Expr,Expr) in line 49
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
      uses function query(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
   function checkTruth(Expr) in line 73
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
      uses function query(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
   function exprFactory() in line 32
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function implies(Expr,Expr) in line 100
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function quickQuery(Expr) defined in edu::toronto::cs::tp::AbstractTheoremProver
      uses function exprFactory() defined in edu::toronto::cs::tp::AbstractTheoremProver
      uses variable IMPL defined in edu::toronto::cs::expr::BoolOp
   function quickCheckTruth(Expr,Expr) in line 64
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
      uses function checkTruth(Expr,Expr) defined in edu::toronto::cs::tp::AbstractTheoremProver
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
   function quickCheckTruth(Expr) in line 91
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
      uses function checkTruth(Expr,Expr) defined in edu::toronto::cs::tp::AbstractTheoremProver
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
   function quickQuery(Expr) in line 37
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
      uses function query(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
   function AbstractTheoremProver(ExprFactory) in line 26
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function exprFactory() defined in edu::toronto::cs::tp::AbstractTheoremProver
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/CLCVCLTheoremProver.java
module edu::toronto::cs::tp::CLCVCLTheoremProver
   inherits from edu::toronto::cs::tp::AbstractTheoremProver
   function assertFormula(Expr) in line 213
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function startTPAssert() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function assertFormula(String) defined in edu::toronto::cs::tp::CVCLProcess
      uses function print(Expr) defined in edu::toronto::cs::tp::CVCLExprPrinter
      uses function add(int,Object) defined in edu::toronto::cs::util::ArrayMarkedList
      uses function printDebug(String) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function stopTPAssert() defined in edu::toronto::cs::yasm::YasmStatistics
   function declare(Expr,Expr) in line 119
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function declare(String,String) defined in edu::toronto::cs::tp::CVCLProcess
      uses function print(Expr) defined in edu::toronto::cs::tp::CVCLExprPrinter
      uses function printDebug(String) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
   function findCommonIndices(List,List) in line 148
      17 lines of code
      2 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function getAssumptionsUsed() in line 190
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses function startTPGetAssm() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function getMany(List< Expr >,List< Integer >) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function getIndicesOfAssumptionsUsed() defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function stopTPGetAssm() defined in edu::toronto::cs::yasm::YasmStatistics
   function getIndicesOfAssumptionsUsed() in line 198
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses function startTPGetAssm() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function where() defined in edu::toronto::cs::tp::CVCLProcess
      uses function dump_assumptions() defined in edu::toronto::cs::tp::CVCLProcess
      uses function findCommonIndices(List,List) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function stopTPGetAssm() defined in edu::toronto::cs::yasm::YasmStatistics
   function getMany(List< Expr >,List< Integer >) in line 178
      7 lines of code
      2 parameters
      2 conditional paths
   function getProcess() in line 110
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function init(boolean) in line 79
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable cvclBase defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function where() defined in edu::toronto::cs::tp::CVCLProcess
      uses function getStackLevel() defined in edu::toronto::cs::tp::CVCLProcess::WhereMessage
   function initialize(TPInitializer) in line 100
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function pop() in line 243
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function restore() defined in edu::toronto::cs::util::ArrayMarkedList
      uses function pop() defined in edu::toronto::cs::tp::CVCLProcess
      uses function printDebug(String) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
   function popto(int) in line 252
      protection public
      7 lines of code
      1 parameters
      4 conditional paths
      uses function restore() defined in edu::toronto::cs::util::ArrayMarkedList
      uses variable i defined in sparsemv.m
      uses function popto(int) defined in edu::toronto::cs::tp::CVCLProcess
      uses variable cvclBase defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function printDebug(String) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
   function printAssumptions() in line 278
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function printDebug(String) in line 289
      16 lines of code
      1 parameters
      2 conditional paths
      uses function getNumMarks() defined in edu::toronto::cs::util::ArrayMarkedList
      uses function where() defined in edu::toronto::cs::tp::CVCLProcess
      uses function getStackLevel() defined in edu::toronto::cs::tp::CVCLProcess
   function push() in line 236
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function mark() defined in edu::toronto::cs::util::ArrayMarkedList
      uses function push() defined in edu::toronto::cs::tp::CVCLProcess
      uses function printDebug(String) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
   function query(Expr) in line 130
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses function startTPQuery() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function query(String) defined in edu::toronto::cs::tp::CVCLProcess
      uses function print(Expr) defined in edu::toronto::cs::tp::CVCLExprPrinter
      uses function printDebug(String) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function stopTPQuery() defined in edu::toronto::cs::yasm::YasmStatistics
   function setStats(YasmStatistics) in line 283
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function setStats(YasmStatistics) defined in edu::toronto::cs::tp::CVCLProcess
   function stackLevel() in line 226
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function getNumMarks() defined in edu::toronto::cs::util::ArrayMarkedList
   function CLCVCLTheoremProver(ExprFactory) in line 61
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function init(CVCLProcess) defined in edu::toronto::cs::tp::CLCVCLTheoremProver::TPInitializer
   function CLCVCLTheoremProver(ExprFactory,boolean) in line 73
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function init(CVCLProcess) defined in edu::toronto::cs::tp::CLCVCLTheoremProver::TPInitializer
   variable cvclBase in line 35
module edu::toronto::cs::tp::CLCVCLTheoremProver::TPInitializer
   function init(CVCLProcess) in line 53
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::tp::CLCVCLTheoremProver::MismatchException
   inherits from RuntimeException
   function MismatchException(String) in line 168
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/CLCVCLTheoremProverTestCase.java
module edu::toronto::cs::tp::CLCVCLTheoremProverTestCase
   inherits from junit::framework::TestCase
   function testMethod() in line 18
      protection public
      80 lines of code
      0 parameters
      1 conditional paths
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function declare(Expr,Expr) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses variable GT defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function query(Expr) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function getAssumptionsUsed() defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function push() defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function stackLevel() defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function pop() defined in edu::toronto::cs::tp::CLCVCLTheoremProver
      uses function popto(int) defined in edu::toronto::cs::tp::CLCVCLTheoremProver
   function testPopTo() in line 99
      protection public
      13 lines of code
      0 parameters
      1 conditional paths
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/CTheoremProver.java
module edu::toronto::cs::tp::CTheoremProver
   inherits from edu::toronto::cs::tp::AbstractTheoremProver
   function assertFormula(Expr) in line 172
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function rewrite(Expr) defined in edu::toronto::cs::tp::CToAddrModel
      uses variable writer defined in edu::toronto::cs::util::SystemOutWrapper
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::ITheoremProver
   function declare(Expr,Expr) in line 104
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
   function getAssumptionsUsed() in line 139
      protection public
      28 lines of code
      0 parameters
      3 conditional paths
      uses variable writer defined in edu::toronto::cs::util::SystemOutWrapper
   function pop() in line 214
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses function pop() defined in edu::toronto::cs::tp::ITheoremProver
   function popto(int) in line 224
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses function stackLevel() defined in edu::toronto::cs::tp::CTheoremProver
      uses variable i defined in sparsemv.m
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
   function push() in line 206
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
   function query(Expr) in line 122
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function rewrite(Expr) defined in edu::toronto::cs::tp::CToAddrModel
      uses variable writer defined in edu::toronto::cs::util::SystemOutWrapper
      uses function query(Expr) defined in edu::toronto::cs::tp::ITheoremProver
   function setStats(YasmStatistics) in line 242
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function setStats(YasmStatistics) defined in edu::toronto::cs::tp::CToAddrModel
   function stackLevel() in line 195
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
   function CTheoremProver(ExprFactory,ITheoremProver,SymbolTable) in line 80
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
   function CTheoremProver(ExprFactory,ITheoremProver,SymbolTable,List< Expr >) in line 87
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/CTheoremProverTestCase.java
module edu::toronto::cs::tp::CTheoremProverTestCase
   inherits from junit::framework::TestCase
   function setUp() in line 37
      30 lines of code
      0 parameters
      1 conditional paths
      uses variable intT defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable charT defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses variable x defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses variable ax defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses variable y defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses variable ay defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses variable ip defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
   function tearDown() in line 68
      3 lines of code
      0 parameters
      1 conditional paths
   function testAddrNotZero() in line 80
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable ax defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses function quickQuery(Expr) defined in edu::toronto::cs::tp::AbstractTheoremProver
   function testAliasDeref() in line 117
      protection public
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable ip defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses variable ay defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses variable y defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses variable p defined in visual.m
      uses function quickQuery(Expr) defined in edu::toronto::cs::tp::AbstractTheoremProver
   function testInconsistent() in line 153
      protection public
      22 lines of code
      0 parameters
      1 conditional paths
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses variable charT defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function quickQuery(Expr) defined in edu::toronto::cs::tp::AbstractTheoremProver
   function testInconsistentContext() in line 176
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::CTheoremProver
      uses function query(Expr) defined in edu::toronto::cs::tp::CTheoremProver
   function testPtrArith() in line 140
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable ip defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function quickQuery(Expr) defined in edu::toronto::cs::tp::AbstractTheoremProver
   function testScalarAddrsNotEqual() in line 72
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable ax defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses variable ay defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function quickQuery(Expr) defined in edu::toronto::cs::tp::AbstractTheoremProver
   function testStarAddr1() in line 90
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable ay defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses variable y defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function quickQuery(Expr) defined in edu::toronto::cs::tp::AbstractTheoremProver
   function testStarAddr2() in line 103
      protection public
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable y defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses variable ay defined in edu::toronto::cs::tp::CTheoremProverTestCase
      uses function quickQuery(Expr) defined in edu::toronto::cs::tp::AbstractTheoremProver
   variable ax in line 26
   variable ay in line 28
   variable charT in line 31
   variable intT in line 30
   variable ip in line 29
   variable x in line 25
   variable y in line 27
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/CToAddrModel.java
module edu::toronto::cs::tp::CToAddrModel
   inherits from edu::toronto::cs::tp::CLCVCLTheoremProver::TPInitializer
   inherits from edu::toronto::cs::expr::ExprRewriter
   function addressOf(Expr) in line 733
      5 lines of code
      1 parameters
      1 conditional paths
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function addSymbolTableVarsToMap() in line 286
      5 lines of code
      0 parameters
      2 conditional paths
      uses function varSet() defined in edu::toronto::cs::tp::SymbolTable
      uses function addVarToMap(Expr) defined in edu::toronto::cs::tp::CToAddrModel
   function addVarToMap(Expr) in line 292
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function derefType(Expr) in line 624
      23 lines of code
      1 parameters
      4 conditional paths
      uses variable d defined in crunch2parms.m
      uses macro definition assert defined in util.h
      uses function typeAt(Expr,int) defined in edu::toronto::cs::tp::CToAddrModel
      uses function typeOf(Expr) defined in edu::toronto::cs::tp::CToAddrModel
   function getRefFunction(Expr) in line 686
      15 lines of code
      1 parameters
      3 conditional paths
      uses function get(Expr) defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
      uses function keySet() defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
   function init(CVCLProcess) in line 235
      protection public
      50 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in visual.m
   function main(String[]) in line 761
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function testTypeAt() defined in edu::toronto::cs::tp::CToAddrModel
   function ptrAdd(Expr,Expr) in line 301
      6 lines of code
      2 parameters
      1 conditional paths
   function ptrSub(Expr,Expr) in line 308
      4 lines of code
      2 parameters
      1 conditional paths
   function rewrite(Expr) in line 365
      protection public
      229 lines of code
      1 parameters
      26 conditional paths
      uses function startAddrModel() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable returnType defined in edu::toronto::cs::tp::CToAddrModel
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function typeOf(Expr) defined in edu::toronto::cs::tp::CToAddrModel
      uses function getRefFunction(Expr) defined in edu::toronto::cs::tp::CToAddrModel
      uses function addressOf(Expr) defined in edu::toronto::cs::tp::CToAddrModel
      uses macro definition assert defined in util.h
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function ptrAdd(Expr,Expr) defined in edu::toronto::cs::tp::CToAddrModel
      uses variable DEREF defined in edu::toronto::cs::expr::CILIndirectionOp
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses variable MINUS defined in edu::toronto::cs::expr::NumericOp
      uses function ptrSub(Expr,Expr) defined in edu::toronto::cs::tp::CToAddrModel
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses variable NEQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses variable LT defined in edu::toronto::cs::expr::ComparisonOp
      uses variable GT defined in edu::toronto::cs::expr::ComparisonOp
      uses variable LEQ defined in edu::toronto::cs::expr::ComparisonOp
      uses variable GEQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function args() defined in edu::toronto::cs::expr::Expr
      uses function stopAddrModel() defined in edu::toronto::cs::yasm::YasmStatistics
   function setStats(YasmStatistics) in line 595
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function testTypeAt() in line 743
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable intT defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable charT defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses function CToAddrModel(ExprFactory,SymbolTable) defined in edu::toronto::cs::tp::CToAddrModel
      uses function typeAt(Expr,int) defined in edu::toronto::cs::tp::CToAddrModel
      uses function typeOf(Expr) defined in edu::toronto::cs::tp::CToAddrModel
   function typeAt(Expr,int) in line 667
      10 lines of code
      2 parameters
      2 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function typeOf(Expr) in line 711
      14 lines of code
      1 parameters
      3 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function typeOf(Expr) defined in edu::toronto::cs::tp::SymbolTable
   function CToAddrModel(ExprFactory,SymbolTable) in line 204
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function RefFunctionMap(ExprFactory) defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
      uses function addSymbolTableVarsToMap() defined in edu::toronto::cs::tp::CToAddrModel
   variable returnType in line 321
module edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
   function allRefFunctions() in line 177
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function declareRefFunction(String,Expr) in line 118
      6 lines of code
      2 parameters
      1 conditional paths
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses variable addrT defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
   function declareRefFunctions() in line 129
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable intT defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable charT defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
      uses variable addrT defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
      uses variable intArrayT defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
      uses variable charArrayT defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
      uses variable addrArrayT defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
      uses function declareRefFunction(String,Expr) defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
   function get(Expr) in line 157
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable intT defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
   function keySet() in line 109
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function RefFunctionMap(ExprFactory) in line 102
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function declareRefFunctions() defined in edu::toronto::cs::tp::CToAddrModel::RefFunctionMap
   variable addrArrayT in line 95
   variable addrT in line 92
   variable charArrayT in line 94
   variable charT in line 91
   variable intArrayT in line 93
   variable intT in line 90
module edu::toronto::cs::tp::CToAddrModel::RefFunctionMap::RefFunctionMapException
   inherits from Exception
   function RefFunctionMapException(String) in line 184
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/CToAddrModelTestCase.java
module edu::toronto::cs::tp::CToAddrModelTestCase
   inherits from junit::framework::TestCase
   function testArrays() in line 147
      protection public
      48 lines of code
      0 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses variable p defined in visual.m
      uses function rewrite(Expr) defined in edu::toronto::cs::tp::CToAddrModel
      uses variable s defined in visual.m
   function testDeref() in line 91
      protection public
      44 lines of code
      0 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses variable p defined in visual.m
      uses function rewrite(Expr) defined in edu::toronto::cs::tp::CToAddrModel
   function testPtrArith() in line 196
      protection public
      54 lines of code
      0 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses variable p defined in visual.m
      uses function rewrite(Expr) defined in edu::toronto::cs::tp::CToAddrModel
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses variable s defined in visual.m
   function testPtrComp() in line 251
      protection public
      55 lines of code
      0 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses variable p defined in visual.m
      uses function rewrite(Expr) defined in edu::toronto::cs::tp::CToAddrModel
   function testRef() in line 60
      protection public
      30 lines of code
      0 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses variable UN_MINUS defined in edu::toronto::cs::expr::NumericOp
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses variable p defined in visual.m
      uses function rewrite(Expr) defined in edu::toronto::cs::tp::CToAddrModel
   function testRefFunctions() in line 136
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
   function testSymbolTableAndAddressMapping() in line 31
      protection public
      28 lines of code
      0 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses function typeOf(Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses function rewrite(Expr) defined in edu::toronto::cs::tp::CToAddrModel
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/CLFlags.java
module edu::toronto::cs::tp::cvcl::CLFlags
   function countFlags(String) in line 41
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CLFlags
   function countFlags(String,SWIGTYPE_p_std__vectorTstd__string_t) in line 45
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CLFlags
   function delete() in line 29
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CLFlags
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::CLFlags
   function finalize() in line 25
      3 lines of code
      0 parameters
      1 conditional paths
   function getCPtr(CLFlags) in line 37
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CLFlags
   function setFlag(String,boolean) in line 49
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CLFlags
   function setFlag(String,int) in line 53
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CLFlags
      uses variable i defined in sparsemv.m
   function setFlag(String,String) in line 57
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CLFlags
      uses variable s defined in visual.m
   function setFlag(String,SWIGTYPE_p_std__pairTstd__string_bool_t) in line 61
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CLFlags
      uses variable p defined in visual.m
   function setFlag(String,SWIGTYPE_p_std__vectorTstd__pairTstd__string_bool_t_t) in line 65
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CLFlags
   function CLFlags(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::CLFlags
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CLFlags
   function CLFlags() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/Context.java
module edu::toronto::cs::tp::cvcl::Context
   function delete() in line 29
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Context
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Context
   function finalize() in line 25
      3 lines of code
      0 parameters
      1 conditional paths
   function getCPtr(Context) in line 37
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Context
   function Context(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Context
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Context
   function Context() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/CVCLUtil.java
module edu::toronto::cs::tp::cvcl::CVCLUtil
   function assertFormula(ValidityChecker,CVectorExpr) in line 153
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses variable v defined in visual.m
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function assertFormula(ValidityChecker,List) in line 165
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function checkTruth(ValidityChecker,Expr,Expr) in line 81
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function push() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function checkTruth(ValidityChecker,Expr) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function checkTruth(ValidityChecker,Expr,Expr) defined in edu::toronto::cs::tp::cvcl::CVCLUtil
      uses function notExpr() defined in edu::toronto::cs::tp::cvcl::Expr
   function getAssumptions(ValidityChecker) in line 176
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function getAssumptions(CVectorExpr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function implies(ValidityChecker,Expr,Expr) in line 171
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function quickQuery(ValidityChecker,Expr) defined in edu::toronto::cs::tp::cvcl::CVCLUtil
      uses function impliesExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function newValidityChecker() in line 33
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function setFlag(String,boolean) defined in edu::toronto::cs::tp::cvcl::CLFlags
   function newValidityChecker(CLFlags) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function quickCheckTruth(ValidityChecker,Expr,Expr) in line 119
      protection public
      15 lines of code
      3 parameters
      2 conditional paths
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function push() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function checkTruth(ValidityChecker,Expr,Expr) defined in edu::toronto::cs::tp::cvcl::CVCLUtil
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function quickCheckTruth(ValidityChecker,Expr) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function quickCheckTruth(ValidityChecker,Expr,Expr) defined in edu::toronto::cs::tp::cvcl::CVCLUtil
      uses function notExpr() defined in edu::toronto::cs::tp::cvcl::Expr
   function quickQuery(ValidityChecker,Expr) in line 56
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function push() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/CVectorExpr.java
module edu::toronto::cs::tp::cvcl::CVectorExpr
   function add(Expr) in line 57
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   function clear() in line 53
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   function delete() in line 29
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   function finalize() in line 25
      3 lines of code
      0 parameters
      1 conditional paths
   function get(int) in line 61
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses variable i defined in sparsemv.m
   function getCPtr(CVectorExpr) in line 37
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   function isEmpty() in line 49
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   function set(int,Expr) in line 65
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses variable i defined in sparsemv.m
   function size() in line 45
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   function CVectorExpr(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   function CVectorExpr() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   function CVectorExpr(long) in line 41
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function size() defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/CVectorType.java
module edu::toronto::cs::tp::cvcl::CVectorType
   function add(Type) in line 57
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorType
   function clear() in line 53
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorType
   function delete() in line 29
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorType
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::CVectorType
   function finalize() in line 25
      3 lines of code
      0 parameters
      1 conditional paths
   function get(int) in line 61
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorType
      uses variable i defined in sparsemv.m
   function getCPtr(CVectorType) in line 37
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorType
   function isEmpty() in line 49
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorType
   function set(int,Type) in line 65
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorType
      uses variable i defined in sparsemv.m
   function size() in line 45
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorType
   function CVectorType(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::CVectorType
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::CVectorType
   function CVectorType() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   function CVectorType(long) in line 41
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function size() defined in edu::toronto::cs::tp::cvcl::CVectorType
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/ExprManager.java
module edu::toronto::cs::tp::cvcl::ExprManager
   function delete() in line 25
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ExprManager
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::ExprManager
   function getCPtr(ExprManager) in line 33
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ExprManager
   function rebuildExpr(Expr) in line 37
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ExprManager
   function ExprManager(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::ExprManager
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ExprManager
   function ExprManager() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/JavaCVC.java
module edu::toronto::cs::tp::cvcl::JavaCVC
   inherits from edu::toronto::cs::tp::cvcl::JavaCVCConstants
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/JavaCVCConstants.java
module edu::toronto::cs::tp::cvcl::JavaCVCConstants
   variable AND in line 30
      protection public
   variable AND_R in line 35
      protection public
   variable APPLY in line 107
      protection public
   variable ARRAY in line 90
      protection public
   variable ARROW in line 23
      protection public
   variable ASSERT in line 42
      protection public
   variable BIT_AND in line 135
      protection public
   variable BIT_NEG in line 136
      protection public
   variable BITVECTOR in line 133
      protection public
   variable BOOL_EXTRACT in line 140
      protection public
   variable BOOLEAN in line 21
      protection public
   variable BOUND_ID in line 78
      protection public
   variable BOUND_VAR in line 77
      protection public
   variable BV_TO_INT in line 139
      protection public
   variable CALL in line 51
      protection public
   variable CHECK_TYPE in line 71
      protection public
   variable CONCAT in line 134
      protection public
   variable CONST in line 110
      protection public
   variable CONST_ARRAY in line 93
      protection public
   variable CONSTDEF in line 109
      protection public
   variable CONSTRUCTOR in line 98
      protection public
   variable CONTEXT in line 68
      protection public
   variable COUNTEREXAMPLE in line 63
      protection public
   variable DARK_SHADOW in line 130
      protection public
   variable DATATYPE in line 97
      protection public
   variable DATATYPE_UPDATE in line 99
      protection public
   variable DBG in line 44
      protection public
   variable DIFF in line 147
      protection public
   variable DIVIDE in line 120
      protection public
   variable DUMP_ASSUMPTIONS in line 55
      protection public
   variable DUMP_CLOSURE in line 60
      protection public
   variable DUMP_CLOSURE_PROOF in line 61
      protection public
   variable DUMP_PROOF in line 54
      protection public
   variable DUMP_SIG in line 56
      protection public
   variable DUMP_TCC in line 57
      protection public
   variable DUMP_TCC_ASSUMPTIONS in line 58
      protection public
   variable DUMP_TCC_PROOF in line 59
      protection public
   variable ECHO in line 52
      protection public
   variable ELSE in line 102
      protection public
   variable EMPTY in line 144
      protection public
   variable EQ in line 27
      protection public
   variable EXISTS in line 40
      protection public
   variable EXTRACT in line 137
      protection public
   variable FALSE in line 20
      protection public
   variable FIELD_DECL in line 82
      protection public
   variable FLOOR in line 132
      protection public
   variable FORALL in line 39
      protection public
   variable FORGET in line 69
      protection public
   variable FUNCDEF in line 113
      protection public
   variable GE in line 126
      protection public
   variable GET_CHILD in line 72
      protection public
   variable GET_TYPE in line 70
      protection public
   variable GRAY_SHADOW in line 131
      protection public
   variable GT in line 125
      protection public
   variable HELP in line 48
      protection public
   variable ID in line 16
      protection public
   variable IF in line 100
      protection public
   variable IFF in line 33
      protection public
   variable IFF_R in line 36
      protection public
   variable IFTHEN in line 101
      protection public
   variable IMPLIES in line 34
      protection public
   variable IN in line 149
      protection public
   variable INCIN in line 151
      protection public
   variable INCLUDE in line 53
      protection public
   variable INCS in line 150
      protection public
   variable INT in line 115
      protection public
   variable INT_TO_BV in line 138
      protection public
   variable INTDIV in line 121
      protection public
   variable INTER in line 146
      protection public
   variable IS_INTEGER in line 127
      protection public
   variable ITE in line 38
      protection public
   variable ITE_R in line 37
      protection public
   variable LAMBDA in line 106
      protection public
   variable LAST_KIND in line 152
      protection public
   variable LE in line 124
      protection public
   variable LET in line 103
      protection public
   variable LETDECL in line 105
      protection public
   variable LETDECLS in line 104
      protection public
   variable LT in line 123
      protection public
   variable MINUS in line 118
      protection public
   variable MOD in line 122
      protection public
   variable MULT in line 119
      protection public
   variable NEGINF in line 128
      protection public
   variable NEQ in line 28
      protection public
   variable NOT in line 29
      protection public
   variable NULL_KIND in line 14
      protection public
   variable OPTION in line 47
      protection public
   variable OR in line 31
      protection public
   variable PF_APPLY in line 141
      protection public
   variable PF_HOLE in line 142
      protection public
   variable PLUS in line 117
      protection public
   variable POP in line 64
      protection public
   variable POP_SCOPE in line 65
      protection public
   variable POPTO in line 66
      protection public
   variable POSINF in line 129
      protection public
   variable POW in line 143
      protection public
   variable PRINT in line 50
      protection public
   variable PUSH in line 67
      protection public
   variable QUERY in line 43
      protection public
   variable RATIONAL_EXPR in line 18
      protection public
   variable RAW_LIST in line 15
      protection public
   variable READ in line 91
      protection public
   variable REAL in line 114
      protection public
   variable REC_ENTRY in line 84
      protection public
   variable REC_LITERAL in line 83
      protection public
   variable REC_SELECT in line 85
      protection public
   variable REC_UPDATE in line 86
      protection public
   variable RECORD_TYPE in line 81
      protection public
   variable SCALARTYPE in line 95
      protection public
   variable SIMULATE in line 108
      protection public
   variable SINGLETON in line 148
      protection public
   variable STRING_EXPR in line 17
      protection public
   variable SUBRANGE in line 94
      protection public
   variable SUBSTITUTE in line 73
      protection public
   variable SUBTYPE in line 96
      protection public
   variable TCC in line 74
      protection public
   variable TRACE in line 45
      protection public
   variable TRANSFORM in line 49
      protection public
   variable TRUE in line 19
      protection public
   variable TUPLE in line 87
      protection public
   variable TUPLE_SELECT in line 88
      protection public
   variable TUPLE_UPDATE in line 89
      protection public
   variable TUPLETYPE in line 22
      protection public
   variable TYPE in line 24
      protection public
   variable TYPEDECL in line 25
      protection public
   variable TYPEDEF in line 26
      protection public
   variable UCONST in line 112
      protection public
   variable UFUNC in line 41
      protection public
   variable UMINUS in line 116
      protection public
   variable UNION in line 145
      protection public
   variable UNTRACE in line 46
      protection public
   variable UPDATE in line 79
      protection public
   variable UPDATE_SELECT in line 80
      protection public
   variable VARDECL in line 75
      protection public
   variable VARDECLS in line 76
      protection public
   variable VARLIST in line 111
      protection public
   variable WHERE in line 62
      protection public
   variable WRITE in line 92
      protection public
   variable XOR in line 32
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/JavaCVCJNI.java
module edu::toronto::cs::tp::cvcl::JavaCVCJNI
   function CIntArray_cast(long) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CIntArray_frompointer(long) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CIntArray_getitem(long,int) in line 15
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function CIntArray_setitem(long,int,int) in line 16
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CLFlags_countFlags__SWIG_0(long,String) in line 182
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function CLFlags_countFlags__SWIG_1(long,String,long) in line 183
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CLFlags_setFlag__SWIG_0(long,String,boolean) in line 184
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CLFlags_setFlag__SWIG_1(long,String,int) in line 185
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CLFlags_setFlag__SWIG_2(long,String,String) in line 186
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CLFlags_setFlag__SWIG_3(long,String,long) in line 187
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CLFlags_setFlag__SWIG_4(long,String,long) in line 188
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CVectorExpr_add(long,long) in line 23
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function CVectorExpr_clear(long) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CVectorExpr_get(long,int) in line 24
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function CVectorExpr_isEmpty(long) in line 21
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CVectorExpr_set(long,int,long) in line 25
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CVectorExpr_size(long) in line 20
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CVectorType_add(long,long) in line 31
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function CVectorType_clear(long) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CVectorType_get(long,int) in line 32
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function CVectorType_isEmpty(long) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CVectorType_set(long,int,long) in line 33
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CVectorType_size(long) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function delete_CIntArray(long) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function delete_CLFlags(long) in line 189
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function delete_Context(long) in line 277
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function delete_CVectorExpr(long) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function delete_CVectorType(long) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function delete_Statistics(long) in line 261
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function delete_Theorem3(long) in line 276
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_andExpr__SWIG_0(long,long) in line 237
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Expr_andExpr__SWIG_1(long) in line 238
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_arity(long) in line 195
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_assign(long,long) in line 244
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Expr_computeHashCode(long,long) in line 248
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Expr_eqExpr(long,long) in line 234
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Expr_equal(long,long,long) in line 247
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Expr_get(long,int) in line 245
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Expr_getIndex(long) in line 191
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_getKind(long) in line 196
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_getOp(long) in line 208
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_getRational(long) in line 194
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_hasOp(long) in line 207
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_iffExpr(long,long) in line 242
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Expr_impExpr(long,long) in line 243
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Expr_isAnd(long) in line 225
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isApply(long) in line 217
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isBoolConst(long) in line 211
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isClosure(long) in line 214
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isEq(long) in line 223
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isExists(long) in line 231
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isFalse(long) in line 209
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isForall(long) in line 230
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isGeneric__SWIG_0(long) in line 221
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isGeneric__SWIG_1(long,int) in line 222
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Expr_isIff(long) in line 228
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isImpl(long) in line 229
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isITE(long) in line 227
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isLambda(long) in line 216
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isNot(long) in line 224
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isNull(long) in line 233
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isOr(long) in line 226
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isQuantifier(long) in line 215
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isRational(long) in line 232
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isRecord(long) in line 218
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isRecordAccess(long) in line 219
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isString(long) in line 213
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isTrue(long) in line 210
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isTupleAccess(long) in line 220
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_isVar(long) in line 212
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_iteExpr(long,long,long) in line 241
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Expr_negate(long) in line 236
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_notExpr(long) in line 235
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_orExpr__SWIG_0(long,long) in line 239
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Expr_orExpr__SWIG_1(long) in line 240
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Expr_toString(long) in line 246
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ExprManager_rebuildExpr(long,long) in line 190
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function get_AND() in line 51
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_AND_R() in line 56
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_APPLY() in line 128
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_ARRAY() in line 111
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_ARROW() in line 44
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_ASSERT() in line 63
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_BIT_AND() in line 156
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_BIT_NEG() in line 157
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_BITVECTOR() in line 154
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_BOOL_EXTRACT() in line 161
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_BOOLEAN() in line 42
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_BOUND_ID() in line 99
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_BOUND_VAR() in line 98
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_BV_TO_INT() in line 160
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CALL() in line 72
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CHECK_TYPE() in line 92
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CONCAT() in line 155
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CONST() in line 131
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CONST_ARRAY() in line 114
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CONSTDEF() in line 130
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CONSTRUCTOR() in line 119
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_CONTEXT() in line 89
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_COUNTEREXAMPLE() in line 84
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DARK_SHADOW() in line 151
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DATATYPE() in line 118
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DATATYPE_UPDATE() in line 120
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DBG() in line 65
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DIFF() in line 168
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DIVIDE() in line 141
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DUMP_ASSUMPTIONS() in line 76
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DUMP_CLOSURE() in line 81
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DUMP_CLOSURE_PROOF() in line 82
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DUMP_PROOF() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DUMP_SIG() in line 77
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DUMP_TCC() in line 78
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DUMP_TCC_ASSUMPTIONS() in line 79
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_DUMP_TCC_PROOF() in line 80
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_ECHO() in line 73
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_ELSE() in line 123
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_EMPTY() in line 165
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_EQ() in line 48
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_EXISTS() in line 61
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_EXTRACT() in line 158
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_FALSE() in line 41
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_FIELD_DECL() in line 103
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_FLOOR() in line 153
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_FORALL() in line 60
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_FORGET() in line 90
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_FUNCDEF() in line 134
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_GE() in line 147
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_GET_CHILD() in line 93
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_GET_TYPE() in line 91
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_GRAY_SHADOW() in line 152
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_GT() in line 146
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_HELP() in line 69
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_ID() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_IF() in line 121
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_IFF() in line 54
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_IFF_R() in line 57
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_IFTHEN() in line 122
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_IMPLIES() in line 55
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_IN() in line 170
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_INCIN() in line 172
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_INCLUDE() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_INCS() in line 171
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_INT() in line 136
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_INT_TO_BV() in line 159
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_INTDIV() in line 142
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_INTER() in line 167
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_IS_INTEGER() in line 148
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_ITE() in line 59
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_ITE_R() in line 58
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_LAMBDA() in line 127
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_LAST_KIND() in line 173
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_LE() in line 145
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_LET() in line 124
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_LETDECL() in line 126
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_LETDECLS() in line 125
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_LT() in line 144
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_MINUS() in line 139
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_MOD() in line 143
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_MULT() in line 140
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_NEGINF() in line 149
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_NEQ() in line 49
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_NOT() in line 50
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_NULL_KIND() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_OPTION() in line 68
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_OR() in line 52
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_PF_APPLY() in line 162
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_PF_HOLE() in line 163
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_PLUS() in line 138
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_POP() in line 85
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_POP_SCOPE() in line 86
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_POPTO() in line 87
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_POSINF() in line 150
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_POW() in line 164
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_PRINT() in line 71
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_PUSH() in line 88
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_QUERY() in line 64
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_RATIONAL_EXPR() in line 39
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_RAW_LIST() in line 36
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_READ() in line 112
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_REAL() in line 135
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_REC_ENTRY() in line 105
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_REC_LITERAL() in line 104
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_REC_SELECT() in line 106
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_REC_UPDATE() in line 107
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_RECORD_TYPE() in line 102
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_SCALARTYPE() in line 116
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_SIMULATE() in line 129
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_SINGLETON() in line 169
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_STRING_EXPR() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_SUBRANGE() in line 115
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_SUBSTITUTE() in line 94
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_SUBTYPE() in line 117
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_TCC() in line 95
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_TRACE() in line 66
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_TRANSFORM() in line 70
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_TRUE() in line 40
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_TUPLE() in line 108
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_TUPLE_SELECT() in line 109
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_TUPLE_UPDATE() in line 110
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_TUPLETYPE() in line 43
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_TYPE() in line 45
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_TYPEDECL() in line 46
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_TYPEDEF() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_UCONST() in line 133
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_UFUNC() in line 62
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_UMINUS() in line 137
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_UNION() in line 166
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_UNTRACE() in line 67
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_UPDATE() in line 100
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_UPDATE_SELECT() in line 101
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_VARDECL() in line 96
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_VARDECLS() in line 97
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_VARLIST() in line 132
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_WHERE() in line 83
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_WRITE() in line 113
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get_XOR() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function new_CIntArray(int) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function new_CVectorExpr(long) in line 19
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function new_CVectorType(long) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function new_Expr__SWIG_0() in line 192
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function new_Expr__SWIG_1(long) in line 193
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function new_Expr__SWIG_10(long,int,long,long,long) in line 205
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_Expr__SWIG_11(long,int,long) in line 206
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_Expr__SWIG_2(long,long) in line 197
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_Expr__SWIG_3(long,long,long) in line 198
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_Expr__SWIG_4(long,long,long,long) in line 199
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_Expr__SWIG_5(long,long,long,long,long) in line 200
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_Expr__SWIG_6(long,long,long) in line 201
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_Expr__SWIG_7(long,int) in line 202
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_Expr__SWIG_8(long,int,long) in line 203
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_Expr__SWIG_9(long,int,long,long) in line 204
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_Op__SWIG_0(long) in line 250
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function new_Op__SWIG_1(long,int) in line 251
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_Op__SWIG_2(int) in line 253
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function new_Rational__SWIG_0() in line 179
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function new_Rational__SWIG_1(long) in line 180
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function new_Rational__SWIG_2(int,int) in line 181
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_Type() in line 257
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function new_ValidityChecker__SWIG_0() in line 385
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function new_ValidityChecker__SWIG_1(long) in line 386
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Op_getExpr(long) in line 255
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Op_getKind(long) in line 252
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Op_getOp(long,long) in line 256
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Op_hasExpr(long) in line 254
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Op_toString(long) in line 249
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Proof_toString(long) in line 174
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Rational_getDenominator(long) in line 176
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Rational_getInt(long) in line 178
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Rational_getNumerator(long) in line 175
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Rational_isInteger(long) in line 177
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_getExpr(long) in line 265
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_getLHS(long) in line 266
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_getProof(long) in line 268
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_getRHS(long) in line 267
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_getScope(long) in line 275
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_isAxiom(long) in line 264
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_isLiteral(long) in line 274
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_isNull(long) in line 262
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_isRewrite(long) in line 263
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_print(long) in line 273
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_printx(long) in line 272
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_toString(long) in line 271
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_withAssumptions(long) in line 270
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Theorem3_withProof(long) in line 269
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Type_arity(long) in line 260
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Type_getExpr(long) in line 259
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Type_toString(long) in line 258
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_andExpr__SWIG_0(long,long,long) in line 318
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_andExpr__SWIG_1(long,long) in line 319
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_arrayType(long,long,long) in line 293
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_assertFormula(long,long) in line 361
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_boolType(long) in line 281
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_boundVarExpr(long,String,String,long) in line 300
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ValidityChecker_create__SWIG_0() in line 279
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ValidityChecker_create__SWIG_1(long) in line 280
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_createContext(long) in line 380
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_createFlags() in line 278
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ValidityChecker_createOp(long,String,long) in line 326
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_createType__SWIG_0(long,String) in line 295
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_createType__SWIG_1(long,String,long) in line 296
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_datatypeUpdateExpr(long,long,long,long) in line 356
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ValidityChecker_divideExpr(long,long,long) in line 339
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_eqExpr(long,long,long) in line 324
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_existsExpr(long,long,long) in line 358
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_falseExpr(long) in line 316
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_floorExpr(long,long) in line 344
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_forallExpr(long,long,long) in line 357
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_funExpr__SWIG_0(long,long,long) in line 327
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_funExpr__SWIG_1(long,long,long,long) in line 328
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ValidityChecker_funExpr__SWIG_2(long,long,long,long,long) in line 329
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function ValidityChecker_funExpr__SWIG_3(long,long,long) in line 330
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_funType(long,long,long) in line 294
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_geExpr(long,long,long) in line 343
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_getAssertions(long,long) in line 366
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_getAssumptions(long,long) in line 370
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_getAssumptionsTCC(long,long) in line 372
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_getBaseType(long,long) in line 303
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_getClosure(long) in line 374
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_getCounterExample(long,long) in line 367
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_getCurrentContext(long) in line 381
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_getEM(long) in line 298
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_getProof(long) in line 369
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_getProofClosure(long) in line 375
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_getProofTCC(long) in line 373
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_getStatistics(long) in line 383
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_getTCC(long) in line 371
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_getType(long,long) in line 302
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_gtExpr(long,long,long) in line 342
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_iffExpr(long,long,long) in line 323
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_impliesExpr(long,long,long) in line 322
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_importExpr(long,long) in line 313
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_importType(long,long) in line 314
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_inconsistent(long,long) in line 368
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_intType(long) in line 283
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_iteExpr(long,long,long,long) in line 325
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ValidityChecker_lambdaExpr(long,long,long) in line 359
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_leExpr(long,long,long) in line 341
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_listExpr__SWIG_0(long,long) in line 304
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_listExpr__SWIG_1(long,long) in line 305
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_listExpr__SWIG_2(long,long,long) in line 306
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_listExpr__SWIG_3(long,long,long,long) in line 307
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ValidityChecker_listExpr__SWIG_4(long,String,long) in line 308
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_listExpr__SWIG_5(long,String,long) in line 309
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_listExpr__SWIG_6(long,String,long,long) in line 310
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ValidityChecker_lookupType(long,String) in line 297
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_lookupVar(long,String,long) in line 301
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_ltExpr(long,long,long) in line 340
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_minusExpr(long,long,long) in line 336
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_multExpr(long,long,long) in line 337
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_notExpr(long,long) in line 317
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_orExpr__SWIG_0(long,long,long) in line 320
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_orExpr__SWIG_1(long,long) in line 321
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_parseExpr(long,long) in line 312
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_plusExpr(long,long,long) in line 335
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_pop(long) in line 377
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_popto(long,int) in line 378
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_powExpr(long,long,long) in line 338
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_printExpr(long,long) in line 311
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_printStatistics(long) in line 384
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_printV(long,long) in line 364
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_push(long) in line 376
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_query(long,long,boolean) in line 365
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_ratExpr__SWIG_0(long,int,int) in line 331
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_ratExpr__SWIG_1(long,String,String,int) in line 332
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ValidityChecker_ratExpr__SWIG_2(long,String,int) in line 333
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_readExpr(long,long,long) in line 351
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_realType(long) in line 282
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_recordExpr__SWIG_0(long,String,long) in line 345
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_recordExpr__SWIG_1(long,String,long,String,long) in line 346
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function ValidityChecker_recordExpr__SWIG_2(long,String,long,String,long,String,long) in line 347
      protection public
      1 lines of code
      7 parameters
      1 conditional paths
   function ValidityChecker_recordExpr__SWIG_3(long,long,long) in line 348
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_recordType__SWIG_0(long,String,long) in line 289
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_recordType__SWIG_1(long,String,long,String,long) in line 290
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function ValidityChecker_recordType__SWIG_2(long,String,long,String,long,String,long) in line 291
      protection public
      1 lines of code
      7 parameters
      1 conditional paths
   function ValidityChecker_recordType__SWIG_3(long,long,long) in line 292
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_recSelectExpr(long,long,String) in line 349
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_recUpdateExpr(long,long,String,long) in line 350
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ValidityChecker_scopeLevel(long) in line 379
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_simplify(long,long) in line 362
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_simplifyThm(long,long) in line 363
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_simulateExpr(long,long,long,long,long) in line 360
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function ValidityChecker_subrangeType(long,long,long) in line 284
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_subtypeType(long,long) in line 285
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_switchContext(long,long) in line 382
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_trueExpr(long) in line 315
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValidityChecker_tupleExpr(long,long) in line 353
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_tupleSelectExpr(long,long,int) in line 354
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_tupleType__SWIG_0(long,long,long) in line 286
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_tupleType__SWIG_1(long,long,long,long) in line 287
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ValidityChecker_tupleType__SWIG_2(long,long) in line 288
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_tupleUpdateExpr(long,long,int,long) in line 355
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ValidityChecker_uminusExpr(long,long) in line 334
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ValidityChecker_varExpr(long,String,long) in line 299
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValidityChecker_writeExpr(long,long,long,long) in line 352
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/Op.java
module edu::toronto::cs::tp::cvcl::Op
   function delete() in line 25
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Op
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Op
   function getCPtr(Op) in line 33
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Op
   function getExpr() in line 61
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Op
   function getKind() in line 49
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Op
   function getOp(Expr) in line 65
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function Op() defined in edu::toronto::cs::tp::cvcl::Op
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Op
   function hasExpr() in line 57
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Op
   function toString() in line 37
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Op
   function Op(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Op
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Op
   function Op() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   function Op(Op) in line 41
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function getCPtr(Op) defined in edu::toronto::cs::tp::cvcl::Op
   function Op(ExprManager,int) in line 45
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function Op(int) in line 53
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/Rational.java
module edu::toronto::cs::tp::cvcl::Rational
   function delete() in line 21
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Rational
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Rational
   function getCPtr(Rational) in line 29
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Rational
   function getDenominator() in line 37
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function Rational() defined in edu::toronto::cs::tp::cvcl::Rational
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Rational
   function getInt() in line 45
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Rational
   function getNumerator() in line 33
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function Rational() defined in edu::toronto::cs::tp::cvcl::Rational
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Rational
   function isInteger() in line 41
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Rational
   function Rational(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Rational
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Rational
   function Rational() in line 49
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Rational(Rational) in line 53
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function getCPtr(Rational) defined in edu::toronto::cs::tp::cvcl::Rational
   function Rational(int,int) in line 57
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/Statistics.java
module edu::toronto::cs::tp::cvcl::Statistics
   function delete() in line 29
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Statistics
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Statistics
   function finalize() in line 25
      3 lines of code
      0 parameters
      1 conditional paths
   function getCPtr(Statistics) in line 37
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Statistics
   function Statistics(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Statistics
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Statistics
   function Statistics() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/SWIGTYPE_p_Assumptions.java
module edu::toronto::cs::tp::cvcl::SWIGTYPE_p_Assumptions
   function getCPtr(SWIGTYPE_p_Assumptions) in line 23
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_Assumptions
   function SWIGTYPE_p_Assumptions(long,boolean) in line 15
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_Assumptions
   function SWIGTYPE_p_Assumptions() in line 19
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_Assumptions
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/SWIGTYPE_p_std__pairTstd__string_bool_t.java
module edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__pairTstd__string_bool_t
   function getCPtr(SWIGTYPE_p_std__pairTstd__string_bool_t) in line 23
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__pairTstd__string_bool_t
   function SWIGTYPE_p_std__pairTstd__string_bool_t(long,boolean) in line 15
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__pairTstd__string_bool_t
   function SWIGTYPE_p_std__pairTstd__string_bool_t() in line 19
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__pairTstd__string_bool_t
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/SWIGTYPE_p_std__vectorTstd__pairTstd__string_bool_t_t.java
module edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__vectorTstd__pairTstd__string_bool_t_t
   function getCPtr(SWIGTYPE_p_std__vectorTstd__pairTstd__string_bool_t_t) in line 23
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__vectorTstd__pairTstd__string_bool_t_t
   function SWIGTYPE_p_std__vectorTstd__pairTstd__string_bool_t_t(long,boolean) in line 15
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__vectorTstd__pairTstd__string_bool_t_t
   function SWIGTYPE_p_std__vectorTstd__pairTstd__string_bool_t_t() in line 19
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__vectorTstd__pairTstd__string_bool_t_t
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/SWIGTYPE_p_std__vectorTstd__string_t.java
module edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__vectorTstd__string_t
   function getCPtr(SWIGTYPE_p_std__vectorTstd__string_t) in line 23
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__vectorTstd__string_t
   function SWIGTYPE_p_std__vectorTstd__string_t(long,boolean) in line 15
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__vectorTstd__string_t
   function SWIGTYPE_p_std__vectorTstd__string_t() in line 19
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::SWIGTYPE_p_std__vectorTstd__string_t
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/test/Example1.java
module edu::toronto::cs::tp::cvcl::test::Example1
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/test/Example2.java
module edu::toronto::cs::tp::cvcl::test::Example2
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/test/Example3.java
module edu::toronto::cs::tp::cvcl::test::Example3
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/test/Example4.java
module edu::toronto::cs::tp::cvcl::test::Example4
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/test/Example5.java
module edu::toronto::cs::tp::cvcl::test::Example5
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/test/Example6.java
module edu::toronto::cs::tp::cvcl::test::Example6
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/test/ExampleMethods.java
module edu::toronto::cs::tp::cvcl::test::ExampleMethods
   function add(ValidityChecker,CVectorExpr,CVectorExpr,CVectorExpr) in line 51
      protection public
      8 lines of code
      4 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function size() defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function falseExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function add(Expr) defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function halfadder(ValidityChecker,Expr,Expr,Expr) defined in edu::toronto::cs::tp::cvcl::test::ExampleMethods
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function carry(ValidityChecker,Expr,Expr,Expr) defined in edu::toronto::cs::tp::cvcl::test::ExampleMethods
   function carry(ValidityChecker,Expr,Expr,Expr) in line 63
      protection public
      3 lines of code
      4 parameters
      1 conditional paths
      uses function orExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function check(ValidityChecker,Expr) in line 7
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function printExpr(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function createTestFormula(ValidityChecker,Expr,Expr,Expr,Expr) in line 26
      protection public
      5 lines of code
      5 parameters
      1 conditional paths
      uses function ltLex(ValidityChecker,Expr,Expr,Expr,Expr) defined in edu::toronto::cs::tp::cvcl::test::ExampleMethods
      uses function andExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function CVectorExprq(ValidityChecker,CVectorExpr,CVectorExpr) in line 66
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function size() defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function trueExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function andExpr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function iffExpr(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function findLeaves(Expr,CVectorExpr) in line 31
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function arity() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable i defined in sparsemv.m
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function add(Expr) defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   function halfadder(ValidityChecker,Expr,Expr,Expr) in line 59
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function notExpr(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function iffExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function hasij(Expr,Expr,Expr) in line 40
      protection public
      11 lines of code
      3 parameters
      5 conditional paths
      uses function arity() defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable k defined in sparsemv.m
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
   function ltLex(ValidityChecker,Expr,Expr,Expr,Expr) in line 22
      protection public
      4 lines of code
      5 parameters
      1 conditional paths
      uses variable res defined in visual.m
      uses function ltExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function orExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function andExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function eqExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function newAssertion(ValidityChecker,Expr) in line 17
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function printExpr(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/test/ExceptionTest.java
module edu::toronto::cs::tp::cvcl::test::ExceptionTest
   function main(String[]) in line 17
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function ratExpr(int,int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function andExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/Theorem3.java
module edu::toronto::cs::tp::cvcl::Theorem3
   function delete() in line 29
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Theorem3
   function finalize() in line 25
      3 lines of code
      0 parameters
      1 conditional paths
   function getCPtr(Theorem3) in line 37
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function getExpr() in line 53
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function getLHS() in line 57
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function getProof() in line 65
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function getRHS() in line 61
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function getScope() in line 93
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function isAxiom() in line 49
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function isLiteral() in line 89
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function isNull() in line 41
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function isRewrite() in line 45
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function print() in line 85
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function printx() in line 81
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function toString() in line 77
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function withAssumptions() in line 73
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function withProof() in line 69
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function Theorem3(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Theorem3
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Theorem3
   function Theorem3() in line 21
      3 lines of code
      0 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/Type.java
module edu::toronto::cs::tp::cvcl::Type
   function arity() in line 45
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Type
   function delete() in line 21
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Type
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Type
   function getCPtr(Type) in line 29
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Type
   function getExpr() in line 41
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Type
   function toString() in line 37
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Type
   function Type(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::Type
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::Type
   function Type() in line 33
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/cvcl/ValidityChecker.java
module edu::toronto::cs::tp::cvcl::ValidityChecker
   function andExpr(Expr,Expr) in line 196
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function andExpr(CVectorExpr) in line 200
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function arrayType(Type,Type) in line 95
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function assertFormula(Expr) in line 368
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable sw defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function boolType() in line 47
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function boundVarExpr(String,String,Type) in line 124
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function create() in line 37
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function ValidityChecker() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function create(CLFlags) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ValidityChecker() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function createContext() in line 457
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function createFlags() in line 33
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function createOp(String,Type) in line 228
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function createType(String) in line 103
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function createType(String,Type) in line 107
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function datatypeUpdateExpr(Expr,Expr,Expr) in line 348
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function delete() in line 21
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function divideExpr(Expr,Expr) in line 280
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function eqExpr(Expr,Expr) in line 220
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function existsExpr(CVectorExpr,Expr) in line 356
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function falseExpr() in line 188
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function floorExpr(Expr) in line 300
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function forallExpr(CVectorExpr,Expr) in line 352
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function funExpr(Op,Expr) in line 232
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function funExpr(Op,Expr,Expr) in line 236
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function funExpr(Op,Expr,Expr,Expr) in line 240
      protection public
      3 lines of code
      4 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function funExpr(Op,CVectorExpr) in line 244
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function funType(Type,Type) in line 99
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function geExpr(Expr,Expr) in line 296
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getAssertions(CVectorExpr) in line 401
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getAssumptions(CVectorExpr) in line 417
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getAssumptionsTCC(CVectorExpr) in line 425
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getBaseType(Expr) in line 136
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getClosure() in line 433
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getCounterExample(CVectorExpr) in line 405
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getCPtr(ValidityChecker) in line 29
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getCurrentContext() in line 462
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getEM() in line 115
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getProof() in line 413
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getProofClosure() in line 437
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getProofTCC() in line 429
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getStatistics() in line 472
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getTCC() in line 421
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getType(Expr) in line 132
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function gtExpr(Expr,Expr) in line 292
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function iffExpr(Expr,Expr) in line 216
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function impliesExpr(Expr,Expr) in line 212
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function importExpr(Expr) in line 176
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function importType(Type) in line 180
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function inconsistent(CVectorExpr) in line 409
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function intType() in line 55
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function iteExpr(Expr,Expr,Expr) in line 224
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function lambdaExpr(CVectorExpr,Expr) in line 360
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function leExpr(Expr,Expr) in line 288
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function listExpr(CVectorExpr) in line 140
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function listExpr(Expr) in line 144
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function listExpr(Expr,Expr) in line 148
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function listExpr(Expr,Expr,Expr) in line 152
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function listExpr(String,CVectorExpr) in line 156
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function listExpr(String,Expr) in line 160
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function listExpr(String,Expr,Expr) in line 164
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function lookupType(String) in line 111
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function lookupVar(String,Type) in line 128
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function ltExpr(Expr,Expr) in line 284
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function minusExpr(Expr,Expr) in line 268
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function multExpr(Expr,Expr) in line 272
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function notExpr(Expr) in line 192
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function orExpr(Expr,Expr) in line 204
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function orExpr(CVectorExpr) in line 208
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function parseExpr(Expr) in line 172
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function plusExpr(Expr,Expr) in line 264
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function pop() in line 445
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function popto(int) in line 449
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function powExpr(Expr,Expr) in line 276
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function printExpr(Expr) in line 168
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function printStatistics() in line 476
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function printV(Expr) in line 385
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function push() in line 441
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function query(Expr,boolean) in line 390
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses variable sw defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function ratExpr(int,int) in line 248
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable d defined in crunch2parms.m
   function ratExpr(String,String,int) in line 252
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable d defined in crunch2parms.m
   function ratExpr(String,int) in line 256
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function readExpr(Expr,Expr) in line 328
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function realType() in line 51
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function recordExpr(String,Expr) in line 304
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function recordExpr(String,Expr,String,Expr) in line 308
      protection public
      3 lines of code
      4 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function recordExpr(String,Expr,String,Expr,String,Expr) in line 312
      protection public
      3 lines of code
      6 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function recordExpr(SWIGTYPE_p_std__vectorTstd__string_t,CVectorExpr) in line 316
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function recordType(String,Type) in line 79
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function recordType(String,Type,String,Type) in line 83
      protection public
      3 lines of code
      4 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function recordType(String,Type,String,Type,String,Type) in line 87
      protection public
      3 lines of code
      6 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function recordType(SWIGTYPE_p_std__vectorTstd__string_t,CVectorType) in line 91
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function recSelectExpr(Expr,String) in line 320
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function recUpdateExpr(Expr,String,Expr) in line 324
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function scopeLevel() in line 453
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function simplify(Expr) in line 377
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function simplifyThm(Expr) in line 381
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function simulateExpr(Expr,Expr,CVectorExpr,Expr) in line 364
      protection public
      3 lines of code
      4 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable f defined in mvproduct.m
   function subrangeType(Expr,Expr) in line 59
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function subtypeType(Expr) in line 63
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function switchContext(Context) in line 467
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function trueExpr() in line 184
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function tupleExpr(CVectorExpr) in line 336
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function tupleSelectExpr(Expr,int) in line 340
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function tupleType(Type,Type) in line 67
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function tupleType(Type,Type,Type) in line 71
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function tupleType(CVectorType) in line 75
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function tupleUpdateExpr(Expr,int,Expr) in line 344
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function uminusExpr(Expr) in line 260
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function varExpr(String,Type) in line 120
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function writeExpr(Expr,Expr,Expr) in line 332
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function ValidityChecker(long,boolean) in line 16
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable swigCMemOwn defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable swigCPtr defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function ValidityChecker() in line 480
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ValidityChecker(CLFlags) in line 484
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   variable sw in line 389
      protection public
   variable swigCMemOwn in line 14
   variable swigCPtr in line 13
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/CVCLExprPrinter.java
module edu::toronto::cs::tp::CVCLExprPrinter
   function exprVarNameToCvclVarName(String) in line 67
      5 lines of code
      1 parameters
      1 conditional paths
   function main(String[]) in line 164
      protection public
      77 lines of code
      1 parameters
      1 conditional paths
      uses function CVCLExprPrinter() defined in edu::toronto::cs::tp::CVCLExprPrinter
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function print(Expr) defined in edu::toronto::cs::tp::CVCLExprPrinter
      uses variable GT defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses variable LT defined in edu::toronto::cs::expr::ComparisonOp
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
      uses variable ASSIGN defined in edu::toronto::cs::expr::CILAssignOp
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function declare(String,String) defined in edu::toronto::cs::tp::CVCLProcess
      uses function where() defined in edu::toronto::cs::tp::CVCLProcess
      uses function toString() defined in edu::toronto::cs::tp::CVCLProcess::WhereMessage
      uses function assertFormula(String) defined in edu::toronto::cs::tp::CVCLProcess
      uses function query(String) defined in edu::toronto::cs::tp::CVCLProcess
   function opToString(Operator) in line 56
      8 lines of code
      1 parameters
      2 conditional paths
   function print(Expr) in line 74
      protection public
      88 lines of code
      1 parameters
      21 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable PAIR_NB defined in edu::toronto::cs::expr::TupleOp
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function exprVarNameToCvclVarName(String) defined in edu::toronto::cs::tp::CVCLExprPrinter
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
      uses function getD() defined in edu::toronto::cs::expr::RationalOp
      uses function opToString(Operator) defined in edu::toronto::cs::tp::CVCLExprPrinter
      uses function args() defined in edu::toronto::cs::expr::Expr
   function CVCLExprPrinter() in line 24
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses variable REAL defined in edu::toronto::cs::expr::SimpleTypeOp
      uses variable TRUE defined in edu::toronto::cs::expr::BoolOp
      uses variable FALSE defined in edu::toronto::cs::expr::BoolOp
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses variable AND defined in edu::toronto::cs::expr::BoolOp
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
      uses variable IMPL defined in edu::toronto::cs::expr::BoolOp
      uses variable GT defined in edu::toronto::cs::expr::ComparisonOp
      uses variable GEQ defined in edu::toronto::cs::expr::ComparisonOp
      uses variable LT defined in edu::toronto::cs::expr::ComparisonOp
      uses variable LEQ defined in edu::toronto::cs::expr::ComparisonOp
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses variable NEQ defined in edu::toronto::cs::expr::ComparisonOp
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
      uses variable MINUS defined in edu::toronto::cs::expr::NumericOp
      uses variable UN_MINUS defined in edu::toronto::cs::expr::NumericOp
      uses variable MULT defined in edu::toronto::cs::expr::NumericOp
      uses variable DIV defined in edu::toronto::cs::expr::NumericOp
      uses variable ABS defined in edu::toronto::cs::expr::NumericOp
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/CVCLExprPrinterTestCase.java
module edu::toronto::cs::tp::CVCLExprPrinterTestCase
   inherits from junit::framework::TestCase
   function setUp() in line 15
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable printer defined in edu::toronto::cs::tp::CVCLExprPrinterTestCase
      uses variable fac defined in edu::toronto::cs::tp::CVCLExprPrinterTestCase
   function testLT() in line 24
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable fac defined in edu::toronto::cs::tp::CVCLExprPrinterTestCase
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable LT defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses variable printer defined in edu::toronto::cs::tp::CVCLExprPrinterTestCase
      uses function print(Expr) defined in edu::toronto::cs::tp::CVCLExprPrinter
   variable fac in line 10
   variable printer in line 9
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/CVCLProcess.java
module edu::toronto::cs::tp::CVCLProcess
   function assertFormula(String) in line 361
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function readCVCLOutput(BufferedReader) defined in edu::toronto::cs::tp::CVCLProcess::VoidMessage
   function declare(String,String) in line 318
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function readCVCLOutput(BufferedReader) defined in edu::toronto::cs::tp::CVCLProcess::VoidMessage
   function dump_assumptions() in line 328
      protection public
      20 lines of code
      0 parameters
      3 conditional paths
      uses function readCVCLOutput(BufferedReader) defined in edu::toronto::cs::tp::CVCLProcess::AssertListMessage
   function getStackLevel() in line 305
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function readCVCLOutput(BufferedReader) defined in edu::toronto::cs::tp::CVCLProcess::WhereMessage
      uses function getStackLevel() defined in edu::toronto::cs::tp::CVCLProcess::WhereMessage
   function openStreams() in line 159
      56 lines of code
      0 parameters
      8 conditional paths
      uses variable writer defined in edu::toronto::cs::util::SystemOutWrapper
      uses variable COMMENT_STRING defined in edu::toronto::cs::tp::CVCLProcess
      uses function prefixOn() defined in edu::toronto::cs::util::TeeBufferedReader
      uses function readUntilPrompt(Reader,String) defined in edu::toronto::cs::tp::CVCLProcess
      uses variable PROMPT defined in edu::toronto::cs::tp::CVCLProcess
   function pop() in line 387
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses function readCVCLOutput(BufferedReader) defined in edu::toronto::cs::tp::CVCLProcess::VoidMessage
   function popto(int) in line 401
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function readCVCLOutput(BufferedReader) defined in edu::toronto::cs::tp::CVCLProcess::VoidMessage
   function push() in line 373
      protection public
      13 lines of code
      0 parameters
      2 conditional paths
      uses function readCVCLOutput(BufferedReader) defined in edu::toronto::cs::tp::CVCLProcess::VoidMessage
   function query(String) in line 415
      protection public
      19 lines of code
      1 parameters
      2 conditional paths
      uses function startTPWriteQuery() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function stopTPWriteQuery() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function readCVCLOutput(BufferedReader) defined in edu::toronto::cs::tp::CVCLProcess::ValidityMessage
      uses function isValid() defined in edu::toronto::cs::tp::CVCLProcess::ValidityMessage
   function readUntilPrompt(Reader,String) in line 265
      39 lines of code
      2 parameters
      7 conditional paths
   function removeSpaces(String) in line 143
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable s defined in visual.m
      uses variable i defined in sparsemv.m
   function setStats(YasmStatistics) in line 135
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function where() in line 349
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses function readCVCLOutput(BufferedReader) defined in edu::toronto::cs::tp::CVCLProcess::WhereMessage
   function CVCLProcess() in line 83
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CVCLProcess(boolean) in line 88
      protection public
      46 lines of code
      1 parameters
      3 conditional paths
      uses function openStreams() defined in edu::toronto::cs::tp::CVCLProcess
      uses function where() defined in edu::toronto::cs::tp::CVCLProcess
      uses function getStackLevel() defined in edu::toronto::cs::tp::CVCLProcess::WhereMessage
   variable assertPattern in line 78
   variable COMMENT_STRING in line 81
   variable CVCL_LOG_PATH in line 69
   variable cvclPath in line 62
   variable PROMPT in line 65
   variable whereStackPattern in line 74
module edu::toronto::cs::tp::CVCLProcess::CVCLMessage
module edu::toronto::cs::tp::CVCLProcess::VoidMessage
   inherits from edu::toronto::cs::tp::CVCLProcess::CVCLMessage
   function readCVCLOutput(BufferedReader) in line 449
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses function readUntilPrompt(Reader,String) defined in edu::toronto::cs::tp::CVCLProcess
      uses variable PROMPT defined in edu::toronto::cs::tp::CVCLProcess
   function toString() in line 467
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::tp::CVCLProcess::AssertListMessage
   inherits from edu::toronto::cs::tp::CVCLProcess::CVCLMessage
   function getAsserts() in line 564
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function readCVCLOutput(BufferedReader) in line 499
      protection public
      60 lines of code
      1 parameters
      8 conditional paths
      uses function readUntilPrompt(Reader,String) defined in edu::toronto::cs::tp::CVCLProcess
      uses variable PROMPT defined in edu::toronto::cs::tp::CVCLProcess
      uses function removeSpaces(String) defined in edu::toronto::cs::tp::CVCLProcess
      uses variable assertPattern defined in edu::toronto::cs::tp::CVCLProcess
   function toString() in line 570
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function AssertListMessage(List< String >) in line 481
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::tp::CVCLProcess::WhereMessage
   inherits from edu::toronto::cs::tp::CVCLProcess::CVCLMessage
   function getAssertMsg() in line 595
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getAsserts() in line 600
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getAsserts() defined in edu::toronto::cs::tp::CVCLProcess::AssertListMessage
   function getStackLevel() in line 605
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function readCVCLOutput(BufferedReader) in line 630
      protection public
      28 lines of code
      1 parameters
      3 conditional paths
      uses variable whereStackPattern defined in edu::toronto::cs::tp::CVCLProcess
      uses function readCVCLOutput(BufferedReader) defined in edu::toronto::cs::tp::CVCLProcess::AssertListMessage
   function toString() in line 659
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function WhereMessage(int,AssertListMessage) in line 588
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   variable assertMsg in line 585
   variable stackLevel in line 584
module edu::toronto::cs::tp::CVCLProcess::ValidityMessage
   inherits from edu::toronto::cs::tp::CVCLProcess::CVCLMessage
   function isValid() in line 684
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function readCVCLOutput(BufferedReader) in line 705
      protection public
      36 lines of code
      1 parameters
      4 conditional paths
      uses variable s defined in visual.m
      uses function readUntilPrompt(Reader,String) defined in edu::toronto::cs::tp::CVCLProcess
      uses variable PROMPT defined in edu::toronto::cs::tp::CVCLProcess
   function toString() in line 679
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ValidityMessage(boolean) in line 674
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::tp::CVCLProcess::CVCLCommunicationException
   inherits from RuntimeException
   function CVCLCommunicationException(String) in line 748
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function CVCLCommunicationException(Exception) in line 753
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::tp::CVCLProcess::CVCLParsingException
   inherits from RuntimeException
   function CVCLParsingException(String) in line 764
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::tp::CVCLProcess::CVCLStateException
   inherits from RuntimeException
   function CVCLStateException(String) in line 776
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function CVCLStateException() in line 781
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/CVCLTester.java
module edu::toronto::cs::tp::CVCLTester
   function main(String[]) in line 20
      protection public
      69 lines of code
      1 parameters
      13 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/ITheoremProver.java
module edu::toronto::cs::tp::ITheoremProver
   function assertFormula(Expr) in line 100
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function assertFormula(List< Expr >) in line 108
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function checkTruth(Expr,Expr) in line 64
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function checkTruth(Expr) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function declare(Expr,Expr) in line 34
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function exprFactory() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getAssumptionsUsed() in line 126
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function implies(Expr,Expr) in line 119
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pop() in line 148
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function popto(int) in line 156
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function push() in line 141
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function query(Expr) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function quickCheckTruth(Expr,Expr) in line 74
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function quickCheckTruth(Expr) in line 92
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function quickQuery(Expr) in line 52
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function stackLevel() in line 135
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/JCVCLTheoremProver.java
module edu::toronto::cs::tp::JCVCLTheoremProver
   inherits from edu::toronto::cs::tp::AbstractTheoremProver
   function assertFormula(Expr) in line 155
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function toCVCL(List) defined in edu::toronto::cs::expr::CVCLExprConverter
   function cvclType(ValidityChecker,Expr) in line 124
      16 lines of code
      2 parameters
      5 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function intType() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable REAL defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function realType() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable VOID defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function createType(String) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable DUMMY defined in edu::toronto::cs::expr::SimpleTypeOp
   function cvcVectorToList(CVectorExpr) in line 185
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses variable i defined in sparsemv.m
      uses function fromCVCL(edu.toronto.cs.tp.cvcl.Expr) defined in edu::toronto::cs::expr::CVCLExprConverter
   function declare(Expr,Expr) in line 108
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable decls defined in edu::toronto::cs::tp::JCVCLTheoremProver
      uses function varExpr(String,Type) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function cvclType(ValidityChecker,Expr) defined in edu::toronto::cs::tp::JCVCLTheoremProver
   function getAssumptionsUsed() in line 147
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses function getAssumptions(CVectorExpr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function cvcVectorToList(CVectorExpr) defined in edu::toronto::cs::tp::JCVCLTheoremProver
   function getExprConverter() in line 102
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValidityChecker() in line 88
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 239
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function test1() defined in edu::toronto::cs::tp::JCVCLTheoremProver
   function pop() in line 168
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pop() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function popto(int) in line 172
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function push() in line 164
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function push() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function query(Expr) in line 142
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function query(Expr,boolean) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function toCVCL(List) defined in edu::toronto::cs::expr::CVCLExprConverter
   function stackLevel() in line 160
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function test1() in line 205
      protection public
      32 lines of code
      0 parameters
      1 conditional paths
      uses function JCVCLTheoremProver(ExprFactory,ValidityChecker,CVCLExprConverter) defined in edu::toronto::cs::tp::JCVCLTheoremProver
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function declare(Expr,Expr) defined in edu::toronto::cs::tp::JCVCLTheoremProver
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function push() defined in edu::toronto::cs::tp::JCVCLTheoremProver
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::JCVCLTheoremProver
      uses variable GT defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function query(Expr) defined in edu::toronto::cs::tp::JCVCLTheoremProver
      uses function getAssumptionsUsed() defined in edu::toronto::cs::tp::JCVCLTheoremProver
      uses function pop() defined in edu::toronto::cs::tp::JCVCLTheoremProver
      uses function stackLevel() defined in edu::toronto::cs::tp::JCVCLTheoremProver
   function JCVCLTheoremProver(ExprFactory,ValidityChecker,CVCLExprConverter) in line 45
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
   function JCVCLTheoremProver(ExprFactory,ValidityChecker) in line 61
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function JCVCLTheoremProver(ExprFactory) in line 73
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   variable decls in line 33
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/tp/SymbolTable.java
module edu::toronto::cs::tp::SymbolTable
   function put(Expr,Expr) in line 35
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
   function toString() in line 51
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function typeOf(Expr) in line 28
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function varSet() in line 46
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function SymbolTable() in line 23
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::tp::SymbolTable::SymbolTableException
   inherits from RuntimeException
   function SymbolTableException(String) in line 58
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/ArrayIterator.java
module edu::toronto::cs::util::ArrayIterator
   inherits from java::util::Iterator
   function hasNext() in line 42
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function next() in line 47
      protection public
      12 lines of code
      0 parameters
      2 conditional paths
      uses function hasNext() defined in edu::toronto::cs::util::ArrayIterator
      uses variable o defined in visual.m
   function remove() in line 60
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ArrayIterator(Object[],boolean) in line 27
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function ArrayIterator(Object[],boolean,int) in line 32
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/ArrayMarkedList.java
module edu::toronto::cs::util::ArrayMarkedList
   inherits from java::util::ArrayList
   inherits from edu::toronto::cs::util::MarkedList
   function add(int,Object) in line 158
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function addAll(int,Collection) in line 173
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function get(int) in line 184
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function getNumMarks() in line 60
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 248
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function ArrayMarkedList() defined in edu::toronto::cs::util::ArrayMarkedList
      uses function add(int,Object) defined in edu::toronto::cs::util::ArrayMarkedList
      uses function toString() defined in edu::toronto::cs::util::ArrayMarkedList
   function mark() in line 71
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function remove(int) in line 200
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function remove(Object) in line 211
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function removeAll(Collection) in line 221
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function restore() in line 84
      protection public
      18 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function restore(int) in line 112
      protection public
      34 lines of code
      1 parameters
      5 conditional paths
      uses function getNumMarks() defined in edu::toronto::cs::util::ArrayMarkedList
      uses function restore() defined in edu::toronto::cs::util::ArrayMarkedList
   function retainAll(Collection) in line 232
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function set(int,Object) in line 242
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function toString() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getNumMarks() defined in edu::toronto::cs::util::ArrayMarkedList
   function ArrayMarkedList() in line 26
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function ArrayMarkedList(Collection) in line 38
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/ArrayMarkedListTestCase.java
module edu::toronto::cs::util::ArrayMarkedListTestCase
   inherits from junit::framework::TestCase
   function testMethod() in line 33
      protection public
      98 lines of code
      0 parameters
      1 conditional paths
      uses function mark() defined in edu::toronto::cs::util::ArrayMarkedList
      uses function add(int,Object) defined in edu::toronto::cs::util::ArrayMarkedList
      uses function restore() defined in edu::toronto::cs::util::ArrayMarkedList
      uses function getNumMarks() defined in edu::toronto::cs::util::ArrayMarkedList
      uses function get(int) defined in edu::toronto::cs::util::ArrayMarkedList
      uses function addAll(int,Collection) defined in edu::toronto::cs::util::ArrayMarkedList
   function testMethod1() in line 16
      protection public
      15 lines of code
      0 parameters
      1 conditional paths
      uses function add(int,Object) defined in edu::toronto::cs::util::ArrayMarkedList
      uses function mark() defined in edu::toronto::cs::util::ArrayMarkedList
      uses function restore() defined in edu::toronto::cs::util::ArrayMarkedList
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/ArrayUtil.java
module edu::toronto::cs::util::ArrayUtil
   function arrayDiff(Object[],Object[]) in line 102
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable v defined in visual.m
   function evenElements(String[]) in line 43
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function evenElements(Object[]) in line 67
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function oddElements(String[]) in line 56
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function oddElements(Object[]) in line 79
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function reverse(int[]) in line 88
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function toString(int[]) in line 8
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toString(int[],int) in line 13
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function toString(int[]) defined in edu::toronto::cs::util::ArrayUtil
      uses function length() defined in sparser.m
   function toString(int[],int,int) in line 18
      protection public
      18 lines of code
      3 parameters
      3 conditional paths
      uses function length() defined in sparser.m
      uses variable i defined in sparsemv.m
   function toString(Object[]) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/BeanMangler.java
module edu::toronto::cs::util::BeanMangler
   inherits from edu::toronto::cs::util::Filter
   function dotName(String) in line 29
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
   function process(Object) in line 15
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function process(File) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function process(Object) defined in edu::toronto::cs::util::BeanMangler
      uses variable f defined in mvproduct.m
   function process(String) in line 94
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function dotName(String) defined in edu::toronto::cs::util::BeanMangler
      uses function shorten(String) defined in edu::toronto::cs::util::BeanMangler
      uses variable s defined in visual.m
   function shorten(String) in line 45
      protection public
      47 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
   function BeanMangler() in line 10
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/caching/AbstractMapCache.java
module edu::toronto::cs::util::caching::AbstractMapCache
   inherits from edu::toronto::cs::util::caching::Cache
   abstract class
   function clear() in line 25
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   function containsKey(Object) in line 37
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   function containsValue(Object) in line 49
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
      uses function put(Object,Object) defined in edu::toronto::cs::util::caching::AbstractMapCache
   function entrySet() in line 139
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
      uses function resize(int) defined in edu::toronto::cs::util::caching::AbstractMapCache
      uses function size() defined in edu::toronto::cs::util::caching::AbstractMapCache
   function get(Object) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function isEmpty() in line 101
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
      uses function isFull() defined in edu::toronto::cs::util::caching::AbstractMapCache
   function isFull() in line 112
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function keySet() in line 129
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   function put(Object,Object) in line 65
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function remove(Object) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function resize(int) in line 150
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function size() in line 91
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   function values() in line 119
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   function AbstractMapCache(Map) in line 17
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   variable cache in line 12
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/caching/Cache.java
module edu::toronto::cs::util::caching::Cache
   function clear() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function containsKey(Object) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function containsValue(Object) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function entrySet() in line 99
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function get(Object) in line 54
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function isEmpty() in line 78
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function keySet() in line 92
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function put(Object,Object) in line 45
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function remove(Object) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function resize(int) in line 107
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function size() in line 71
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function values() in line 85
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/caching/NaiveMapCache.java
module edu::toronto::cs::util::caching::NaiveMapCache
   inherits from edu::toronto::cs::util::caching::AbstractMapCache
   function adjustSize() in line 110
      11 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses variable keylist defined in edu::toronto::cs::util::caching::NaiveMapCache
      uses function size() defined in edu::toronto::cs::util::caching::AbstractMapCache
      uses variable maxsize defined in edu::toronto::cs::util::caching::NaiveMapCache
   function get(Object) in line 71
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   function isFull() in line 96
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function size() defined in edu::toronto::cs::util::caching::AbstractMapCache
      uses variable maxsize defined in edu::toronto::cs::util::caching::NaiveMapCache
   function put(Object,Object) in line 47
      protection public
      16 lines of code
      2 parameters
      2 conditional paths
      uses function isFull() defined in edu::toronto::cs::util::caching::NaiveMapCache
      uses function resize(int) defined in edu::toronto::cs::util::caching::NaiveMapCache
      uses function size() defined in edu::toronto::cs::util::caching::AbstractMapCache
      uses variable keylist defined in edu::toronto::cs::util::caching::NaiveMapCache
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   function remove(Object) in line 84
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable keylist defined in edu::toronto::cs::util::caching::NaiveMapCache
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   function resize(int) in line 101
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable maxsize defined in edu::toronto::cs::util::caching::NaiveMapCache
      uses function size() defined in edu::toronto::cs::util::caching::AbstractMapCache
      uses function isFull() defined in edu::toronto::cs::util::caching::NaiveMapCache
      uses function adjustSize() defined in edu::toronto::cs::util::caching::NaiveMapCache
   function NaiveMapCache() in line 19
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable keylist defined in edu::toronto::cs::util::caching::NaiveMapCache
      uses function resize(int) defined in edu::toronto::cs::util::caching::NaiveMapCache
      uses variable DEFAULT_SIZE defined in edu::toronto::cs::util::caching::NaiveMapCache
   function NaiveMapCache(int) in line 29
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable keylist defined in edu::toronto::cs::util::caching::NaiveMapCache
      uses function resize(int) defined in edu::toronto::cs::util::caching::NaiveMapCache
   variable DEFAULT_SIZE in line 14
      protection public
   variable keylist in line 11
   variable maxsize in line 12
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/caching/NullCache.java
module edu::toronto::cs::util::caching::NullCache
   inherits from edu::toronto::cs::util::caching::Cache
   function clear() in line 21
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function containsKey(Object) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function containsValue(Object) in line 44
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function entrySet() in line 146
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function get(Object) in line 72
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function isEmpty() in line 105
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isFull() in line 116
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function keySet() in line 136
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function put(Object,Object) in line 60
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function remove(Object) in line 85
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function resize(int) in line 157
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function size() in line 95
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function values() in line 126
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function NullCache() in line 14
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/caching/UnboundedMapCache.java
module edu::toronto::cs::util::caching::UnboundedMapCache
   inherits from edu::toronto::cs::util::caching::AbstractMapCache
   function get(Object) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   function isFull() in line 66
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function put(Object,Object) in line 30
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   function remove(Object) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cache defined in edu::toronto::cs::util::caching::AbstractMapCache
   function resize(int) in line 71
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function UnboundedMapCache() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/Chaos.java
module edu::toronto::cs::util::Chaos
   function inRange(int,int) in line 18
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function nextUpTo(int) defined in edu::toronto::cs::util::Chaos
   function nextDouble() in line 29
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function nextThreshold(float) in line 23
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function nextUpTo(int) in line 14
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function seed(int) in line 9
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/ChaosIterator.java
module edu::toronto::cs::util::ChaosIterator
   function nextInt() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/Clapi.java
module edu::toronto::cs::util::Clapi
module edu::toronto::cs::util::Clapi::OptParser
   function addOpt(Opt) in line 253
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function opt() defined in edu::toronto::cs::util::Clapi::OptParser
   function author(String) in line 209
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function breakIntoWords(String) in line 928
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
   function compile() in line 618
      93 lines of code
      0 parameters
      13 conditional paths
      uses variable i defined in sparsemv.m
      uses function opt() defined in edu::toronto::cs::util::Clapi::OptParser
      uses function getLongNames() defined in edu::toronto::cs::util::Clapi::OptSpec
      uses variable j defined in sparsemv.m
      uses function processOption(String,Map,Opt,String) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function getShortNames() defined in edu::toronto::cs::util::Clapi::OptSpec
      uses function getEqualses() defined in edu::toronto::cs::util::Clapi::OptSpec
      uses function getPrefixes() defined in edu::toronto::cs::util::Clapi::OptSpec
      uses function getSuffixes() defined in edu::toronto::cs::util::Clapi::OptSpec
      uses function getNameless() defined in edu::toronto::cs::util::Clapi::OptSpec
      uses function getGroups() defined in edu::toronto::cs::util::Clapi::OptSpec
   function contains(String,String,boolean) in line 970
      protection public
      8 lines of code
      3 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function copyrightNotice(String) in line 215
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getLongOpt(String) in line 756
      33 lines of code
      1 parameters
      5 conditional paths
      uses function get(OptResult) defined in edu::toronto::cs::util::Clapi::Opt
      uses variable i defined in sparsemv.m
   function isLongName(String) in line 341
      7 lines of code
      1 parameters
      3 conditional paths
   function isNamelessToken(String) in line 356
      5 lines of code
      1 parameters
      2 conditional paths
   function isShortName(String) in line 349
      6 lines of code
      1 parameters
      3 conditional paths
   function isTerminal(String) in line 322
      18 lines of code
      1 parameters
      6 conditional paths
      uses function getLongOpt(String) defined in edu::toronto::cs::util::Clapi::OptParser
   function loadTokenFile(String) in line 840
      37 lines of code
      1 parameters
      5 conditional paths
   function matchNamelessToken(String) in line 798
      27 lines of code
      1 parameters
      7 conditional paths
      uses variable i defined in sparsemv.m
   function opt() in line 246
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function parse(String[]) in line 313
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function compile() defined in edu::toronto::cs::util::Clapi::OptParser
      uses function preprocessTokens(String[]) defined in edu::toronto::cs::util::Clapi::OptParser
   function parse(TokenStream) in line 362
      78 lines of code
      1 parameters
      13 conditional paths
      uses function isNamelessToken(String) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function opt() defined in edu::toronto::cs::util::Clapi::OptParser
      uses function matchNamelessToken(String) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function isLongName(String) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function getLongOpt(String) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function isShortName(String) defined in edu::toronto::cs::util::Clapi::OptParser
      uses variable j defined in sparsemv.m
      uses variable i defined in sparsemv.m
   function preprocessTokens(String[]) in line 735
      20 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
      uses function loadTokenFile(String) defined in edu::toronto::cs::util::Clapi::OptParser
   function printBanner(PrintWriter) in line 491
      protection public
      28 lines of code
      1 parameters
      8 conditional paths
      uses function wordWrap(PrintWriter,String,int,int) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function quote(String) defined in edu::toronto::cs::util::Clapi::OptParser
   function printColumn(PrintWriter,ListIterator,int,boolean) in line 982
      49 lines of code
      4 parameters
      8 conditional paths
      uses function contains(String,String,boolean) defined in edu::toronto::cs::util::Clapi::OptParser
   function printOptDescriptions(PrintWriter) in line 557
      protection public
      47 lines of code
      1 parameters
      5 conditional paths
      uses function opt() defined in edu::toronto::cs::util::Clapi::OptParser
      uses variable j defined in sparsemv.m
      uses variable i defined in sparsemv.m
      uses function getDescription() defined in edu::toronto::cs::util::Clapi::OptSpec
      uses function breakIntoWords(String) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function printTwoColumns(PrintWriter,List,List,int,int,int,boolean,boolean) defined in edu::toronto::cs::util::Clapi::OptParser
   function printSummaryUsage(PrintWriter) in line 525
      protection public
      25 lines of code
      1 parameters
      7 conditional paths
      uses variable i defined in sparsemv.m
      uses function opt() defined in edu::toronto::cs::util::Clapi::OptParser
      uses function isRequired() defined in edu::toronto::cs::util::Clapi::OptSpec
      uses function isList() defined in edu::toronto::cs::util::Clapi::OptSpec
      uses function wordWrap(PrintWriter,String,int,int) defined in edu::toronto::cs::util::Clapi::OptParser
   function printTwoColumns(PrintWriter,List,List,int,int,int,boolean,boolean) in line 943
      23 lines of code
      8 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function printColumn(PrintWriter,ListIterator,int,boolean) defined in edu::toronto::cs::util::Clapi::OptParser
   function printUsage(PrintWriter,OptParseException) in line 456
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
   function printUsage(PrintWriter) in line 472
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function compile() defined in edu::toronto::cs::util::Clapi::OptParser
      uses function printBanner(PrintWriter) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function printSummaryUsage(PrintWriter) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function printOptDescriptions(PrintWriter) defined in edu::toronto::cs::util::Clapi::OptParser
   function processOption(String,Map,Opt,String) in line 715
      8 lines of code
      4 parameters
      2 conditional paths
      uses function opt() defined in edu::toronto::cs::util::Clapi::OptParser
   function programDescription(String) in line 219
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function programName(String) in line 203
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function quote(String) in line 226
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function run(String[]) in line 283
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function parse(String[]) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function printUsage(PrintWriter,OptParseException) defined in edu::toronto::cs::util::Clapi::OptParser
   function startClass(Class) in line 195
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function startClassName(String) in line 199
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function version(String) in line 206
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function webPage(String) in line 212
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function wordWrap(PrintWriter,String,int,int) in line 887
      protection public
      3 lines of code
      4 parameters
      1 conditional paths
   function wordWrap(PrintWriter,String,int,int,int) in line 906
      protection public
      17 lines of code
      5 parameters
      1 conditional paths
      uses function breakIntoWords(String) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function printTwoColumns(PrintWriter,List,List,int,int,int,boolean,boolean) defined in edu::toronto::cs::util::Clapi::OptParser
   function OptParser() in line 184
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses function opt() defined in edu::toronto::cs::util::Clapi::OptParser
      uses function shortName(char) defined in edu::toronto::cs::util::Clapi::OptSpec
module edu::toronto::cs::util::Clapi::OptSpec
   function argumentArity(int) in line 1191
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function asBoolean() in line 1072
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
      uses function addOpt(Opt) defined in edu::toronto::cs::util::Clapi::OptParser
   function asFileName() in line 1087
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
      uses function addOpt(Opt) defined in edu::toronto::cs::util::Clapi::OptParser
   function asHelp() in line 1067
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
      uses function addOpt(Opt) defined in edu::toronto::cs::util::Clapi::OptParser
   function asInt() in line 1082
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
      uses function addOpt(Opt) defined in edu::toronto::cs::util::Clapi::OptParser
   function asString() in line 1077
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
      uses function addOpt(Opt) defined in edu::toronto::cs::util::Clapi::OptParser
   function description(String) in line 1194
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function equals(String) in line 1102
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getArgumentArity() in line 1221
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getDescription() in line 1217
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getEqualses() in line 1213
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getGroups() in line 1231
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getLongNames() in line 1211
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getMaxArity() in line 1220
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getMinArity() in line 1219
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getNameless() in line 1216
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getPrefixes() in line 1214
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getRequired() in line 1218
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getShortNames() in line 1212
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getSuffixes() in line 1215
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function group(String) in line 1201
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   function isList() in line 1227
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function isRequired() in line 1224
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function list() in line 1209
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function longName(String) in line 1091
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function maxArity(int) in line 1184
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function minArity(int) in line 1161
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function nameless() in line 1133
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function optional() in line 1205
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function prefix(String) in line 1111
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function required() in line 1207
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function shortName(char) in line 1093
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function suffix(String) in line 1120
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function terminal() in line 1139
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function OptSpec(OptParser) in line 1063
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::ArgumentParser
   abstract class
   function getOpt() in line 1239
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function opt() defined in edu::toronto::cs::util::Clapi::OptParser
   function getSpec() in line 1240
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function opt() defined in edu::toronto::cs::util::Clapi::OptParser
   function getToken(TokenStream) in line 1265
      8 lines of code
      1 parameters
      2 conditional paths
   function getTypeName() in line 1245
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function parseArguments(TokenStream) in line 1242
      1 lines of code
      1 parameters
      1 conditional paths
   function printArgumentsSpec(PrintWriter) in line 1247
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
   function ArgumentParser(Opt) in line 1237
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function opt() defined in edu::toronto::cs::util::Clapi::OptParser
module edu::toronto::cs::util::Clapi::HelpArgumentParser
   inherits from edu::toronto::cs::util::Clapi::ArgumentParser
   function parseArguments(TokenStream) in line 1278
      2 lines of code
      1 parameters
      1 conditional paths
   function HelpArgumentParser(Opt) in line 1276
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::StringArgumentParser
   inherits from edu::toronto::cs::util::Clapi::ArgumentParser
   function getTypeName() in line 1319
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function parseArguments(TokenStream) in line 1286
      32 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
   function StringArgumentParser(Opt) in line 1284
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::FilterArgumentParser
   inherits from edu::toronto::cs::util::Clapi::ArgumentParser
   abstract class
   function FilterArgumentParser(Opt,StringArgumentParser) in line 1325
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::IntArgumentParser
   inherits from edu::toronto::cs::util::Clapi::FilterArgumentParser
   function getTypeName() in line 1375
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function parseArguments(TokenStream) in line 1334
      28 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
   function IntArgumentParser(Opt,StringArgumentParser) in line 1331
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::EatAllParser
   inherits from edu::toronto::cs::util::Clapi::ArgumentParser
   function getTypeName() in line 1396
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function parseArguments(TokenStream) in line 1386
      9 lines of code
      1 parameters
      2 conditional paths
   function EatAllParser(Opt) in line 1380
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function opt() defined in edu::toronto::cs::util::Clapi::OptParser
module edu::toronto::cs::util::Clapi::BooleanArgumentParser
   inherits from edu::toronto::cs::util::Clapi::FilterArgumentParser
   function getTypeName() in line 1448
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function parseArguments(TokenStream) in line 1405
      29 lines of code
      1 parameters
      6 conditional paths
      uses variable i defined in sparsemv.m
   function BooleanArgumentParser(Opt,StringArgumentParser) in line 1402
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::Opt
   abstract class
   function checkArity(OptResult) in line 1516
      24 lines of code
      1 parameters
      5 conditional paths
   function get(OptResult) in line 1541
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getArgumentParser() in line 1479
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getArgumentsSpec() in line 1626
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
   function getList(OptResult) in line 1546
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function get(Opt) defined in edu::toronto::cs::util::Clapi::OptResult
   function getObjectArray(OptResult) in line 1557
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function getOptionSpecifiers() in line 1577
      protection public
      48 lines of code
      0 parameters
      7 conditional paths
      uses variable i defined in sparsemv.m
   function getSpec() in line 1477
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getToken(TokenStream) in line 1508
      7 lines of code
      1 parameters
      2 conditional paths
   function isTerminal() in line 1469
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function parseArguments(TokenStream,OptResult) in line 1487
      16 lines of code
      2 parameters
      3 conditional paths
      uses function isTerminal(String) defined in edu::toronto::cs::util::Clapi::OptParser
      uses function parseArguments(TokenStream) defined in edu::toronto::cs::util::Clapi::ArgumentParser
      uses function parseArguments(TokenStream) defined in edu::toronto::cs::util::Clapi::EatAllParser
   function printArgumentsSpec(PrintWriter) in line 1635
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses function printArgumentsSpec(PrintWriter) defined in edu::toronto::cs::util::Clapi::ArgumentParser
   function tag() in line 1566
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function toString() in line 1564
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Opt(OptSpec) in line 1475
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::HelpOpt
   inherits from edu::toronto::cs::util::Clapi::Opt
   function getArgumentParser() in line 1647
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function HelpOpt(OptSpec) in line 1646
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::BooleanOpt
   inherits from edu::toronto::cs::util::Clapi::Opt
   function defaultValue(boolean) in line 1662
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getArgumentParser() in line 1665
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function getBoolean(OptResult) in line 1674
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function getBooleanArray(OptResult) in line 1680
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function toBoolean(Boolean) in line 1668
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
   function BooleanOpt(OptSpec) in line 1660
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::StringOpt
   inherits from edu::toronto::cs::util::Clapi::Opt
   function defaultValue(String) in line 1708
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getArgumentParser() in line 1710
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function getString(OptResult) in line 1719
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function getStringArray(OptResult) in line 1725
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable s defined in visual.m
   function toString(String) in line 1713
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
   function StringOpt(OptSpec) in line 1706
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable defaultValue in line 1704
      protection public
module edu::toronto::cs::util::Clapi::FileNameOpt
   inherits from edu::toronto::cs::util::Clapi::StringOpt
   function FileNameOpt(OptSpec) in line 1743
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::IntOpt
   inherits from edu::toronto::cs::util::Clapi::Opt
   function defaultValue(int) in line 1756
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getArgumentParser() in line 1758
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function getInt(OptResult) in line 1767
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function getIntArray(OptResult) in line 1773
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable s defined in visual.m
   function toInt(Integer) in line 1761
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
   function IntOpt(OptSpec) in line 1754
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::OptResult
   function add(Opt,Object) in line 1802
      protection public
      30 lines of code
      2 parameters
      5 conditional paths
   function containsKey(Opt) in line 1833
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get(Opt) in line 1834
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 1836
      protection public
      1 lines of code
      0 parameters
      2 conditional paths
      uses variable v defined in visual.m
   function OptResult(OptParser) in line 1799
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::TokenStream
module edu::toronto::cs::util::Clapi::OptCompilationFailedException
   inherits from RuntimeException
   function getNestedException() in line 1870
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function printStackTrace(PrintWriter) in line 1873
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
   function printStackTrace(PrintStream) in line 1882
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   function OptCompilationFailedException() in line 1865
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function OptCompilationFailedException(String) in line 1866
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function OptCompilationFailedException(String,Throwable) in line 1867
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::OptParseException
   inherits from Exception
   function getNestedException() in line 1895
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function printStackTrace(PrintWriter) in line 1898
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
   function printStackTrace(PrintStream) in line 1907
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   function OptParseException() in line 1889
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function OptParseException(String) in line 1890
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function OptParseException(String,Throwable) in line 1891
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::OptHelpRequestedException
   inherits from edu::toronto::cs::util::Clapi::OptParseException
   function OptHelpRequestedException() in line 1912
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function OptHelpRequestedException(String) in line 1913
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function OptHelpRequestedException(String,Throwable) in line 1914
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::util::Clapi::OptShortHelpRequestedException
   inherits from edu::toronto::cs::util::Clapi::OptHelpRequestedException
   function OptShortHelpRequestedException() in line 1921
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function OptShortHelpRequestedException(String) in line 1922
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function OptShortHelpRequestedException(String,Throwable) in line 1923
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/ColorUtil.java
module edu::toronto::cs::util::ColorUtil
   function toHexString(Color) in line 7
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/DOMUtil.java
module edu::toronto::cs::util::DOMUtil
   function getDocumentBuilder() in line 42
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function parse(InputStream) defined in edu::toronto::cs::util::DOMUtil
   function parse(InputStream) in line 12
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function getDocumentBuilder() defined in edu::toronto::cs::util::DOMUtil
   function parse(String) in line 27
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function getDocumentBuilder() defined in edu::toronto::cs::util::DOMUtil
module edu::toronto::cs::util::DOMUtil::TrivialErrorHandler
   inherits from ErrorHandler
   function error(SAXParseException) in line 79
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function handleError(int,SAXParseException) defined in edu::toronto::cs::util::DOMUtil::TrivialErrorHandler
   function extractFileName(String) in line 120
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable EmptyString defined in edu::toronto::cs::util::StringUtil
   function fatalError(SAXParseException) in line 83
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function handleError(int,SAXParseException) defined in edu::toronto::cs::util::DOMUtil::TrivialErrorHandler
   function handleError(int,SAXParseException) in line 97
      23 lines of code
      2 parameters
      3 conditional paths
      uses function extractFileName(String) defined in edu::toronto::cs::util::DOMUtil::TrivialErrorHandler
   function warning(SAXParseException) in line 87
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses function handleError(int,SAXParseException) defined in edu::toronto::cs::util::DOMUtil::TrivialErrorHandler
   function TrivialErrorHandler() in line 69
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function TrivialErrorHandler(boolean) in line 74
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/EnumType.java
module edu::toronto::cs::util::EnumType
   function addEncoding(int[],Object) in line 107
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function bitSize() in line 29
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function logCeil(int) defined in edu::toronto::cs::util::EnumType
   function bitValue(Object) in line 59
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function encodeRecur(Object[],int,int,int[]) in line 113
      28 lines of code
      4 parameters
      3 conditional paths
      uses function addEncoding(int[],Object) defined in edu::toronto::cs::util::EnumType
   function enumValues(int[]) in line 66
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function enumValuesRecur(int[],int,Object[]) defined in edu::toronto::cs::util::EnumType
   function enumValuesRecur(int[],int,Object[]) in line 78
      26 lines of code
      3 parameters
      4 conditional paths
   function logCeil(int) in line 34
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
   function main(String[]) in line 170
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses function EnumType(Object[]) defined in edu::toronto::cs::util::EnumType
      uses variable i defined in sparsemv.m
      uses function bitValue(Object) defined in edu::toronto::cs::util::EnumType
      uses function enumValues(int[]) defined in edu::toronto::cs::util::EnumType
   function EnumType(Object[]) in line 18
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function bitSize() defined in edu::toronto::cs::util::EnumType
      uses function encodeRecur(Object[],int,int,int[]) defined in edu::toronto::cs::util::EnumType
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/FileNameFinisher.java
module edu::toronto::cs::util::FileNameFinisher
   inherits from edu::toronto::cs::util::Filter
   function process(Object) in line 16
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable o defined in visual.m
   function process(File) in line 25
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function process(Object) defined in edu::toronto::cs::util::FileNameFinisher
      uses variable f defined in mvproduct.m
   function process(String) in line 30
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
   function FileNameFinisher(String,String) in line 10
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/Filter.java
module edu::toronto::cs::util::Filter
   function process(Object) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/FinalUserActElement.java
module edu::toronto::cs::util::FinalUserActElement
   inherits from edu::toronto::cs::util::UserActElement
   abstract class
   function add(UserActChain) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function add(UserActChain) defined in edu::toronto::cs::util::UserActChain
   function FinalUserActElement(String) in line 9
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function FinalUserActElement(boolean,boolean) in line 14
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function FinalUserActElement() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/gui/DoubleClickActionAdapter.java
module edu::toronto::cs::util::gui::DoubleClickActionAdapter
   inherits from MouseAdapter
   function mouseClicked(MouseEvent) in line 14
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
   function DoubleClickActionAdapter(ActionListener) in line 9
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/gui/FilePanel.java
module edu::toronto::cs::util::gui::FilePanel
   inherits from JPanel
   function addActionListener(ActionListener) in line 125
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getDocument() in line 135
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFileGlueListener() in line 141
      31 lines of code
      0 parameters
      4 conditional paths
      uses function getFileName() defined in edu::toronto::cs::util::gui::FilePanel
   function getFileName() in line 120
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function removeActionListener(ActionListener) in line 130
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setFileName(String) in line 115
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function FilePanel(String,JFileChooser) in line 32
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function FilePanel(String,JFileChooser,String) in line 37
      protection public
      6 lines of code
      3 parameters
      4 conditional paths
      uses function addActionListener(ActionListener) defined in edu::toronto::cs::util::gui::FilePanel
      uses function getFileGlueListener() defined in edu::toronto::cs::util::gui::FilePanel
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/gui/GUIUtil.java
module edu::toronto::cs::util::gui::GUIUtil
   function alignAllX(Component   [],float) in line 17
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function alignAllY(Component   [],float) in line 28
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function setEnabled(Component,boolean) in line 40
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function GUIUtil() in line 12
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/gui/StandardFiller.java
module edu::toronto::cs::util::gui::StandardFiller
   function getSize() in line 53
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function makeEmptyBorder() in line 34
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function makeHstrut() in line 25
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function makeLongHstrut() in line 29
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function makeLongVstrut() in line 20
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function makeVstrut() in line 16
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function makeWideEmptyBorder() in line 41
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function setSize(int) in line 62
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function StandardFiller() in line 12
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/gui/StyledDocumentPrinter.java
module edu::toronto::cs::util::gui::StyledDocumentPrinter
   function bold(String) in line 75
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses variable s defined in visual.m
   function boldln(String) in line 79
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function bold(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses variable s defined in visual.m
   function initTextPaneStyles(JTextPane) in line 21
      21 lines of code
      1 parameters
      1 conditional paths
   function italic(String) in line 83
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses variable s defined in visual.m
   function italicln(String) in line 88
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function italic(String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses variable s defined in visual.m
   function print(String,String) in line 44
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses variable s defined in visual.m
   function print(String) in line 66
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses variable s defined in visual.m
   function println() in line 57
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
   function println(String,String) in line 62
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses variable s defined in visual.m
   function println(String) in line 70
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function print(String,String) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
      uses variable s defined in visual.m
   function StyledDocumentPrinter(JTextPane) in line 14
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function initTextPaneStyles(JTextPane) defined in edu::toronto::cs::util::gui::StyledDocumentPrinter
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/IdentityHashSet.java
module edu::toronto::cs::util::IdentityHashSet
   inherits from java::util::AbstractSet
   function add(E) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function clear() in line 60
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function contains(Object) in line 65
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function iterator() in line 71
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function remove(Object) in line 76
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function size() in line 81
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function IdentityHashSet() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function IdentityHashSet(Collection<?extends E >) in line 35
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function IdentityHashSet(int) in line 48
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/IndentPrintWriter.java
module edu::toronto::cs::util::IndentPrintWriter
   inherits from java::io::PrintWriter
   function eblock() in line 103
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function outdent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
   function getPrefix() in line 113
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function indent() in line 66
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable DEFAULT_PREFIX defined in edu::toronto::cs::util::IndentPrintWriter
   function indent(String) in line 76
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function main(String[]) in line 120
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses function IndentPrintWriter(OutputStream) defined in edu::toronto::cs::util::IndentPrintWriter
      uses function indent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses function sblock() defined in edu::toronto::cs::util::IndentPrintWriter
      uses function eblock() defined in edu::toronto::cs::util::IndentPrintWriter
   function outdent() in line 86
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
   function println(String) in line 92
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function sblock() in line 98
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses function indent() defined in edu::toronto::cs::util::IndentPrintWriter
   function IndentPrintWriter(OutputStream) in line 45
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function IndentPrintWriter(OutputStream,boolean) in line 49
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function IndentPrintWriter(Writer) in line 53
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function IndentPrintWriter(Writer,boolean) in line 57
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   variable DEFAULT_PREFIX in line 38
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/IntIterator.java
module edu::toronto::cs::util::IntIterator
   function hasNext() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function nextInt() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable EMPTY_INT_ITERATOR in line 16
      protection public
module edu::toronto::cs::util::IntIterator::RangeIterator
   inherits from edu::toronto::cs::util::IntIterator
   function hasNext() in line 45
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function nextInt() in line 50
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
      uses function hasNext() defined in edu::toronto::cs::util::IntIterator::RangeIterator
   function RangeIterator(int,int) in line 37
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/KEGClapi.java
module edu::toronto::cs::util::KEGClapi
   function main(String[]) in line 134
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable p defined in visual.m
      uses function parseOpts(String[]) defined in edu::toronto::cs::util::KEGClapi
      uses variable i defined in sparsemv.m
      uses variable k defined in sparsemv.m
   function parseOpts(String[]) in line 26
      protection public
      104 lines of code
      1 parameters
      1 conditional paths
   function KEGClapi() in line 14
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/Logger.java
module edu::toronto::cs::util::Logger
   function debug(Object) in line 50
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable log defined in edu::toronto::cs::util::Logger
   function debug(Object,Throwable) in line 62
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable log defined in edu::toronto::cs::util::Logger
   function debug(Throwable) in line 73
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function debug(Object) defined in edu::toronto::cs::util::Logger
   function error(Object) in line 149
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable log defined in edu::toronto::cs::util::Logger
   function error(Object,Throwable) in line 161
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable log defined in edu::toronto::cs::util::Logger
   function error(Throwable) in line 172
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function error(Object) defined in edu::toronto::cs::util::Logger
   function fatal(Object) in line 183
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable log defined in edu::toronto::cs::util::Logger
   function fatal(Object,Throwable) in line 195
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable log defined in edu::toronto::cs::util::Logger
   function fatal(Throwable) in line 206
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function fatal(Object) defined in edu::toronto::cs::util::Logger
   function info(Object) in line 83
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable log defined in edu::toronto::cs::util::Logger
   function info(Object,Throwable) in line 95
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable log defined in edu::toronto::cs::util::Logger
   function info(Throwable) in line 106
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function info(Object) defined in edu::toronto::cs::util::Logger
   function warn(Object) in line 116
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable log defined in edu::toronto::cs::util::Logger
   function warn(Object,Throwable) in line 128
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable log defined in edu::toronto::cs::util::Logger
   function warn(Throwable) in line 139
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function warn(Object) defined in edu::toronto::cs::util::Logger
   function Logger() in line 32
      1 lines of code
      0 parameters
      1 conditional paths
   function Logger(String) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable log defined in edu::toronto::cs::util::Logger
   variable log in line 27
   variable LOG_FILENAME in line 14
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/MarkedList.java
module edu::toronto::cs::util::MarkedList
   inherits from java::util::List
   function mark() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function restore() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function restore(int) in line 38
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/MarshaledInputStream.java
module edu::toronto::cs::util::MarshaledInputStream
   inherits from java::io::InputStream
   inherits from DataInput
   function available() in line 235
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function close() in line 240
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function mark(int) in line 245
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function markSupported() in line 249
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function read() in line 230
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function read(byte[]) in line 254
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function read(byte[],int,int) in line 258
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function readBoolean() in line 148
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function read() defined in edu::toronto::cs::util::MarshaledInputStream
   function readByte() in line 58
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function readByteArray() in line 199
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function readShort() defined in edu::toronto::cs::util::MarshaledInputStream
      uses variable i defined in sparsemv.m
      uses function readByte() defined in edu::toronto::cs::util::MarshaledInputStream
   function readChar() in line 92
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function read() defined in edu::toronto::cs::util::MarshaledInputStream
   function readDouble() in line 193
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function readFloat() in line 103
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses variable f defined in mvproduct.m
   function readFully(byte[]) in line 114
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function readFully(byte[],int,int) in line 126
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function readInt() in line 43
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
   function readIntArray() in line 207
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function readIntArrayFixed(int) defined in edu::toronto::cs::util::MarshaledInputStream
      uses function readShort() defined in edu::toronto::cs::util::MarshaledInputStream
   function readIntArrayFixed(int) in line 212
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function readInt() defined in edu::toronto::cs::util::MarshaledInputStream
   function readLine() in line 26
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses function readShort() defined in edu::toronto::cs::util::MarshaledInputStream
      uses variable i defined in sparsemv.m
      uses function readChar() defined in edu::toronto::cs::util::MarshaledInputStream
   function readLong() in line 182
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function readShort() in line 68
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses function read() defined in edu::toronto::cs::util::MarshaledInputStream
   function readString() in line 13
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function readLine() defined in edu::toronto::cs::util::MarshaledInputStream
   function readUnsignedByte() in line 159
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function read() defined in edu::toronto::cs::util::MarshaledInputStream
   function readUnsignedShort() in line 170
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function read() defined in edu::toronto::cs::util::MarshaledInputStream
   function readUTF() in line 81
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function reset() in line 262
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function skip(long) in line 266
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function skipBytes(int) in line 138
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function MarshaledInputStream(InputStream) in line 8
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/MarshaledOutputStream.java
module edu::toronto::cs::util::MarshaledOutputStream
   inherits from OutputStream
   inherits from DataOutput
   function close() in line 191
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function flush() in line 187
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function write(int) in line 196
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function write(byte[]) in line 200
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function write(byte[],int,int) in line 204
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function writeBoolean(boolean) in line 109
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function writeByte(int) defined in edu::toronto::cs::util::MarshaledOutputStream
   function writeByte(int) in line 46
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function write(int) defined in edu::toronto::cs::util::MarshaledOutputStream
   function writeByteArray(byte[]) in line 154
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function writeShort(int) defined in edu::toronto::cs::util::MarshaledOutputStream
      uses variable i defined in sparsemv.m
      uses function writeByte(int) defined in edu::toronto::cs::util::MarshaledOutputStream
   function writeBytes(String) in line 73
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function writeShort(int) defined in edu::toronto::cs::util::MarshaledOutputStream
      uses variable s defined in visual.m
      uses variable i defined in sparsemv.m
      uses function writeChar(int) defined in edu::toronto::cs::util::MarshaledOutputStream
   function writeChar(int) in line 88
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function writeByte(int) defined in edu::toronto::cs::util::MarshaledOutputStream
      uses variable v defined in visual.m
   function writeCharArrayFixed(char[]) in line 175
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function writeChar(int) defined in edu::toronto::cs::util::MarshaledOutputStream
   function writeChars(String) in line 148
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function writeDouble(double) in line 138
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function writeFloat(float) in line 99
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function writeInt(int) in line 22
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function writeByte(int) defined in edu::toronto::cs::util::MarshaledOutputStream
      uses variable v defined in visual.m
   function writeIntArray(int[]) in line 162
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function writeShort(int) defined in edu::toronto::cs::util::MarshaledOutputStream
      uses function writeIntArrayFixed(int[]) defined in edu::toronto::cs::util::MarshaledOutputStream
   function writeIntArrayFixed(int[]) in line 168
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function writeInt(int) defined in edu::toronto::cs::util::MarshaledOutputStream
   function writeLong(long) in line 120
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function writeByte(int) defined in edu::toronto::cs::util::MarshaledOutputStream
      uses variable v defined in visual.m
   function writeShort(int) in line 56
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function writeByte(int) defined in edu::toronto::cs::util::MarshaledOutputStream
      uses variable v defined in visual.m
   function writeString(String) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function writeBytes(String) defined in edu::toronto::cs::util::MarshaledOutputStream
      uses variable s defined in visual.m
   function writeUTF(String) in line 36
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function MarshaledOutputStream(OutputStream) in line 10
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/MarshalUtil.java
module edu::toronto::cs::util::MarshalUtil
   function marshalByte(byte,OutputStream) in line 11
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/McClapi.java
module edu::toronto::cs::util::McClapi
   function main(String[]) in line 177
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable p defined in visual.m
      uses function parseOpts(String[]) defined in edu::toronto::cs::util::McClapi
      uses variable i defined in sparsemv.m
      uses variable k defined in sparsemv.m
   function parseOpts(String[]) in line 36
      protection public
      137 lines of code
      1 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
   function McClapi() in line 24
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/NamingScheme.java
module edu::toronto::cs::util::NamingScheme
   abstract class
   function getIterator() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getName(Object) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function whatMapWeUse() in line 85
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::util::NamingScheme::ToupleNumberingScheme
   inherits from edu::toronto::cs::util::NamingScheme
   function getIterator() in line 21
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
   function getIterator(Set,List,Object) in line 35
      16 lines of code
      3 parameters
      3 conditional paths
      uses variable o defined in visual.m
      uses function getIterator() defined in edu::toronto::cs::util::NamingScheme::ToupleNumberingScheme
   function getName(Object) in line 52
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function getName(List) in line 59
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getName(Object) defined in edu::toronto::cs::util::NamingScheme::ToupleNumberingScheme
   function getName(Object,List) in line 64
      17 lines of code
      2 parameters
      4 conditional paths
      uses variable o defined in visual.m
      uses function whatMapWeUse() defined in edu::toronto::cs::util::NamingScheme
      uses function getName(Object) defined in edu::toronto::cs::util::NamingScheme::ToupleNumberingScheme
   function ToupleNumberingScheme() in line 15
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function whatMapWeUse() defined in edu::toronto::cs::util::NamingScheme
module edu::toronto::cs::util::NamingScheme::QuickNumberingScheme
   inherits from edu::toronto::cs::util::NamingScheme
   function getIterator() in line 100
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function getName(Object) in line 107
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
   function QuickNumberingScheme() in line 95
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/NaryTree.java
module edu::toronto::cs::util::NaryTree
   function existChild(Object) in line 114
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable children defined in edu::toronto::cs::util::NaryTree
   function getChild(Object) in line 80
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable children defined in edu::toronto::cs::util::NaryTree
   function getChildren() in line 72
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable children defined in edu::toronto::cs::util::NaryTree
   function getData() in line 53
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable data defined in edu::toronto::cs::util::NaryTree
   function getNumChildren() in line 61
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable children defined in edu::toronto::cs::util::NaryTree
   function setChild(Object,NaryTree) in line 96
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable children defined in edu::toronto::cs::util::NaryTree
   function setChildren(Map) in line 106
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable children defined in edu::toronto::cs::util::NaryTree
   function setData(Object) in line 88
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable data defined in edu::toronto::cs::util::NaryTree
      uses variable d defined in crunch2parms.m
   function NaryTree() in line 17
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable data defined in edu::toronto::cs::util::NaryTree
      uses variable children defined in edu::toronto::cs::util::NaryTree
   function NaryTree(Object) in line 29
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable data defined in edu::toronto::cs::util::NaryTree
      uses variable d defined in crunch2parms.m
      uses variable children defined in edu::toronto::cs::util::NaryTree
   function NaryTree(Object,Map) in line 42
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable data defined in edu::toronto::cs::util::NaryTree
      uses variable d defined in crunch2parms.m
      uses variable children defined in edu::toronto::cs::util::NaryTree
   variable children in line 12
   variable data in line 11
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/NestedException.java
module edu::toronto::cs::util::NestedException
   inherits from Exception
   function getMessage() in line 33
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function printStackTrace() in line 47
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function printStackTrace(PrintStream) in line 52
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
   function printStackTrace(PrintWriter) in line 64
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
   function toString() in line 40
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function NestedException(String,Exception) in line 14
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function NestedException(Exception) in line 20
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/NestedRuntimeException.java
module edu::toronto::cs::util::NestedRuntimeException
   inherits from RuntimeException
   function getMessage() in line 33
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function main(String[]) in line 78
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function NestedRuntimeException(String,Exception) defined in edu::toronto::cs::util::NestedRuntimeException
      uses function toString() defined in edu::toronto::cs::util::NestedRuntimeException
      uses function getMessage() defined in edu::toronto::cs::util::NestedRuntimeException
      uses function printStackTrace() defined in edu::toronto::cs::util::NestedRuntimeException
   function printStackTrace() in line 47
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function printStackTrace(PrintStream) in line 52
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
   function printStackTrace(PrintWriter) in line 64
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
   function toString() in line 40
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function NestedRuntimeException(String,Exception) in line 14
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function NestedRuntimeException(Exception) in line 20
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/Primes.java
module edu::toronto::cs::util::Primes
   function getPrime(int) in line 9
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable primes defined in edu::toronto::cs::util::Primes
      uses variable i defined in sparsemv.m
   variable primes in line 7
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/ReflectUtil.java
module edu::toronto::cs::util::ReflectUtil
   function callStaticMethod(Class,String,Class[],Object[]) in line 11
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/SoftHashMap.java
module edu::toronto::cs::util::SoftHashMap
   inherits from java::util::HashMap
   inherits from java::util::Map
   function clear() in line 827
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function containsKey(Object) in line 749
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function internalGet(Object) defined in edu::toronto::cs::util::SoftHashMap
   function containsValue(Object) in line 839
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function entrySet() in line 818
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable theEntrySet defined in edu::toronto::cs::util::SoftHashMap
   function get(Object) in line 761
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function internalGet(Object) defined in edu::toronto::cs::util::SoftHashMap
   function hash(Object) in line 576
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable queue defined in edu::toronto::cs::util::SoftHashMap
   function internalAdd(Object,Object) in line 673
      10 lines of code
      2 parameters
      5 conditional paths
      uses function hash(Object) defined in edu::toronto::cs::util::SoftHashMap
      uses variable queue defined in edu::toronto::cs::util::SoftHashMap
      uses function size() defined in edu::toronto::cs::util::SoftHashMap::SoftEntrySet
   function internalGet(Object) in line 651
      16 lines of code
      1 parameters
      4 conditional paths
      uses function hash(Object) defined in edu::toronto::cs::util::SoftHashMap
   function isEmpty() in line 736
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function size() defined in edu::toronto::cs::util::SoftHashMap::SoftEntrySet
   function keySet() in line 853
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function put(Object,Object) in line 776
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses function internalGet(Object) defined in edu::toronto::cs::util::SoftHashMap
      uses function size() defined in edu::toronto::cs::util::SoftHashMap::SoftEntrySet
      uses variable threshold defined in edu::toronto::cs::util::SoftHashMap
      uses function rehash() defined in edu::toronto::cs::util::SoftHashMap
      uses function internalAdd(Object,Object) defined in edu::toronto::cs::util::SoftHashMap
   function putAll(Map) in line 864
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function rehash() in line 607
      37 lines of code
      0 parameters
      4 conditional paths
      uses variable threshold defined in edu::toronto::cs::util::SoftHashMap
      uses variable loadFactor defined in edu::toronto::cs::util::SoftHashMap
      uses variable i defined in sparsemv.m
      uses function size() defined in edu::toronto::cs::util::SoftHashMap::SoftEntrySet
      uses function hash(Object) defined in edu::toronto::cs::util::SoftHashMap
   function remove(Object) in line 798
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function internalGet(Object) defined in edu::toronto::cs::util::SoftHashMap
   function size() in line 725
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function size() defined in edu::toronto::cs::util::SoftHashMap::SoftEntrySet
   function values() in line 877
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function SoftHashMap() in line 521
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable DEFAULT_CAPACITY defined in edu::toronto::cs::util::SoftHashMap
      uses variable DEFAULT_LOAD_FACTOR defined in edu::toronto::cs::util::SoftHashMap
   function SoftHashMap(int) in line 532
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable DEFAULT_LOAD_FACTOR defined in edu::toronto::cs::util::SoftHashMap
   function SoftHashMap(int,float) in line 545
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable loadFactor defined in edu::toronto::cs::util::SoftHashMap
      uses variable threshold defined in edu::toronto::cs::util::SoftHashMap
      uses variable theEntrySet defined in edu::toronto::cs::util::SoftHashMap
      uses variable queue defined in edu::toronto::cs::util::SoftHashMap
   function SoftHashMap(Map) in line 565
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable DEFAULT_LOAD_FACTOR defined in edu::toronto::cs::util::SoftHashMap
      uses function putAll(Map) defined in edu::toronto::cs::util::SoftHashMap
   variable DEFAULT_CAPACITY in line 98
   variable DEFAULT_LOAD_FACTOR in line 103
   variable loadFactor in line 151
   variable queue in line 138
   variable theEntrySet in line 509
   variable threshold in line 158
module edu::toronto::cs::util::SoftHashMap::SoftEntrySet
   inherits from java::util::AbstractSet
   function iterator() in line 199
      protection public
      143 lines of code
      0 parameters
      9 conditional paths
   function size() in line 189
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::util::SoftHashMap::SoftBucket
   inherits from java::lang::ref::SoftReference
   function SoftBucket(Object,ReferenceQueue,Object,int) in line 392
      protection public
      7 lines of code
      4 parameters
      3 conditional paths
      uses variable queue defined in edu::toronto::cs::util::SoftHashMap
      uses variable o defined in visual.m
module edu::toronto::cs::util::SoftHashMap::SoftBucket::SoftEntry
   inherits from Map::Entry
   function equals(Object) in line 475
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function getBucket() in line 425
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getKey() in line 434
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 443
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 465
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setValue(Object) in line 454
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 486
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function SoftEntry(Object) in line 416
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/SoftSoftHashMap.java
module edu::toronto::cs::util::SoftSoftHashMap
   inherits from edu::toronto::cs::util::SoftHashMap
   function get(Object) in line 15
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
   function put(Object,Object) in line 67
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses function SoftValue(Object,ReferenceQueue) defined in edu::toronto::cs::util::SoftSoftHashMap::SoftValue
      uses variable queue defined in edu::toronto::cs::util::SoftSoftHashMap
   variable queue in line 12
module edu::toronto::cs::util::SoftSoftHashMap::SoftValue
   inherits from java::lang::ref::SoftReference
   function SoftValue(Object,ReferenceQueue) in line 43
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable k defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/StateName.java
module edu::toronto::cs::util::StateName
   function getStateName(Object) in line 43
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function stateNameGenerator(Object) defined in edu::toronto::cs::util::StateName
      uses function StateName() defined in edu::toronto::cs::util::StateName
   function stateName(Object) in line 54
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function StateName() defined in edu::toronto::cs::util::StateName
      uses function getStateName(Object) defined in edu::toronto::cs::util::StateName
   function stateNameGenerator(Object) in line 33
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function StateName(String) in line 20
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function StateName() in line 26
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/StopWatch.java
module edu::toronto::cs::util::StopWatch
   function getTimeElapsed() in line 62
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
   function pause() in line 36
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
   function reset() in line 25
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function resume() in line 50
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
   function stop() in line 41
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function toString() in line 73
      protection public
      14 lines of code
      0 parameters
      3 conditional paths
      uses function getTimeElapsed() defined in edu::toronto::cs::util::StopWatch
      uses variable s defined in visual.m
   function StopWatch() in line 17
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in edu::toronto::cs::util::StopWatch
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/StringMacroManager.java
module edu::toronto::cs::util::StringMacroManager
   function compressMacro(String) in line 55
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses function getNumChildren() defined in edu::toronto::cs::util::NaryTree
      uses function expand(String,NaryTree) defined in edu::toronto::cs::util::StringMacroManager
   function defineMacro(String,String) in line 29
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function record(String,String,NaryTree) defined in edu::toronto::cs::util::StringMacroManager
   function expand(String,NaryTree) in line 101
      57 lines of code
      2 parameters
      8 conditional paths
      uses function existChild(Object) defined in edu::toronto::cs::util::NaryTree
      uses function getChild(Object) defined in edu::toronto::cs::util::NaryTree
      uses function getData() defined in edu::toronto::cs::util::NaryTree
   function expandMacro(String) in line 44
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses function getNumChildren() defined in edu::toronto::cs::util::NaryTree
      uses function expand(String,NaryTree) defined in edu::toronto::cs::util::StringMacroManager
   function record(String,String,NaryTree) in line 64
      33 lines of code
      3 parameters
      4 conditional paths
      uses function existChild(Object) defined in edu::toronto::cs::util::NaryTree
      uses function getChild(Object) defined in edu::toronto::cs::util::NaryTree
      uses function setChild(Object,NaryTree) defined in edu::toronto::cs::util::NaryTree
      uses function setData(Object) defined in edu::toronto::cs::util::NaryTree
   function StringMacroManager() in line 18
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/StringUtil.java
module edu::toronto::cs::util::StringUtil
   function blockText(String,int,int) in line 56
      protection public
      15 lines of code
      3 parameters
      3 conditional paths
      uses variable s defined in visual.m
      uses function getTokenIterator(StringTokenizer) defined in edu::toronto::cs::util::StringUtil
      uses variable i defined in sparsemv.m
      uses function makeLine(ListIterator,int) defined in edu::toronto::cs::util::StringUtil
      uses function maxLength(String,int,String) defined in edu::toronto::cs::util::StringUtil
      uses function restOfIterator(Iterator) defined in edu::toronto::cs::util::StringUtil
   function contains(String,String,boolean) in line 164
      protection public
      8 lines of code
      3 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function doEscapes(String) in line 136
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function translate(Map,String) defined in edu::toronto::cs::util::StringUtil
      uses variable s defined in visual.m
   function enumerate(String   []) in line 44
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable s defined in visual.m
   function getTokenIterator(StringTokenizer) in line 72
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function main(String) in line 210
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function quote(String) defined in edu::toronto::cs::util::StringUtil
      uses function doEscapes(String) defined in edu::toronto::cs::util::StringUtil
   function makeLine(ListIterator,int) in line 80
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
   function maxLength(String,int,String) in line 33
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function length() defined in sparser.m
   function ordinate(int,String,Map) in line 116
      protection public
      13 lines of code
      3 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
      uses variable s defined in visual.m
      uses variable terminals defined in edu::toronto::cs::util::StringUtil
   function ordinate(int,String) in line 130
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function ordinate(int,String,Map) defined in edu::toronto::cs::util::StringUtil
      uses variable i defined in sparsemv.m
      uses variable ordinals defined in edu::toronto::cs::util::StringUtil
   function pad(int,String,char) in line 199
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function length() defined in sparser.m
      uses variable s defined in visual.m
   function quote(String) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function quote(StringBuffer) in line 109
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function replace(String,String,String,boolean) in line 173
      protection public
      21 lines of code
      4 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
   function restOfIterator(Iterator) in line 97
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
   function translate(Map,String) in line 145
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
   variable EmptyString in line 26
      protection public
   variable ordinals in line 7
      protection public
   variable terminals in line 8
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/SystemOutWrapper.java
module edu::toronto::cs::util::SystemOutWrapper
   variable writer in line 13
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/TeeBufferedReader.java
module edu::toronto::cs::util::TeeBufferedReader
   inherits from BufferedReader
   function close() in line 183
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function init(Writer,String) in line 98
      5 lines of code
      2 parameters
      1 conditional paths
   function main(String[]) in line 189
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses function TeeBufferedReader(Reader,Writer) defined in edu::toronto::cs::util::TeeBufferedReader
      uses function read() defined in edu::toronto::cs::util::TeeBufferedReader
   function prefixOn() in line 137
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function read() in line 150
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function write(int) defined in edu::toronto::cs::util::TeeBufferedReader
   function readLine() in line 165
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses function read() defined in edu::toronto::cs::util::TeeBufferedReader
   function write(int) in line 113
      19 lines of code
      1 parameters
      4 conditional paths
   function TeeBufferedReader(Reader,Writer) in line 43
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function init(Writer,String) defined in edu::toronto::cs::util::TeeBufferedReader
   function TeeBufferedReader(Reader) in line 57
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function TeeBufferedReader(Reader,int) in line 71
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function TeeBufferedReader(Reader,Writer,String) in line 87
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function init(Writer,String) defined in edu::toronto::cs::util::TeeBufferedReader
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/TextUtil.java
module edu::toronto::cs::util::TextUtil
   function eMailPattern() in line 10
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 45
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses variable s defined in visual.m
      uses function toUnicodeString(String) defined in edu::toronto::cs::util::TextUtil
      uses function eMailPattern() defined in edu::toronto::cs::util::TextUtil
   function toUnicodeString(String) in line 22
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses variable s defined in visual.m
      uses variable i defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/TreeModelAdapter.java
module edu::toronto::cs::util::TreeModelAdapter
   inherits from TreeModelListener
   function treeNodesChanged(TreeModelEvent) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function treeNodesInserted(TreeModelEvent) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function treeNodesRemoved(TreeModelEvent) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function treeStructureChanged(TreeModelEvent) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TreeModelAdapter() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/UniformChaosIterator.java
module edu::toronto::cs::util::UniformChaosIterator
   inherits from edu::toronto::cs::util::ChaosIterator
   function nextInt() in line 13
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function UniformChaosIterator(int[]) in line 7
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/UserAct.java
module edu::toronto::cs::util::UserAct
   function getActionEvent() in line 28
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getData(Object) in line 58
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getExpress() in line 43
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getName() in line 33
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isExpress() in line 48
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setData(Object,Object) in line 53
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setExpress() in line 38
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function UserAct(String,int,ActionEvent) in line 15
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
   function UserAct(String,boolean,ActionEvent) in line 23
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/UserActChain.java
module edu::toronto::cs::util::UserActChain
   inherits from Action
   function add(UserActChain) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function confirm() in line 15
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function confirm(UserAct) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function execute(UserAct) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get(int) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get(int,int) in line 23
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function immanent() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function length() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function length(int) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function reset() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function stage() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function stage(int) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/UserActElement.java
module edu::toronto::cs::util::UserActElement
   inherits from AbstractAction
   inherits from edu::toronto::cs::util::UserActChain
   abstract class
   function actionPerformed(ActionEvent) in line 154
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function confirm() defined in edu::toronto::cs::util::UserActElement
      uses function execute(UserAct) defined in edu::toronto::cs::util::UserActElement
      uses function errorHandle(UserAct) defined in edu::toronto::cs::util::UserActElement
   function add(UserActChain) in line 42
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function add(UserActChain) defined in edu::toronto::cs::util::UserActChain
   function confirm(UserAct) in line 58
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses function doConfirm(UserAct) defined in edu::toronto::cs::util::UserActElement
      uses function doExecute(UserAct) defined in edu::toronto::cs::util::UserActElement
      uses function confirm() defined in edu::toronto::cs::util::UserActChain
   function confirm() in line 73
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function doConfirm(UserAct) defined in edu::toronto::cs::util::UserActElement
   function doConfirm(UserAct) in line 78
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function doExecute(UserAct) in line 97
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function errorHandle(UserAct) in line 167
      3 lines of code
      1 parameters
      1 conditional paths
   function execute(UserAct) in line 80
      protection public
      16 lines of code
      1 parameters
      5 conditional paths
      uses function execute(UserAct) defined in edu::toronto::cs::util::UserActChain
      uses function doExecute(UserAct) defined in edu::toronto::cs::util::UserActElement
   function get(int) in line 102
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function get(int,int) in line 107
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function get(int) defined in edu::toronto::cs::util::UserActChain
   function getName() in line 149
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function immanent() in line 144
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function length() in line 114
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function length(int) in line 119
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function length() defined in edu::toronto::cs::util::UserActChain
      uses variable i defined in sparsemv.m
   function reset() in line 51
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function reset() defined in edu::toronto::cs::util::UserActChain
   function stage() in line 126
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function stage(int) in line 131
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function stage() defined in edu::toronto::cs::util::UserActChain
   function UserActElement(String) in line 19
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function UserActElement(String,boolean,boolean) in line 25
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
   function UserActElement(boolean,boolean) in line 32
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function UserActElement() in line 37
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/UserActionAdapter.java
module edu::toronto::cs::util::UserActionAdapter
   inherits from edu::toronto::cs::util::UserActElement
   function doConfirm(UserAct) in line 26
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function getActionEvent() defined in edu::toronto::cs::util::UserAct
   function doExecute(UserAct) in line 35
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function getActionEvent() defined in edu::toronto::cs::util::UserAct
   function UserActionAdapter(Action,boolean,boolean) in line 15
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/userprompt/NiceReader.java
module edu::toronto::cs::util::userprompt::NiceReader
   function readInteger() in line 55
      protection public
      15 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function readLine() in line 34
      protection public
      15 lines of code
      0 parameters
      2 conditional paths
   function NiceReader(Reader) in line 20
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function NiceReader(InputStream) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/userprompt/UserPrompt.java
module edu::toronto::cs::util::userprompt::UserPrompt
   function pickOne(Collection) in line 25
      protection public
      30 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
      uses function readInteger() defined in edu::toronto::cs::util::userprompt::NiceReader
   function pickSome(Collection) in line 71
      protection public
      42 lines of code
      1 parameters
      7 conditional paths
      uses variable i defined in sparsemv.m
      uses function readInteger() defined in edu::toronto::cs::util::userprompt::NiceReader
   function waitPrompt() in line 56
      protection public
      13 lines of code
      0 parameters
      2 conditional paths
      uses variable s defined in visual.m
      uses function readLine() defined in edu::toronto::cs::util::userprompt::NiceReader
   function UserPrompt() in line 16
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/WeakWeakHashMap.java
module edu::toronto::cs::util::WeakWeakHashMap
   inherits from WeakHashMap
   function clear() in line 72
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable hash defined in edu::toronto::cs::util::WeakWeakHashMap
   function entrySet() in line 82
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function get(Object) in line 14
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses variable hash defined in edu::toronto::cs::util::WeakWeakHashMap
   function put(Object,Object) in line 62
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable hash defined in edu::toronto::cs::util::WeakWeakHashMap
      uses function WeakValue(Object,Object,ReferenceQueue) defined in edu::toronto::cs::util::WeakWeakHashMap::WeakValue
      uses variable queue defined in edu::toronto::cs::util::WeakWeakHashMap
   function remove(Object) in line 67
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable hash defined in edu::toronto::cs::util::WeakWeakHashMap
   function size() in line 77
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable hash defined in edu::toronto::cs::util::WeakWeakHashMap
   variable hash in line 9
   variable queue in line 11
module edu::toronto::cs::util::WeakWeakHashMap::WeakValue
   inherits from WeakReference
   function WeakValue(Object,Object,ReferenceQueue) in line 44
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable k defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/util/XPreferences.java
module edu::toronto::cs::util::XPreferences
   function getGroupName() in line 17
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getHelp() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getPreferenceEditor() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function savePrefSettings() in line 39
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function updateComponents() in line 33
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/xkripke/XKripke.java
module edu::toronto::cs::xkripke::XKripke
   function addState(XKripkeState) in line 195
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::xkripke::XKripke::XKripkeState
      uses function setXKripke(XKripke) defined in edu::toronto::cs::xkripke::XKripke::XKripkeState
   function addTransition(String,String,String) in line 182
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function getState(String) defined in edu::toronto::cs::xkripke::XKripke
   function addTransition(XKripkeTransition) in line 190
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function buildSymbolTable() in line 71
      8 lines of code
      0 parameters
      2 conditional paths
      uses function getPropNamesAsSet() defined in edu::toronto::cs::xkripke::XKripke
      uses function declarePropositional(String) defined in edu::toronto::cs::smv::VariableTable
   function getAlgebra() in line 54
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getInitialStates() in line 106
      protection public
      20 lines of code
      0 parameters
      4 conditional paths
      uses function getStates() defined in edu::toronto::cs::xkripke::XKripke
      uses function isInitial() defined in edu::toronto::cs::xkripke::XKripke::XKripkeState
   function getNumVars() in line 101
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getPropNames() defined in edu::toronto::cs::xkripke::XKripke
   function getPropNames() in line 83
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function getPropNames() defined in edu::toronto::cs::xkripke::XKripke::XKripkeState
   function getPropNamesAsSet() in line 94
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function getPropNamesAsSet() defined in edu::toronto::cs::xkripke::XKripke::XKripkeState
   function getState(String) in line 163
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getStates() in line 154
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSymbolTable() in line 63
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function buildSymbolTable() defined in edu::toronto::cs::xkripke::XKripke
   function getTransition(XKripkeState,XKripkeState) in line 168
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function getTransitions() in line 173
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function labeliseStates() in line 127
      protection public
      25 lines of code
      0 parameters
      4 conditional paths
      uses function getName() defined in edu::toronto::cs::xkripke::XKripke::XKripkeState
      uses function debug(Object) defined in edu::toronto::cs::util::Logger
      uses function addProp(XKripkeProp) defined in edu::toronto::cs::xkripke::XKripke::XKripkeState
      uses variable top defined in algebra
      uses variable bot defined in algebra
   function setAlgebra(IAlgebra) in line 58
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setStates(Map) in line 158
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setTransitions(Set) in line 177
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function XKripke() in line 46
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::xkripke::XKripke::XKripkeTransition
   function getDst() in line 229
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSrc() in line 221
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 241
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setDst(XKripkeState) in line 233
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setSrc(XKripkeState) in line 225
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setValue(String) in line 237
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toString() in line 246
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function getSrc() defined in edu::toronto::cs::xkripke::XKripke::XKripkeTransition
      uses function getName() defined in edu::toronto::cs::xkripke::XKripke::XKripkeState
      uses function getValue() defined in edu::toronto::cs::xkripke::XKripke::XKripkeTransition
      uses function getDst() defined in edu::toronto::cs::xkripke::XKripke::XKripkeTransition
   function XKripkeTransition(XKripkeState,XKripkeState,String) in line 208
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function debug(Object) defined in edu::toronto::cs::util::Logger
      uses function getName() defined in edu::toronto::cs::xkripke::XKripke::XKripkeState
      uses function setSrc(XKripkeState) defined in edu::toronto::cs::xkripke::XKripke::XKripkeTransition
      uses function setDst(XKripkeState) defined in edu::toronto::cs::xkripke::XKripke::XKripkeTransition
      uses function setValue(String) defined in edu::toronto::cs::xkripke::XKripke::XKripkeTransition
module edu::toronto::cs::xkripke::XKripke::XKripkeState
   function addProp(XKripkeProp) in line 332
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::xkripke::XKripke::XKripkeProp
   function getName() in line 297
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getProp(String) in line 336
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getPropNames() in line 314
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function getPropNamesAsSet() in line 322
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getProps() in line 305
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getXKripke() in line 282
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isInitial() in line 288
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setInitial(boolean) in line 292
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setName(String) in line 301
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setProps(Map) in line 327
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setXKripke(XKripke) in line 277
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 341
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
   function XKripkeState(String) in line 263
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function debug(Object) defined in edu::toronto::cs::util::Logger
   function XKripkeState(String,Map) in line 271
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::xkripke::XKripke::XKripkeProp
   function getName() in line 363
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 371
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setName(String) in line 367
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setValue(String) in line 375
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toString() in line 380
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getValue() defined in edu::toronto::cs::xkripke::XKripke::XKripkeTransition
   function XKripkeProp(String,String) in line 357
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function setValue(String) defined in edu::toronto::cs::xkripke::XKripke::XKripkeTransition
module edu::toronto::cs::xkripke::XKripke::XKripkeVisitor
   function visitXKripke(XKripkeState) in line 389
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/xkripke/XKripkeFactory.java
module edu::toronto::cs::xkripke::XKripkeFactory
   function buildXKripke(Document) in line 75
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
   function buildXKripke(Element) in line 85
      protection public
      17 lines of code
      1 parameters
      11 conditional paths
      uses function setAlgebra(IAlgebra) defined in edu::toronto::cs::xkripke::XKripke
      uses variable XBEL_NS defined in edu::toronto::cs::xkripke::XKripkeFactory
      uses variable i defined in sparsemv.m
      uses function addState(XKripkeState) defined in edu::toronto::cs::xkripke::XKripke
      uses function addTransition(String,String,String) defined in edu::toronto::cs::xkripke::XKripke
   function main(String[]) in line 21
      protection public
      30 lines of code
      1 parameters
      3 conditional paths
      uses function parse(String   []) defined in edu::toronto::cs::xkripke::XKripkeFactory
      uses function getStates() defined in edu::toronto::cs::xkripke::XKripke
      uses function getTransitions() defined in edu::toronto::cs::xkripke::XKripke
   function parse(String   []) in line 56
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function parse(String) in line 69
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function buildXKripke(Document) defined in edu::toronto::cs::xkripke::XKripkeFactory
   variable XBEL_NS in line 19
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/xkripke/XKripkeMvSetBuilder.java
module edu::toronto::cs::xkripke::XKripkeMvSetBuilder
   function buildMvSet(MvSetFactory,XKripke) in line 25
      protection public
      18 lines of code
      2 parameters
      2 conditional paths
      uses function getAlgebra() defined in edu::toronto::cs::xkripke::XKripke
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable top defined in algebra
      uses function getSymbolTable() defined in edu::toronto::cs::xkripke::XKripke
      uses function setMvSetFactory(MvSetFactory) defined in edu::toronto::cs::smv::VariableTable
      uses function getTransitions() defined in edu::toronto::cs::xkripke::XKripke
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function buildTransition(MvSetFactory,IAlgebra,XKripkeTransition,VariableTable) defined in edu::toronto::cs::xkripke::XKripkeMvSetBuilder
   function buildTransition(MvSetFactory,IAlgebra,XKripkeTransition,VariableTable) in line 44
      protection public
      32 lines of code
      4 parameters
      3 conditional paths
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getByName(String) defined in edu::toronto::cs::smv::VariableTable
      uses function eq(Variable) defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function getNext() defined in edu::toronto::cs::smv::VariableTable::Variable
   function main(String[]) in line 78
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function getAlgebra() defined in edu::toronto::cs::xkripke::XKripke
      uses function getSymbolTable() defined in edu::toronto::cs::xkripke::XKripke
      uses function getNumDDVars() defined in edu::toronto::cs::smv::VariableTable
      uses function buildMvSet(MvSetFactory,XKripke) defined in edu::toronto::cs::xkripke::XKripkeMvSetBuilder
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/xkripke/XMLXKripkeModelCompiler.java
module edu::toronto::cs::xkripke::XMLXKripkeModelCompiler
   inherits from edu::toronto::cs::modelchecker::ModelCompiler
   function buildState(MvSetFactory,XKripke,XKripkeState) in line 148
      19 lines of code
      3 parameters
      2 conditional paths
      uses function getAlgebra() defined in edu::toronto::cs::xkripke::XKripke
      uses function getSymbolTable() defined in edu::toronto::cs::xkripke::XKripke
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable top defined in algebra
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getByName(String) defined in edu::toronto::cs::smv::VariableTable
      uses function eq(Variable) defined in edu::toronto::cs::smv::VariableTable::Variable
   function buildTransition(MvSetFactory,IAlgebra,XKripkeTransition,VariableTable) in line 101
      33 lines of code
      4 parameters
      3 conditional paths
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getByName(String) defined in edu::toronto::cs::smv::VariableTable
      uses function eq(Variable) defined in edu::toronto::cs::smv::VariableTable::Variable
      uses function getNext() defined in edu::toronto::cs::smv::VariableTable::Variable
   function compile() in line 38
      protection public
      39 lines of code
      0 parameters
      2 conditional paths
      uses function getAlgebra() defined in edu::toronto::cs::xkripke::XKripke
      uses function getSymbolTable() defined in edu::toronto::cs::xkripke::XKripke
      uses function getNumDDVars() defined in edu::toronto::cs::smv::VariableTable
      uses function setMvSetFactory(MvSetFactory) defined in edu::toronto::cs::smv::VariableTable
      uses function computeTrans(MvSetFactory,XKripke) defined in edu::toronto::cs::xkripke::XMLXKripkeModelCompiler
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function computeInit(MvSetFactory,XKripke) defined in edu::toronto::cs::xkripke::XMLXKripkeModelCompiler
      uses macro definition assert defined in util.h
   function computeInit(MvSetFactory,XKripke) in line 135
      12 lines of code
      2 parameters
      2 conditional paths
      uses function getInitialStates() defined in edu::toronto::cs::xkripke::XKripke
      uses function getAlgebra() defined in edu::toronto::cs::xkripke::XKripke
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable bot defined in algebra
      uses variable i defined in sparsemv.m
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function buildState(MvSetFactory,XKripke,XKripkeState) defined in edu::toronto::cs::xkripke::XMLXKripkeModelCompiler
      uses function size() defined in edu::toronto::cs::mvset::MvSet
   function computeTrans(MvSetFactory,XKripke) in line 78
      22 lines of code
      2 parameters
      2 conditional paths
      uses function getAlgebra() defined in edu::toronto::cs::xkripke::XKripke
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable bot defined in algebra
      uses function getSymbolTable() defined in edu::toronto::cs::xkripke::XKripke
      uses function getTransitions() defined in edu::toronto::cs::xkripke::XKripke
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function buildTransition(MvSetFactory,IAlgebra,XKripkeTransition,VariableTable) defined in edu::toronto::cs::xkripke::XMLXKripkeModelCompiler
      uses macro definition assert defined in util.h
      uses function size() defined in edu::toronto::cs::mvset::MvSet
   function getXmlFile() in line 32
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setXmlFile(File) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function XMLXKripkeModelCompiler() in line 24
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/AbsPatternBacktracker.java
module edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker
   function alreadyPatternAbstracting(String) in line 212
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
   function backtrackOne() in line 246
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function canBacktrack() in line 261
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function currentPreconds() in line 267
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function currentPrecondsIterator() in line 272
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTries(String) in line 179
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function registerChoice(String,List< Pred >,List< Pred >) in line 193
      protection public
      14 lines of code
      3 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function tick() in line 226
      protection public
      16 lines of code
      0 parameters
      5 conditional paths
   function AbsPatternBacktracker() in line 169
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   variable Cmax in line 41
      protection public
   variable RETRY_THRESHOLD in line 38
      protection public
module edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker::AP_StackFrame
   abstract class
   function getBacktrackPreds() in line 80
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getLoop() in line 82
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getMappedLoops() in line 73
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPreconds() in line 52
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPrecondsIterator() in line 57
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTries(String) in line 62
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function incTries(String) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function tick() in line 78
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker::AP_StackFrame_Child
   inherits from edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker::AP_StackFrame
   function getBacktrackPreds() in line 125
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLoop() in line 130
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function tick() in line 119
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function AP_StackFrame_Child(AP_StackFrame,String,List< Pred >,List< Pred >) in line 90
      protection public
      28 lines of code
      4 parameters
      1 conditional paths
module edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker::AP_StackFrame_Head
   inherits from edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker::AP_StackFrame
   function getBacktrackPreds() in line 150
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function getLoop() in line 157
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function tick() in line 145
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function AP_StackFrame_Head() in line 138
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/AbsPatternTestHarness.java
module edu::toronto::cs::yasm::abspatterns::AbsPatternTestHarness
   function main(String[]) in line 7
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/AbstractionPatternDB.java
module edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
   function dumpDB() in line 32
      13 lines of code
      0 parameters
      4 conditional paths
      uses variable s defined in visual.m
   function getAbstraction(PProgram,String,Expr,Expr,IfPStmt,int) in line 258
      protection public
      108 lines of code
      6 parameters
      39 conditional paths
      uses function getAPE(String,Expr,Expr,int) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function getNumVars() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternEntry
      uses function getType() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternEntry
      uses function getBound() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternEntry
      uses function hintPred(Expr) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function getStmt(String) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses macro definition assert defined in util.h
      uses function getArray() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternEntry
      uses function mangle(String,String) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function getScope(Expr) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function getBaseName(Expr) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function getLeader() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternEntry
      uses function getLeaderDirection() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternEntry
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function getElseStmt() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function contains(Expr) defined in edu::toronto::cs::expr::Expr
      uses function getElseGoto() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses function getPreds() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function args() defined in edu::toronto::cs::expr::Expr
      uses variable p defined in visual.m
   function getAbstractionListForVar(Map< Expr, List< AbstractionPatternEntry > >,Expr) in line 91
      13 lines of code
      2 parameters
      2 conditional paths
   function getAPE(String,Expr,Expr,int) in line 235
      9 lines of code
      4 parameters
      2 conditional paths
      uses function getAbstractionListForVar(Map< Expr, List< AbstractionPatternEntry > >,Expr) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function getMapForLoop(String) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function havePattern(String,Expr,Expr,int) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
   function getBaseName(Expr) in line 209
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function getBoundedVars(String) in line 105
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function getMapForLoop(String) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
   function getExpr(String) in line 64
      8 lines of code
      1 parameters
      2 conditional paths
   function getMapForLoop(String) in line 75
      13 lines of code
      1 parameters
      2 conditional paths
   function getScope(Expr) in line 217
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function havePattern(String,Expr,Expr,int) in line 246
      protection public
      3 lines of code
      4 parameters
      1 conditional paths
      uses function getAPE(String,Expr,Expr,int) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function getAbstraction(PProgram,String,Expr,Expr,IfPStmt,int) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
   function hintPred(Expr) in line 225
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable HINT defined in edu::toronto::cs::yasm::pprogram::PredicateSource
   function hintPred(Expr,String) in line 230
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable HINT defined in edu::toronto::cs::yasm::pprogram::PredicateSource
      uses function getAPE(String,Expr,Expr,int) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
   function initializeDB(AbstractionPatternFileParser) in line 142
      66 lines of code
      1 parameters
      10 conditional paths
      uses function readLine() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses function getLoop() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses function getFunction() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses function mangle(String,String) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function getVar() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses function getAbstractionListForVar(Map< Expr, List< AbstractionPatternEntry > >,Expr) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function getMapForLoop(String) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function getNumVars() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses function getType() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses function getBound() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses function getArray() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses function getVarDirection() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses variable i defined in sparsemv.m
      uses function getLeader() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses function getLeaderDirection() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
   function mangle(String,String) in line 120
      21 lines of code
      2 parameters
      2 conditional paths
      uses variable s defined in visual.m
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function getExpr(String) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
   function AbstractionPatternDB(AbstractionPatternFileParser,ExprFactory) in line 46
      protection public
      17 lines of code
      2 parameters
      2 conditional paths
      uses function initializeDB(AbstractionPatternFileParser) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
   variable USE_INV in line 30
module edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB::SymexException
   inherits from Exception
   function SymexException(String) in line 377
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB::ExplicitSymbolicExecutor
   function foundExitConditional(IfPStmt,PStmt,int) in line 409
      59 lines of code
      3 parameters
      1 conditional paths
   function getC(IfPStmt) in line 574
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
   function inner(PStmt,PStmt,int) in line 492
      80 lines of code
      3 parameters
      1 conditional paths
   function isRightExitConditional(Expr) in line 474
      12 lines of code
      1 parameters
      1 conditional paths
   function ExplicitSymbolicExecutor(IfPStmt,Expr,Expr) in line 398
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/AbstractionPatternEntry.java
module edu::toronto::cs::yasm::abspatterns::AbstractionPatternEntry
   function baseInit(int,int) in line 72
      9 lines of code
      2 parameters
      1 conditional paths
   function getArray() in line 51
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function getBound() in line 44
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function getLeader() in line 58
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function getLeaderDirection() in line 67
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getNumVars() in line 30
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function getType() in line 37
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function getVarDirection() in line 66
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 15
      protection public
      13 lines of code
      0 parameters
      4 conditional paths
   function AbstractionPatternEntry(int,int,Expr) in line 83
      protection public
      8 lines of code
      3 parameters
      3 conditional paths
      uses function baseInit(int,int) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternEntry
   function AbstractionPatternEntry(int,int,Expr,Expr,int,int) in line 93
      protection public
      12 lines of code
      6 parameters
      1 conditional paths
      uses function baseInit(int,int) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternEntry
   function AbstractionPatternEntry(int,int,Expr,Expr) in line 107
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function baseInit(int,int) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternEntry
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/AbstractionPatternFileParser.java
module edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
   function getArray() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getBound() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getEndOfNextPair(String) in line 126
      9 lines of code
      1 parameters
      3 conditional paths
   function getFunction() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getLeader() in line 36
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getLeaderDirection() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getLoop() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getNumVars() in line 32
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getType() in line 33
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getVar() in line 31
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getVarDirection() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function processLine(String) in line 78
      15 lines of code
      1 parameters
      3 conditional paths
      uses function getEndOfNextPair(String) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses function processPair(String) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
   function processPair(String) in line 94
      31 lines of code
      1 parameters
      16 conditional paths
   function readLine() in line 64
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses function reInitFields() defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
      uses function processLine(String) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternFileParser
   function reInitFields() in line 41
      12 lines of code
      0 parameters
      1 conditional paths
   function AbstractionPatternFileParser(String) in line 54
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/BoundsCheckExtractor.java
module edu::toronto::cs::yasm::abspatterns::BoundsCheckExtractor
   function extractionWorked() in line 102
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function fillInErrorStmt(CTLNode) in line 61
      29 lines of code
      1 parameters
      4 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getStmt(String) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getPreds() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses macro definition assert defined in util.h
      uses function fillInVarAndBound(Expr) defined in edu::toronto::cs::yasm::abspatterns::BoundsCheckExtractor
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::PCond
   function fillInVarAndBound(Expr) in line 124
      77 lines of code
      1 parameters
      9 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses function isWellFormed(Expr) defined in edu::toronto::cs::yasm::abspatterns::BoundsCheckExtractor
      uses function contains(Expr) defined in edu::toronto::cs::expr::Expr
   function found() in line 107
      4 lines of code
      0 parameters
      1 conditional paths
   function getAssertion() in line 54
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function getBound() in line 48
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function getVar() in line 42
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function isWellFormed(Expr) in line 112
      11 lines of code
      1 parameters
      4 conditional paths
      uses function args() defined in edu::toronto::cs::expr::Expr
   function BoundsCheckExtractor(PProgram,CTLNode,List< Expr >) in line 91
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function fillInErrorStmt(CTLNode) defined in edu::toronto::cs::yasm::abspatterns::BoundsCheckExtractor
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/ConditionCollectorVisitor.java
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/HasStmtVisitor.java
module edu::toronto::cs::yasm::abspatterns::HasStmtVisitor
   inherits from edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
   function hasStmt(IfPStmt,PStmt) in line 17
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function HasStmtVisitor(PStmt) defined in edu::toronto::cs::yasm::abspatterns::HasStmtVisitor
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::IfPStmt
   function needleFound() in line 32
      4 lines of code
      0 parameters
      1 conditional paths
   function visitIf(IfPStmt,Object) in line 38
      protection public
      21 lines of code
      2 parameters
      5 conditional paths
      uses variable s defined in visual.m
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable o defined in visual.m
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function visitPStmt(PStmt,Object) defined in edu::toronto::cs::yasm::abspatterns::HasStmtVisitor
   function visitPStmt(PStmt,Object) in line 61
      protection public
      7 lines of code
      2 parameters
      3 conditional paths
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function HasStmtVisitor(PStmt) in line 26
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/LoopUnrollingDetector.java
module edu::toronto::cs::yasm::abspatterns::LoopUnrollingDetector
   function getTail(Pred) in line 152
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable p defined in visual.m
      uses function getSource() defined in edu::toronto::cs::yasm::pprogram::Pred
   function getUnrolledLoops() in line 94
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getUnrolledLoopsFromPred(Pred) defined in edu::toronto::cs::yasm::abspatterns::LoopUnrollingDetector
   function getUnrolledLoops(Pred) in line 103
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function predCreatesCycle(Pred) defined in edu::toronto::cs::yasm::abspatterns::LoopUnrollingDetector
      uses variable p defined in visual.m
      uses macro definition assert defined in util.h
      uses function getUnrolledLoopsFromPred(Pred) defined in edu::toronto::cs::yasm::abspatterns::LoopUnrollingDetector
      uses function getTail(Pred) defined in edu::toronto::cs::yasm::abspatterns::LoopUnrollingDetector
   function getUnrolledLoopsFromPred(Pred) in line 69
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable p defined in visual.m
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::Pred
      uses function inner(PStmt,Set< PStmt >,List< IfPStmt >,PStmt) defined in edu::toronto::cs::yasm::abspatterns::LoopUnrollingDetector
   function inner(PStmt,Set< PStmt >,List< IfPStmt >,PStmt) in line 46
      14 lines of code
      4 parameters
      5 conditional paths
      uses variable p defined in visual.m
      uses function getPreds() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function loopUnrollingDetected() in line 33
      protection public
      12 lines of code
      0 parameters
      3 conditional paths
      uses function predCreatesCycle(Pred) defined in edu::toronto::cs::yasm::abspatterns::LoopUnrollingDetector
      uses function getTail(Pred) defined in edu::toronto::cs::yasm::abspatterns::LoopUnrollingDetector
      uses macro definition assert defined in util.h
      uses function inner(PStmt,Set< PStmt >,List< IfPStmt >,PStmt) defined in edu::toronto::cs::yasm::abspatterns::LoopUnrollingDetector
   function predCreatesCycle(Pred) in line 116
      30 lines of code
      1 parameters
      5 conditional paths
      uses variable p defined in visual.m
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getSource() defined in edu::toronto::cs::yasm::pprogram::Pred
   function LoopUnrollingDetector(PProgram,List< Pred >) in line 19
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/NullposCollectorVisitor.java
module edu::toronto::cs::yasm::abspatterns::NullposCollectorVisitor
   inherits from edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
   function getArray(Expr) in line 24
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
   function getNullposes() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function visitDecl(PDecl,Object) in line 59
      protection public
      16 lines of code
      2 parameters
      2 conditional paths
      uses variable d defined in crunch2parms.m
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses variable o defined in visual.m
   function visitFunctionDef(PFunctionDef,Object) in line 48
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function getLocalDecls() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable o defined in visual.m
   function visitPProgram(PProgram,Object) in line 35
      protection public
      12 lines of code
      2 parameters
      4 conditional paths
      uses variable p defined in visual.m
      uses variable o defined in visual.m
   function NullposCollectorVisitor() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abspatterns/UnrolledLoopCollectorVisitor.java
module edu::toronto::cs::yasm::abspatterns::UnrolledLoopCollectorVisitor
   inherits from edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
   function getLoops(Expr,PrllAsmtPStmt) in line 23
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function UnrolledLoopCollectorVisitor(Expr,PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abspatterns::UnrolledLoopCollectorVisitor
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function visitFunctionDef(PFunctionDef,Object) in line 69
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses function getHead() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable s defined in visual.m
      uses function getEntryPoint() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable o defined in visual.m
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function visitIf(IfPStmt,Object) in line 41
      protection public
      21 lines of code
      2 parameters
      5 conditional paths
      uses variable s defined in visual.m
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable o defined in visual.m
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function visitPStmt(PStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
   function visitWhile(WhilePStmt,Object) in line 63
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable s defined in visual.m
      uses function visitIf(IfPStmt,Object) defined in edu::toronto::cs::yasm::abspatterns::UnrolledLoopCollectorVisitor
      uses variable o defined in visual.m
   function UnrolledLoopCollectorVisitor(Expr,PrllAsmtPStmt) in line 33
      6 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/Abstractor.java
module edu::toronto::cs::yasm::abstractor::Abstractor
   function doProgramAbstract(Block) in line 8
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/BranchPredicateRefiner.java
module edu::toronto::cs::yasm::abstractor::BranchPredicateRefiner
   inherits from edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function doAsmtRefine(PrllAsmtPStmt) in line 59
      protection public
      63 lines of code
      1 parameters
      6 conditional paths
      uses function getSourceBlock() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getStatementAbstraction(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::BranchPredicateRefiner
      uses function getVC() defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::BranchPredicateRefiner
      uses function getTruePreds() defined in edu::toronto::cs::boolpg::abstraction::StatementAbstraction
      uses function getRegularMemoryModel(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::BranchPredicateRefiner
      uses function computeRegularMemoryModel(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function computeMemoryModel(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function getCVCLConverter() defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function startPredicateAbstraction() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function branchRefinement(List,int,List) defined in edu::toronto::cs::boolpg::abstraction::StatementAbstraction
      uses function toCVCL(List) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function stopPredicateAbstraction() defined in edu::toronto::cs::yasm::YasmStatistics
      uses variable i defined in sparsemv.m
      uses function fromCVCL(edu.toronto.cs.tp.cvcl.Expr) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function getFalsePreds() defined in edu::toronto::cs::boolpg::abstraction::StatementAbstraction
      uses function setAsmts(List< AsmtPStmt >) defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
   function getMemoryModel(PrllAsmtPStmt) in line 39
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::BranchPredicateRefiner
   function getRefinerInfo(PrllAsmtPStmt) in line 49
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getRefinerInfo() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setRefinerInfo(Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getRegularMemoryModel(PrllAsmtPStmt) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::BranchPredicateRefiner
   function getStatementAbstraction(PrllAsmtPStmt) in line 34
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::BranchPredicateRefiner
   function getWPComputer(PrllAsmtPStmt) in line 44
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::BranchPredicateRefiner
   function BranchPredicateRefiner(ExprFactory) in line 21
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function BranchPredicateRefiner(ExprFactory,List) in line 25
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::yasm::abstractor::BranchPredicateRefiner::BranchRefinerInfo
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/CBJPredicateRefiner.java
module edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
   inherits from edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function commonVars(Expr,Expr) in line 322
      15 lines of code
      2 parameters
      2 conditional paths
      uses function vars(Expr) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
   function doAsmtRefine(PrllAsmtPStmt) in line 125
      protection public
      143 lines of code
      1 parameters
      15 conditional paths
      uses function getWPComputer() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function getAsmts() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses variable i defined in sparsemv.m
      uses function startWP() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::wp::WPComputer
      uses function stopWP() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function rewrite(Expr) defined in edu::toronto::cs::expr::DisjunctionRewriter
      uses macro definition assert defined in util.h
      uses function varSet(Set) defined in edu::toronto::cs::expr::Expr
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function quickQuery(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function startRelatedPredicates() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function relatedPredicates(List< Expr >,Expr) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
      uses function stopRelatedPredicates() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function startPredicateAbstraction() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
      uses function stopPredicateAbstraction() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function getFExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses function setAsmts(List< AsmtPStmt >) defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
   function doProgramRefine(PProgram) in line 68
      protection public
      30 lines of code
      1 parameters
      4 conditional paths
      uses variable p defined in visual.m
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   function getMemoryModel(PrllAsmtPStmt) in line 115
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
   function getRefinerInfo(PrllAsmtPStmt) in line 99
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getRefinerInfo() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setRefinerInfo(Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getRegularMemoryModel(PrllAsmtPStmt) in line 110
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
   function getWPComputer(PrllAsmtPStmt) in line 120
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
   function main(String[]) in line 369
      protection public
      37 lines of code
      1 parameters
      1 conditional paths
      uses function vars(Expr) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
      uses function commonVars(Expr,Expr) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
      uses function relatedPredicates(List< Expr >,Expr) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
   function relatedPredicates(List< Expr >,Expr) in line 284
      8 lines of code
      2 parameters
      1 conditional paths
   function relatedPredicates(List< Expr >,List< Expr >) in line 293
      20 lines of code
      2 parameters
      6 conditional paths
      uses function commonVars(Expr,Expr) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
      uses function relatedPredicates(List< Expr >,Expr) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
   function vars(Expr) in line 344
      4 lines of code
      1 parameters
      1 conditional paths
   function vars(Expr,Set) in line 349
      10 lines of code
      2 parameters
      3 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses variable s defined in visual.m
      uses function args() defined in edu::toronto::cs::expr::Expr
      uses function vars(Expr) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner
   function CBJPredicateRefiner(ExprFactory,SymbolTable) in line 33
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
   function CBJPredicateRefiner(ExprFactory,SymbolTable,boolean,boolean) in line 51
      protection public
      11 lines of code
      4 parameters
      1 conditional paths
module edu::toronto::cs::yasm::abstractor::CBJPredicateRefiner::CBJRefinerInfo
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/CBJPredicateRefinerVisitor.java
module edu::toronto::cs::yasm::abstractor::CBJPredicateRefinerVisitor
   inherits from edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
   function getMemoryModel(PrllAsmtPStmt) in line 112
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefinerVisitor
   function getRefinerInfo(PrllAsmtPStmt) in line 96
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getRefinerInfo() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setRefinerInfo(Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getRegularMemoryModel(PrllAsmtPStmt) in line 107
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefinerVisitor
   function getWPComputer(PrllAsmtPStmt) in line 117
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CBJPredicateRefinerVisitor
   function visitPProgram(PProgram,Object) in line 65
      protection public
      30 lines of code
      2 parameters
      4 conditional paths
      uses variable p defined in visual.m
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses variable o defined in visual.m
   function visitPrllAsmt(PrllAsmtPStmt,Object) in line 129
      protection public
      94 lines of code
      2 parameters
      10 conditional paths
      uses function getWPComputer() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function getAsmts() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses variable i defined in sparsemv.m
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::wp::WPComputer
      uses macro definition assert defined in util.h
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses variable stats defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
      uses function startPredicateAbstraction() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
      uses function stopPredicateAbstraction() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function getFExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses function setAsmts(List< AsmtPStmt >) defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
   function CBJPredicateRefinerVisitor(ExprFactory) in line 35
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function CBJPredicateRefinerVisitor(ExprFactory,boolean,boolean) in line 50
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
module edu::toronto::cs::yasm::abstractor::CBJPredicateRefinerVisitor::CBJRefinerInfo
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/CFFCPredicateRefiner.java
module edu::toronto::cs::yasm::abstractor::CFFCPredicateRefiner
   inherits from edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function computeDependency(PrllAsmtPStmt) in line 130
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CFFCPredicateRefiner
      uses function findVars(Expr) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function doAsmtRefine(PrllAsmtPStmt) in line 146
      protection public
      153 lines of code
      1 parameters
      12 conditional paths
      uses function getCVCLConverter() defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function getVC() defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function getRegularMemoryModel(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CFFCPredicateRefiner
      uses function computeRegularMemoryModel(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function getSourceBlock() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CFFCPredicateRefiner
      uses function computeMemoryModel(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function getDependencyMap(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CFFCPredicateRefiner
      uses function computeDependency(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CFFCPredicateRefiner
      uses function getAsmts() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses variable i defined in sparsemv.m
      uses function toCVCL(List) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::wp::WPComputer
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function fromCVCL(edu.toronto.cs.tp.cvcl.Expr) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function startPredicateAbstraction() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor
      uses function stopPredicateAbstraction() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function getFExpr() defined in edu::toronto::cs::yasm::refiner::CvclCFFCPredicateAbstractor
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::CvclCFFCPredicateAbstractor
      uses function setAsmts(List< AsmtPStmt >) defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
   function doProgramRefine(PProgram) in line 63
      protection public
      37 lines of code
      1 parameters
      4 conditional paths
      uses function getCVCLConverter() defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses variable p defined in visual.m
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function toCVCL(List) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function getVC() defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor
      uses function fromCVCL(edu.toronto.cs.tp.cvcl.Expr) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::CvclCFFCPredicateAbstractor
   function getDependencyMap(PrllAsmtPStmt) in line 126
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CFFCPredicateRefiner
   function getMemoryModel(PrllAsmtPStmt) in line 117
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CFFCPredicateRefiner
   function getRefinerInfo(PrllAsmtPStmt) in line 101
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getRefinerInfo() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setRefinerInfo(Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getRegularMemoryModel(PrllAsmtPStmt) in line 112
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CFFCPredicateRefiner
   function getWPComputer(PrllAsmtPStmt) in line 122
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::CFFCPredicateRefiner
   function CFFCPredicateRefiner(ExprFactory,boolean,boolean,boolean) in line 36
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
   function CFFCPredicateRefiner(ExprFactory) in line 46
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function CFFCPredicateRefiner(ExprFactory,boolean,boolean) in line 51
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
module edu::toronto::cs::yasm::abstractor::CFFCPredicateRefiner::CFFCRefinerInfo
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/CNullExprAbstractor.java
module edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
   function absBB(BasicBlock,PStmt) in line 365
      45 lines of code
      2 parameters
      5 conditional paths
      uses macro definition assert defined in util.h
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getStmts() defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
      uses function absStmt(Expr,PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable def defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function addStmt(PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function addLabel(PStmt,String) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
   function absCallExpr(Expr,PStmt) in line 541
      4 lines of code
      2 parameters
      1 conditional paths
   function absCallExpr(Expr,Expr,PStmt) in line 557
      43 lines of code
      3 parameters
      5 conditional paths
      uses function getPFunctionDef(Expr) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable v defined in visual.m
      uses variable def defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setReturnVar(Expr) defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function setLogues(PStmt) defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function setCallee(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function setDest(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getEntry() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function addReturnSite(FunctionCallEpilogue) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setCallIndex(int) defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function addStmt(PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function addLabel(PStmt,String) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function callSiteLabel(int) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function returnSiteLabel(int) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function absCond(Expr) in line 482
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable efac defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable IBOT defined in edu::toronto::cs::expr::BiLatticeOp
   function absCondExpr(Expr,PStmt) in line 469
      12 lines of code
      2 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses variable def defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function absCond(Expr) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function absGoto(Expr,PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function addStmt(PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function absGoto(Expr,PStmt) in line 460
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses variable def defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function addStmt(PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function absModifyExpr(Expr,PStmt) in line 439
      10 lines of code
      2 parameters
      3 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function absCallExpr(Expr,PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable v defined in visual.m
      uses variable def defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function addStmt(PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function absProgram(ExprFactory,CProgram) in line 102
      protection public
      4 lines of code
      2 parameters
      12 conditional paths
      uses function CNullExprAbstractor(ExprFactory) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable efac defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable cProgram defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable statementList defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable labelMap defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable functionDefs defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function addStmt(PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function addLabel(PStmt,String) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function setDest(PStmt) defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses function allCfgFunctions() defined in edu::toronto::cs::clang::CProgram
      uses variable def defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function setParent(PProgram) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setParent(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setStatementList(List< PStmt >) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function setLabelMap(Map< String, PStmt >) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable cfg defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function getCFG(Expr) defined in edu::toronto::cs::clang::CProgram
      uses macro definition assert defined in util.h
      uses function getPFunctionDef(Expr) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable bbEntry defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function size() defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses variable bbExit defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function getEntry() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function allBlocksFwd() defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function absBB(BasicBlock,PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable i defined in sparsemv.m
      uses function resolveGoto(GotoPStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function setDest(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getReturnSelector() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getBB(int) defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function getSuccs() defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
   function absReturn(Expr,PStmt) in line 452
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses variable def defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function addStmt(PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function absStmt(Expr,PStmt) in line 422
      15 lines of code
      2 parameters
      6 conditional paths
      uses function absModifyExpr(Expr,PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function absReturn(Expr,PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function absCondExpr(Expr,PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function absSwitchExpr(Expr,PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function absCallExpr(Expr,PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
   function absSwitchExpr(Expr,PStmt) in line 492
      35 lines of code
      2 parameters
      4 conditional paths
      uses variable efac defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable FALSE defined in edu::toronto::cs::expr::BoolOp
      uses function explicitCaseLabel(Expr,Expr,Expr) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function absCond(Expr) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function absGoto(Expr,PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses variable v defined in visual.m
      uses variable def defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function addStmt(PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function addLabel(PStmt,String) in line 665
      10 lines of code
      2 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses variable p defined in visual.m
      uses variable labelMap defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
   function addLabel(PStmt,Expr) in line 682
      7 lines of code
      2 parameters
      1 conditional paths
      uses function addLabel(PStmt,String) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable p defined in visual.m
      uses function labelFor(int) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
   function addStmt(PStmt) in line 649
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses variable p defined in visual.m
      uses variable statementList defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
   function explicitCaseLabel(Expr,Expr,Expr) in line 528
      12 lines of code
      3 parameters
      2 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses variable AND defined in edu::toronto::cs::expr::BoolOp
      uses variable LEQ defined in edu::toronto::cs::expr::ComparisonOp
   function getPFunctionDef(Expr) in line 308
      46 lines of code
      1 parameters
      3 conditional paths
      uses variable def defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable functionDefs defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable cfg defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable cProgram defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function getCFG(Expr) defined in edu::toronto::cs::clang::CProgram
      uses function setHead(PStmt) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setReturnSelector(PStmt) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function addStmt(PStmt) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function addLabel(PStmt,String) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function returnSelectorLabel() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function entryLabel() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setEntry(PStmt) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function labelFor(int) in line 635
      6 lines of code
      1 parameters
      1 conditional paths
   function resolveGoto(GotoPStmt) in line 612
      15 lines of code
      1 parameters
      1 conditional paths
      uses function getSourceExpr() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses macro definition assert defined in util.h
      uses function setDest(PStmt) defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses variable bbEntry defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses variable cfg defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
      uses function bbForLabel(Expr) defined in edu::toronto::cs::yasm::cfg::CFGraph
   function CNullExprAbstractor(ExprFactory) in line 89
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable efac defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractor
   variable bbEntry in line 70
   variable bbExit in line 76
   variable cfg in line 78
   variable cProgram in line 38
   variable def in line 79
   variable efac in line 32
   variable functionDefs in line 63
   variable labelMap in line 57
   variable statementList in line 52
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/CNullExprAbstractorUtil.java
module edu::toronto::cs::yasm::abstractor::CNullExprAbstractorUtil
   function main(String) in line 28
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function parse(File,ExprFactory) defined in edu::toronto::cs::yasm::abstractor::CNullExprAbstractorUtil
      uses function print(PrintWriter) defined in edu::toronto::cs::yasm::pprogram::PProgram
   function parse(File,ExprFactory) in line 13
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses function parse(File) defined in edu::toronto::cs::cxmlparser::CXMLParser
      uses function getCProgram() defined in edu::toronto::cs::cxmlparser::CXMLParser
module edu::toronto::cs::yasm::abstractor::CNullExprAbstractorUtil::ParseException
   inherits from Exception
   function ParseException(String,Exception) in line 37
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/CVCLMemoryModel.java
module edu::toronto::cs::yasm::abstractor::CVCLMemoryModel
   inherits from java::util::HashMap
   function get(Object) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function toCVCL(List) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function get(Object) defined in edu::toronto::cs::yasm::abstractor::MemoryModel
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses variable o defined in visual.m
   function toString() in line 37
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CVCLMemoryModel(MemoryModel,ExprFactory,CVCLExprConverter) in line 23
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/DeclsParserUtil.java
module edu::toronto::cs::yasm::abstractor::DeclsParserUtil
   function newBlockDeclsParser() in line 11
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
   function parseBlockDecl(Block,ITheoremProver) in line 32
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses function newBlockDeclsParser() defined in edu::toronto::cs::yasm::abstractor::DeclsParserUtil
   function parseBlockTypeSpecifiers(Block,ITheoremProver) in line 20
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function newBlockDeclsParser() defined in edu::toronto::cs::yasm::abstractor::DeclsParserUtil
   function parseExprDecl(Expr,ITheoremProver) in line 45
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function declare(Expr,Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
   function parseExprTypeSpecifiers(Expr,ITheoremProver) in line 26
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/ExprExecutor.java
module edu::toronto::cs::yasm::abstractor::ExprExecutor
   function functionCallArgs(Expr,Expr,MemoryModel) in line 24
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function returnStmt(Expr,String,MemoryModel) in line 19
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function stmtList(Expr,MemoryModel) in line 14
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function ExprExecutor(ExprFactory) in line 9
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/LadderPredicateRefiner.java
module edu::toronto::cs::yasm::abstractor::LadderPredicateRefiner
   inherits from edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function doAsmtRefine(PrllAsmtPStmt) in line 57
      protection public
      94 lines of code
      1 parameters
      6 conditional paths
      uses function getCVCLConverter() defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function getMemoryModel(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::LadderPredicateRefiner
      uses function computeMemoryModel(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::LadderPredicateRefiner
      uses function computeRegularMemoryModel(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function getLadder(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::LadderPredicateRefiner
      uses function getPredicates() defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function toCVCL(List) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function getVC() defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses variable i defined in sparsemv.m
      uses function getAbstraction(int,ValidityChecker) defined in edu::toronto::cs::boolpg::abstraction::Ladder
      uses function fromCVCL(edu.toronto.cs.tp.cvcl.Expr) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function setAsmts(List< AsmtPStmt >) defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
   function getLadder(PrllAsmtPStmt) in line 42
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::LadderPredicateRefiner
   function getMemoryModel(PrllAsmtPStmt) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::LadderPredicateRefiner
   function getRefinerInfo(PrllAsmtPStmt) in line 46
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getRefinerInfo() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setRefinerInfo(Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getWPComputer(PrllAsmtPStmt) in line 37
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::LadderPredicateRefiner
   function LadderPredicateRefiner(ExprFactory) in line 21
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function LadderPredicateRefiner(ExprFactory,List) in line 25
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::yasm::abstractor::LadderPredicateRefiner::LadderRefinerInfo
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/LocalCBJPredicateRefinerVisitor.java
module edu::toronto::cs::yasm::abstractor::LocalCBJPredicateRefinerVisitor
   inherits from edu::toronto::cs::yasm::abstractor::LocalPredicateRefinerVisitor
   function cbjCondAbs(List< Expr >,Expr) in line 523
      31 lines of code
      2 parameters
      3 conditional paths
      uses variable stats defined in edu::toronto::cs::yasm::abstractor::LocalPredicateRefinerVisitor
      uses function startPredicateAbstraction() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
      uses function stopPredicateAbstraction() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function gamma(MvSet) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function alpha(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function getFExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   function clearPreds() in line 190
      9 lines of code
      0 parameters
      1 conditional paths
   function getMemoryModel(PrllAsmtPStmt) in line 597
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::LocalCBJPredicateRefinerVisitor
   function getRefinerInfo(PrllAsmtPStmt) in line 575
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getRefinerInfo() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setRefinerInfo(Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getRegularMemoryModel(PrllAsmtPStmt) in line 589
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::LocalCBJPredicateRefinerVisitor
   function getWPComputer(PrllAsmtPStmt) in line 605
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::LocalCBJPredicateRefinerVisitor
   function isSubsetOf(Set,Set) in line 565
      4 lines of code
      2 parameters
      1 conditional paths
   function makeNew(Expr) in line 32
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function makeNew(Expr) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PProgram
   function quickCondAbs(Expr) in line 492
      19 lines of code
      1 parameters
      4 conditional paths
      uses function quickQuery(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
   function refineFunctionDef(PFunctionDef) in line 201
      22 lines of code
      1 parameters
      3 conditional paths
      uses function getPredicates() defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function setInconsistent(Expr) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function cbjCondAbs(List< Expr >,Expr) defined in edu::toronto::cs::yasm::abstractor::LocalCBJPredicateRefinerVisitor
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
   function setupPreds(PFunctionDef,PFunctionDef) in line 157
      32 lines of code
      2 parameters
      2 conditional paths
   function visitFunctionCallPrologue(FunctionCallPrologue,Object) in line 373
      protection public
      111 lines of code
      2 parameters
      8 conditional paths
      uses function getAsmts() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses variable i defined in sparsemv.m
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getCall() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPrologue
      uses function getFunctionDef() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getPredicateScope(Expr) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getFormalParams() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function varSet(Set) defined in edu::toronto::cs::expr::Expr
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function getWPComputer() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPrologue
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::wp::WPComputer
      uses macro definition assert defined in util.h
      uses function quickCondAbs(Expr) defined in edu::toronto::cs::yasm::abstractor::LocalCBJPredicateRefinerVisitor
      uses function cbjCondAbs(List< Expr >,Expr) defined in edu::toronto::cs::yasm::abstractor::LocalCBJPredicateRefinerVisitor
      uses function setAsmts(List< AsmtPStmt >) defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
   function visitPProgram(PProgram,Object) in line 115
      protection public
      40 lines of code
      2 parameters
      4 conditional paths
      uses macro definition assert defined in util.h
      uses variable p defined in visual.m
      uses function getNewPredicates() defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getPredicates() defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function getAllPredicates() defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function cbjCondAbs(List< Expr >,Expr) defined in edu::toronto::cs::yasm::abstractor::LocalCBJPredicateRefinerVisitor
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses variable o defined in visual.m
   function visitPrllAsmt(PrllAsmtPStmt,Object) in line 226
      protection public
      136 lines of code
      2 parameters
      11 conditional paths
      uses function getAsmts() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses variable i defined in sparsemv.m
      uses function getWPComputer() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::wp::WPComputer
      uses macro definition assert defined in util.h
      uses function varSet(Set) defined in edu::toronto::cs::expr::Expr
      uses function addNondetPred(Expr) defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function addUpdate(Expr,Expr) defined in edu::toronto::cs::yasm::pprogram::NDAsmtPStmt
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function quickCondAbs(Expr) defined in edu::toronto::cs::yasm::abstractor::LocalCBJPredicateRefinerVisitor
      uses function cbjCondAbs(List< Expr >,Expr) defined in edu::toronto::cs::yasm::abstractor::LocalCBJPredicateRefinerVisitor
      uses function setAsmts(List< AsmtPStmt >) defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function setInconsistent(Expr) defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function getNondetPreds() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
   function LocalCBJPredicateRefinerVisitor(ExprFactory,PProgram) in line 67
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
   function LocalCBJPredicateRefinerVisitor(ExprFactory,PProgram,boolean,boolean) in line 89
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
module edu::toronto::cs::yasm::abstractor::LocalCBJPredicateRefinerVisitor::CBJRefinerInfo
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/LocalPredicateRefinerVisitor.java
module edu::toronto::cs::yasm::abstractor::LocalPredicateRefinerVisitor
   inherits from edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
   inherits from edu::toronto::cs::yasm::abstractor::Refiner
   function doDeclRefine(PDecl) in line 218
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function declare(ITheoremProver) defined in edu::toronto::cs::yasm::pprogram::PDecl
   function doDeclsRefine(PProgram) in line 147
      protection public
      30 lines of code
      1 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses variable p defined in visual.m
      uses function doDeclRefine(PDecl) defined in edu::toronto::cs::yasm::abstractor::LocalPredicateRefinerVisitor
      uses function doFunctionDeclsRefine(PFunctionDef) defined in edu::toronto::cs::yasm::abstractor::LocalPredicateRefinerVisitor
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function declare(Expr,Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function doFunctionDeclsRefine(PFunctionDef) in line 179
      protection public
      29 lines of code
      1 parameters
      3 conditional paths
      uses variable f defined in mvproduct.m
      uses function doDeclRefine(PDecl) defined in edu::toronto::cs::yasm::abstractor::LocalPredicateRefinerVisitor
      uses function declare(Expr,Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
   function doProgramRefine(PProgram) in line 136
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses variable p defined in visual.m
   function getInvariants() in line 87
      14 lines of code
      0 parameters
      2 conditional paths
      uses function visitPProgram(PProgram,Object) defined in edu::toronto::cs::yasm::abspatterns::NullposCollectorVisitor
      uses function getNullposes() defined in edu::toronto::cs::yasm::abspatterns::NullposCollectorVisitor
      uses function getArray(Expr) defined in edu::toronto::cs::yasm::abspatterns::NullposCollectorVisitor
   function getPredicates() in line 239
      protection public
      4 lines of code
      0 parameters
      35 conditional paths
      uses function getPredicates() defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getPreds() defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getNewPredicates() defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getNewPreds() defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses macro definition assert defined in util.h
      uses variable p defined in visual.m
      uses function newPred(Pred) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function readPredicates(Reader) defined in edu::toronto::cs::yasm::abstractor::Refiner
      uses variable HINT defined in edu::toronto::cs::yasm::pprogram::PredicateSource
      uses function getRefinerInfo() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setRefinerInfo(Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable s defined in visual.m
      uses function visitPProgram(PProgram,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable o defined in visual.m
      uses variable DEBUG defined in edu::toronto::cs::yasm::YasrApp
      uses variable err defined in edu::toronto::cs::yasm::YasmApp
      uses variable v defined in visual.m
      uses function merge() defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function visitFunctionDef(PFunctionDef,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses function getFuncNewPredicates(Object) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getHead() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function visitIf(IfPStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable MOD defined in edu::toronto::cs::expr::NumericOp
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses variable IBOT defined in edu::toronto::cs::expr::BiLatticeOp
      uses function getOrigCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function setOrigCond(Expr) defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function quickCheckTruth(Expr,Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function setCond(Expr) defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses function getNumCallSites() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getFuncPredicates(Object) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getFunctionDefs() defined in edu::toronto::cs::yasm::pprogram::PProgram
   function setStats(YasmStatistics) in line 228
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable stats defined in edu::toronto::cs::yasm::abstractor::LocalPredicateRefinerVisitor
   function LocalPredicateRefinerVisitor(ExprFactory,PProgram) in line 75
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable DEBUG defined in edu::toronto::cs::yasm::YasrApp
      uses variable out defined in edu::toronto::cs::yasm::YasmApp
   function LocalPredicateRefinerVisitor(ExprFactory,PProgram,List) in line 102
      protection public
      25 lines of code
      3 parameters
      1 conditional paths
      uses function getPProgramPredicateManager() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getInvariants() defined in edu::toronto::cs::yasm::abstractor::LocalPredicateRefinerVisitor
      uses function getSymbolTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
   variable stats in line 40
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/MemoryModel.java
module edu::toronto::cs::yasm::abstractor::MemoryModel
   inherits from java::util::HashMap
   function assign(Expr,Expr) in line 29
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function get(Object) in line 19
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
   function lookup(Expr) in line 14
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function MemoryModel() in line 9
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/NullExprAbstractor.java
module edu::toronto::cs::yasm::abstractor::NullExprAbstractor
   function concatStmts(PStmt,PStmt) in line 206
      9 lines of code
      2 parameters
      2 conditional paths
      uses function setTail(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function doAssignAbstract(PFunctionDef,Expr) in line 309
      11 lines of code
      2 parameters
      3 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable FCALL defined in edu::toronto::cs::expr::CILFunctionCallOp
   function doBreakAbstract(PFunctionDef,Expr) in line 299
      4 lines of code
      2 parameters
      1 conditional paths
   function doCondAbstract(Expr) in line 253
      9 lines of code
      1 parameters
      2 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable IBOT defined in edu::toronto::cs::expr::BiLatticeOp
   function doFunctionAbstract(Expr) in line 122
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable FUNCTION_DEF defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function addToHead(PStmt) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function doInsideFunctionAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses function setLocalDecls(Map) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function doShallowDeclAbstract(Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
   function doFunctionCallAbstract(PFunctionDef,Expr) in line 277
      4 lines of code
      2 parameters
      1 conditional paths
   function doGotoAbstract(PFunctionDef,Expr) in line 282
      4 lines of code
      2 parameters
      1 conditional paths
   function doIfAbstract(PFunctionDef,Expr) in line 228
      11 lines of code
      2 parameters
      1 conditional paths
      uses function doCondAbstract(Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses function doInsideFunctionAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
   function doInsideFunctionAbstract(PFunctionDef,Expr) in line 139
      protection public
      42 lines of code
      2 parameters
      14 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable SCOPE defined in edu::toronto::cs::expr::CILScopeOp
      uses function doScopeAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses variable IF_THEN_ELSE defined in edu::toronto::cs::expr::CILIfStmtOp
      uses function doIfAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses variable WHILE defined in edu::toronto::cs::expr::CILWhileOp
      uses function doWhileAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses variable ASSIGN defined in edu::toronto::cs::expr::CILAssignOp
      uses function doAssignAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses variable SLIST defined in edu::toronto::cs::expr::CILListOp
      uses function doStmtListAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses variable LSTMT defined in edu::toronto::cs::expr::CILLabelledStmtOp
      uses function doLabelledStmtAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses variable FCALL defined in edu::toronto::cs::expr::CILFunctionCallOp
      uses function doFunctionCallAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses variable GOTO defined in edu::toronto::cs::expr::CILGotoOp
      uses function doGotoAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses variable BREAK defined in edu::toronto::cs::expr::CILBreakOp
      uses function doBreakAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses variable RETURN defined in edu::toronto::cs::expr::CILReturnOp
      uses function doReturnAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses variable EMPTY defined in edu::toronto::cs::expr::CILEmptyStmtOp
      uses variable NDGOTO defined in edu::toronto::cs::expr::CILNDGotoOp
      uses function doNDGotoAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
   function doLabelledStmtAbstract(PFunctionDef,Expr) in line 269
      7 lines of code
      2 parameters
      1 conditional paths
      uses function doInsideFunctionAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses function setLabel(String) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function doListAbstract(PFunctionDef,Expr) in line 185
      20 lines of code
      2 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable LIST defined in edu::toronto::cs::expr::CILListOp
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function doInsideFunctionAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function concatStmts(PStmt,PStmt) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
   function doNDGotoAbstract(PFunctionDef,Expr) in line 294
      4 lines of code
      2 parameters
      1 conditional paths
   function doProgramAbstract(Expr,int) in line 23
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable PROGRAM defined in edu::toronto::cs::expr::CILProgramOp
      uses function doShallowFunctionDefAbstract(Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses function doShallowDeclAbstract(Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
   function doProgramAbstract(Expr) in line 33
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable PROGRAM defined in edu::toronto::cs::expr::CILProgramOp
      uses function doShallowFunctionDefAbstract(Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses function doShallowDeclAbstract(Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
   function doReturnAbstract(PFunctionDef,Expr) in line 304
      4 lines of code
      2 parameters
      1 conditional paths
   function doScopeAbstract(PFunctionDef,Expr) in line 217
      9 lines of code
      2 parameters
      2 conditional paths
      uses function doListAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
   function doShallowDeclAbstract(Expr) in line 71
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable PROGRAM defined in edu::toronto::cs::expr::CILProgramOp
      uses variable FUNCTION_DEF defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function mapDeclList(Map,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
   function doShallowFunctionDefAbstract(Expr) in line 42
      protection public
      22 lines of code
      1 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable PROGRAM defined in edu::toronto::cs::expr::CILProgramOp
      uses function args() defined in edu::toronto::cs::expr::Expr
      uses variable FUNCTION_DEF defined in edu::toronto::cs::expr::CILFunctionDefOp
      uses function doFunctionAbstract(Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
   function doStmtListAbstract(PFunctionDef,Expr) in line 264
      4 lines of code
      2 parameters
      1 conditional paths
   function doWhileAbstract(PFunctionDef,Expr) in line 241
      10 lines of code
      2 parameters
      1 conditional paths
      uses function doCondAbstract(Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
      uses function doInsideFunctionAbstract(PFunctionDef,Expr) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
   function getFactory() in line 18
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function mapDeclList(Map,Expr) in line 98
      22 lines of code
      2 parameters
      5 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable LIST defined in edu::toronto::cs::expr::CILListOp
      uses variable PROGRAM defined in edu::toronto::cs::expr::CILProgramOp
      uses function args() defined in edu::toronto::cs::expr::Expr
      uses variable DECL defined in edu::toronto::cs::expr::CILDeclarationOp
   function NullExprAbstractor(ExprFactory) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/PredicateExtractor.java
module edu::toronto::cs::yasm::abstractor::PredicateExtractor
   function extract(Expr) in line 45
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses function args() defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable FUNCTION_DEF defined in edu::toronto::cs::expr::CILFunctionDefOp
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/PredicateRefiner.java
module edu::toronto::cs::yasm::abstractor::PredicateRefiner
   inherits from edu::toronto::cs::yasm::abstractor::Refiner
   function addPredicate(Pred) in line 162
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function addToNewPredicates(List) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses variable p defined in visual.m
   function addPredicates(List) in line 154
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function addToNewPredicates(List) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function addToNewPredicates(List) in line 131
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function addToNewPredicates(Pred) in line 139
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable p defined in visual.m
   function computeDependency(List,Expr,Map) in line 499
      16 lines of code
      3 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses function contains(Expr,List) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function computeMemoryModel(PrllAsmtPStmt) in line 418
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function computeRegularMemoryModel(PrllAsmtPStmt) in line 411
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function contains(Expr,List) in line 516
      13 lines of code
      2 parameters
      5 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function doAsmtRefine(PrllAsmtPStmt) in line 424
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function doConditionalBranchRefine(ConditionalBranchPStmt) in line 266
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
      uses function doCondRefine(PCond) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function doCondRefine(PCond) in line 320
      protection public
      69 lines of code
      1 parameters
      7 conditional paths
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable IBOT defined in edu::toronto::cs::expr::BiLatticeOp
      uses function getOrigCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function knownCond(Expr) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function setOrigCond(Expr) defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function quickCheckTruth(Expr,Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function setCond(Expr) defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
   function doDeclsRefine(PProgram) in line 191
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function doFunctionCallRefine(FunctionCallPStmt) in line 450
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function getLogues() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function doAsmtRefine(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function doFunctionRefine(PFunctionDef) in line 201
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
      uses function doInsideFunctionRefine(PStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function doGotoRefine(GotoPStmt) in line 430
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function doIfRefine(IfPStmt) in line 257
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
      uses function doCondRefine(PCond) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function doInsideFunctionRefine(PStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function doConditionalBranchRefine(ConditionalBranchPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function doInsideFunctionRefine(PStmt) in line 209
      protection public
      47 lines of code
      1 parameters
      12 conditional paths
      uses variable s defined in visual.m
      uses function doIfRefine(IfPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function doAsmtRefine(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function doGotoRefine(GotoPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function doReturnSelectorRefine(ReturnSelectorPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function doNDGotoRefine(NDGotoPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function doSkipRefine(SkipPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function doFunctionCallRefine(FunctionCallPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function doConditionalBranchRefine(ConditionalBranchPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function doSwitchBranchRefine(SwitchBranchPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function doNDGotoRefine(NDGotoPStmt) in line 440
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function doProgramRefine(PProgram) in line 167
      protection public
      22 lines of code
      1 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses variable p defined in visual.m
      uses function doFunctionRefine(PFunctionDef) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function doReturnSelectorRefine(ReturnSelectorPStmt) in line 435
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function doSkipRefine(SkipPStmt) in line 445
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function doSwitchBranchRefine(SwitchBranchPStmt) in line 273
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function exprFactory() in line 104
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
   function findVars(Expr) in line 530
      15 lines of code
      1 parameters
      4 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getCVCLConverter() in line 125
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function getMemoryModel(PrllAsmtPStmt) in line 390
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getNewPredicates() in line 88
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNewPreds() in line 98
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPredicates() in line 83
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPredRefinerInfo(PrllAsmtPStmt) in line 400
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getRefinerInfo() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setRefinerInfo(Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getPreds() in line 93
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTP() in line 114
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVC() in line 119
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function getWPComputer(PrllAsmtPStmt) in line 395
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getPredRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
   function hasNewPredicates() in line 196
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function knownCond(Expr) in line 284
      protection public
      35 lines of code
      1 parameters
      10 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable MOD defined in edu::toronto::cs::expr::NumericOp
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function readPredicates(Reader) in line 468
      protection public
      30 lines of code
      1 parameters
      2 conditional paths
      uses function addToNewPredicates(List) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses variable HINT defined in edu::toronto::cs::yasm::pprogram::PredicateSource
   function setStats(YasmStatistics) in line 557
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function PredicateRefiner(ExprFactory) in line 46
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function PredicateRefiner(ExprFactory,List) in line 51
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function PredicateRefiner(ExprFactory,SymbolTable) in line 56
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function PredicateRefiner(ExprFactory,List,SymbolTable) in line 61
      protection public
      21 lines of code
      3 parameters
      1 conditional paths
      uses function addToNewPredicates(List) defined in edu::toronto::cs::yasm::abstractor::PredicateRefiner
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
module edu::toronto::cs::yasm::abstractor::PredicateRefiner::PredicateRefinerInfo
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/PredicateRefinerVisitor.java
module edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
   inherits from edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
   inherits from edu::toronto::cs::yasm::abstractor::Refiner
   function addPredicate(Pred) in line 272
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function addToNewPredicates(List) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
      uses variable p defined in visual.m
   function addPredicates(List) in line 264
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function addToNewPredicates(List) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
   function addToNewPredicates(List) in line 236
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function addToNewPredicates(Pred) in line 249
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable p defined in visual.m
   function computeMemoryModel(PrllAsmtPStmt) in line 382
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function computeRegularMemoryModel(PrllAsmtPStmt) in line 368
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function doDeclRefine(PDecl) in line 147
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function declare(ITheoremProver) defined in edu::toronto::cs::yasm::pprogram::PDecl
   function doDeclsRefine(PProgram) in line 84
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses variable p defined in visual.m
      uses function doDeclRefine(PDecl) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
      uses function doFunctionDeclsRefine(PFunctionDef) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function declare(Expr,Expr) defined in edu::toronto::cs::tp::JCVCLTheoremProver
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function doFunctionDeclsRefine(PFunctionDef) in line 110
      protection public
      30 lines of code
      1 parameters
      3 conditional paths
      uses variable f defined in mvproduct.m
      uses function doDeclRefine(PDecl) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
      uses function declare(Expr,Expr) defined in edu::toronto::cs::tp::JCVCLTheoremProver
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
   function doProgramRefine(PProgram) in line 78
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in visual.m
   function exprFactory() in line 206
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getCVCLConverter() in line 226
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getExprConverter() defined in edu::toronto::cs::tp::JCVCLTheoremProver
   function getMemoryModel(PrllAsmtPStmt) in line 334
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRefinerInfo() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getNewPredicates() in line 200
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNewPreds() in line 178
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPredicates() in line 189
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPredRefinerInfo(PrllAsmtPStmt) in line 351
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getRefinerInfo() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setRefinerInfo(Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getPreds() in line 167
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTP() in line 216
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVC() in line 221
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getValidityChecker() defined in edu::toronto::cs::tp::JCVCLTheoremProver
   function getWPComputer(PrllAsmtPStmt) in line 346
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getPredRefinerInfo(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
   function hasNewPredicates() in line 283
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function knownCond(Expr) in line 524
      28 lines of code
      1 parameters
      8 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable MOD defined in edu::toronto::cs::expr::NumericOp
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function readPredicates(Reader) in line 296
      protection public
      30 lines of code
      1 parameters
      2 conditional paths
      uses function addToNewPredicates(List) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
      uses variable HINT defined in edu::toronto::cs::yasm::pprogram::PredicateSource
   function refinePCond(PCond,Object) in line 562
      66 lines of code
      2 parameters
      7 conditional paths
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable IBOT defined in edu::toronto::cs::expr::BiLatticeOp
      uses function getOrigCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function knownCond(Expr) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
      uses function setOrigCond(Expr) defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function quickCheckTruth(Expr,Expr) defined in edu::toronto::cs::tp::AbstractTheoremProver
      uses function setCond(Expr) defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
   function refinePStmtBlock(PStmt,Object) in line 409
      30 lines of code
      2 parameters
      3 conditional paths
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function setStats(YasmStatistics) in line 157
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable stats defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
   function visitBreak(BreakPStmt,Object) in line 713
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function visitFunctionDef(PFunctionDef,Object) in line 489
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in visual.m
      uses function getHead() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function refinePStmtBlock(PStmt,Object) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
      uses variable o defined in visual.m
   function visitGoto(GotoPStmt,Object) in line 664
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function visitIf(IfPStmt,Object) in line 637
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in visual.m
      uses function refinePCond(PCond,Object) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
      uses function refinePStmtBlock(PStmt,Object) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
   function visitPProgram(PProgram,Object) in line 452
      protection public
      27 lines of code
      2 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
      uses variable p defined in visual.m
      uses variable o defined in visual.m
   function visitPrllAsmt(PrllAsmtPStmt,Object) in line 682
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function visitPStmt(PStmt,Object) in line 517
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function visitReturnSelector(ReturnSelectorPStmt,Object) in line 731
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function visitSkip(SkipPStmt,Object) in line 697
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function PredicateRefinerVisitor(ExprFactory) in line 50
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function PredicateRefinerVisitor(ExprFactory,List) in line 55
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function addToNewPredicates(List) defined in edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor
   variable stats in line 33
      protection public
module edu::toronto::cs::yasm::abstractor::PredicateRefinerVisitor::PredicateRefinerInfo
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/Refiner.java
module edu::toronto::cs::yasm::abstractor::Refiner
   function doDeclsRefine(PProgram) in line 35
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function doProgramRefine(PProgram) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getPredicates() in line 59
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function readPredicates(Reader) in line 49
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function setStats(YasmStatistics) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/SymbolicExecutorUtil.java
module edu::toronto::cs::yasm::abstractor::SymbolicExecutorUtil
   function newExprExecutor(ExprFactory) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function newSymbolicExecutor(ExprFactory) in line 16
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
   function parseBlockExpr(Block,ExprFactory) in line 35
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses function newSymbolicExecutor(ExprFactory) defined in edu::toronto::cs::yasm::abstractor::SymbolicExecutorUtil
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/SymbolTableInitializer.java
module edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
   function addCDecl(Expr,SymbolTable,boolean) in line 89
      6 lines of code
      3 parameters
      1 conditional paths
      uses function addDecl(Expr,Expr,SymbolTable) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
      uses function cToExprType(Expr,boolean) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
   function addDecl(Expr,Expr,SymbolTable) in line 96
      4 lines of code
      3 parameters
      1 conditional paths
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
   function addFunctionDecls(PFunctionDef,SymbolTable,boolean) in line 101
      22 lines of code
      3 parameters
      4 conditional paths
      uses variable f defined in mvproduct.m
      uses function addPDecl(PDecl,SymbolTable,boolean) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
      uses function addDecl(Expr,Expr,SymbolTable) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function cilToExprType(Expr,boolean) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
   function addPDecl(PDecl,SymbolTable,boolean) in line 77
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
      uses macro definition assert defined in util.h
      uses function cilToExprType(Expr,boolean) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
      uses function addDecl(Expr,Expr,SymbolTable) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
   function cilToExprType(Expr,boolean) in line 132
      26 lines of code
      2 parameters
      4 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses variable typeMap defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function ptrChain(int,Expr) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
   function cToExprType(Expr,boolean) in line 159
      16 lines of code
      2 parameters
      4 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
   function init(PProgram,SymbolTable,boolean) in line 47
      protection public
      29 lines of code
      3 parameters
      7 conditional paths
      uses variable p defined in visual.m
      uses function addCDecl(Expr,SymbolTable,boolean) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
      uses function addPDecl(PDecl,SymbolTable,boolean) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
      uses function addFunctionDecls(PFunctionDef,SymbolTable,boolean) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
      uses function addDecl(Expr,Expr,SymbolTable) defined in edu::toronto::cs::yasm::abstractor::SymbolTableInitializer
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
   function ptrChain(int,Expr) in line 176
      7 lines of code
      2 parameters
      2 conditional paths
   variable typeMap in line 32
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/TestDeclsParser.java
module edu::toronto::cs::yasm::abstractor::TestDeclsParser
   function main(String[]) in line 16
      protection public
      35 lines of code
      1 parameters
      2 conditional paths
      uses function getLocalDeclsRoot() defined in edu::toronto::cs::cparser::block::Block
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/TestNullExprAbstractor.java
module edu::toronto::cs::yasm::abstractor::TestNullExprAbstractor
   function main(String[]) in line 17
      protection public
      69 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable p defined in visual.m
      uses function doProgramAbstract(Expr,int) defined in edu::toronto::cs::yasm::abstractor::NullExprAbstractor
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/abstractor/TestPredicateParser.java
module edu::toronto::cs::yasm::abstractor::TestPredicateParser
   function main(String[]) in line 10
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/cfg/CFGraph.java
module edu::toronto::cs::yasm::cfg::CFGraph
   function addEdge(BasicBlock,BasicBlock,boolean,boolean) in line 144
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses function linkSrc() defined in edu::toronto::cs::yasm::cfg::CFGraph::Edge
      uses function linkDst() defined in edu::toronto::cs::yasm::cfg::CFGraph::Edge
   function addEdge(BasicBlock,BasicBlock) in line 157
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function addEdge(BasicBlock,BasicBlock,boolean,boolean) defined in edu::toronto::cs::yasm::cfg::CFGraph
   function addLabel(Expr,BasicBlock) in line 66
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function addLabel(String,int,BasicBlock) in line 72
      protection public
      6 lines of code
      3 parameters
      2 conditional paths
   function allBlocksFwd() in line 226
      protection public
      39 lines of code
      0 parameters
      3 conditional paths
      uses function entry() defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function getNext() defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
   function bbForLabel(Expr) in line 89
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function bbForLabelUID(int) defined in edu::toronto::cs::yasm::cfg::CFGraph
   function bbForLabelName(String) in line 79
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function bbForLabelUID(int) in line 84
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function compact() in line 189
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function trimBlocksToSize() defined in edu::toronto::cs::yasm::cfg::CFGraph
   function ensureCapacity(int) in line 166
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
   function entry() in line 200
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function exit() in line 210
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getBB(int) in line 124
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function getBBSafe(int) in line 108
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses function ensureCapacity(int) defined in edu::toronto::cs::yasm::cfg::CFGraph
   function getLabelMap() in line 215
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLabelUIDMap() in line 220
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hasBB(int) in line 131
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getBB(int) defined in edu::toronto::cs::yasm::cfg::CFGraph
   function main(String[]) in line 281
      protection public
      50 lines of code
      1 parameters
      8 conditional paths
      uses function CFGraph() defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses variable i defined in sparsemv.m
      uses function getBBSafe(int) defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function isLinked() defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
      uses function linkAfter(BasicBlock) defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
      uses function addEdge(BasicBlock,BasicBlock,boolean,boolean) defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function allBlocksFwd() defined in edu::toronto::cs::yasm::cfg::CFGraph
   function newBB() in line 96
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getBBSafe(int) defined in edu::toronto::cs::yasm::cfg::CFGraph
   function numBlocks() in line 276
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function size() in line 271
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function trimBlocksToSize() in line 181
      6 lines of code
      0 parameters
      1 conditional paths
   function CFGraph() in line 46
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
      uses function entry() defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function getBBSafe(int) defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function linkAfter(BasicBlock) defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
module edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
   function addStmt(Expr) in line 396
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getIndex() in line 401
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNext() in line 472
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPreds() in line 497
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPrev() in line 483
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStmts() in line 407
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSuccs() in line 493
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isLinked() in line 412
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function linkAfter(BasicBlock) in line 508
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function setPrev(BasicBlock) defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
      uses function setNext(BasicBlock) defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
      uses function getNext() defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
   function setNext(BasicBlock) in line 477
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setPrev(BasicBlock) in line 488
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setStmts(List< Expr >) in line 391
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function splitAtStmt(Expr) in line 417
      protection public
      53 lines of code
      1 parameters
      6 conditional paths
      uses function newBB() defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function setStmts(List< Expr >) defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
      uses function linkAfter(BasicBlock) defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
      uses function getSuccs() defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
      uses function addEdge(BasicBlock,BasicBlock,boolean,boolean) defined in edu::toronto::cs::yasm::cfg::CFGraph
   function BasicBlock(int) in line 379
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::yasm::cfg::CFGraph::Edge
   function equals(Object) in line 605
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function getSrc() defined in edu::toronto::cs::yasm::cfg::CFGraph::Edge
      uses function getDst() defined in edu::toronto::cs::yasm::cfg::CFGraph::Edge
   function getDst() in line 586
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSrc() in line 590
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isFalseValue() in line 600
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isTrueValue() in line 595
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function linkDst() in line 576
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses function getPreds() defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
   function linkSrc() in line 562
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses function getSuccs() defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
   function relinkSrc(BasicBlock) in line 542
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable res defined in visual.m
      uses macro definition assert defined in util.h
   function toString() in line 616
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getIndex() defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
   function unlinkSrc() in line 552
      8 lines of code
      0 parameters
      2 conditional paths
      uses function getSuccs() defined in edu::toronto::cs::yasm::cfg::CFGraph::BasicBlock
   function Edge(BasicBlock,BasicBlock,boolean,boolean) in line 527
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
   function Edge(BasicBlock,BasicBlock) in line 536
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/cfg/CFGSimplifier.java
module edu::toronto::cs::yasm::cfg::CFGSimplifier
   function simplify(CFGraph) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/cfg/SimpleBlockSimplifier.java
module edu::toronto::cs::yasm::cfg::SimpleBlockSimplifier
   inherits from edu::toronto::cs::yasm::cfg::CFGSimplifier
   function findSplitPt(List< Expr >) in line 53
      28 lines of code
      1 parameters
      6 conditional paths
      uses function isBranching(Expr) defined in edu::toronto::cs::yasm::cfg::SimpleBlockSimplifier
      uses function isFunctionCall(Expr) defined in edu::toronto::cs::yasm::cfg::SimpleBlockSimplifier
   function isBranching(Expr) in line 89
      5 lines of code
      1 parameters
      1 conditional paths
   function isFunctionCall(Expr) in line 102
      5 lines of code
      1 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function run(CFGraph) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function SimpleBlockSimplifier() defined in edu::toronto::cs::yasm::cfg::SimpleBlockSimplifier
   function simplify(CFGraph) in line 30
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function allBlocksFwd() defined in edu::toronto::cs::yasm::cfg::CFGraph
      uses function findSplitPt(List< Expr >) defined in edu::toronto::cs::yasm::cfg::SimpleBlockSimplifier
   function SimpleBlockSimplifier() in line 12
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/eqsolver/AbstractEquation.java
module edu::toronto::cs::yasm::eqsolver::AbstractEquation
   inherits from edu::toronto::cs::yasm::eqsolver::Equation
   abstract class
   function eval(Map< Integer, V >) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getDefVar() in line 34
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getUseVars() in line 39
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function eval(Map< Integer, V >) defined in edu::toronto::cs::yasm::eqsolver::AbstractEquation
   function isDownwardStable(Map< Integer, V >) in line 62
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function isUpwardStable(Map< Integer, V >) in line 57
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function maybeUnstable(Map< Integer, V >) in line 47
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function mayChange(Map< Integer, V >,int,V,V) in line 52
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function maybeUnstable(Map< Integer, V >) defined in edu::toronto::cs::yasm::eqsolver::AbstractEquation
   function AbstractEquation(int,int) in line 22
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function AbstractEquation(int,List< Integer >) in line 28
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/eqsolver/CopyEquation.java
module edu::toronto::cs::yasm::eqsolver::CopyEquation
   inherits from edu::toronto::cs::yasm::eqsolver::AbstractEquation
   function eval(Map< Integer, V >) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function maybeUnstable(Map< Integer, V >) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getDefVar() defined in edu::toronto::cs::yasm::eqsolver::AbstractEquation
   function CopyEquation(int,int) in line 17
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/eqsolver/EqSolver.java
module edu::toronto::cs::yasm::eqsolver::EqSolver
   function addVariableChangedEventListener(int,VariableChangedEventListener< V >) in line 145
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable listeners defined in edu::toronto::cs::yasm::eqsolver::EqSolver
   function addVarToWorkQueue(int) in line 170
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable wq defined in edu::toronto::cs::yasm::eqsolver::EqSolver
   function getEnv() in line 138
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable env defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses function addVariableChangedEventListener(int,VariableChangedEventListener< V >) defined in edu::toronto::cs::yasm::eqsolver::EqSolver
   function initSolver(EqSystem< V >) in line 57
      38 lines of code
      1 parameters
      6 conditional paths
      uses variable eqSystem defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses variable listeners defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses variable i defined in sparsemv.m
      uses variable historyObserver defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses function getUseVars() defined in edu::toronto::cs::yasm::eqsolver::Equation
   function initWorkQueue(Map< Integer, V >) in line 163
      6 lines of code
      1 parameters
      3 conditional paths
      uses variable eqSystem defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses variable env defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses function addVarToWorkQueue(int) defined in edu::toronto::cs::yasm::eqsolver::EqSolver
   function sendVariableChangedEvent(int,V,V) in line 151
      10 lines of code
      3 parameters
      3 conditional paths
      uses variable listeners defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses function valueChanged(EqSolver< V >,int,V,V) defined in edu::toronto::cs::yasm::eqsolver::VariableChangedEventListener
   function solve(Map< Integer, V >) in line 106
      protection public
      26 lines of code
      1 parameters
      3 conditional paths
      uses variable env defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses function initWorkQueue(Map< Integer, V >) defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses variable wq defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses variable eqSystem defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses function sendVariableChangedEvent(int,V,V) defined in edu::toronto::cs::yasm::eqsolver::EqSolver
   function EqSolver(EqSystem< V >) in line 45
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable wq defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses function initSolver(EqSystem< V >) defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses variable eqSystem defined in edu::toronto::cs::yasm::eqsolver::EqSolver
   variable env in line 28
   variable eqSystem in line 31
   variable historyObserver in line 36
   variable listeners in line 34
   variable wq in line 23
module edu::toronto::cs::yasm::eqsolver::EqSolver::SolverHistoryObserver
   inherits from edu::toronto::cs::yasm::eqsolver::VariableChangedEventListener
   function valueChanged(EqSolver< V >,int,V,V) in line 184
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
module edu::toronto::cs::yasm::eqsolver::EqSolver::DefaultVariableChangedEventListener
   inherits from edu::toronto::cs::yasm::eqsolver::VariableChangedEventListener
   function valueChanged(EqSolver< V >,int,V,V) in line 202
      protection public
      5 lines of code
      4 parameters
      2 conditional paths
      uses function getEnv() defined in edu::toronto::cs::yasm::eqsolver::EqSolver
      uses function addVarToWorkQueue(int) defined in edu::toronto::cs::yasm::eqsolver::EqSolver
   function DefaultVariableChangedEventListener(Equation< V >) in line 196
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/eqsolver/EqSystem.java
module edu::toronto::cs::yasm::eqsolver::EqSystem
   function addFirst(FixPtModality,Equation< V >) in line 78
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function newVarInfo(int,FixPtModality,Equation< V >) defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses variable leastId defined in edu::toronto::cs::yasm::eqsolver::EqSystem
   function addLast(FixPtModality,Equation< V >) in line 89
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function newVarInfo(int,FixPtModality,Equation< V >) defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses variable greatestId defined in edu::toronto::cs::yasm::eqsolver::EqSystem
   function boundVars() in line 164
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable varInfo defined in edu::toronto::cs::yasm::eqsolver::EqSystem
   function eqForVar(int) in line 101
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable varInfo defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses function getDefEq() defined in edu::toronto::cs::yasm::eqsolver::EqSystem::VarInfo
   function evaluate(Map< Integer, V >) in line 223
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable res defined in visual.m
      uses variable varInfo defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses function getDefVar() defined in edu::toronto::cs::yasm::eqsolver::Equation
      uses function eval(Map< Integer, V >) defined in edu::toronto::cs::yasm::eqsolver::Equation
   function getFreeVars() in line 121
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable freeVars defined in edu::toronto::cs::yasm::eqsolver::EqSystem
   function getFreshVar() in line 131
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable freshVar defined in edu::toronto::cs::yasm::eqsolver::EqSystem
   function isBound(int) in line 142
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable varInfo defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses variable v defined in visual.m
   function isClosed() in line 177
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFreeVars() defined in edu::toronto::cs::yasm::eqsolver::EqSystem
   function isEmpty() in line 198
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function size() defined in edu::toronto::cs::yasm::eqsolver::EqSystem
   function isFixpoint(Map< Integer, V >) in line 238
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable varInfo defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses function getDefVar() defined in edu::toronto::cs::yasm::eqsolver::Equation
      uses function eval(Map< Integer, V >) defined in edu::toronto::cs::yasm::eqsolver::Equation
   function isFree(int) in line 153
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable freeVars defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses variable v defined in visual.m
   function newVarInfo(int,FixPtModality,Equation< V >) in line 256
      38 lines of code
      3 parameters
      6 conditional paths
      uses function getDefVar() defined in edu::toronto::cs::yasm::eqsolver::Equation
      uses variable varInfo defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses variable freeVars defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses variable v defined in visual.m
      uses function getUseVars() defined in edu::toronto::cs::yasm::eqsolver::Equation
      uses function isBound(int) defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses variable freshVar defined in edu::toronto::cs::yasm::eqsolver::EqSystem
   function size() in line 188
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable varInfo defined in edu::toronto::cs::yasm::eqsolver::EqSystem
   function varComparator() in line 205
      protection public
      16 lines of code
      0 parameters
      2 conditional paths
      uses variable varInfo defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses function getId() defined in edu::toronto::cs::yasm::eqsolver::EqSystem::VarInfo
   function varModality(int) in line 107
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable varInfo defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses function getFpMod() defined in edu::toronto::cs::yasm::eqsolver::EqSystem::VarInfo
      uses variable ANY defined in edu::toronto::cs::yasm::eqsolver::EqSystem::FixPtModality
   function EqSystem() in line 65
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable varInfo defined in edu::toronto::cs::yasm::eqsolver::EqSystem
      uses variable freeVars defined in edu::toronto::cs::yasm::eqsolver::EqSystem
   variable freeVars in line 58
   variable freshVar in line 53
   variable greatestId in line 49
   variable leastId in line 45
   variable varInfo in line 40
module edu::toronto::cs::yasm::eqsolver::EqSystem::FixPtModality
   variable ANY in line 29
      protection public
   variable GFP in line 27
      protection public
   variable LFP in line 25
      protection public
module edu::toronto::cs::yasm::eqsolver::EqSystem::VarInfo
   function getDefEq() in line 329
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable defEq defined in edu::toronto::cs::yasm::eqsolver::EqSystem::VarInfo
   function getFpMod() in line 324
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable fpMod defined in edu::toronto::cs::yasm::eqsolver::EqSystem::VarInfo
   function getId() in line 319
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable id defined in edu::toronto::cs::yasm::eqsolver::EqSystem::VarInfo
   function getVar() in line 314
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable var defined in edu::toronto::cs::yasm::eqsolver::EqSystem::VarInfo
   function VarInfo(int,FixPtModality,Equation< V >) in line 305
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses variable defEq defined in edu::toronto::cs::yasm::eqsolver::EqSystem::VarInfo
      uses variable id defined in edu::toronto::cs::yasm::eqsolver::EqSystem::VarInfo
      uses variable fpMod defined in edu::toronto::cs::yasm::eqsolver::EqSystem::VarInfo
   variable defEq in line 303
   variable fpMod in line 301
   variable id in line 299
   variable var in line 298
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/eqsolver/Equation.java
module edu::toronto::cs::yasm::eqsolver::Equation
   function eval(Map< Integer, V >) in line 36
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getDefVar() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getUseVars() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function isDownwardStable(Map< Integer, V >) in line 85
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function isUpwardStable(Map< Integer, V >) in line 76
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function maybeUnstable(Map< Integer, V >) in line 50
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mayChange(Map< Integer, V >,int,V,V) in line 67
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/eqsolver/IntDomain.java
module edu::toronto::cs::yasm::eqsolver::IntDomain
   function bot() in line 29
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable BOT defined in edu::toronto::cs::yasm::eqsolver::IntDomain
   function intValue(int) in line 19
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function isBot(Value) in line 44
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable BOT defined in edu::toronto::cs::yasm::eqsolver::IntDomain
   function isConst(Value) in line 35
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable TOP defined in edu::toronto::cs::yasm::eqsolver::IntDomain
      uses variable BOT defined in edu::toronto::cs::yasm::eqsolver::IntDomain
   function isTop(Value) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable TOP defined in edu::toronto::cs::yasm::eqsolver::IntDomain
   function top() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable TOP defined in edu::toronto::cs::yasm::eqsolver::IntDomain
   function IntDomain() in line 12
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable TOP defined in edu::toronto::cs::yasm::eqsolver::IntDomain
      uses variable BOT defined in edu::toronto::cs::yasm::eqsolver::IntDomain
   variable BOT in line 9
   variable theDomain in line 6
      protection public
   variable TOP in line 8
module edu::toronto::cs::yasm::eqsolver::IntDomain::Value
   function equals(Object) in line 64
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function isConst(Value) defined in edu::toronto::cs::yasm::eqsolver::IntDomain
      uses function Value(int) defined in edu::toronto::cs::yasm::eqsolver::IntDomain::Value
      uses variable v defined in visual.m
   function hashCode() in line 76
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function intValue() in line 59
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toString() in line 82
      protection public
      6 lines of code
      0 parameters
      3 conditional paths
      uses function isTop(Value) defined in edu::toronto::cs::yasm::eqsolver::IntDomain
      uses function isBot(Value) defined in edu::toronto::cs::yasm::eqsolver::IntDomain
      uses variable v defined in visual.m
   function Value(int) in line 54
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/eqsolver/VariableChangedEventListener.java
module edu::toronto::cs::yasm::eqsolver::VariableChangedEventListener
   function valueChanged(EqSolver< V >,int,V,V) in line 23
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/junit/GenericTestCase.java
module edu::toronto::cs::yasm::junit::GenericTestCase
   inherits from junit::framework::TestCase
   function doTest() in line 96
      protection public
      51 lines of code
      0 parameters
      4 conditional paths
      uses function loadProperties(YasmApp,Properties) defined in edu::toronto::cs::yasm::junit::GenericTestCase
      uses variable properties defined in edu::toronto::cs::yasm::junit::GenericTestCase
      uses variable out defined in edu::toronto::cs::yasm::YasmApp
      uses variable err defined in edu::toronto::cs::yasm::YasmApp
      uses variable expected defined in edu::toronto::cs::yasm::junit::GenericTestCase
   function getProperties() in line 167
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable properties defined in edu::toronto::cs::yasm::junit::GenericTestCase
   function getRoot() in line 155
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable root defined in edu::toronto::cs::yasm::junit::GenericTestCase
   function loadProperties(YasmApp,Properties) in line 46
      49 lines of code
      2 parameters
      9 conditional paths
      uses variable root defined in edu::toronto::cs::yasm::junit::GenericTestCase
   function runTest() in line 147
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function doTest() defined in edu::toronto::cs::yasm::junit::GenericTestCase
   function setProperties(Properties) in line 173
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable properties defined in edu::toronto::cs::yasm::junit::GenericTestCase
   function setRoot(String) in line 161
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable root defined in edu::toronto::cs::yasm::junit::GenericTestCase
   function GenericTestCase() in line 28
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
      uses variable root defined in edu::toronto::cs::yasm::junit::GenericTestCase
   function GenericTestCase(String) in line 35
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable root defined in edu::toronto::cs::yasm::junit::GenericTestCase
   variable expected in line 26
   variable properties in line 24
   variable root in line 22
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/junit/SuiteHelper.java
module edu::toronto::cs::yasm::junit::SuiteHelper
   function createTestCase(String) in line 74
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function suite(File) in line 28
      protection public
      45 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
      uses function createTestCase(String) defined in edu::toronto::cs::yasm::junit::SuiteHelper
      uses function setProperties(Properties) defined in edu::toronto::cs::yasm::junit::GenericTestCase
module edu::toronto::cs::yasm::junit::SuiteHelper::PropertyFileFilter
   inherits from FileFilter
   function accept(File) in line 17
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/junit/YasrSuiteHelper.java
module edu::toronto::cs::yasm::junit::YasrSuiteHelper
   inherits from edu::toronto::cs::yasm::junit::SuiteHelper
   function createTestCase(String) in line 67
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function suite(File) in line 20
      protection public
      45 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
      uses function createTestCase(String) defined in edu::toronto::cs::yasm::junit::YasrSuiteHelper
      uses function setProperties(Properties) defined in edu::toronto::cs::yasm::junit::GenericTestCase
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/junit/YasrTestCase.java
module edu::toronto::cs::yasm::junit::YasrTestCase
   inherits from edu::toronto::cs::yasm::junit::GenericTestCase
   function doTest() in line 106
      protection public
      52 lines of code
      0 parameters
      2 conditional paths
      uses function loadProperties(YasrApp,Properties) defined in edu::toronto::cs::yasm::junit::YasrTestCase
      uses variable properties defined in edu::toronto::cs::yasm::junit::GenericTestCase
      uses function run() defined in edu::toronto::cs::yasm::YasrApp
      uses variable out defined in edu::toronto::cs::yasm::YasrApp
      uses macro definition fail defined in util.h
      uses variable err defined in edu::toronto::cs::yasm::YasrApp
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
   function loadProperties(YasrApp,Properties) in line 46
      59 lines of code
      2 parameters
      8 conditional paths
      uses variable root defined in edu::toronto::cs::yasm::junit::GenericTestCase
   function YasrTestCase() in line 28
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function YasrTestCase(String) in line 35
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/nontermination/EGPathGoal.java
module edu::toronto::cs::yasm::nontermination::EGPathGoal
   inherits from edu::toronto::cs::yasm::reachability::StateProofGoal
   function EGPathGoal(ProofGoal,NodeSet,AlgebraValue,Node) in line 23
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/nontermination/EGStepRule.java
module edu::toronto::cs::yasm::nontermination::EGStepRule
   inherits from edu::toronto::cs::yasm::reachability::ReachabilityProofRule
   function apply(ProofGoal) in line 40
      protection public
      103 lines of code
      1 parameters
      6 conditional paths
      uses function getState() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function getId() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function getValue() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function getNodes() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function edgesFrom(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function fwdImage(NodeSet,NodeSet) defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function isConstant() defined in edu::toronto::cs::mvset::MvSet
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable bot defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function cofactor(int,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function twoGoal(ProofGoal,ProofGoal) defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
   function EGStepRule(BelnapAlgebra,EdgeSet,MvSet) in line 32
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/nontermination/NonTerminationChecker.java
module edu::toronto::cs::yasm::nontermination::NonTerminationChecker
   function bwdImage(Edge,NodeSet,NodeSet,Collection) in line 398
      45 lines of code
      4 parameters
      6 conditional paths
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getAllDst() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses variable i defined in sparsemv.m
      uses function bwdImage(NodeSet,NodeSet,boolean) defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getEdgeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function edgesTo(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
   function bwdImage(CallEdge,FunctionSummaryEdge,NodeSet,NodeSet,Collection) in line 455
      78 lines of code
      5 parameters
      6 conditional paths
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses variable res defined in visual.m
      uses function getRelation() defined in edu::toronto::cs::yasm::pcfa::MvRelnEdge
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getEdgeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function edgesTo(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
   function computeEX() in line 176
      107 lines of code
      0 parameters
      7 conditional paths
      uses function getFunSummary() defined in edu::toronto::cs::yasm::pcfa::CallEdge
      uses function getReturnEdge() defined in edu::toronto::cs::yasm::pcfa::CallEdge
      uses function getCallEdge() defined in edu::toronto::cs::yasm::pcfa::FunctionSummaryEdge
      uses function getRelation() defined in edu::toronto::cs::yasm::pcfa::MvRelnEdge
      uses variable v defined in visual.m
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function setToReln(MvSet,MvSet) defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function getSrcIdReln() defined in edu::toronto::cs::yasm::pcfa::ReturnEdge
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getEdgeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function edgesTo(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function setSumNodeSet(NodeSet) defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function createNext() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function computeSummary() defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function bwdImage(Edge,NodeSet,NodeSet,Collection) defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function getNodeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function computeSummary() in line 285
      88 lines of code
      0 parameters
      8 conditional paths
      uses variable v defined in visual.m
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function setToReln(MvSet,MvSet) defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function extractPreStates(MvSet) defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getEdgeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function edgesTo(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function summaryToRelation(MvSet) defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function getPostToAuxMap() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getAuxToPostMap() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function bwdImage(Edge,NodeSet,NodeSet,Collection) defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function getSumNodeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function setSumNodeSet(NodeSet) defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function createNext() defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function doNonTermination() in line 67
      protection public
      24 lines of code
      0 parameters
      3 conditional paths
      uses function initialize() defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function doNonTerminationStep() defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function setNodeSet(NodeSet) defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function createNext() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function setSumNodeSet(NodeSet) defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function doNonTerminationStep() in line 159
      protection public
      15 lines of code
      0 parameters
      1 conditional paths
      uses function computeEX() defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
   function extractPreStates(MvSet) in line 381
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function getAuxCube() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function getModel() in line 61
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function initialize() in line 96
      61 lines of code
      0 parameters
      4 conditional paths
      uses function getSumNodeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getNodeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getEdgeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getSrcMap() defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function setNodeFalse(Node.NodeId) defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function setNodeTrue(Node.NodeId) defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function createNext() defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function setNodeFalse(Node.NodeId) in line 550
      13 lines of code
      1 parameters
      2 conditional paths
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getMvSetFactory() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
   function setNodeTrue(Node.NodeId) in line 535
      13 lines of code
      1 parameters
      2 conditional paths
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getMvSetFactory() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
   function setToReln(MvSet,MvSet) in line 386
      11 lines of code
      2 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function renameArgs(int[]) defined in edu::toronto::cs::mvset::MvSet
      uses function getPostToAuxMap() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function summaryToRelation(MvSet) in line 376
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function getAuxToPostMap() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function NonTerminationChecker(ReachabilityStructure) in line 53
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/CallEdge.java
module edu::toronto::cs::yasm::pcfa::CallEdge
   inherits from edu::toronto::cs::yasm::pcfa::MvRelnEdge
   function getBodySummary() in line 130
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFunSummary() in line 125
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getReturnEdge() in line 141
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSumCallReln() in line 151
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSumReturnEdge() in line 146
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setFunSummary(FunctionSummaryEdge) in line 119
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function setCallEdge(CallEdge) defined in edu::toronto::cs::yasm::pcfa::FunctionSummaryEdge
   function setReturnEdge(ReturnEdge) in line 136
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function updateBodySummary(MvSet,int[],int[]) in line 167
      protection public
      117 lines of code
      3 parameters
      2 conditional paths
      uses function update(MvSet) defined in edu::toronto::cs::yasm::pcfa::SummaryEdge
      uses function isSelfCall() defined in edu::toronto::cs::yasm::pcfa::FunctionSummaryEdge
      uses function getRelation() defined in edu::toronto::cs::yasm::pcfa::MvRelnEdge
      uses function toMvSet() defined in edu::toronto::cs::mvset::MvRelation
      uses function renameArgs(int[]) defined in edu::toronto::cs::mvset::MvSet
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses variable doAssert defined in edu::toronto::cs::mvset::MvSetMvRelation
      uses function getPreVariablesCube() defined in edu::toronto::cs::mvset::MvRelation
      uses function getPostVariablesCube() defined in edu::toronto::cs::mvset::MvRelation
      uses function getPreToPostMap() defined in edu::toronto::cs::mvset::MvRelation
      uses function getPostToPreMap() defined in edu::toronto::cs::mvset::MvRelation
      uses function setRelation(MvRelation) defined in edu::toronto::cs::yasm::pcfa::MvRelnEdge
   function CallEdge(Node.NodeId,Node.NodeId,MvRelation,FunctionSummaryEdge,SummaryEdge,ReturnEdge,ReturnEdge,MvRelation) in line 66
      protection public
      14 lines of code
      8 parameters
      1 conditional paths
      uses function setFunSummary(FunctionSummaryEdge) defined in edu::toronto::cs::yasm::pcfa::CallEdge
      uses function setReturnEdge(ReturnEdge) defined in edu::toronto::cs::yasm::pcfa::CallEdge
   function CallEdge(Node.NodeId,Node.NodeId,MvRelation,FunctionSummaryEdge,SummaryEdge,ReturnEdge) in line 89
      protection public
      27 lines of code
      6 parameters
      1 conditional paths
      uses function setFunSummary(FunctionSummaryEdge) defined in edu::toronto::cs::yasm::pcfa::CallEdge
      uses function setReturnEdge(ReturnEdge) defined in edu::toronto::cs::yasm::pcfa::CallEdge
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/Edge.java
module edu::toronto::cs::yasm::pcfa::Edge
   abstract class
   function bwdImage(NodeSet,NodeSet,boolean) in line 64
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function equals(Edge) in line 71
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
   function fwdImage(NodeSet,NodeSet) in line 68
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function getAllDst() in line 44
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getDst() in line 39
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSrc() in line 35
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hasDst(Node.NodeId) in line 49
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function equals(Object) defined in edu::toronto::cs::yasm::pcfa::Node
      uses function bwdImage(NodeSet,NodeSet,boolean) defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function fwdImage(NodeSet,NodeSet) defined in edu::toronto::cs::yasm::pcfa::Edge
   function hashCode() in line 76
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function hashCode() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
   function toString() in line 83
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
   function Edge(Node.NodeId,Node.NodeId) in line 24
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function Edge() in line 30
      3 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/EdgeSet.java
module edu::toronto::cs::yasm::pcfa::EdgeSet
   function add(Edge) in line 100
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function addEdge(Map,Node.NodeId,Edge) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function edge(Node.NodeId,Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getAllDst() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses variable i defined in sparsemv.m
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
   function addEdge(Map,Node.NodeId,Edge) in line 147
      11 lines of code
      3 parameters
      2 conditional paths
      uses function edges(Node.NodeId,Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function edge(Node.NodeId,Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
   function edge(Node.NodeId,Node.NodeId) in line 83
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function edgesFrom(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function iterator() defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function hasDst(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::Edge
   function edges(Node.NodeId,Node.NodeId) in line 71
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses function edgesFrom(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function iterator() defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function edge(Node.NodeId,Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function hasDst(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::Edge
   function edgesFrom(Node.NodeId) in line 59
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getEdges(Map,Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
   function edgesTo(Node.NodeId) in line 48
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getEdges(Map,Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
   function getDstMap() in line 140
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function getEdges(Map,Node.NodeId) in line 64
      5 lines of code
      2 parameters
      1 conditional paths
      uses function edges(Node.NodeId,Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
   function getSrcMap() in line 129
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function iterator() in line 37
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function size() in line 118
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function EdgeSet() in line 25
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/EntryNode.java
module edu::toronto::cs::yasm::pcfa::EntryNode
   inherits from edu::toronto::cs::yasm::pcfa::Node
   function getSummaryEdge() in line 28
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable sumEdge defined in edu::toronto::cs::yasm::pcfa::EntryNode
   function setSummaryEdge(SummaryEdge) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable sumEdge defined in edu::toronto::cs::yasm::pcfa::EntryNode
      uses variable v defined in visual.m
   function EntryNode(Node.NodeId,MvSet) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   variable sumEdge in line 17
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/FunctionSummaryEdge.java
module edu::toronto::cs::yasm::pcfa::FunctionSummaryEdge
   inherits from edu::toronto::cs::yasm::pcfa::SummaryEdge
   function getCallEdge() in line 60
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isSelfCall() in line 65
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setCallEdge(CallEdge) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function FunctionSummaryEdge(Node.NodeId,Node.NodeId,MvRelation) in line 29
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
   function FunctionSummaryEdge(Node.NodeId,Node.NodeId,MvRelation,boolean,MvSet) in line 44
      protection public
      10 lines of code
      5 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/HyperEdge.java
module edu::toronto::cs::yasm::pcfa::HyperEdge
   inherits from edu::toronto::cs::yasm::pcfa::Edge
   abstract class
   function equals(Object) in line 48
      protection public
      14 lines of code
      1 parameters
      8 conditional paths
      uses variable o defined in visual.m
      uses function HyperEdge(Node.NodeId,Node.NodeId[]) defined in edu::toronto::cs::yasm::pcfa::HyperEdge
      uses variable i defined in sparsemv.m
   function getAllDst() in line 36
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getDst() in line 31
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hasDst(Node.NodeId) in line 41
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function equals(Object) defined in edu::toronto::cs::yasm::pcfa::HyperEdge
   function hashCode() in line 64
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function HyperEdge(Node.NodeId,Node.NodeId[]) in line 25
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/MvRelnEdge.java
module edu::toronto::cs::yasm::pcfa::MvRelnEdge
   inherits from edu::toronto::cs::yasm::pcfa::Edge
   function bwdImage(NodeSet,NodeSet,boolean) in line 36
      protection public
      56 lines of code
      3 parameters
      8 conditional paths
      uses variable res defined in visual.m
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function equals(Object) in line 115
      protection public
      7 lines of code
      1 parameters
      4 conditional paths
      uses variable o defined in visual.m
   function fwdImage(NodeSet,NodeSet) in line 93
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable res defined in visual.m
      uses function fwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function getRelation() in line 27
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hashCode() in line 123
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function setRelation(MvRelation) in line 31
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function MvRelnEdge(Node.NodeId,Node.NodeId,MvRelation) in line 20
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/MvRelnHyperEdge.java
module edu::toronto::cs::yasm::pcfa::MvRelnHyperEdge
   inherits from edu::toronto::cs::yasm::pcfa::HyperEdge
   function bwdImage(NodeSet,NodeSet,boolean) in line 45
      protection public
      86 lines of code
      3 parameters
      11 conditional paths
      uses variable res defined in visual.m
      uses variable i defined in sparsemv.m
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses macro definition assert defined in util.h
      uses function dualBwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function geq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function infoTop() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function dumpMvSet(MvSet) in line 162
      6 lines of code
      1 parameters
      2 conditional paths
      uses function size() defined in edu::toronto::cs::mvset::MvSet
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses function toString() defined in edu::toronto::cs::yasm::pcfa::Edge
   function fwdImage(NodeSet,NodeSet) in line 135
      protection public
      25 lines of code
      2 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
      uses variable res defined in visual.m
      uses function fwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function MvRelnHyperEdge(Node.NodeId,Node.NodeId[],MvRelation[],boolean) in line 27
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
   function MvRelnHyperEdge(Node.NodeId,Node.NodeId[],MvRelation[]) in line 39
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/Node.java
module edu::toronto::cs::yasm::pcfa::Node
   function dumpMvSet(MvSet) in line 67
      11 lines of code
      1 parameters
      2 conditional paths
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses function toString() defined in edu::toronto::cs::yasm::pcfa::Node
   function equals(Object) in line 80
      protection public
      7 lines of code
      1 parameters
      4 conditional paths
      uses variable o defined in visual.m
      uses function getId() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function equals(Object) defined in edu::toronto::cs::yasm::pcfa::Node::NodeId
   function getId() in line 42
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable id defined in edu::toronto::cs::yasm::pcfa::Node
   function getValue() in line 47
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable value defined in edu::toronto::cs::yasm::pcfa::Node
   function hashCode() in line 88
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function hashCode() defined in edu::toronto::cs::yasm::pcfa::Node::NodeId
   function main(String[]) in line 132
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function nodeId(int) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toString() in line 57
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function dumpMvSet(MvSet) defined in edu::toronto::cs::yasm::pcfa::Node
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
   function Node(NodeId) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function Node(NodeId,MvSet) in line 36
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable value defined in edu::toronto::cs::yasm::pcfa::Node
   variable id in line 22
   variable value in line 24
module edu::toronto::cs::yasm::pcfa::Node::NodeId
   function equals(Object) in line 115
      protection public
      7 lines of code
      1 parameters
      4 conditional paths
      uses variable o defined in visual.m
      uses function intValue() defined in edu::toronto::cs::yasm::pcfa::Node::NodeId
   function hashCode() in line 123
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function intValue() in line 109
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 104
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function intValue() defined in edu::toronto::cs::yasm::pcfa::Node::NodeId
   function NodeId(int) in line 98
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/NodeSet.java
module edu::toronto::cs::yasm::pcfa::NodeSet
   function add(Node) in line 50
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function nodes() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses variable v defined in visual.m
   function add(Node.NodeId,MvSet) in line 54
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function copy() in line 91
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function NodeSet() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function nodes() defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function createNext() in line 97
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function getNext() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function NodeSet() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function nodes() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function setNext(NodeSet) defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function dump() in line 114
      protection public
      12 lines of code
      0 parameters
      2 conditional paths
      uses function nodes() defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function get(Node.NodeId) in line 45
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function nodes() defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function getCount() in line 108
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNext() in line 82
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPrev() in line 86
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function nodes() in line 62
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setNext(NodeSet) in line 73
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setPrev(NodeSet) in line 77
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function size() in line 68
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function nodes() defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function NodeSet() in line 31
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function NodeSet(Map,NodeSet,NodeSet,int) in line 36
      7 lines of code
      4 parameters
      1 conditional paths
      uses function nodes() defined in edu::toronto::cs::yasm::pcfa::NodeSet
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/ReturnEdge.java
module edu::toronto::cs::yasm::pcfa::ReturnEdge
   inherits from edu::toronto::cs::yasm::pcfa::MvRelnEdge
   function getSrcIdReln() in line 41
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ReturnEdge(Node.NodeId,Node.NodeId,MvRelation,MvSet) in line 26
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pcfa/SummaryEdge.java
module edu::toronto::cs::yasm::pcfa::SummaryEdge
   inherits from edu::toronto::cs::yasm::pcfa::MvRelnEdge
   function update(MvSet) in line 35
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getRelation() defined in edu::toronto::cs::yasm::pcfa::MvRelnEdge
      uses function setTrans(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses variable v defined in visual.m
   function SummaryEdge(Node.NodeId,Node.NodeId,MvRelation) in line 22
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pgenerator/BackEndGenerator.java
module edu::toronto::cs::yasm::pgenerator::BackEndGenerator
   inherits from edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
   function find() in line 52
      protection public
      36 lines of code
      0 parameters
      18 conditional paths
      uses variable tp defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses variable cStatePred defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
      uses variable pStatePred defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function query(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function getAssumptionsUsed() defined in edu::toronto::cs::tp::ITheoremProver
      uses function getPProgram() defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function getInconsistent() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function setInconsistent(Expr) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable stmt defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setInconsistent(Expr) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getInconsistent() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getAsmts() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function quickQuery(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses variable wp defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::wp::WPComputer
      uses function getVar() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function checkTruth(Expr,Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function setTrueCond(Expr) defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getTrueCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function setFalseCond(Expr) defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getFalseCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
   function getNewPreds() in line 208
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function BackEndGenerator(PProgram,PrllAsmtPStmt,Refiner,WPComputer,List< Expr >,List< Expr >) in line 39
      protection public
      10 lines of code
      6 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pgenerator/BasePredicateGenerator.java
module edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
   inherits from edu::toronto::cs::yasm::pgenerator::PredicateGenerator
   abstract class
   function computeWP(Expr) in line 112
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable wp defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::wp::WPComputer
   function getNewPreds() in line 119
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable newPreds defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
   function getPProgram() in line 82
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable pProgram defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
   function hasPredicate(Expr) in line 95
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses variable existingPred defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
   function BasePredicateGenerator(PProgram,PrllAsmtPStmt,Refiner,WPComputer,List< Expr >,List< Expr >) in line 51
      protection public
      22 lines of code
      6 parameters
      1 conditional paths
      uses variable pProgram defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses variable stmt defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses variable tp defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses variable existingPred defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function getPredicates() defined in edu::toronto::cs::yasm::abstractor::Refiner
      uses variable wp defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses variable pStatePred defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses variable cStatePred defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses variable newPreds defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
   variable cStatePred in line 30
   variable existingPred in line 19
   variable newPreds in line 33
   variable pProgram in line 36
   variable pStatePred in line 28
   variable stmt in line 17
   variable tp in line 18
   variable wp in line 25
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pgenerator/ChainPredicateGenerator.java
module edu::toronto::cs::yasm::pgenerator::ChainPredicateGenerator
   inherits from edu::toronto::cs::yasm::pgenerator::PredicateGenerator
   function add(PredicateGenerator) in line 27
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function add(PredicateGenerator) defined in edu::toronto::cs::yasm::pgenerator::ChainPredicateGenerator
      uses variable p defined in visual.m
   function find() in line 33
      protection public
      12 lines of code
      0 parameters
      3 conditional paths
   function getNewPreds() in line 48
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getNewPreds() defined in edu::toronto::cs::yasm::pgenerator::PredicateGenerator
   function ChainPredicateGenerator() in line 22
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pgenerator/InconsistentDestinationGenerator.java
module edu::toronto::cs::yasm::pgenerator::InconsistentDestinationGenerator
   inherits from edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
   function find() in line 44
      protection public
      17 lines of code
      0 parameters
      5 conditional paths
      uses variable tp defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses variable cStatePred defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
      uses function query(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses function getAssumptionsUsed() defined in edu::toronto::cs::tp::ITheoremProver
      uses function getPProgram() defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function getInconsistent() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
      uses function setInconsistent(Expr) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getInconsistent() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function InconsistentDestinationGenerator(PProgram,Refiner,List< Expr >) in line 23
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
   function InconsistentDestinationGenerator(PProgram,Refiner,List< Expr >,PFunctionDef) in line 33
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pgenerator/PredicateGenerator.java
module edu::toronto::cs::yasm::pgenerator::PredicateGenerator
   function find() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getNewPreds() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pgenerator/WPPredicateGenerator.java
module edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator
   inherits from edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
   abstract class
   function find() in line 42
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable newPreds defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function newPred() defined in edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator
   function findSuspects(List< Expr >,List< Expr >) in line 94
      1 lines of code
      2 parameters
      1 conditional paths
   function maybeTransition(Expr,Expr) in line 111
      30 lines of code
      2 parameters
      2 conditional paths
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses variable tp defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses variable pStatePred defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function query(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
   function newPred() in line 55
      protection public
      28 lines of code
      0 parameters
      3 conditional paths
      uses variable cStatePred defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function findSuspects(List< Expr >,List< Expr >) defined in edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator
      uses variable pStatePred defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function updatePred(List< Expr >) defined in edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator
   function updatePred(List< Expr >) in line 150
      51 lines of code
      1 parameters
      6 conditional paths
      uses variable newPreds defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses variable wp defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses variable existingPred defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function hasPredicate(Expr) defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses function getPProgram() defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
      uses macro definition assert defined in util.h
      uses variable stmt defined in edu::toronto::cs::yasm::pgenerator::BasePredicateGenerator
   function WPPredicateGenerator(PProgram,PrllAsmtPStmt,Refiner,WPComputer,List< Expr >,List< Expr >) in line 30
      protection public
      9 lines of code
      6 parameters
      1 conditional paths
      uses variable p defined in visual.m
module edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator::WPDiff
   inherits from edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator
   function findSuspects(List< Expr >,List< Expr >) in line 231
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function maybeTransition(Expr,Expr) defined in edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator
   function WPDiff(PProgram,PrllAsmtPStmt,Refiner,WPComputer,List< Expr >,List< Expr >) in line 211
      protection public
      9 lines of code
      6 parameters
      1 conditional paths
      uses variable p defined in visual.m
module edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator::WPSame
   inherits from edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator
   function findSuspects(List< Expr >,List< Expr >) in line 276
      10 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function maybeTransition(Expr,Expr) defined in edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator
   function WPSame(PProgram,PrllAsmtPStmt,Refiner,WPComputer,List< Expr >,List< Expr >) in line 257
      protection public
      9 lines of code
      6 parameters
      1 conditional paths
      uses variable p defined in visual.m
module edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator::WPAll
   inherits from edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator
   function findSuspects(List< Expr >,List< Expr >) in line 319
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function maybeTransition(Expr,Expr) defined in edu::toronto::cs::yasm::pgenerator::WPPredicateGenerator
   function WPAll(PProgram,PrllAsmtPStmt,Refiner,WPComputer,List< Expr >,List< Expr >) in line 300
      protection public
      9 lines of code
      6 parameters
      1 conditional paths
      uses variable p defined in visual.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/AsmtPStmt.java
module edu::toronto::cs::yasm::pprogram::AsmtPStmt
   inherits from edu::toronto::cs::yasm::pprogram::PStmt
   function getFalseCond() in line 55
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTrueCond() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVar() in line 45
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function printMe(PrintWriter) in line 69
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function setFalseCond(Expr) in line 64
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setTrueCond(Expr) in line 60
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function AsmtPStmt(Expr,Expr,Expr) in line 38
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/AsmtRemoverVisitor.java
module edu::toronto::cs::yasm::pprogram::AsmtRemoverVisitor
   inherits from edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
   function visitFunctionCallEpilogue(FunctionCallEpilogue,Object) in line 91
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPrllAsmt(PrllAsmtPStmt,Object) defined in edu::toronto::cs::yasm::pprogram::AsmtRemoverVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function visitFunctionCallPrologue(FunctionCallPrologue,Object) in line 86
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPrllAsmt(PrllAsmtPStmt,Object) defined in edu::toronto::cs::yasm::pprogram::AsmtRemoverVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function visitFunctionDef(PFunctionDef,Object) in line 40
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses function getHead() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable s defined in visual.m
      uses function getEntryPoint() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable o defined in visual.m
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function visitIf(IfPStmt,Object) in line 55
      protection public
      23 lines of code
      2 parameters
      5 conditional paths
      uses variable s defined in visual.m
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable o defined in visual.m
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function visitPProgram(PProgram,Object) in line 31
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable p defined in visual.m
      uses variable o defined in visual.m
   function visitPrllAsmt(PrllAsmtPStmt,Object) in line 80
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function AsmtRemoverVisitor(Expr) in line 25
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/BasePProgramVisitor.java
module edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
   inherits from edu::toronto::cs::yasm::pprogram::PProgramVisitor
   function visitBreak(BreakPStmt,Object) in line 19
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitGoto(GotoPStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function visitDecl(PDecl,Object) in line 59
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function visitFunctionCall(FunctionCallPStmt,Object) in line 24
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPStmt(PStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function visitFunctionCallEpilogue(FunctionCallEpilogue,Object) in line 34
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPrllAsmt(PrllAsmtPStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function visitFunctionCallPrologue(FunctionCallPrologue,Object) in line 29
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPrllAsmt(PrllAsmtPStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function visitFunctionDef(PFunctionDef,Object) in line 64
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function visitGoto(GotoPStmt,Object) in line 39
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPStmt(PStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function visitIf(IfPStmt,Object) in line 44
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPStmt(PStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function visitNDGoto(NDGotoPStmt,Object) in line 49
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPStmt(PStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function visitPProgram(PProgram,Object) in line 14
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function visitPrllAsmt(PrllAsmtPStmt,Object) in line 54
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPStmt(PStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function visitPStmt(PStmt,Object) in line 69
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function visitReturn(ReturnPStmt,Object) in line 74
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPrllAsmt(PrllAsmtPStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable o defined in visual.m
   function visitReturnSelector(ReturnSelectorPStmt,Object) in line 79
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPStmt(PStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable o defined in visual.m
   function visitSkip(SkipPStmt,Object) in line 84
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitPStmt(PStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function visitWhile(WhilePStmt,Object) in line 89
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function visitIf(IfPStmt,Object) defined in edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
      uses variable s defined in visual.m
      uses variable o defined in visual.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/BreakPStmt.java
module edu::toronto::cs::yasm::pprogram::BreakPStmt
   inherits from edu::toronto::cs::yasm::pprogram::GotoPStmt
   function accept(PProgramVisitor,Object) in line 18
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function BreakPStmt(PFunctionDef,Block) in line 8
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function BreakPStmt(PFunctionDef,Expr) in line 13
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/ConditionalBranchPStmt.java
module edu::toronto::cs::yasm::pprogram::ConditionalBranchPStmt
   inherits from edu::toronto::cs::yasm::pprogram::PStmt
   function getCond() in line 39
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFalseDest() in line 64
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
   function getFalseGoto() in line 54
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTrueDest() in line 59
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
   function getTrueGoto() in line 49
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function printMe(PrintWriter) in line 69
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
   function setCond(PCond) in line 44
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ConditionalBranchPStmt(PFunctionDef,Expr,PCond,GotoPStmt,GotoPStmt) in line 29
      protection public
      8 lines of code
      5 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/CondMvRelation.java
module edu::toronto::cs::yasm::pprogram::CondMvRelation
   inherits from edu::toronto::cs::mvset::MvRelation
   function bwdImage(MvSet) in line 33
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function dualBwdImage(MvSet) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function fwdImage(MvSet) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function getPostToPreMap() in line 100
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPostVariablesCube() in line 72
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreToPostMap() in line 86
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreVariablesCube() in line 59
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function setTrans(MvSet) in line 25
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function toMvSet() in line 47
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CondMvRelation(MvSet,MvSet) in line 18
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function not() defined in edu::toronto::cs::mvset::MvSet
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/FunctionCallEpilogue.java
module edu::toronto::cs::yasm::pprogram::FunctionCallEpilogue
   inherits from edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
   function accept(PProgramVisitor,Object) in line 31
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function getCall() in line 70
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLineNum() in line 75
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getCall() defined in edu::toronto::cs::yasm::pprogram::FunctionCallEpilogue
      uses function getLineNum() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
   function getWPComputer() in line 36
      protection public
      33 lines of code
      0 parameters
      5 conditional paths
      uses function getReturnVar() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getSourceExpr() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getExprFactory() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getCallee() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getReturnValueVar() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable ASSIGN defined in edu::toronto::cs::expr::CILAssignOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses variable MODIFY_EXPR defined in edu::toronto::cs::expr::CStmtOp
      uses variable ID defined in edu::toronto::cs::yasm::wp::ExprWPComputer
   function printMe(PrintWriter) in line 81
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses function getSourceBlock() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getReturnVar() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getCallee() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getReturnValueVar() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function FunctionCallEpilogue(FunctionCallPStmt) in line 17
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/FunctionCallMvRelation.java
module edu::toronto::cs::yasm::pprogram::FunctionCallMvRelation
   inherits from edu::toronto::cs::mvset::MvRelation
   function bwdImage(MvSet) in line 40
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
   function dualBwdImage(MvSet) in line 35
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function bwdImage(MvSet) defined in edu::toronto::cs::yasm::pprogram::FunctionCallMvRelation
      uses variable v defined in visual.m
   function fwdImage(MvSet) in line 28
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function fwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
   function getPostToPreMap() in line 101
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPostVariablesCube() in line 73
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreToPostMap() in line 87
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreVariablesCube() in line 60
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function setTrans(MvSet) in line 24
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function toMvSet() in line 49
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function FunctionCallMvRelation(MvSet,MvSet,MvSet,MvRelation) in line 15
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/FunctionCallPrologue.java
module edu::toronto::cs::yasm::pprogram::FunctionCallPrologue
   inherits from edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
   function accept(PProgramVisitor,Object) in line 27
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function getCall() in line 22
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLineNum() in line 33
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getCall() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPrologue
      uses function getLineNum() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
   function getWPComputer() in line 52
      protection public
      23 lines of code
      0 parameters
      2 conditional paths
      uses function getFullArgumentsExpr() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getFunctionDef() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getFullParametersExpr() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function printMe(PrintWriter) in line 39
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function getSourceBlock() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getFunctionDef() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getFullParametersExpr() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getFullArgumentsExpr() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
   function FunctionCallPrologue(FunctionCallPStmt) in line 16
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/FunctionCallPStmt.java
module edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
   inherits from edu::toronto::cs::yasm::pprogram::PStmt
   function accept(PProgramVisitor,Object) in line 60
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function getArgumentsBlock() in line 87
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFunctionCallArgs() defined in edu::toronto::cs::cparser::block::Block
   function getArgumentsExpr() in line 92
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getCallee() in line 164
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getCallIndex() in line 126
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFullArgumentsExpr() in line 103
      protection public
      22 lines of code
      0 parameters
      4 conditional paths
      uses function args() defined in edu::toronto::cs::expr::Expr
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getExprFactory() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable LIST defined in edu::toronto::cs::expr::CILListOp
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses function op() defined in edu::toronto::cs::expr::Expr
   function getFunctionDef() in line 159
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFunctionName() in line 49
      protection public
      10 lines of code
      0 parameters
      3 conditional paths
      uses function getFunctionCallName() defined in edu::toronto::cs::cparser::block::Block
   function getLineNum() in line 174
      protection public
      14 lines of code
      0 parameters
      3 conditional paths
      uses function getSourceExpr() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getLogues() in line 141
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getResultVarName() in line 66
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getFunctionCallReturnVarName() defined in edu::toronto::cs::cparser::block::Block
   function getReturnVar() in line 74
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
   function printMe(PrintWriter) in line 169
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setCallee(PFunctionDef) in line 154
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setCallIndex(int) in line 131
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setFunctionDef(PFunctionDef) in line 149
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setLogues(PStmt) in line 136
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setReturnVar(Expr) in line 82
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function FunctionCallPStmt(PFunctionDef,Block) in line 27
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getCallIndex() defined in edu::toronto::cs::cparser::block::Block
   function FunctionCallPStmt(PFunctionDef,Expr) in line 33
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function FunctionCallPStmt(PFunctionDef,Expr,Expr) in line 38
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/GotoPStmt.java
module edu::toronto::cs::yasm::pprogram::GotoPStmt
   inherits from edu::toronto::cs::yasm::pprogram::PStmt
   function accept(PProgramVisitor,Object) in line 79
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function getDest() in line 84
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLineNum() in line 53
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function getSourceExpr() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getTargetLabel() in line 62
      protection public
      8 lines of code
      0 parameters
      3 conditional paths
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function printMe(PrintWriter) in line 113
      protection public
      28 lines of code
      1 parameters
      5 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
   function setDest(PStmt) in line 89
      protection public
      23 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
   function setTargetLabel(String) in line 71
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function GotoPStmt() in line 22
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function GotoPStmt(PFunctionDef,Block) in line 26
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function getGotoTargetLabel() defined in edu::toronto::cs::cparser::block::Block
   function GotoPStmt(PFunctionDef,Expr) in line 33
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function setTargetLabel(String) defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses macro definition assert defined in util.h
   function GotoPStmt(PStmt) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function setDest(PStmt) defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
   function GotoPStmt(String) in line 48
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function setTargetLabel(String) defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/IfPStmt.java
module edu::toronto::cs::yasm::pprogram::IfPStmt
   inherits from edu::toronto::cs::yasm::pprogram::PStmt
   function accept(PProgramVisitor,Object) in line 71
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function getCond() in line 97
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getElseGoto() in line 112
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getElseStmt() in line 87
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getExitGoto() in line 117
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLineNum() in line 135
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function getSourceExpr() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getThenGoto() in line 107
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getThenStmt() in line 77
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function printMe(PrintWriter) in line 123
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getTargetLabel() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
   function setCond(PCond) in line 102
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setElseStmt(PStmt) in line 92
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setThenStmt(PStmt) in line 82
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function IfPStmt(PFunctionDef,Block,PCond,PStmt,PStmt) in line 43
      protection public
      13 lines of code
      5 parameters
      1 conditional paths
   function IfPStmt(PFunctionDef,Expr,PCond,PStmt,PStmt) in line 57
      protection public
      13 lines of code
      5 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/InliningReachabilityCompiler.java
module edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   inherits from edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
   inherits from edu::toronto::cs::yasm::pprogram::PProgramReachabilityCompiler
   function compile() in line 146
      protection public
      38 lines of code
      0 parameters
      1 conditional paths
      uses function seal() defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function variableMap(int,int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function getVariableIds(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getStatePresenter() defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   function compilePStmtBlock(PStmt,Object) in line 754
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable s defined in visual.m
      uses variable o defined in visual.m
   function createContext(PFunctionDef) in line 1033
      25 lines of code
      1 parameters
      2 conditional paths
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable preds defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function inScope(PFunctionDef,PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable vars defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses variable preCube defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function getVariableIds(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses variable postCube defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable preToPost defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function variableMap(int,int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses variable postToPre defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function getInconsistent() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable invar defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function exprToMvSet(Expr) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses variable skipMvSet defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function doSkip(List) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   function currToNext(MvSet) in line 823
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function doAssign(MvSet,MvSet,MvSet) in line 589
      20 lines of code
      3 parameters
      1 conditional paths
      uses function currToNext(MvSet) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function infoAnd(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function infoOr(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function doInit() in line 651
      36 lines of code
      0 parameters
      5 conditional paths
      uses function getContext(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getMainFunctionDef() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable vars defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function doAssign(MvSet,MvSet,MvSet) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function toMvRelation(MvSet,MvSet,CompilationContext) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   function doIteBranch(MvSet) in line 511
      5 lines of code
      1 parameters
      1 conditional paths
      uses function toMvRelation(MvSet,MvSet,CompilationContext) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function currToNext(MvSet) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function doSkip(List) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable vars defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
   function doNDUpdate(NDAsmtPStmt) in line 565
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function getUpdates() defined in edu::toronto::cs::yasm::pprogram::NDAsmtPStmt
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function doAssign(MvSet,MvSet,MvSet) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function exprToMvSet(Expr) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getVar() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getTrueCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getFalseCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
   function doPrllAssign(PrllAsmtPStmt,CompilationContext) in line 518
      20 lines of code
      2 parameters
      4 conditional paths
      uses function getAsmts() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function doNDUpdate(NDAsmtPStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function doUpdate(AsmtPStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getInconsistent() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function exprToMvSet(Expr) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function toMvRelation(MvSet,MvSet,CompilationContext) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   function doPrllAssign(PrllAsmtPStmt,CompilationContext,CompilationContext) in line 539
      16 lines of code
      3 parameters
      3 conditional paths
      uses function getAsmts() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function doNDUpdate(NDAsmtPStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function doUpdate(AsmtPStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function toMvRelation(MvSet,MvSet,CompilationContext) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   function doSkip(List) in line 617
      28 lines of code
      1 parameters
      4 conditional paths
      uses variable o defined in visual.m
      uses function currToNext(MvSet) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::mvset::MvSet
   function doUpdate(AsmtPStmt) in line 557
      7 lines of code
      1 parameters
      1 conditional paths
      uses function doAssign(MvSet,MvSet,MvSet) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function exprToMvSet(Expr) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getVar() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getTrueCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getFalseCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
   function dumpMvSet(MvSet) in line 1131
      10 lines of code
      1 parameters
      2 conditional paths
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
   function excludeScope(List< Expr >,PFunctionDef) in line 920
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable p defined in visual.m
      uses function getPredicateScope(Expr) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function exprToMvSet(Expr) in line 771
      43 lines of code
      1 parameters
      11 conditional paths
      uses variable p defined in visual.m
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getByName(Expr) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable TTOP defined in edu::toronto::cs::expr::BiLatticeOp
      uses variable TRUE defined in edu::toronto::cs::expr::BoolOp
      uses variable TBOT defined in edu::toronto::cs::expr::BiLatticeOp
      uses variable FALSE defined in edu::toronto::cs::expr::BoolOp
      uses variable IBOT defined in edu::toronto::cs::expr::BiLatticeOp
      uses variable ITOP defined in edu::toronto::cs::expr::BiLatticeOp
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses variable AND defined in edu::toronto::cs::expr::BoolOp
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function dump() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
   function getContext(PFunctionDef) in line 1013
      12 lines of code
      1 parameters
      3 conditional paths
      uses function createContext(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   function getDstCtx(PStmt) in line 1000
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getContext(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable s defined in visual.m
   function getSrcCtx(PStmt) in line 988
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getContext(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable s defined in visual.m
   function getStatePresenter() in line 108
      protection public
      37 lines of code
      0 parameters
      4 conditional paths
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
   function inScope(PFunctionDef,PFunctionDef) in line 941
      5 lines of code
      2 parameters
      1 conditional paths
      uses function reduceToScope(List< Expr >,PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getFuncPredicates(Object) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function inScope(PFunctionDef) in line 951
      6 lines of code
      1 parameters
      1 conditional paths
      uses function reduceToScope(List< Expr >,PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getFuncPredicates(Object) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function intToNodeId(int) in line 834
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function isSelfCall(FunctionCallPrologue) in line 970
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getCall() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPrologue
      uses function getFunctionDef() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
   function locals(PFunctionDef) in line 958
      4 lines of code
      1 parameters
      1 conditional paths
      uses function excludeScope(List< Expr >,PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function inScope(PFunctionDef,PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   function reduceToScope(List< Expr >,PFunctionDef) in line 901
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable p defined in visual.m
      uses function getPredicateScope(Expr) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function seal() in line 697
      47 lines of code
      0 parameters
      3 conditional paths
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function setMvSetFactory(MvSetFactory) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function top() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function infoTop() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function infoBot() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function getVariableIds(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function variableMap(int,int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getPProgramPredicateManager() defined in edu::toronto::cs::yasm::pprogram::PProgram
   function setMaxDDVars(int) in line 103
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setPProgram(PProgram) in line 98
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toMvRelation(MvSet,MvSet,CompilationContext) in line 852
      17 lines of code
      3 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses variable skipMvSet defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable invar defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable preCube defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable postCube defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable preToPost defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable postToPre defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
   function toMvRelation(MvSet,CompilationContext) in line 871
      4 lines of code
      2 parameters
      1 conditional paths
      uses function toMvRelation(MvSet,MvSet,CompilationContext) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable v defined in visual.m
   function toMvRelation(MvSet,CompilationContext,CompilationContext) in line 880
      9 lines of code
      3 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable preCube defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable postCube defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable preToPost defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable postToPre defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
   function toNodeId(PStmt) in line 846
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in visual.m
   function visitFunctionCallPrologue(FunctionCallPrologue,Object) in line 460
      protection public
      38 lines of code
      2 parameters
      3 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getCall() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPrologue
      uses function getFunctionDef() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function doPrllAssign(PrllAsmtPStmt,CompilationContext) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getContext(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getReturnSelector() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getReturnIndex() defined in edu::toronto::cs::yasm::pprogram::ReturnSelectorPStmt
      uses function getCallIndex() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function add(Edge) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable o defined in visual.m
   function visitFunctionDef(PFunctionDef,Object) in line 234
      protection public
      30 lines of code
      2 parameters
      1 conditional paths
      uses function getContext(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function compilePStmtBlock(PStmt,Object) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getHead() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable o defined in visual.m
   function visitGoto(GotoPStmt,Object) in line 359
      protection public
      36 lines of code
      2 parameters
      2 conditional paths
      uses variable invar defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function excludeScope(List< Expr >,PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable preds defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function add(Edge) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable o defined in visual.m
   function visitIf(IfPStmt,Object) in line 272
      protection public
      38 lines of code
      2 parameters
      2 conditional paths
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses variable invar defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function exprToMvSet(Expr) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function doIteBranch(MvSet) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function add(Edge) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function compilePStmtBlock(PStmt,Object) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getThenStmt() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses variable o defined in visual.m
      uses function getElseStmt() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
   function visitInit(SkipPStmt,Object) in line 350
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function add(Edge) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function doInit() defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable o defined in visual.m
   function visitNDGoto(NDGotoPStmt,Object) in line 403
      protection public
      24 lines of code
      2 parameters
      2 conditional paths
      uses function getDests() defined in edu::toronto::cs::yasm::pprogram::NDGotoPStmt
      uses variable i defined in sparsemv.m
      uses variable d defined in crunch2parms.m
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable invar defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function add(Edge) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses variable o defined in visual.m
   function visitPProgram(PProgram,Object) in line 198
      protection public
      27 lines of code
      2 parameters
      2 conditional paths
      uses function createContext(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function compilePStmtBlock(PStmt,Object) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable p defined in visual.m
      uses variable o defined in visual.m
   function visitPrllAsmt(PrllAsmtPStmt,Object) in line 319
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function add(Edge) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable s defined in visual.m
      uses function doPrllAssign(PrllAsmtPStmt,CompilationContext) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable o defined in visual.m
   function visitReturnSelector(ReturnSelectorPStmt,Object) in line 428
      protection public
      31 lines of code
      2 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses variable v defined in visual.m
      uses function getDests() defined in edu::toronto::cs::yasm::pprogram::ReturnSelectorPStmt
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function excludeScope(List< Expr >,PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable preds defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function add(Edge) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getReturnIndex() defined in edu::toronto::cs::yasm::pprogram::ReturnSelectorPStmt
      uses variable o defined in visual.m
   function visitSkip(SkipPStmt,Object) in line 336
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function visitInit(SkipPStmt,Object) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable o defined in visual.m
      uses function add(Edge) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable invar defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
   function InliningReachabilityCompiler() in line 87
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
module edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
   variable invar in line 1105
   variable postCube in line 1086
   variable postToPre in line 1099
   variable preCube in line 1081
   variable preds in line 1070
   variable preToPost in line 1093
   variable skipMvSet in line 1111
   variable vars in line 1075
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/NDAsmtPStmt.java
module edu::toronto::cs::yasm::pprogram::NDAsmtPStmt
   inherits from edu::toronto::cs::yasm::pprogram::AsmtPStmt
   function addUpdate(Expr,Expr) in line 37
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function getVar() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
   function addUpdate(AsmtPStmt) in line 42
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function getVar() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
   function getFalseCond() in line 59
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function getTrueCond() in line 53
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function getUpdates() in line 32
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function printMe(PrintWriter) in line 47
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setFalseCond() in line 69
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function setTrueCond() in line 65
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function NDAsmtPStmt(Expr) in line 26
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/NDGotoPStmt.java
module edu::toronto::cs::yasm::pprogram::NDGotoPStmt
   inherits from edu::toronto::cs::yasm::pprogram::PStmt
   function accept(PProgramVisitor,Object) in line 48
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function getDest() in line 64
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
   function getDests() in line 54
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTargetLabels() in line 59
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function printMe(PrintWriter) in line 81
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function PStmt() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function print(PrintWriter) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
   function setDest(PStmt) in line 74
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function NDGotoPStmt(PFunctionDef,Block) in line 15
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
   function NDGotoPStmt(PFunctionDef,Expr) in line 34
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PCond.java
module edu::toronto::cs::yasm::pprogram::PCond
   function computeExpr(ExprFactory) in line 137
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses macro definition assert defined in util.h
      uses function setOrigCond(Expr) defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function getOrigCond() defined in edu::toronto::cs::yasm::pprogram::PCond
   function fromCBool(Expr) in line 42
      protection public
      57 lines of code
      1 parameters
      12 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses variable i defined in sparsemv.m
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function getObject() defined in edu::toronto::cs::expr::JavaObjectOp
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
   function getCond() in line 100
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getOrigCond() in line 115
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getRefinerInfo() in line 131
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function getSourceCond() in line 105
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setCond(Expr) in line 110
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setOrigCond(Expr) in line 120
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setRefinerInfo(Object) in line 125
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses variable o defined in visual.m
   function toString() in line 154
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function PCond(Block,Expr) in line 29
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function PCond(Expr,Expr) in line 35
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function fromCBool(Expr) defined in edu::toronto::cs::yasm::pprogram::PCond
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PDecl.java
module edu::toronto::cs::yasm::pprogram::PDecl
   function accept(PProgramVisitor,Object) in line 29
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function declare(ITheoremProver) in line 41
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function declare(SymbolTable) in line 54
      protection public
      25 lines of code
      1 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function ptrChain(int,Expr) defined in edu::toronto::cs::yasm::pprogram::PDecl
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
   function getSourceExpr() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ptrChain(int,Expr) in line 80
      7 lines of code
      2 parameters
      2 conditional paths
   function PDecl(Block) in line 14
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function PDecl(Expr) in line 19
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PDecls.java
module edu::toronto::cs::yasm::pprogram::PDecls
   function getSourceDecls() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function PDecls(Block) in line 9
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PFunctionDef.java
module edu::toronto::cs::yasm::pprogram::PFunctionDef
   function accept(PProgramVisitor,Object) in line 135
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function addReturnSite(FunctionCallEpilogue) in line 129
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function addToHead(PStmt) in line 190
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function setTail(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable v defined in visual.m
   function callSiteLabel(int) in line 146
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function entryLabel() in line 177
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function getCFG() in line 100
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getEntry() in line 110
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getEntryPoint() in line 200
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getExprFactory() in line 366
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getExprFactory() defined in edu::toronto::cs::yasm::pprogram::PProgram
   function getFormalParams() in line 255
      protection public
      17 lines of code
      0 parameters
      3 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getExprFactory() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function args() defined in edu::toronto::cs::expr::Expr
   function getFullParametersExpr() in line 334
      protection public
      20 lines of code
      0 parameters
      4 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getExprFactory() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getReturnIndexVar() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function args() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable LIST defined in edu::toronto::cs::expr::CILListOp
      uses function naryApply(Expr[]) defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
   function getFunctionName() in line 226
      protection public
      13 lines of code
      0 parameters
      5 conditional paths
      uses function getFunctionName() defined in edu::toronto::cs::cparser::block::Block
   function getHead() in line 195
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getInconsistent() in line 319
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLineNum() in line 288
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses function getSourceExpr() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getLocalDecls() in line 210
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNumCallSites() in line 215
      protection public
      10 lines of code
      0 parameters
      3 conditional paths
      uses function getNumCallSites() defined in edu::toronto::cs::cparser::block::Block
   function getParent() in line 273
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getReturnIndexVar() in line 324
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getReturnSelector() in line 120
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getReturnType(ITheoremProver) in line 240
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses function getFunctionReturnType() defined in edu::toronto::cs::cparser::block::Block
      uses macro definition assert defined in util.h
   function getReturnValueVar() in line 329
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSourceExpr() in line 283
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isNonVoid() in line 302
      protection public
      11 lines of code
      0 parameters
      3 conditional paths
      uses function isNonVoidFunction() defined in edu::toronto::cs::cparser::block::Block
      uses macro definition assert defined in util.h
   function print() in line 360
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
      uses function print(PrintWriter) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function returnSelectorLabel() in line 167
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function returnSiteLabel(int) in line 157
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function setEntry(PStmt) in line 105
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setHead(PStmt) in line 182
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setInconsistent(Expr) in line 314
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setLocalDecls(Map) in line 205
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setParent(PProgram) in line 278
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setReturnSelector(PStmt) in line 115
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 355
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function PFunctionDef(PProgram,PStmt,Map,Expr) in line 72
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
   function PFunctionDef(Expr) in line 81
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function PFunctionDef(CFGraph,Expr) in line 94
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PProgram.java
module edu::toronto::cs::yasm::pprogram::PProgram
   function accept(PProgramVisitor,Object) in line 155
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function forgetPredicates() in line 118
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function getCProgram() in line 124
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getExprFactory() in line 406
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFunctionDefs() in line 244
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getGlobalDecls() in line 249
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getHead() in line 239
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getMainFunctionDef() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getHead() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function getInconsistent() in line 231
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLabelledStatementMap() in line 204
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLabelledStmtsMap() in line 199
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMainFunctionDef() in line 259
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable MAIN_FUNCTION_NAME defined in edu::toronto::cs::yasm::pprogram::PProgram
   function getPProgramPredicateManager() in line 189
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPredTable() in line 347
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getProgramStmts() in line 178
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSelectorType() in line 421
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStatementList() in line 168
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStmt(String) in line 318
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
   function getStmt(int) in line 340
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function getStmtList() in line 163
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSymbolTable() in line 134
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isDeclsRefined() in line 411
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 431
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function parse(NullExprAbstractor,String) defined in edu::toronto::cs::yasm::pprogram::PProgram
   function parse(NullExprAbstractor,String) in line 352
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function parse(NullExprAbstractor,File) in line 358
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function parse(NullExprAbstractor,String) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable DDSelector defined in edu::toronto::cs::yasm::pprogram::PProgram
   function parse(NullExprAbstractor,File,int) in line 364
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function parse(NullExprAbstractor,String) defined in edu::toronto::cs::yasm::pprogram::PProgram
   function parse(NullExprAbstractor,File,int,boolean) in line 371
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses function parse(NullExprAbstractor,String) defined in edu::toronto::cs::yasm::pprogram::PProgram
   function parse(NullExprAbstractor,Reader,int,boolean) in line 379
      protection public
      17 lines of code
      4 parameters
      2 conditional paths
   function print(PrintWriter) in line 277
      protection public
      26 lines of code
      1 parameters
      4 conditional paths
      uses variable s defined in visual.m
   function printMainFunction(PrintWriter) in line 264
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function getMainFunctionDef() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getHead() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function print(PrintWriter) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function setDeclsRefined(boolean) in line 416
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setGlobalDecls(Map) in line 254
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setInconsistent(Expr) in line 226
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setLabelMap(Map< String, PStmt >) in line 209
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setProgramStmts(PStmt) in line 183
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in visual.m
   function setStatementList(List< PStmt >) in line 173
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setSymbolTable(SymbolTable) in line 129
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 304
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function print(PrintWriter) defined in edu::toronto::cs::yasm::pprogram::PProgram
   function PProgram(ExprFactory,CProgram,Map) in line 86
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
   function PProgram(ExprFactory,Map,Map) in line 93
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable DDSelector defined in edu::toronto::cs::yasm::pprogram::PProgram
   function PProgram(ExprFactory,Map,Map,int) in line 98
      protection public
      19 lines of code
      4 parameters
      1 conditional paths
   variable BinSelector in line 74
      protection public
   variable DDSelector in line 75
      protection public
   variable LinSelector in line 73
      protection public
   variable MAIN_FUNCTION_NAME in line 47
      protection public
module edu::toronto::cs::yasm::pprogram::PProgram::ParseException
   inherits from Exception
   function ParseException(String,Exception) in line 400
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PProgramCompiler.java
module edu::toronto::cs::yasm::pprogram::PProgramCompiler
   inherits from edu::toronto::cs::modelchecker::ModelCompiler
   function buildCFA() in line 365
      41 lines of code
      0 parameters
      13 conditional paths
      uses function getInconsistent() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function exprToMvSet(Expr) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function getStmtList() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function addNode(String,MvSet) defined in edu::toronto::cs::cfa::CFA
      uses function top() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function handleFunctionCall(CFA,FunctionCallPrologue) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function handleReturnSelector(CFA,ReturnSelectorPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function handleSkip(CFA,SkipPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function handleIf(CFA,IfPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function handleConditionalBranch(CFA,ConditionalBranchPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function handleSwitch(CFA,SwitchBranchPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function handleAssign(CFA,PrllAsmtPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function handleGoto(CFA,GotoPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function handleNDGoto(CFA,NDGotoPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function compile() in line 180
      protection public
      36 lines of code
      0 parameters
      2 conditional paths
      uses function seal() defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function buildCFA() defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function dumpEdges() defined in edu::toronto::cs::cfa::CFA
      uses function getMvRelation() defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function top() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function embed(int,MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function getNumVars() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getCtlReWriter() defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function getStatePresenter() defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function currToNext(MvSet) in line 720
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function doFunctionCall(FunctionCallPrologue) in line 576
      15 lines of code
      1 parameters
      1 conditional paths
      uses function getCall() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPrologue
      uses function getFunctionDef() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getReturnSelector() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getReturnIndex() defined in edu::toronto::cs::yasm::pprogram::ReturnSelectorPStmt
      uses function getCallIndex() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function relnAssign(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function doInit() in line 618
      22 lines of code
      0 parameters
      5 conditional paths
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function doIteBranch(MvSet) in line 641
      9 lines of code
      1 parameters
      1 conditional paths
      uses function toReln(MvSet) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function currToNext(MvSet) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function doSkip() defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function doJoinBranch(MvSet) in line 651
      4 lines of code
      1 parameters
      1 conditional paths
      uses function currToNext(MvSet) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function doSkip() defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function doReturnSelector(ReturnSelectorPStmt,int) in line 611
      6 lines of code
      2 parameters
      1 conditional paths
      uses function getReturnIndex() defined in edu::toronto::cs::yasm::pprogram::ReturnSelectorPStmt
   function doSkip() in line 656
      30 lines of code
      0 parameters
      5 conditional paths
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function currToNext(MvSet) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function eq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function infoAnd(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function infoOr(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function exprToMvSet(Expr) in line 725
      41 lines of code
      1 parameters
      11 conditional paths
      uses variable p defined in visual.m
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getByName(Expr) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable TTOP defined in edu::toronto::cs::expr::BiLatticeOp
      uses variable TRUE defined in edu::toronto::cs::expr::BoolOp
      uses variable TBOT defined in edu::toronto::cs::expr::BiLatticeOp
      uses variable FALSE defined in edu::toronto::cs::expr::BoolOp
      uses variable IBOT defined in edu::toronto::cs::expr::BiLatticeOp
      uses variable ITOP defined in edu::toronto::cs::expr::BiLatticeOp
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses variable AND defined in edu::toronto::cs::expr::BoolOp
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function dump() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
   function getCtlReWriter() in line 232
      protection public
      63 lines of code
      0 parameters
      6 conditional paths
      uses variable o defined in visual.m
      uses function getMvSet() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getByCtlName(String) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getName() defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function handleUnknownVariable(String) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function setMvSet(MvSet) defined in edu::toronto::cs::ctl::CTLAtomPropNode
      uses function embedMvSet(MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLBinaryNode
      uses function getStmt(String) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function embed(int,MvSet) defined in edu::toronto::cs::cfa::CFAMvSetFactory
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function top() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function toString() defined in edu::toronto::cs::ctl::CTLEqualsNode
   function getInit() in line 97
      4 lines of code
      0 parameters
      1 conditional paths
   function getStatePresenter() in line 298
      protection public
      62 lines of code
      0 parameters
      6 conditional paths
      uses macro definition assert defined in util.h
      uses function getNode(int) defined in edu::toronto::cs::cfa::CFA
      uses function getState() defined in edu::toronto::cs::cfa::CFA::CFANode
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function getStrValue() defined in edu::toronto::cs::cfa::CFA::CFANode
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function bot() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses variable i defined in sparsemv.m
      uses function nodeSize() defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::cfa::CFA::CFANode
   function getTrans() in line 101
      4 lines of code
      0 parameters
      1 conditional paths
   function handleAssign(CFA,PrllAsmtPStmt) in line 407
      6 lines of code
      2 parameters
      1 conditional paths
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function relnAssign(PrllAsmtPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function handleConditionalBranch(CFA,ConditionalBranchPStmt) in line 472
      27 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::ConditionalBranchPStmt
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function getTrueDest() defined in edu::toronto::cs::yasm::pprogram::ConditionalBranchPStmt
      uses function getFalseDest() defined in edu::toronto::cs::yasm::pprogram::ConditionalBranchPStmt
      uses function exprToMvSet(Expr) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function doIteBranch(MvSet) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function not() defined in edu::toronto::cs::mvset::MvSet
   function handleFunctionCall(CFA,FunctionCallPrologue) in line 561
      14 lines of code
      2 parameters
      2 conditional paths
      uses function getCall() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPrologue
      uses function getFunctionDef() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getReturnSelector() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function handleAssign(CFA,PrllAsmtPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function doFunctionCall(FunctionCallPrologue) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function handleGoto(CFA,GotoPStmt) in line 528
      6 lines of code
      2 parameters
      1 conditional paths
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
   function handleIf(CFA,IfPStmt) in line 432
      39 lines of code
      2 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function getThenGoto() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getElseGoto() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function handleNonDetIf(CFA,IfPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function exprToMvSet(Expr) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses function doIteBranch(MvSet) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function not() defined in edu::toronto::cs::mvset::MvSet
   function handleInit(CFA,SkipPStmt) in line 542
      5 lines of code
      2 parameters
      1 conditional paths
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function toReln(MvSet) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function doInit() defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function handleNDGoto(CFA,NDGotoPStmt) in line 535
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable s defined in visual.m
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function toReln(MvSet) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function doSkip() defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function handleNonDetIf(CFA,IfPStmt) in line 502
      10 lines of code
      2 parameters
      1 conditional paths
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getThenGoto() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses function getElseGoto() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
   function handleReturnSelector(CFA,ReturnSelectorPStmt) in line 592
      18 lines of code
      2 parameters
      3 conditional paths
      uses function getDests() defined in edu::toronto::cs::yasm::pprogram::ReturnSelectorPStmt
      uses function handleGoto(CFA,GotoPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function asGoto() defined in edu::toronto::cs::yasm::pprogram::ReturnSelectorPStmt
      uses variable i defined in sparsemv.m
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function doReturnSelector(ReturnSelectorPStmt,int) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function handleSkip(CFA,SkipPStmt) in line 548
      12 lines of code
      2 parameters
      3 conditional paths
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function handleInit(CFA,SkipPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function handleSwitch(CFA,SwitchBranchPStmt) in line 516
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function exprToMvSet(Expr) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function addEdge(String,int,int,MvRelation) defined in edu::toronto::cs::cfa::CFA
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function doIteBranch(MvSet) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function handleUnknownVariable(String) in line 218
      12 lines of code
      1 parameters
      2 conditional paths
   function main(String[]) in line 773
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function PProgramCompiler() defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function setPProgram(PProgram) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function setMaxDDVars(int) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function compile() defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function relnAssign(PrllAsmtPStmt) in line 414
      17 lines of code
      1 parameters
      2 conditional paths
      uses function getAsmts() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
      uses function exprToMvSet(Expr) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function getVar() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getTrueCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getFalseCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function toReln(MvSet) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
   function seal() in line 126
      protection public
      48 lines of code
      0 parameters
      3 conditional paths
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function setMvSetFactory(MvSetFactory) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function top() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function bot() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function infoTop() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function infoBot() defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MDDMvSetFactory
      uses function getVariableIds(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function variableMap(int,int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
   function setMaxDDVars(int) in line 117
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setPProgram(PProgram) in line 107
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toReln(MvSet) in line 708
      11 lines of code
      1 parameters
      2 conditional paths
      uses function toMvRelation(MvSet,MvSet,MvSet,int[],int[]) defined in edu::toronto::cs::mvset::MvSet
   function PProgramCompiler() in line 83
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function PProgramCompiler(boolean,boolean) in line 89
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PProgramPatcher.java
module edu::toronto::cs::yasm::pprogram::PProgramPatcher
   function addEntryPoint(PFunctionDef) in line 432
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function setLabel(String) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function entryLabel() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getHead() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setHead(PStmt) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setEntry(PStmt) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function addReturnSelector(PFunctionDef) in line 445
      protection public
      24 lines of code
      1 parameters
      4 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getSelectorType() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getNumCallSites() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function returnSiteLabel(int) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable DDSelector defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function setLabel(String) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function returnSelectorLabel() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getHead() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setHead(PStmt) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setReturnSelector(PStmt) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function makeFunctionCall(PFunctionDef,FunctionCallPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramPatcher
   function makeFunctionCall(PFunctionDef,FunctionCallPStmt) in line 473
      protection public
      19 lines of code
      2 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses function setDest(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getEntry() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setLabel(String) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function callSiteLabel(int) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getCallIndex() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function returnSiteLabel(int) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function patch(PProgram) in line 32
      protection public
      20 lines of code
      1 parameters
      40 conditional paths
      uses variable p defined in visual.m
      uses function setDest(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setLabel(String) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setDest(PStmt) defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable f defined in mvproduct.m
      uses function addReturnSelector(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::PProgramPatcher
      uses function getFunctionDefs() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getSourceExpr() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabelledStatementMap() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function makeFunctionCall(PFunctionDef,FunctionCallPStmt) defined in edu::toronto::cs::yasm::pprogram::PProgramPatcher
      uses function setFunctionDef(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function setLogues(PStmt) defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable LSTMT defined in edu::toronto::cs::expr::CILLabelledStmtOp
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getStatementList() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getThenStmt() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getElseStmt() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses variable o defined in visual.m
      uses function getLogues() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function setTail(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setThenStmt(PStmt) defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getThenGoto() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function setElseStmt(PStmt) defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getElseGoto() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses function getExitGoto() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getStmt(String) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getTargetLabel() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses macro definition assert defined in util.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PProgramPredicateManager.java
module edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
   inherits from edu::toronto::cs::yasm::pprogram::SimplePredicateManager
   function addToAll(Pred) in line 189
      5 lines of code
      1 parameters
      2 conditional paths
   function addToSome(List<?>,Pred) in line 201
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function getFunctionManager(Object) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function newPred(Pred) defined in edu::toronto::cs::yasm::pprogram::SimplePredicateManager
   function getAllPredicates() in line 122
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getAllPreds() in line 140
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getFuncNewPredicates(Object) in line 103
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getFunctionManager(Object) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
   function getFuncPredicates(Object) in line 91
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getFunctionManager(Object) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
   function getFunctionManager(Object) in line 214
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getNewPredicates() in line 109
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNewPreds() in line 127
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPredFromExpr(Expr) in line 154
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses variable p defined in visual.m
   function getPredicates() in line 115
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPredicateScope(Expr) in line 237
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function getPredicateScopeHelper(Expr,List< String >) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses variable p defined in visual.m
   function getPredicateScopeHelper(Expr,List< String >) in line 255
      28 lines of code
      2 parameters
      7 conditional paths
      uses variable p defined in visual.m
      uses variable i defined in sparsemv.m
   function getPreds() in line 133
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function makeNew(Expr) in line 46
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses macro definition assert defined in util.h
   function merge() in line 77
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
   function newFuncPred(Pred) in line 167
      15 lines of code
      1 parameters
      2 conditional paths
      uses function getPredicateScope(Expr) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::Pred
      uses macro definition assert defined in util.h
      uses function addToAll(Pred) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
      uses function addToSome(List<?>,Pred) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
   function newPred(Pred) in line 64
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function newFuncPred(Pred) defined in edu::toronto::cs::yasm::pprogram::PProgramPredicateManager
   function PProgramPredicateManager(PProgram) in line 30
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable o defined in visual.m
      uses function SimplePredicateManager() defined in edu::toronto::cs::yasm::pprogram::SimplePredicateManager
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PProgramReachabilityCompiler.java
module edu::toronto::cs::yasm::pprogram::PProgramReachabilityCompiler
   function compile() in line 48
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getStatePresenter() in line 39
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setMaxDDVars(int) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function setPProgram(PProgram) in line 21
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PProgramVisitor.java
module edu::toronto::cs::yasm::pprogram::PProgramVisitor
   function visitBreak(BreakPStmt,Object) in line 15
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitDecl(PDecl,Object) in line 23
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitFunctionCall(FunctionCallPStmt,Object) in line 16
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitFunctionCallEpilogue(FunctionCallEpilogue,Object) in line 18
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitFunctionCallPrologue(FunctionCallPrologue,Object) in line 17
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitFunctionDef(PFunctionDef,Object) in line 24
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitGoto(GotoPStmt,Object) in line 19
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitIf(IfPStmt,Object) in line 20
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitNDGoto(NDGotoPStmt,Object) in line 21
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitPProgram(PProgram,Object) in line 14
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitPrllAsmt(PrllAsmtPStmt,Object) in line 22
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitPStmt(PStmt,Object) in line 25
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitReturn(ReturnPStmt,Object) in line 26
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitReturnSelector(ReturnSelectorPStmt,Object) in line 27
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitSkip(SkipPStmt,Object) in line 28
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function visitWhile(WhilePStmt,Object) in line 29
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/Pred.java
module edu::toronto::cs::yasm::pprogram::Pred
   function getName() in line 39
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSource() in line 44
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isPrecondition() in line 49
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function preconditionLabels() in line 59
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 64
      protection public
      4 lines of code
      0 parameters
      2 conditional paths
      uses variable p defined in visual.m
   function Pred(Expr,PredicateSource) in line 30
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable p defined in visual.m
   function Pred(Expr,PredicateSource,String) in line 34
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable p defined in visual.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PredicateSource.java
module edu::toronto::cs::yasm::pprogram::PredicateSource
   abstract class
   variable HINT in line 92
      protection public
module edu::toronto::cs::yasm::pprogram::PredicateSource::WPPredicateSource
   inherits from edu::toronto::cs::yasm::pprogram::PredicateSource
   function getAssignment() in line 36
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getParent() in line 41
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 46
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::Pred
   function updateStmt(PProgram) in line 51
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in visual.m
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses macro definition assert defined in util.h
   function WPPredicateSource(PrllAsmtPStmt,Pred) in line 30
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in visual.m
      uses variable p defined in visual.m
module edu::toronto::cs::yasm::pprogram::PredicateSource::ConditionalPredicateSource
   inherits from edu::toronto::cs::yasm::pprogram::PredicateSource
   function getConditional() in line 72
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 77
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ConditionalPredicateSource(PStmt) in line 67
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
module edu::toronto::cs::yasm::pprogram::PredicateSource::HintPredicateSource
   inherits from edu::toronto::cs::yasm::pprogram::PredicateSource
   function toString() in line 86
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PredicateTable.java
module edu::toronto::cs::yasm::pprogram::PredicateTable
   function __newPredicate(Expr) in line 162
      protection public
      23 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function setShadows(Predicate[]) defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function setCtlName(String) defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function newCtlName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getCtlName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function calculateBitSize(List) in line 392
      protection public
      20 lines of code
      1 parameters
      5 conditional paths
      uses function isShadow() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function size() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function dump() in line 233
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
   function getByCtlName(String) in line 221
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getByName(Expr) in line 216
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getMvSetFactory() in line 104
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getNumVars() in line 211
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVariableIds(int) in line 330
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses function primaryBitSize() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function isShadow() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getShadow(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses variable i defined in sparsemv.m
      uses function size() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function getVariableIds(List,int) in line 460
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getVariableIdsFromVariables(List,int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
   function getVariableIdsFromVariables(List,int) in line 423
      protection public
      26 lines of code
      2 parameters
      6 conditional paths
      uses function calculateBitSize(List) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function isShadow() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getShadow(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses variable i defined in sparsemv.m
      uses function size() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function getVariables() in line 226
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getVariables(List) in line 369
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function getByName(Expr) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
   function main(String[]) in line 916
      protection public
      83 lines of code
      1 parameters
      4 conditional paths
      uses function PredicateTable() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function setMvSetFactory(MvSetFactory) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses function __newPredicate(Expr) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function newIntVar(Expr,int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses variable i defined in sparsemv.m
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getEnumType() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::IntVariable
      uses function bitValue(Object) defined in edu::toronto::cs::util::EnumType
      uses function eq(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable::IntVariable
      uses function cubeIterator() defined in edu::toronto::cs::mvset::MvSet
      uses variable LEQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function primaryBitSize() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function variableMap(int,int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getVariableIds(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
   function newCtlName() in line 205
      4 lines of code
      0 parameters
      1 conditional paths
   function newIntVar(Expr,int) in line 186
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses function setId(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable::IntVariable
      uses function setCtlName(String) defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getCtlName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function newPredicate(Expr) in line 137
      protection public
      24 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function setShadows(Predicate[]) defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function setCtlName(String) defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getCtlName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function primaryBitSize() in line 301
      protection public
      20 lines of code
      0 parameters
      5 conditional paths
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function isShadow() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function size() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function setMvSetFactory(MvSetFactory) in line 93
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
   function toString() in line 79
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
   function updateMap(int[],Predicate,Predicate) in line 295
      5 lines of code
      3 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses variable p defined in visual.m
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function variableMap(int,int) in line 255
      protection public
      37 lines of code
      2 parameters
      7 conditional paths
      uses function getNumVars() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses variable i defined in sparsemv.m
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function isShadow() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getShadows() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses variable k defined in sparsemv.m
      uses function updateMap(int[],Predicate,Predicate) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function toString() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function variableMap(List,int,int) in line 478
      protection public
      38 lines of code
      3 parameters
      8 conditional paths
      uses function getNumVars() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses variable i defined in sparsemv.m
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function isShadow() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getShadows() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function updateMap(int[],Predicate,Predicate) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function toString() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function PredicateTable() in line 61
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function PredicateTable(int) in line 71
      7 lines of code
      1 parameters
      1 conditional paths
module edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function getCtlName() in line 555
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getId() in line 598
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSet() in line 607
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
   function getName() in line 551
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getShadow(int) in line 564
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function isShadow() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses variable i defined in sparsemv.m
   function getShadows() in line 579
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isShadow() in line 584
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function resetMvSet() in line 619
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setCtlName(String) in line 559
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setShadows(Predicate[]) in line 571
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses variable v defined in visual.m
      uses macro definition assert defined in util.h
   function size() in line 602
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 625
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getCtlName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function toExpr(AlgebraValue[]) in line 639
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
   function toString() in line 589
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getCtlName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function Predicate(Expr,int,int) in line 541
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
module edu::toronto::cs::yasm::pprogram::PredicateTable::AddPredicate
   inherits from edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function __getMvSet() in line 673
      protection public
      26 lines of code
      0 parameters
      2 conditional paths
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function createCase(int,MvSet[]) defined in edu::toronto::cs::mvset::MvSetFactory
   function __toCTL(AlgebraValue[]) in line 718
      protection public
      24 lines of code
      1 parameters
      6 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses variable top defined in algebra
      uses variable bot defined in algebra
      uses function getCtlName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function getMvSet() in line 700
      protection public
      16 lines of code
      0 parameters
      2 conditional paths
      uses function createProjection(int) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function createCase(int,MvSet[]) defined in edu::toronto::cs::mvset::MvSetFactory
      uses function createConstant(AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
   function size() in line 668
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 744
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses variable top defined in algebra
      uses function getCtlName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function eq(CTLNode) defined in edu::toronto::cs::ctl::CTLNode
   function toExpr(AlgebraValue[]) in line 763
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses variable top defined in algebra
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
   function AddPredicate(Expr,int,int) in line 662
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
module edu::toronto::cs::yasm::pprogram::PredicateTable::IntVariable
   inherits from edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function bitWidth() in line 817
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function eq(int) in line 837
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function eq(Integer) in line 852
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getAlgebra() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function top() defined in edu::toronto::cs::algebra::IAlgebra
      uses function bot() defined in edu::toronto::cs::algebra::IAlgebra
      uses function bitValue(Object) defined in edu::toronto::cs::util::EnumType
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses function var(int,AlgebraValue,AlgebraValue) defined in edu::toronto::cs::mvset::MvSetFactory
   function getBitCube() in line 842
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function buildCube(int[]) defined in edu::toronto::cs::mvset::MvSetFactory
   function getEnumType() in line 812
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSet() in line 875
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
   function setId(int) in line 822
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function size() in line 827
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toCTL(AlgebraValue[]) in line 884
      protection public
      24 lines of code
      1 parameters
      1 conditional paths
   function toExpr(AlgebraValue[]) in line 909
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 832
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getCtlName() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PredicateTable::Predicate
   function IntVariable(Expr,int) in line 795
      protection public
      16 lines of code
      2 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function bitSize() defined in edu::toronto::cs::util::EnumType
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PrintingVisitor.java
module edu::toronto::cs::yasm::pprogram::PrintingVisitor
   inherits from edu::toronto::cs::yasm::pprogram::BasePProgramVisitor
   function checkLabelForGoto(PStmt) in line 501
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
   function main(String[]) in line 513
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function print(PrintWriter) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PProgram
   function visitBreak(BreakPStmt,Object) in line 461
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function checkLabelForGoto(PStmt) defined in edu::toronto::cs::yasm::pprogram::PrintingVisitor
      uses variable s defined in visual.m
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses variable o defined in visual.m
   function visitDecl(PDecl,Object) in line 482
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable d defined in crunch2parms.m
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses variable o defined in visual.m
   function visitFunctionCallEpilogue(FunctionCallEpilogue,Object) in line 411
      protection public
      30 lines of code
      2 parameters
      3 conditional paths
      uses function checkLabelForGoto(PStmt) defined in edu::toronto::cs::yasm::pprogram::PrintingVisitor
      uses variable s defined in visual.m
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses function indent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses function getVar() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getTrueCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getFalseCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function outdent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses variable o defined in visual.m
   function visitFunctionCallPrologue(FunctionCallPrologue,Object) in line 375
      protection public
      31 lines of code
      2 parameters
      3 conditional paths
      uses function checkLabelForGoto(PStmt) defined in edu::toronto::cs::yasm::pprogram::PrintingVisitor
      uses variable s defined in visual.m
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses function indent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses function getVar() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getTrueCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getFalseCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function outdent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses variable o defined in visual.m
   function visitFunctionDef(PFunctionDef,Object) in line 111
      protection public
      81 lines of code
      2 parameters
      6 conditional paths
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function indent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses function getLocalDecls() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable o defined in visual.m
      uses function outdent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses function getHead() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable s defined in visual.m
      uses function getEntryPoint() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function visitGoto(GotoPStmt,Object) in line 317
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function checkLabelForGoto(PStmt) defined in edu::toronto::cs::yasm::pprogram::PrintingVisitor
      uses variable s defined in visual.m
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses variable o defined in visual.m
   function visitIf(IfPStmt,Object) in line 213
      protection public
      59 lines of code
      2 parameters
      7 conditional paths
      uses function checkLabelForGoto(PStmt) defined in edu::toronto::cs::yasm::pprogram::PrintingVisitor
      uses variable s defined in visual.m
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses function indent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable o defined in visual.m
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function outdent() defined in edu::toronto::cs::util::IndentPrintWriter
   function visitPProgram(PProgram,Object) in line 56
      protection public
      46 lines of code
      2 parameters
      7 conditional paths
      uses variable p defined in visual.m
      uses variable s defined in visual.m
      uses function getTargetLabel() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses function indent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses variable o defined in visual.m
      uses function outdent() defined in edu::toronto::cs::util::IndentPrintWriter
   function visitPrllAsmt(PrllAsmtPStmt,Object) in line 335
      protection public
      35 lines of code
      2 parameters
      5 conditional paths
      uses function checkLabelForGoto(PStmt) defined in edu::toronto::cs::yasm::pprogram::PrintingVisitor
      uses variable s defined in visual.m
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses function indent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses function getVar() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getTrueCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function getPrefix() defined in edu::toronto::cs::util::IndentPrintWriter
      uses function getFalseCond() defined in edu::toronto::cs::yasm::pprogram::AsmtPStmt
      uses function outdent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses variable o defined in visual.m
   function visitPStmt(PStmt,Object) in line 193
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function checkLabelForGoto(PStmt) defined in edu::toronto::cs::yasm::pprogram::PrintingVisitor
      uses variable s defined in visual.m
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses variable o defined in visual.m
   function visitSkip(SkipPStmt,Object) in line 446
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function checkLabelForGoto(PStmt) defined in edu::toronto::cs::yasm::pprogram::PrintingVisitor
      uses variable s defined in visual.m
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses variable o defined in visual.m
   function visitWhile(WhilePStmt,Object) in line 277
      protection public
      35 lines of code
      2 parameters
      4 conditional paths
      uses function checkLabelForGoto(PStmt) defined in edu::toronto::cs::yasm::pprogram::PrintingVisitor
      uses variable s defined in visual.m
      uses function println(String) defined in edu::toronto::cs::util::IndentPrintWriter
      uses function indent() defined in edu::toronto::cs::util::IndentPrintWriter
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable o defined in visual.m
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function outdent() defined in edu::toronto::cs::util::IndentPrintWriter
   function PrintingVisitor(Writer) in line 36
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function PrintingVisitor(IndentPrintWriter) in line 43
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PrllAsmtPStmt.java
module edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
   inherits from edu::toronto::cs::yasm::pprogram::PStmt
   function accept(PProgramVisitor,Object) in line 57
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function addAsmt(AsmtPStmt) in line 88
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function addNondetPred(Expr) in line 73
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getAsmts() in line 106
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getInconsistent() in line 68
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLineNum() in line 169
      protection public
      23 lines of code
      0 parameters
      3 conditional paths
      uses function getSourceExpr() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getNondetPreds() in line 77
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getWPComputer() in line 127
      protection public
      41 lines of code
      0 parameters
      3 conditional paths
      uses function getSymbolTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable ID defined in edu::toronto::cs::yasm::wp::ExprWPComputer
      uses macro definition assert defined in util.h
   function init() in line 49
      7 lines of code
      0 parameters
      1 conditional paths
   function printMe(PrintWriter) in line 194
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function printMe() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
   function removeAsmtsToVar(Expr) in line 93
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable v defined in visual.m
   function setAsmts(List< AsmtPStmt >) in line 83
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setInconsistent(Expr) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function PrllAsmtPStmt(PFunctionDef,Block) in line 36
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses function init() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
   function PrllAsmtPStmt(PFunctionDef,Expr) in line 43
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function init() defined in edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PStmt.java
module edu::toronto::cs::yasm::pprogram::PStmt
   function accept(PProgramVisitor,Object) in line 118
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function addPredecessor(PStmt) in line 255
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
   function defaultLabel() in line 156
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function exprFac() in line 234
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getExprFactory() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function getDest() in line 107
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function getDests(PStmt) in line 278
      protection public
      42 lines of code
      1 parameters
      11 conditional paths
      uses variable p defined in visual.m
      uses function getDests() defined in edu::toronto::cs::yasm::pprogram::ReturnSelectorPStmt
      uses function getThenGoto() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses function getElseGoto() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getTrueDest() defined in edu::toronto::cs::yasm::pprogram::ConditionalBranchPStmt
      uses function getFalseDest() defined in edu::toronto::cs::yasm::pprogram::ConditionalBranchPStmt
   function getId() in line 78
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLabel() in line 151
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function hasLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function defaultLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getLast() in line 132
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLast() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function getLineNum() in line 250
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getNext() in line 88
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getParent() in line 224
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPProgram() in line 229
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function getPreds() in line 265
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getRealDest() in line 113
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getRefinerInfo() in line 214
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSourceBlock() in line 161
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSourceExpr() in line 166
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hasLabel() in line 146
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function initPreds() in line 43
      3 lines of code
      0 parameters
      1 conditional paths
   function print(PrintWriter) in line 176
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function printMe() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function print(PrintWriter) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function print() in line 187
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function printMe() in line 191
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function printMe(PrintWriter) in line 196
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
   function setDest(PStmt) in line 99
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
      uses variable v defined in visual.m
   function setId(int) in line 83
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setLabel(String) in line 140
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setNext(PStmt) in line 93
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in util.h
   function setParent(PFunctionDef) in line 239
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setRefinerInfo(Object) in line 219
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setSourceBlock(Block) in line 171
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setTail(PStmt) in line 124
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function setNext(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setTail(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function toString() in line 207
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function printMe() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function PStmt() in line 47
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function initPreds() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function PStmt(Block) in line 52
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function initPreds() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function PStmt(Expr) in line 58
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function initPreds() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function PStmt(PFunctionDef,Block) in line 64
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function initPreds() defined in edu::toronto::cs::yasm::pprogram::PStmt
   function PStmt(PFunctionDef,Expr) in line 71
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function initPreds() defined in edu::toronto::cs::yasm::pprogram::PStmt
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/PSwitchCase.java
module edu::toronto::cs::yasm::pprogram::PSwitchCase
   function getCond() in line 26
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getGoto() in line 31
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isDefaultCase() in line 36
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getOrigCond() defined in edu::toronto::cs::yasm::pprogram::PCond
   function printMe(PrintWriter) in line 41
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function printMe(PrintWriter) defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
   function PSwitchCase(PCond,GotoPStmt) in line 20
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/ReturnPStmt.java
module edu::toronto::cs::yasm::pprogram::ReturnPStmt
   inherits from edu::toronto::cs::yasm::pprogram::PrllAsmtPStmt
   function accept(PProgramVisitor,Object) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function getLineNum() in line 78
      protection public
      14 lines of code
      0 parameters
      3 conditional paths
      uses function getSourceExpr() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function getWPComputer() in line 43
      protection public
      35 lines of code
      0 parameters
      6 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getExprFactory() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable ASSIGN defined in edu::toronto::cs::expr::CILAssignOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses variable ID defined in edu::toronto::cs::yasm::wp::ExprWPComputer
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
   function printMe(PrintWriter) in line 29
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getFunctionName() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function ReturnPStmt(PFunctionDef,Block) in line 13
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function ReturnPStmt(PFunctionDef,Expr) in line 18
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/ReturnSelectorMvRelation.java
module edu::toronto::cs::yasm::pprogram::ReturnSelectorMvRelation
   inherits from edu::toronto::cs::mvset::MvRelation
   function bwdImage(MvSet) in line 35
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable v defined in visual.m
   function dualBwdImage(MvSet) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function bwdImage(MvSet) defined in edu::toronto::cs::yasm::pprogram::ReturnSelectorMvRelation
      uses variable v defined in visual.m
   function fwdImage(MvSet) in line 24
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function getPostToPreMap() in line 91
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPostVariablesCube() in line 63
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreToPostMap() in line 77
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreVariablesCube() in line 50
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function setTrans(MvSet) in line 20
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function toMvSet() in line 39
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ReturnSelectorMvRelation(MvSet,MvSet,MvSet) in line 12
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/ReturnSelectorPStmt.java
module edu::toronto::cs::yasm::pprogram::ReturnSelectorPStmt
   inherits from edu::toronto::cs::yasm::pprogram::PStmt
   function accept(PProgramVisitor,Object) in line 84
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function addDest(PStmt) in line 77
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function asGoto() in line 64
      protection public
      12 lines of code
      0 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses function setId(int) defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function setDest(PStmt) defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getDest() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
   function getDests() in line 53
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getReturnIndex() in line 26
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses function getPProgram() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function newIntVar(Expr,int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getReturnIndexVar() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function getTargetLabels() in line 43
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses function getNumCallSites() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable i defined in sparsemv.m
      uses function returnSiteLabel(int) defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function printMe(PrintWriter) in line 90
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function toString() defined in edu::toronto::cs::yasm::pprogram::ReturnSelectorPStmt
   function toString() in line 95
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable p defined in visual.m
      uses function getDests() defined in edu::toronto::cs::yasm::pprogram::ReturnSelectorPStmt
   function ReturnSelectorPStmt(PFunctionDef) in line 13
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function getNumCallSites() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
   function ReturnSelectorPStmt(PFunctionDef,boolean) in line 20
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/SimplePredicateManager.java
module edu::toronto::cs::yasm::pprogram::SimplePredicateManager
   function hasPredicate(Pred) in line 46
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::Pred
   function hasPredicate(Expr) in line 51
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable p defined in visual.m
   function makeNew(Expr) in line 78
      protection public
      26 lines of code
      1 parameters
      7 conditional paths
      uses variable p defined in visual.m
      uses macro definition assert defined in util.h
   function merge() in line 120
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function newPred(Pred) in line 66
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function hasPredicate(Pred) defined in edu::toronto::cs::yasm::pprogram::SimplePredicateManager
   function newPred(List< Pred >) in line 110
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable p defined in visual.m
      uses function newPred(Pred) defined in edu::toronto::cs::yasm::pprogram::SimplePredicateManager
   function SimplePredicateManager() in line 35
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/SkipMvRelation.java
module edu::toronto::cs::yasm::pprogram::SkipMvRelation
   inherits from edu::toronto::cs::mvset::MvRelation
   function bwdImage(MvSet) in line 47
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
   function dualBwdImage(MvSet) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function bwdImage(MvSet) defined in edu::toronto::cs::yasm::pprogram::SkipMvRelation
      uses variable v defined in visual.m
   function fwdImage(MvSet) in line 35
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
   function getPostToPreMap() in line 106
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPostVariablesCube() in line 78
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreToPostMap() in line 92
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function getPreVariablesCube() in line 65
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function setTrans(MvSet) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toMvSet() in line 54
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function SkipMvRelation(MvSet) in line 13
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function SkipMvRelation(MvSet,MvSet,MvSet) in line 20
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/SkipPStmt.java
module edu::toronto::cs::yasm::pprogram::SkipPStmt
   inherits from edu::toronto::cs::yasm::pprogram::PStmt
   function accept(PProgramVisitor,Object) in line 33
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function printMe(PrintWriter) in line 39
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
   function SkipPStmt(PFunctionDef,Expr) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function SkipPStmt(PFunctionDef) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/SummarizingReachabilityCompiler.java
module edu::toronto::cs::yasm::pprogram::SummarizingReachabilityCompiler
   inherits from edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   function doReturnEdge(PStmt,PStmt) in line 234
      28 lines of code
      2 parameters
      2 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getContext(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function excludeScope(List< Expr >,PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable preds defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function getVariableIds(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function doSkip(List) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable vars defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
   function doSumRecReturnEdge(PFunctionDef,PFunctionDef,PStmt,PStmt) in line 281
      13 lines of code
      4 parameters
      1 conditional paths
      uses function getContext(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function doSkip(List) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses variable vars defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function toMvRelation(MvSet,MvSet,MvSet,int[],int[]) defined in edu::toronto::cs::mvset::MvSet
      uses variable preCube defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable postCube defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable preToPost defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable postToPre defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   function doSumReturnEdge(PStmt,PStmt) in line 264
      16 lines of code
      2 parameters
      2 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function doSumRecReturnEdge(PFunctionDef,PFunctionDef,PStmt,PStmt) defined in edu::toronto::cs::yasm::pprogram::SummarizingReachabilityCompiler
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getVariableIds(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function locals(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   function handleCall(FunctionCallPrologue) in line 94
      134 lines of code
      1 parameters
      1 conditional paths
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getCall() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPrologue
      uses function getFunctionDef() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getContext(PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function getEntryPoint() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getReturnSelector() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses function getNext() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function toNodeId(PStmt) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function toMvRelation(MvSet,MvSet,MvSet,int[],int[]) defined in edu::toronto::cs::mvset::MvSet
      uses variable preCube defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable postCube defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable preToPost defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses variable postToPre defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler::CompilationContext
      uses function doPrllAssign(PrllAsmtPStmt,CompilationContext) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses macro definition assert defined in util.h
      uses variable doAssert defined in edu::toronto::cs::mvset::MvSetMvRelation
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getVariableIds(int) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function inScope(PFunctionDef,PFunctionDef) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function toMvSet() defined in edu::toronto::cs::mvset::MvRelation
      uses function isSelfCall(FunctionCallPrologue) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function doReturnEdge(PStmt,PStmt) defined in edu::toronto::cs::yasm::pprogram::SummarizingReachabilityCompiler
      uses function add(Edge) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function doSumReturnEdge(PStmt,PStmt) defined in edu::toronto::cs::yasm::pprogram::SummarizingReachabilityCompiler
   function main(String[]) in line 314
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function SummarizingReachabilityCompiler() defined in edu::toronto::cs::yasm::pprogram::SummarizingReachabilityCompiler
      uses function setPProgram(PProgram) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function setMaxDDVars(int) defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
      uses function compile() defined in edu::toronto::cs::yasm::pprogram::InliningReachabilityCompiler
   function visitFunctionCallPrologue(FunctionCallPrologue,Object) in line 62
      protection public
      22 lines of code
      2 parameters
      2 conditional paths
      uses function getCall() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPrologue
      uses function getFunctionDef() defined in edu::toronto::cs::yasm::pprogram::FunctionCallPStmt
      uses function getReturnSelector() defined in edu::toronto::cs::yasm::pprogram::PFunctionDef
      uses variable o defined in visual.m
      uses function handleCall(FunctionCallPrologue) defined in edu::toronto::cs::yasm::pprogram::SummarizingReachabilityCompiler
   function visitReturnSelector(ReturnSelectorPStmt,Object) in line 54
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable o defined in visual.m
   function SummarizingReachabilityCompiler() in line 34
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/SwitchBranchPStmt.java
module edu::toronto::cs::yasm::pprogram::SwitchBranchPStmt
   inherits from edu::toronto::cs::yasm::pprogram::PStmt
   function cases() in line 40
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function cond() in line 35
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function printMe(PrintWriter) in line 45
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function cond() defined in edu::toronto::cs::yasm::pprogram::SwitchBranchPStmt
      uses function cases() defined in edu::toronto::cs::yasm::pprogram::SwitchBranchPStmt
   function SwitchBranchPStmt(PFunctionDef,Expr,List< PSwitchCase >) in line 28
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function cases() defined in edu::toronto::cs::yasm::pprogram::SwitchBranchPStmt
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/pprogram/WhilePStmt.java
module edu::toronto::cs::yasm::pprogram::WhilePStmt
   inherits from edu::toronto::cs::yasm::pprogram::IfPStmt
   function accept(PProgramVisitor,Object) in line 31
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable o defined in visual.m
   function getHeadGoto() in line 36
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getLineNum() in line 54
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getSourceExpr() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getN() defined in edu::toronto::cs::expr::RationalOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function printMe(PrintWriter) in line 41
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getLineNum() defined in edu::toronto::cs::cparser::TNode
      uses function getTargetLabel() defined in edu::toronto::cs::yasm::pprogram::GotoPStmt
   function WhilePStmt(PFunctionDef,Block,PCond,PStmt) in line 14
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses function setTail(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
   function WhilePStmt(PFunctionDef,Expr,PCond,PStmt) in line 22
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses function setTail(PStmt) defined in edu::toronto::cs::yasm::pprogram::PStmt
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/BoundedPathProofGoal.java
module edu::toronto::cs::yasm::reachability::BoundedPathProofGoal
   inherits from edu::toronto::cs::yasm::reachability::StateProofGoal
   function getBound() in line 30
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getNodes() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function getCount() defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function BoundedPathProofGoal(ProofGoal,NodeSet,AlgebraValue,Node) in line 22
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/EdgeProofGoal.java
module edu::toronto::cs::yasm::reachability::EdgeProofGoal
   inherits from edu::toronto::cs::yasm::reachability::ProofGoal
   function getDst() in line 43
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getEdge() in line 48
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSrc() in line 38
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 53
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 58
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function getSrc() defined in edu::toronto::cs::yasm::reachability::EdgeProofGoal
      uses function getId() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function getValue() defined in edu::toronto::cs::yasm::reachability::EdgeProofGoal
      uses function getDst() defined in edu::toronto::cs::yasm::reachability::EdgeProofGoal
   function EdgeProofGoal(ProofGoal,Node,Node,Edge,AlgebraValue) in line 28
      protection public
      9 lines of code
      5 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/FunctionSummaryRule.java
module edu::toronto::cs::yasm::reachability::FunctionSummaryRule
   inherits from edu::toronto::cs::yasm::reachability::ReachabilityProofRule
   function apply(ProofGoal) in line 44
      protection public
      126 lines of code
      1 parameters
      4 conditional paths
      uses function getEdge() defined in edu::toronto::cs::yasm::reachability::EdgeProofGoal
      uses function getCallEdge() defined in edu::toronto::cs::yasm::pcfa::FunctionSummaryEdge
      uses function getBodySummary() defined in edu::toronto::cs::yasm::pcfa::CallEdge
      uses function getReturnEdge() defined in edu::toronto::cs::yasm::pcfa::CallEdge
      uses function getRelation() defined in edu::toronto::cs::yasm::pcfa::MvRelnEdge
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function getDst() defined in edu::toronto::cs::yasm::reachability::EdgeProofGoal
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function fwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function getSrc() defined in edu::toronto::cs::yasm::reachability::EdgeProofGoal
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getValue() defined in edu::toronto::cs::yasm::reachability::EdgeProofGoal
      uses function existAbstract(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function isTop() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function oneGoal(ProofGoal) defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function threeGoal(ProofGoal,ProofGoal,ProofGoal) defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
   function setStateCube(MvSet) in line 37
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
   function FunctionSummaryRule(BelnapAlgebra,MvSet) in line 30
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function setStateCube(MvSet) defined in edu::toronto::cs::yasm::reachability::FunctionSummaryRule
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/PathProofGoal.java
module edu::toronto::cs::yasm::reachability::PathProofGoal
   inherits from edu::toronto::cs::yasm::reachability::StateProofGoal
   function PathProofGoal(ProofGoal,NodeSet,AlgebraValue,Node) in line 22
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/PathRule.java
module edu::toronto::cs::yasm::reachability::PathRule
   inherits from edu::toronto::cs::yasm::reachability::ReachabilityProofRule
   function apply(ProofGoal) in line 33
      protection public
      33 lines of code
      1 parameters
      5 conditional paths
      uses function getNodes() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses variable bot defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
      uses function getPrev() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getState() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function getId() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function getValue() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function oneGoal(ProofGoal) defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
      uses function getNext() defined in edu::toronto::cs::yasm::pcfa::NodeSet
   function toString() in line 67
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function PathRule(BelnapAlgebra,MvSet) in line 26
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/ProofGoal.java
module edu::toronto::cs::yasm::reachability::ProofGoal
   function getParent() in line 35
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSubGoals() in line 40
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isRoot() in line 29
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setSubGoals(ProofGoal[]) in line 45
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function ProofGoal(ProofGoal) in line 23
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/ReachabilityChecker.java
module edu::toronto::cs::yasm::reachability::ReachabilityChecker
   function bwdImage(Edge,NodeSet,NodeSet,Collection) in line 249
      47 lines of code
      4 parameters
      6 conditional paths
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getAllDst() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses variable i defined in sparsemv.m
      uses function bwdImage(NodeSet,NodeSet,boolean) defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getEdgeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function edgesTo(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
   function doReachabilityStep() in line 97
      protection public
      129 lines of code
      0 parameters
      12 conditional paths
      uses variable v defined in visual.m
      uses function bwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function setToReln(MvSet,MvSet) defined in edu::toronto::cs::yasm::reachability::ReachabilityChecker
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getEdgeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function edgesTo(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function bwdImage(Edge,NodeSet,NodeSet,Collection) defined in edu::toronto::cs::yasm::reachability::ReachabilityChecker
      uses function getNodeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function extractPreStates(MvSet) defined in edu::toronto::cs::yasm::reachability::ReachabilityChecker
      uses function summaryToRelation(MvSet) defined in edu::toronto::cs::yasm::reachability::ReachabilityChecker
      uses function getPostToAuxMap() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getAuxToPostMap() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getSumNodeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function doReachablity() in line 59
      protection public
      36 lines of code
      0 parameters
      5 conditional paths
      uses function getNodeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function createNext() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getSumNodeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getEdgeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function edgesTo(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function doReachabilityStep() defined in edu::toronto::cs::yasm::reachability::ReachabilityChecker
      uses function setNodeSet(NodeSet) defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function setSumNodeSet(NodeSet) defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function extractPreStates(MvSet) in line 233
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function getAuxCube() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function getModel() in line 53
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setToReln(MvSet,MvSet) in line 238
      10 lines of code
      2 parameters
      1 conditional paths
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function renameArgs(int[]) defined in edu::toronto::cs::mvset::MvSet
      uses function getPostToAuxMap() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function summaryToRelation(MvSet) in line 228
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function getAuxToPostMap() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function ReachabilityChecker(ReachabilityStructure) in line 45
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/ReachabilityProofRule.java
module edu::toronto::cs::yasm::reachability::ReachabilityProofRule
   abstract class
   function apply(ProofGoal) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function oneGoal(ProofGoal) in line 47
      4 lines of code
      1 parameters
      1 conditional paths
   function setAlgebra(BelnapAlgebra) in line 36
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses variable top defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
      uses variable bot defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
      uses variable iTop defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
      uses variable iBot defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
      uses function apply(ProofGoal) defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
   function threeGoal(ProofGoal,ProofGoal,ProofGoal) in line 57
      5 lines of code
      3 parameters
      1 conditional paths
   function twoGoal(ProofGoal,ProofGoal) in line 52
      4 lines of code
      2 parameters
      1 conditional paths
   function ReachabilityProofRule(BelnapAlgebra) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function setAlgebra(BelnapAlgebra) defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
   variable bot in line 19
   variable iBot in line 21
   variable iTop in line 20
   variable top in line 18
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/ReachabilityProver.java
module edu::toronto::cs::yasm::reachability::ReachabilityProver
   function addRule(ReachabilityProofRule) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function expand(ProofGoal) in line 35
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses function setSubGoals(ProofGoal[]) defined in edu::toronto::cs::yasm::reachability::ProofGoal
   function ReachabilityProver() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/ReachabilityStructure.java
module edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function getAlgebra() in line 61
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getAuxCube() in line 89
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getAuxToPostMap() in line 80
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getEdgeSet() in line 112
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getMvSetFactory() in line 71
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
   function getNodeSet() in line 104
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPostToAuxMap() in line 84
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPreCube() in line 66
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getPreToAuxMap() in line 76
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStatePresenter() in line 117
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getSumNodeSet() in line 95
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setNodeSet(NodeSet) in line 108
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setSumNodeSet(NodeSet) in line 99
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function ReachabilityStructure(BelnapAlgebra,NodeSet,NodeSet,EdgeSet,int[],int[],int[],MvSet,MvSet,StatePresenter) in line 38
      protection public
      22 lines of code
      10 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/SimpleMinPathRule.java
module edu::toronto::cs::yasm::reachability::SimpleMinPathRule
   inherits from edu::toronto::cs::yasm::reachability::ReachabilityProofRule
   function apply(ProofGoal) in line 27
      protection public
      41 lines of code
      1 parameters
      5 conditional paths
      uses function getNodes() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function getPrev() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getState() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function getId() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function getBound() defined in edu::toronto::cs::yasm::reachability::BoundedPathProofGoal
      uses function getCount() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function oneGoal(ProofGoal) defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
      uses function getValue() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
   function SimpleMinPathRule(BelnapAlgebra) in line 22
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/StateProofGoal.java
module edu::toronto::cs::yasm::reachability::StateProofGoal
   inherits from edu::toronto::cs::yasm::reachability::ProofGoal
   function getNodes() in line 42
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getState() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getValue() in line 46
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function toString() in line 55
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function getId() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function toString() defined in edu::toronto::cs::yasm::pcfa::Node::NodeId
   function StateProofGoal(ProofGoal,NodeSet,AlgebraValue,Node) in line 31
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/reachability/StepRule.java
module edu::toronto::cs::yasm::reachability::StepRule
   inherits from edu::toronto::cs::yasm::reachability::ReachabilityProofRule
   function apply(ProofGoal) in line 39
      protection public
      111 lines of code
      1 parameters
      8 conditional paths
      uses function getBound() defined in edu::toronto::cs::yasm::reachability::BoundedPathProofGoal
      uses function getNodes() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function getPrev() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getNext() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getState() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function edgesFrom(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function getId() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function fwdImage(NodeSet,NodeSet) defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function isConstant() defined in edu::toronto::cs::mvset::MvSet
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable bot defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function getValue() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function cofactor(int,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function twoGoal(ProofGoal,ProofGoal) defined in edu::toronto::cs::yasm::reachability::ReachabilityProofRule
   function StepRule(BelnapAlgebra,EdgeSet,MvSet) in line 31
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/refiner/AbstractorTest.java
module edu::toronto::cs::yasm::refiner::AbstractorTest
   function main(String[]) in line 133
      protection public
      4 lines of code
      1 parameters
      3 conditional paths
      uses function testRun() defined in edu::toronto::cs::yasm::refiner::AbstractorTest
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
   function testRun() in line 28
      protection public
      103 lines of code
      0 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses variable j defined in sparsemv.m
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses function alpha(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function gamma(MvSet) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function implies(Expr,Expr) defined in edu::toronto::cs::tp::ITheoremProver
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/refiner/CBJPredicateAbstractor.java
module edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
   function checkConsistency(CSPVariable< E >) in line 198
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function currentAssignmentToString() in line 185
      12 lines of code
      0 parameters
      1 conditional paths
   function pickNextVariable() in line 205
      protection public
      13 lines of code
      0 parameters
      1 conditional paths
   function prune(CSPVariable< E >,int) in line 178
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function recSearch(int) in line 62
      protection public
      83 lines of code
      1 parameters
      1 conditional paths
   function CBJPredicateAbstractor(List,E) in line 32
      protection public
      23 lines of code
      2 parameters
      1 conditional paths
module edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor::CSPVariable
   function assign(int,int) in line 290
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function domainSize() in line 372
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getCurLevel() in line 284
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getCurScope() in line 388
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getCurVal() in line 274
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getExpr() in line 260
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getId() in line 255
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hasCurrentValue(int) in line 383
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function maxPrunnedLevel() in line 366
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function prune(int) in line 312
      protection public
      24 lines of code
      1 parameters
      4 conditional paths
   function setCurScope(int) in line 392
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function toString() in line 265
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function undoAssign() in line 299
      protection public
      12 lines of code
      0 parameters
      3 conditional paths
   function unPruneLevel(int) in line 337
      protection public
      28 lines of code
      1 parameters
      4 conditional paths
      uses macro definition assert defined in util.h
   function CSPVariable(int,E) in line 243
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/refiner/CFFCPredicateAbstractor.java
module edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor
   function checkConsistency(CSPVariable) in line 212
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function currentAssignmentToString() in line 199
      12 lines of code
      0 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
   function forwardCheckCF(CSPVariable,int) in line 145
      protection public
      3 lines of code
      2 parameters
      2 conditional paths
      uses function assign(int,int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function getId() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function getCurLevel() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function unPruneLevel(int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function undoAssign() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
   function pickNextVariable() in line 219
      protection public
      20 lines of code
      0 parameters
      3 conditional paths
      uses macro definition assert defined in util.h
   function prune(CSPVariable,int) in line 180
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function prune(int,int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function getExpr() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
   function prune(CSPVariable,int,int) in line 188
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function hasCurrentValue(int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses variable i defined in sparsemv.m
      uses function prune(int,int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function getExpr() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
   function recSearch(int) in line 67
      protection public
      77 lines of code
      1 parameters
      7 conditional paths
      uses function currentAssignmentToString() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor
      uses function getId() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function getCurVal() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function prune(CSPVariable,int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor
      uses function pickNextVariable() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor
      uses variable i defined in sparsemv.m
      uses function domainSize() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function hasCurrentValue(int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function forwardCheckCF(CSPVariable,int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor
      uses function maxPrunnedLevel() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
   function CFFCPredicateAbstractor(List,Expr) in line 33
      protection public
      27 lines of code
      2 parameters
      4 conditional paths
      uses variable i defined in sparsemv.m
module edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
   function assign(int,int) in line 312
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function domainSize() in line 421
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getCurLevel() in line 306
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getCurVal() in line 296
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getExpr() in line 282
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getId() in line 277
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function hasCurrentValue(int) in line 432
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function maxPrunnedLevel() in line 415
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function prune(int,int) in line 336
      protection public
      24 lines of code
      2 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
   function prune(int) in line 361
      protection public
      24 lines of code
      1 parameters
      4 conditional paths
   function toString() in line 287
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function toString() defined in edu::toronto::cs::tp::cvcl::Expr
   function undoAssign() in line 321
      protection public
      14 lines of code
      0 parameters
      3 conditional paths
   function unPruneLevel(int) in line 386
      protection public
      28 lines of code
      1 parameters
      4 conditional paths
      uses macro definition assert defined in util.h
   function CSPVariable(int,Expr) in line 262
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/refiner/CvclCBJPredicateAbstractor.java
module edu::toronto::cs::yasm::refiner::CvclCBJPredicateAbstractor
   inherits from CBJPredicateAbstractor< Expr >
   function checkConsistency(CSPVariable< Expr >) in line 42
      protection public
      76 lines of code
      1 parameters
      7 conditional paths
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function push() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function notExpr(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function trueExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function getAssumptions(CVectorExpr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable i defined in sparsemv.m
      uses function size() defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function andExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function isNot() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses macro definition assert defined in util.h
      uses function orExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function notExpr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function getFExpr() in line 147
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTExpr() in line 143
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 152
      protection public
      35 lines of code
      1 parameters
      1 conditional paths
      uses function varExpr(String,Type) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function intType() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function eqExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function ratExpr(int,int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function gtExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function plusExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function CvclCBJPredicateAbstractor(List,Expr,ValidityChecker) defined in edu::toronto::cs::yasm::refiner::CvclCBJPredicateAbstractor
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
      uses variable sw defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function CvclCBJPredicateAbstractor(List,Expr,ValidityChecker) in line 21
      protection public
      19 lines of code
      3 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function falseExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/refiner/CvclCFFCPredicateAbstractor.java
module edu::toronto::cs::yasm::refiner::CvclCFFCPredicateAbstractor
   inherits from edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor
   function forwardCheckCF(CSPVariable,int) in line 41
      protection public
      103 lines of code
      2 parameters
      15 conditional paths
      uses function scopeLevel() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function push() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function getExpr() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function notExpr() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function orExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function popto(int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable i defined in sparsemv.m
      uses variable j defined in sparsemv.m
      uses macro definition assert defined in util.h
      uses function hasCurrentValue(int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function settingValue(Expr,int) defined in edu::toronto::cs::yasm::refiner::CvclCFFCPredicateAbstractor
      uses function getId() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function prune(CSPVariable,int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor
   function getFExpr() in line 292
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTExpr() in line 288
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 297
      protection public
      37 lines of code
      1 parameters
      1 conditional paths
      uses function varExpr(String,Type) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function intType() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function eqExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function ratExpr(int,int) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function gtExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function plusExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function CvclCFFCPredicateAbstractor(List,Expr,ValidityChecker) defined in edu::toronto::cs::yasm::refiner::CvclCFFCPredicateAbstractor
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor
      uses variable sw defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function settingValue(Expr,int) in line 145
      36 lines of code
      2 parameters
      6 conditional paths
      uses function isNot() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function trueExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function getAssumptions(CVectorExpr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses variable i defined in sparsemv.m
      uses function size() defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function andExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses macro definition assert defined in util.h
      uses function getExpr() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function equals(Object) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function getCurLevel() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
      uses function orExpr(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::ValidityChecker
   function CvclCFFCPredicateAbstractor(List,Expr,ValidityChecker) in line 21
      protection public
      19 lines of code
      3 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function falseExpr() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function getExpr() defined in edu::toronto::cs::yasm::refiner::CFFCPredicateAbstractor::CSPVariable
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/refiner/GNGTPCBJPredicateAbstractor.java
module edu::toronto::cs::yasm::refiner::GNGTPCBJPredicateAbstractor
   inherits from edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   function checkConsistency(CSPVariable< Expr >) in line 107
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
   function dump() in line 168
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function mvSetForVar(CSPVariable< Expr >) in line 155
      4 lines of code
      1 parameters
      1 conditional paths
   function mvSetForVar(CSPVariable< Expr >,int) in line 160
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable res defined in visual.m
      uses function alpha(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
   function newSolutionEvent(Boolean,Expr) in line 127
      23 lines of code
      2 parameters
      3 conditional paths
      uses function alpha(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses variable i defined in sparsemv.m
   function GNGTPCBJPredicateAbstractor(List,Expr,ITheoremProver) in line 42
      protection public
      27 lines of code
      3 parameters
      2 conditional paths
      uses function getMvSetFactory() defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function alpha(Expr) defined in edu::cmu::sei::pacc::absdom::MvSetAbstractDomain
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function cofactor(int,AlgebraValue) defined in edu::toronto::cs::mvset::MvSet
      uses function mvSetForVar(CSPVariable< Expr >) defined in edu::toronto::cs::yasm::refiner::GNGTPCBJPredicateAbstractor
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/refiner/NumericTPCBJPredicateAbstractor.java
module edu::toronto::cs::yasm::refiner::NumericTPCBJPredicateAbstractor
   inherits from edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   function checkConsistency(CSPVariable< Expr >) in line 105
      protection public
      42 lines of code
      1 parameters
      7 conditional paths
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses macro definition assert defined in util.h
   function getPlusOne(Expr) in line 66
      7 lines of code
      1 parameters
      3 conditional paths
   function init_incsMap(List< Expr >) in line 74
      20 lines of code
      1 parameters
      5 conditional paths
      uses function getPlusOne(Expr) defined in edu::toronto::cs::yasm::refiner::NumericTPCBJPredicateAbstractor
   function init_sisterMap(List< Expr >) in line 52
      11 lines of code
      1 parameters
      4 conditional paths
   function main(String[]) in line 280
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function testcase1() defined in edu::toronto::cs::yasm::refiner::NumericTPCBJPredicateAbstractor
      uses function test2Str() defined in edu::toronto::cs::yasm::refiner::NumericTPCBJPredicateAbstractor
   function pickNextVariable() in line 151
      protection public
      30 lines of code
      0 parameters
      5 conditional paths
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses macro definition assert defined in util.h
   function test2Str() in line 240
      protection public
      38 lines of code
      0 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses variable j defined in sparsemv.m
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses function NumericTPCBJPredicateAbstractor(List< Expr >,Expr,ITheoremProver) defined in edu::toronto::cs::yasm::refiner::NumericTPCBJPredicateAbstractor
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses function getFExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   function testcase1() in line 182
      protection public
      57 lines of code
      0 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses variable j defined in sparsemv.m
      uses variable i defined in sparsemv.m
      uses function NumericTPCBJPredicateAbstractor(List< Expr >,Expr,ITheoremProver) defined in edu::toronto::cs::yasm::refiner::NumericTPCBJPredicateAbstractor
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses function getFExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   function NumericTPCBJPredicateAbstractor(List< Expr >,Expr,ITheoremProver) in line 95
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function init_sisterMap(List< Expr >) defined in edu::toronto::cs::yasm::refiner::NumericTPCBJPredicateAbstractor
      uses function init_incsMap(List< Expr >) defined in edu::toronto::cs::yasm::refiner::NumericTPCBJPredicateAbstractor
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/refiner/TPCBJPredicateAbstractor.java
module edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   inherits from CBJPredicateAbstractor< Expr >
   function checkConsistency(CSPVariable< Expr >) in line 68
      protection public
      69 lines of code
      1 parameters
      6 conditional paths
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
      uses function checkTruth(Expr,Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses function trueExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function getAssumptionsUsed() defined in edu::toronto::cs::tp::ITheoremProver
      uses variable i defined in sparsemv.m
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable AND defined in edu::toronto::cs::expr::BoolOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses macro definition assert defined in util.h
      uses function newSolutionEvent(Boolean,Expr) defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses variable OR defined in edu::toronto::cs::expr::BoolOp
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
   function getFExpr() in line 171
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getTExpr() in line 167
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 237
      protection public
      26 lines of code
      1 parameters
      2 conditional paths
      uses function testJCVCLTheoremProver(ExprFactory) defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses function testCLCVCLTheoremProver(ExprFactory) defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses macro definition assert defined in util.h
      uses variable i defined in sparsemv.m
   function newSolutionEvent(Boolean,Expr) in line 138
      4 lines of code
      2 parameters
      2 conditional paths
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function unaryApply(Expr) defined in edu::toronto::cs::expr::Expr
      uses function stackLevel() defined in edu::toronto::cs::tp::ITheoremProver
      uses function push() defined in edu::toronto::cs::tp::ITheoremProver
      uses function assertFormula(Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses function popto(int) defined in edu::toronto::cs::tp::ITheoremProver
   function testCLCVCLTheoremProver(ExprFactory) in line 176
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function testTheoremProver(ITheoremProver) defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   function testJCVCLTheoremProver(ExprFactory) in line 181
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function testTheoremProver(ITheoremProver) defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   function testTheoremProver(ITheoremProver) in line 186
      protection public
      50 lines of code
      1 parameters
      1 conditional paths
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function declare(Expr,Expr) defined in edu::toronto::cs::tp::ITheoremProver
      uses variable EQ defined in edu::toronto::cs::expr::ComparisonOp
      uses function binApply(Expr,Expr) defined in edu::toronto::cs::expr::Expr
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses variable GT defined in edu::toronto::cs::expr::ComparisonOp
      uses variable PLUS defined in edu::toronto::cs::expr::NumericOp
      uses function TPCBJPredicateAbstractor(List,Expr,ITheoremProver) defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   function TPCBJPredicateAbstractor(List,Expr,ITheoremProver) in line 45
      protection public
      21 lines of code
      3 parameters
      2 conditional paths
      uses function exprFactory() defined in edu::toronto::cs::tp::ITheoremProver
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses variable i defined in sparsemv.m
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/refiner/TPCBJPredicateAbstractorTestCase.java
module edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractorTestCase
   inherits from junit::framework::TestCase
   function setUp() in line 24
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable fac defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractorTestCase
      uses variable intT defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractorTestCase
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
   function testInconsistency() in line 97
      protection public
      29 lines of code
      0 parameters
      1 conditional paths
      uses variable fac defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractorTestCase
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses variable intT defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractorTestCase
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
      uses variable writer defined in edu::toronto::cs::util::SystemOutWrapper
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses function getFExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   function testSuperSimpleBug() in line 30
      protection public
      58 lines of code
      0 parameters
      1 conditional paths
      uses variable fac defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractorTestCase
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses variable intT defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractorTestCase
      uses function recSearch(int) defined in edu::toronto::cs::yasm::refiner::CBJPredicateAbstractor
      uses variable writer defined in edu::toronto::cs::util::SystemOutWrapper
      uses function getTExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
      uses function getFExpr() defined in edu::toronto::cs::yasm::refiner::TPCBJPredicateAbstractor
   variable fac in line 21
   variable intT in line 22
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/trace/TraceGenerator.java
module edu::toronto::cs::yasm::trace::TraceGenerator
   function currentState() in line 83
      protection public
      31 lines of code
      0 parameters
      3 conditional paths
      uses function getStatePresenter() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
      uses function getState() defined in edu::toronto::cs::proof2::Formula
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getStmt(String) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getLineNum() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable i defined in sparsemv.m
      uses function getByCtlName(String) defined in edu::toronto::cs::yasm::pprogram::PredicateTable
   function doNextStep(ProofStep) in line 145
      81 lines of code
      1 parameters
      10 conditional paths
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
      uses function getConsequent() defined in edu::toronto::cs::proof2::Formula
      uses function expand(ProofStep) defined in edu::toronto::cs::proof2::CTLProver
      uses function getChildLength() defined in edu::toronto::cs::proof2::ProofStep
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
      uses function geq(AlgebraValue) defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable o defined in visual.m
      uses variable i defined in sparsemv.m
      uses function getChildLength() defined in edu::toronto::cs::proof2::TreeProofStep
      uses function getChild(int) defined in edu::toronto::cs::proof2::TreeProofStep
      uses function getState() defined in edu::toronto::cs::proof2::Formula
      uses function getStatePresenter() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
   function hasNext() in line 115
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function initProver() in line 121
      23 lines of code
      0 parameters
      1 conditional paths
      uses function addProofRule(ProofRule) defined in edu::toronto::cs::proof2::CTLProver
   function startOnPort(int) in line 227
      protection public
      41 lines of code
      1 parameters
      5 conditional paths
      uses function hasNext() defined in edu::toronto::cs::yasm::trace::TraceGenerator
      uses function step() defined in edu::toronto::cs::yasm::trace::TraceGenerator
   function step() in line 73
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses function initProver() defined in edu::toronto::cs::yasm::trace::TraceGenerator
      uses function doNextStep(ProofStep) defined in edu::toronto::cs::yasm::trace::TraceGenerator
      uses function currentState() defined in edu::toronto::cs::yasm::trace::TraceGenerator
   function TraceGenerator(PProgram,XKripkeStructure,MvSetModelChecker,CTLNode,MvSet,AlgebraValue) in line 47
      protection public
      25 lines of code
      6 parameters
      1 conditional paths
      uses function getInit() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getUnPrimeCube() defined in edu::toronto::cs::modelchecker::XKripkeStructure
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/util/Substitution.java
module edu::toronto::cs::yasm::util::Substitution
   function __recConvert(Expr) in line 33
      protection public
      26 lines of code
      1 parameters
      5 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable k defined in sparsemv.m
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
   function convert(List) in line 20
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function toCVCL(List) defined in edu::toronto::cs::expr::CVCLExprConverter
      uses function recConvert(Expr) defined in edu::toronto::cs::yasm::util::Substitution
   function recConvert(Expr) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function subst(Map) defined in edu::toronto::cs::expr::Expr
   function Substitution(CVCLExprConverter,ExprFactory,Map) in line 14
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/util/Util.java
module edu::toronto::cs::yasm::util::Util
   function belong(Expr,List) in line 70
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function equal(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::Expr
   function cleanVector(CVectorExpr) in line 12
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses variable v defined in visual.m
      uses function add(Expr) defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   function findIndex(Expr,List) in line 94
      protection public
      15 lines of code
      2 parameters
      5 conditional paths
      uses variable i defined in sparsemv.m
      uses function equal(Expr,Expr) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
   function fListToVector(List) in line 80
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable v defined in visual.m
      uses variable i defined in sparsemv.m
   function fVectorToList(CVectorExpr) in line 87
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses variable v defined in visual.m
   function preSubstitution(Expr) in line 64
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable vc2 defined in edu::toronto::cs::yasm::util::Util
      uses function getEM() defined in edu::toronto::cs::tp::cvcl::ValidityChecker
      uses function rebuildExpr(Expr) defined in edu::toronto::cs::tp::cvcl::ExprManager
   function printList(List) in line 27
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
   function printVector(CVectorExpr) in line 22
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function size() defined in edu::toronto::cs::tp::cvcl::CVectorExpr
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::CVectorExpr
   function substituteVars(Expr,Map,Map) in line 32
      23 lines of code
      3 parameters
      7 conditional paths
      uses function toString() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function arity() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function isVar() defined in edu::toronto::cs::tp::cvcl::Expr
      uses function get(int) defined in edu::toronto::cs::tp::cvcl::Expr
      uses function assign(Expr) defined in edu::toronto::cs::tp::cvcl::Expr
      uses variable k defined in sparsemv.m
   function substituteVars(Expr,Map) in line 55
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function substituteVars(Expr,Map,Map) defined in edu::toronto::cs::yasm::util::Util
   variable vc2 in line 10
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/wp/BaseWPComputer.java
module edu::toronto::cs::yasm::wp::BaseWPComputer
   inherits from edu::toronto::cs::yasm::wp::WPComputer
   abstract class
   function computeWP(Expr) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function computeWP(Expr[]) in line 19
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::wp::BaseWPComputer
   function computeWP(List) in line 27
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::wp::BaseWPComputer
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/wp/DCWPComputer.java
module edu::toronto::cs::yasm::wp::DCWPComputer
   inherits from edu::toronto::cs::yasm::wp::BaseWPComputer
   inherits from edu::toronto::cs::yasm::wp::WPComputer
   function computeWP(Expr) in line 37
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
   function DCWPComputer(Expr,SymbolTable) in line 25
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition assert defined in util.h
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable SLIST defined in edu::toronto::cs::expr::CILListOp
      uses function args() defined in edu::toronto::cs::expr::Expr
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/wp/ExprWPComputer.java
module edu::toronto::cs::yasm::wp::ExprWPComputer
   inherits from edu::toronto::cs::yasm::wp::BaseWPComputer
   inherits from edu::toronto::cs::yasm::wp::WPComputer
   function computeWP(Expr) in line 249
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function guardedSubst(Map,SubstGuard) defined in edu::toronto::cs::expr::Expr
      uses variable addrGuard defined in edu::toronto::cs::yasm::wp::ExprWPComputer
      uses variable pseudoBoolean defined in edu::toronto::cs::yasm::wp::ExprWPComputer
      uses function rewrite(Expr) defined in edu::toronto::cs::expr::ExprRewriter
      uses variable doubleNeg defined in edu::toronto::cs::yasm::wp::ExprWPComputer
      uses variable starAddr defined in edu::toronto::cs::yasm::wp::ExprWPComputer
   function recNonNull(Expr) in line 47
      8 lines of code
      1 parameters
      4 conditional paths
      uses function args() defined in edu::toronto::cs::expr::Expr
   function ExprWPComputer(Expr) in line 61
      protection public
      28 lines of code
      1 parameters
      3 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable ASSIGN defined in edu::toronto::cs::expr::CILAssignOp
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   function ExprWPComputer(Expr,Expr) in line 106
      protection public
      21 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
   variable addrGuard in line 130
   variable doubleNeg in line 195
   variable ID in line 28
      protection public
   variable pseudoBoolean in line 146
   variable starAddr in line 218
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/wp/MemoryModelWPComputer.java
module edu::toronto::cs::yasm::wp::MemoryModelWPComputer
   inherits from edu::toronto::cs::yasm::wp::BaseWPComputer
   inherits from edu::toronto::cs::yasm::wp::WPComputer
   function computeWP(Expr) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function subst(Map) defined in edu::toronto::cs::expr::Expr
   function MemoryModelWPComputer(MemoryModel) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/wp/MorrisWPComputer.java
module edu::toronto::cs::yasm::wp::MorrisWPComputer
   inherits from edu::toronto::cs::yasm::wp::ExprWPComputer
   inherits from edu::toronto::cs::yasm::wp::WPComputer
   function affLoc(Expr) in line 261
      9 lines of code
      1 parameters
      3 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function typeOf(Expr) defined in edu::toronto::cs::yasm::wp::MorrisWPComputer
   function computeWP(Expr) in line 110
      protection public
      48 lines of code
      1 parameters
      4 conditional paths
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function guardedSubst(Map,SubstGuard) defined in edu::toronto::cs::expr::Expr
      uses function getMutables(Expr,Set< Expr >) defined in edu::toronto::cs::yasm::wp::MorrisWPComputer
      uses function mayAlias(Expr,Expr) defined in edu::toronto::cs::yasm::wp::MorrisWPComputer
      uses function condSubst(Expr,Expr) defined in edu::toronto::cs::yasm::wp::MorrisWPComputer
      uses function rewrite(Expr) defined in edu::toronto::cs::expr::SimplifyingRewriter
   function condSubst(Expr,Expr) in line 226
      16 lines of code
      2 parameters
      1 conditional paths
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function subst(Map) defined in edu::toronto::cs::expr::Expr
   function getMutables(Expr,Set< Expr >) in line 173
      35 lines of code
      2 parameters
      7 conditional paths
      uses function typeOf(Expr) defined in edu::toronto::cs::yasm::wp::MorrisWPComputer
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function arity() defined in edu::toronto::cs::expr::Expr
      uses variable o defined in visual.m
      uses function args() defined in edu::toronto::cs::expr::Expr
   function main(String[]) in line 391
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function testBasic() defined in edu::toronto::cs::yasm::wp::MorrisWPComputer
   function mayAlias(Expr,Expr) in line 67
      42 lines of code
      2 parameters
      9 conditional paths
      uses function typeOf(Expr) defined in edu::toronto::cs::yasm::wp::MorrisWPComputer
   function testBasic() in line 274
      protection public
      116 lines of code
      0 parameters
      1 conditional paths
      uses function op(Operator) defined in edu::toronto::cs::expr::ExprFactory
      uses variable INT defined in edu::toronto::cs::expr::SimpleTypeOp
      uses function var(String) defined in edu::toronto::cs::expr::ExprFactory
      uses variable p defined in visual.m
      uses function put(Expr,Expr) defined in edu::toronto::cs::tp::SymbolTable
      uses function intExpr(int) defined in edu::toronto::cs::expr::ExprFactory
      uses function MorrisWPComputer(Expr,SymbolTable) defined in edu::toronto::cs::yasm::wp::MorrisWPComputer
      uses function computeWP(Expr) defined in edu::toronto::cs::yasm::wp::MorrisWPComputer
   function typeOf(Expr) in line 209
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getType(Expr) defined in edu::toronto::cs::expr::TypeInferencer
   function MorrisWPComputer(Expr,SymbolTable) in line 50
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/wp/UnknownExprWPComputer.java
module edu::toronto::cs::yasm::wp::UnknownExprWPComputer
   inherits from edu::toronto::cs::yasm::wp::BaseWPComputer
   inherits from edu::toronto::cs::yasm::wp::WPComputer
   function computeWP(Expr) in line 29
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function contains(Expr) defined in edu::toronto::cs::expr::Expr
      uses function getFactory() defined in edu::toronto::cs::expr::Expr
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
   function UnknownExprWPComputer(Expr) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/wp/WPComputer.java
module edu::toronto::cs::yasm::wp::WPComputer
   function computeWP(Expr) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function computeWP(Expr[]) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function computeWP(List) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/wp/WPComputerFactory.java
module edu::toronto::cs::yasm::wp::WPComputerFactory
   function id() in line 74
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable ID defined in edu::toronto::cs::yasm::wp::ExprWPComputer
   function prllAsmt(Expr,Expr) in line 51
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function recNonNull(Expr) in line 81
      11 lines of code
      1 parameters
      4 conditional paths
      uses function args() defined in edu::toronto::cs::expr::Expr
   function unknown(Expr) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function wp(Expr,SymbolTable) in line 24
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable ASSIGN defined in edu::toronto::cs::expr::CILAssignOp
      uses function recNonNull(Expr) defined in edu::toronto::cs::yasm::wp::WPComputerFactory
      uses function unknown(Expr) defined in edu::toronto::cs::yasm::wp::WPComputerFactory
      uses variable SLIST defined in edu::toronto::cs::expr::CILListOp
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/YasmApp.java
module edu::toronto::cs::yasm::YasmApp
   function getCFile() in line 193
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getParser() in line 279
      protection public
      4 lines of code
      0 parameters
      67 conditional paths
      uses function setInputFile(File) defined in edu::toronto::cs::boolpg::BoolProgramCompiler
      uses function setXKripkeStructure(XKripkeStructure) defined in edu::toronto::cs::yasm::YasmApp
      uses function compile() defined in edu::toronto::cs::boolpg::BoolProgramCompiler
      uses variable p defined in visual.m
      uses variable HINT defined in edu::toronto::cs::yasm::pprogram::PredicateSource
      uses function startParse() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function stopParse() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function print(PrintWriter) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable err defined in edu::toronto::cs::yasm::YasmApp
      uses function setSymbolTable(SymbolTable) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getSymbolTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function setStats(YasmStatistics) defined in edu::toronto::cs::yasm::abstractor::Refiner
      uses function startRefine() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function doProgramRefine(PProgram) defined in edu::toronto::cs::yasm::abstractor::Refiner
      uses function stopRefine() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function setPProgram(PProgram) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function setMaxDDVars(int) defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function startCompile() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function compile() defined in edu::toronto::cs::yasm::pprogram::PProgramCompiler
      uses function stopCompile() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::CloningRewriter
      uses function getMvSetFactory() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function rewrite(CTLNode) defined in edu::toronto::cs::modelchecker::SyntaxChecker
      uses function setProp(CTLNode) defined in edu::toronto::cs::yasm::YasmApp
      uses function getInit() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getTrans() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses variable i defined in sparsemv.m
      uses function or(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function fwdImage(MvSet) defined in edu::toronto::cs::mvset::MvRelation
      uses function setXChek(MvSetModelChecker) defined in edu::toronto::cs::yasm::YasmApp
      uses function startOnPort(int) defined in edu::toronto::cs::yasm::trace::TraceGenerator
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getUnPrimeCube() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function addProofRule(ProofRule) defined in edu::toronto::cs::proof2::CTLProver
      uses function getFormula() defined in edu::toronto::cs::proof2::ProofStep
      uses function getValue() defined in edu::toronto::cs::proof2::Formula
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
      uses function expand(ProofStep) defined in edu::toronto::cs::proof2::CTLProver
      uses function getChildLength() defined in edu::toronto::cs::proof2::ProofStep
      uses function getParent() defined in edu::toronto::cs::proof2::ProofStep
      uses function getState() defined in edu::toronto::cs::proof2::Formula
      uses function getStatePresenter() defined in edu::toronto::cs::modelchecker::XKripkeStructure
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getStmt(String) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function find() defined in edu::toronto::cs::yasm::pgenerator::PredicateGenerator
      uses function getNewPreds() defined in edu::toronto::cs::yasm::pgenerator::PredicateGenerator
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses variable out defined in edu::toronto::cs::yasm::YasmApp
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::ConditionalBranchPStmt
      uses function getOrigCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function setCond(Expr) defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function getPredicates() defined in edu::toronto::cs::yasm::abstractor::Refiner
      uses function getChildLength() defined in edu::toronto::cs::proof2::TreeProofStep
      uses function getChild(int) defined in edu::toronto::cs::proof2::TreeProofStep
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function add(PredicateGenerator) defined in edu::toronto::cs::yasm::pgenerator::ChainPredicateGenerator
      uses function start() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function getCFile() defined in edu::toronto::cs::yasm::YasmApp
      uses function geq(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getFactory() defined in edu::toronto::cs::mvset::MvSet
      uses function setName(String) defined in edu::toronto::cs::ctl::CTLMvSetNode
      uses function ef() defined in edu::toronto::cs::ctl::CTLAbstractNode
      uses function startMC() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function checkCTL(CTLNode,MvSet) defined in edu::toronto::cs::modelchecker::MvSetModelChecker
      uses function stopMC() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function not() defined in edu::toronto::cs::mvset::MvSet
      uses function toString() defined in edu::toronto::cs::algebra::AlgebraValue
      uses function isDoTrace() defined in edu::toronto::cs::yasm::YasmApp
      uses function startNewPred() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function stopNewPred() defined in edu::toronto::cs::yasm::YasmStatistics
      uses function setBpFile(File) defined in edu::toronto::cs::yasm::YasmApp
      uses function setDoProof(boolean) defined in edu::toronto::cs::yasm::YasmApp
      uses function setHyper(boolean) defined in edu::toronto::cs::yasm::YasmApp
      uses function setUnknownInit(boolean) defined in edu::toronto::cs::yasm::YasmApp
      uses function setCFile(boolean) defined in edu::toronto::cs::yasm::YasmApp
      uses function setRefinerType(String) defined in edu::toronto::cs::yasm::YasmApp
      uses function setPGeneratorType(String) defined in edu::toronto::cs::yasm::YasmApp
      uses function setSelectorType(String) defined in edu::toronto::cs::yasm::YasmApp
      uses function setStmtBlocking(boolean) defined in edu::toronto::cs::yasm::YasmApp
      uses function setMaxPredsPerRefinement(int) defined in edu::toronto::cs::yasm::YasmApp
      uses function setTracePort(int) defined in edu::toronto::cs::yasm::YasmApp
      uses function setDoTrace(boolean) defined in edu::toronto::cs::yasm::YasmApp
      uses function setParser(String) defined in edu::toronto::cs::yasm::YasmApp
      uses function setInitPredFile(File) defined in edu::toronto::cs::yasm::YasmApp
      uses function main(int,char **) defined in cuddTest.c
      uses function YasmApp() defined in edu::toronto::cs::yasm::YasmApp
      uses function getProp() defined in edu::toronto::cs::yasm::YasmApp
   function getProp() in line 184
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isDoTrace() in line 233
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function setBpFile(File) in line 175
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function setCFile(boolean) in line 189
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setDoProof(boolean) in line 258
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setDoTrace(boolean) in line 229
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setHyper(boolean) in line 244
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setInitPredFile(File) in line 170
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function setMaxPredsPerRefinement(int) in line 220
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function setParser(String) in line 274
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function setPGeneratorType(String) in line 239
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setProp(CTLNode) in line 179
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setRefinerType(String) in line 198
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setSelectorType(String) in line 203
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
      uses variable DDSelector defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable BinSelector defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable LinSelector defined in edu::toronto::cs::yasm::pprogram::PProgram
   function setStmtBlocking(boolean) in line 215
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setTracePort(int) in line 225
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setUnknownInit(boolean) in line 248
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setXChek(MvSetModelChecker) in line 269
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setXKripkeStructure(XKripkeStructure) in line 263
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function getAlgebra() defined in edu::toronto::cs::modelchecker::XKripkeStructure
   function YasmApp() in line 155
      protection public
      14 lines of code
      0 parameters
      1 conditional paths
   variable err in line 57
      protection public
   variable out in line 50
      protection public
   variable PREFS in line 64
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/YasmStatistics.java
module edu::toronto::cs::yasm::YasmStatistics
   function appendnl(StringBuffer,String) in line 266
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function start() in line 89
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in edu::toronto::cs::util::StopWatch
   function startAddrModel() in line 240
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startCompile() in line 110
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startMC() in line 149
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startNewPred() in line 161
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startParse() in line 123
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startPredicateAbstraction() in line 98
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startRefine() in line 137
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startRelatedPredicates() in line 253
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startTPAssert() in line 201
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startTPGetAssm() in line 214
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startTPQuery() in line 186
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startTPWriteQuery() in line 227
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function startWP() in line 173
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function resume() defined in edu::toronto::cs::util::StopWatch
   function stop() in line 93
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function stop() defined in edu::toronto::cs::util::StopWatch
   function stopAddrModel() in line 248
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopCompile() in line 117
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopMC() in line 156
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopNewPred() in line 168
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopParse() in line 130
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopPredicateAbstraction() in line 105
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopRefine() in line 144
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopRelatedPredicates() in line 261
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopTPAssert() in line 209
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopTPGetAssm() in line 222
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopTPQuery() in line 196
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopTPWriteQuery() in line 235
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function stopWP() in line 181
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pause() defined in edu::toronto::cs::util::StopWatch
   function toString() in line 273
      protection public
      26 lines of code
      0 parameters
      1 conditional paths
      uses function appendnl(StringBuffer,String) defined in edu::toronto::cs::yasm::YasmStatistics
   function YasmStatistics() in line 83
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/toronto/cs/yasm/YasrApp.java
module edu::toronto::cs::yasm::YasrApp
   function getProp() in line 233
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getStatePred(Map< String, Expr >,CTLNode[]) in line 1656
      17 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in sparsemv.m
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
   function initNTProver(BelnapAlgebra,EdgeSet,MvSet) in line 1548
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function addRule(ReachabilityProofRule) defined in edu::toronto::cs::yasm::reachability::ReachabilityProver
   function initProver(BelnapAlgebra,EdgeSet,MvSet) in line 1560
      protection public
      11 lines of code
      3 parameters
      7 conditional paths
      uses function addRule(ReachabilityProofRule) defined in edu::toronto::cs::yasm::reachability::ReachabilityProver
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getPredicates() defined in edu::toronto::cs::yasm::abstractor::Refiner
      uses function getStatePred(Map< String, Expr >,CTLNode[]) defined in edu::toronto::cs::yasm::YasrApp
      uses variable i defined in sparsemv.m
      uses function add(PredicateGenerator) defined in edu::toronto::cs::yasm::pgenerator::ChainPredicateGenerator
   function isDoProof() in line 292
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function main(String[]) in line 1798
      protection public
      71 lines of code
      1 parameters
      3 conditional paths
      uses function YasrApp() defined in edu::toronto::cs::yasm::YasrApp
      uses function parseCmdLine(String[]) defined in edu::toronto::cs::yasm::YasrApp
      uses function run() defined in edu::toronto::cs::yasm::YasrApp
      uses variable out defined in edu::toronto::cs::yasm::YasrApp
      uses function getProp() defined in edu::toronto::cs::yasm::YasrApp
      uses variable err defined in edu::toronto::cs::yasm::YasrApp
   function parseCmdLine(String[]) in line 1675
      protection public
      121 lines of code
      1 parameters
      2 conditional paths
      uses function setCFile(File) defined in edu::toronto::cs::yasm::YasrApp
      uses function setProp(CTLNode) defined in edu::toronto::cs::yasm::YasrApp
      uses function setDoProof(boolean) defined in edu::toronto::cs::yasm::YasrApp
      uses function setInline(boolean) defined in edu::toronto::cs::yasm::YasrApp
      uses function setHyper(boolean) defined in edu::toronto::cs::yasm::YasrApp
      uses function setUnknownInit(boolean) defined in edu::toronto::cs::yasm::YasrApp
      uses function setRefinerType(String) defined in edu::toronto::cs::yasm::YasrApp
      uses function setPGeneratorType(String) defined in edu::toronto::cs::yasm::YasrApp
      uses function setSelectorType(String) defined in edu::toronto::cs::yasm::YasrApp
      uses function setStmtBlocking(boolean) defined in edu::toronto::cs::yasm::YasrApp
      uses function setMaxPredsPerRefinement(int) defined in edu::toronto::cs::yasm::YasrApp
      uses function setInitPredFile(File) defined in edu::toronto::cs::yasm::YasrApp
      uses function setAbsPatternFilename(String) defined in edu::toronto::cs::yasm::YasrApp
   function printAsAssertion(CTLNode) in line 621
      24 lines of code
      1 parameters
      5 conditional paths
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getStmt(String) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getPreds() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses variable out defined in edu::toronto::cs::yasm::YasrApp
   function run() in line 647
      protection public
      169 lines of code
      0 parameters
      79 conditional paths
      uses variable out defined in edu::toronto::cs::yasm::YasrApp
      uses function getPredicates() defined in edu::toronto::cs::yasm::abstractor::Refiner
      uses function doNonTermination() defined in edu::toronto::cs::yasm::nontermination::NonTerminationChecker
      uses function doReachablity() defined in edu::toronto::cs::yasm::reachability::ReachabilityChecker
      uses function printAsAssertion(CTLNode) defined in edu::toronto::cs::yasm::YasrApp
      uses function isDoProof() defined in edu::toronto::cs::yasm::YasrApp
      uses function equals(Object) defined in edu::toronto::cs::algebra::AlgebraValue
      uses variable bot defined in algebra
      uses function usingAbstractionPatterns() defined in edu::toronto::cs::yasm::YasrApp
      uses function canBacktrack() defined in edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker
      uses function currentPrecondsIterator() defined in edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker
      uses function setProp(CTLNode) defined in edu::toronto::cs::yasm::YasrApp
      uses function currentPreconds() defined in edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker
      uses variable top defined in algebra
      uses macro definition assert defined in util.h
      uses function backtrackOne() defined in edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker
      uses function initNTProver(BelnapAlgebra,EdgeSet,MvSet) defined in edu::toronto::cs::yasm::YasrApp
      uses function getEdgeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getPreCube() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getStmt(String) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getNodeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function tick() defined in edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker
      uses variable p defined in visual.m
      uses function size() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function size() defined in edu::toronto::cs::yasm::pcfa::EdgeSet
      uses function initProver(BelnapAlgebra,EdgeSet,MvSet) defined in edu::toronto::cs::yasm::YasrApp
      uses function getLabel() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
      uses function expand(ProofGoal) defined in edu::toronto::cs::yasm::reachability::ReachabilityProver
      uses function getSubGoals() defined in edu::toronto::cs::yasm::reachability::ProofGoal
      uses variable i defined in sparsemv.m
      uses function getState() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function getId() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function getValue() defined in edu::toronto::cs::yasm::reachability::StateProofGoal
      uses function getStatePresenter() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function toCTL(AlgebraValue[]) defined in edu::toronto::cs::modelchecker::StatePresenter
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function getLeft() defined in edu::toronto::cs::ctl::CTLNode
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getPredTable() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function toString() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getEdge() defined in edu::toronto::cs::yasm::reachability::EdgeProofGoal
      uses function getSrc() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getDst() defined in edu::toronto::cs::yasm::pcfa::Edge
      uses function getVariables() defined in edu::toronto::cs::yasm::pprogram::PredicateTable
      uses function getStatePred(Map< String, Expr >,CTLNode[]) defined in edu::toronto::cs::yasm::YasrApp
      uses function find() defined in edu::toronto::cs::yasm::pgenerator::PredicateGenerator
      uses function getSrc() defined in edu::toronto::cs::yasm::reachability::EdgeProofGoal
      uses function intValue() defined in edu::toronto::cs::yasm::pcfa::Node::NodeId
      uses function getSourceExpr() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getDst() defined in edu::toronto::cs::yasm::reachability::EdgeProofGoal
      uses function getParent() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function and(MvSet) defined in edu::toronto::cs::mvset::MvSet
      uses function getPreToAuxMap() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getSumNodeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getValue() defined in edu::toronto::cs::yasm::reachability::EdgeProofGoal
      uses function getAuxCube() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getCond() defined in edu::toronto::cs::yasm::pprogram::IfPStmt
      uses function getOrigCond() defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function setCond(Expr) defined in edu::toronto::cs::yasm::pprogram::PCond
      uses function op() defined in edu::toronto::cs::expr::Expr
      uses variable NOT defined in edu::toronto::cs::expr::BoolOp
      uses function arg(int) defined in edu::toronto::cs::expr::Expr
      uses function getNewPreds() defined in edu::toronto::cs::yasm::pgenerator::PredicateGenerator
      uses function getName() defined in edu::toronto::cs::yasm::pprogram::Pred
      uses function falseExpr() defined in edu::toronto::cs::expr::ExprFactory
      uses function getPreds() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function loopUnrollingDetected() defined in edu::toronto::cs::yasm::abspatterns::LoopUnrollingDetector
      uses function getUnrolledLoops() defined in edu::toronto::cs::yasm::abspatterns::LoopUnrollingDetector
      uses function getBoundedVars(String) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function extractionWorked() defined in edu::toronto::cs::yasm::abspatterns::BoundsCheckExtractor
      uses function getVar() defined in edu::toronto::cs::yasm::abspatterns::BoundsCheckExtractor
      uses function getBound() defined in edu::toronto::cs::yasm::abspatterns::BoundsCheckExtractor
      uses function getAssertion() defined in edu::toronto::cs::yasm::abspatterns::BoundsCheckExtractor
      uses function getTries(String) defined in edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker
      uses function alreadyPatternAbstracting(String) defined in edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker
      uses function getAbstraction(PProgram,String,Expr,Expr,IfPStmt,int) defined in edu::toronto::cs::yasm::abspatterns::AbstractionPatternDB
      uses function registerChoice(String,List< Pred >,List< Pred >) defined in edu::toronto::cs::yasm::abspatterns::AbsPatternBacktracker
   function setAbsPatternFilename(String) in line 217
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in visual.m
   function setCFile(File) in line 206
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function setDoProof(boolean) in line 287
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setHyper(boolean) in line 270
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setInitPredFile(File) in line 212
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable f defined in mvproduct.m
   function setInline(boolean) in line 298
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setMaxPredsPerRefinement(int) in line 260
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function setModel(ReachabilityStructure) in line 303
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
      uses function getAlgebra() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
   function setPGeneratorType(String) in line 265
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setProp(CTLNode) in line 227
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable out defined in edu::toronto::cs::yasm::YasrApp
      uses variable v defined in visual.m
   function setReachabilityChecker(ReachabilityChecker) in line 310
      protection public
      4 lines of code
      1 parameters
      23 conditional paths
      uses variable v defined in visual.m
      uses variable p defined in visual.m
      uses function setSymbolTable(SymbolTable) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getLabelledStatementMap() defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function doDeclsRefine(PProgram) defined in edu::toronto::cs::yasm::abstractor::Refiner
      uses variable HINT defined in edu::toronto::cs::yasm::pprogram::PredicateSource
      uses function doProgramRefine(PProgram) defined in edu::toronto::cs::yasm::abstractor::Refiner
      uses function accept(PProgramVisitor,Object) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function setPProgram(PProgram) defined in edu::toronto::cs::yasm::pprogram::PProgramReachabilityCompiler
      uses function setMaxDDVars(int) defined in edu::toronto::cs::yasm::pprogram::PProgramReachabilityCompiler
      uses function setModel(ReachabilityStructure) defined in edu::toronto::cs::yasm::YasrApp
      uses function compile() defined in edu::toronto::cs::yasm::pprogram::PProgramReachabilityCompiler
      uses variable out defined in edu::toronto::cs::yasm::YasrApp
      uses variable err defined in edu::toronto::cs::yasm::YasrApp
      uses function getRight() defined in edu::toronto::cs::ctl::CTLNode
      uses function getStmt(String) defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses function getNodeSet() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function createNext() defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function add(Node) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getId() defined in edu::toronto::cs::yasm::pprogram::PStmt
      uses function getMvSetFactory() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function top() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function setNodeSet(NodeSet) defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function bot() defined in edu::toronto::cs::mvset::MvSetFactory
      uses function get(Node.NodeId) defined in edu::toronto::cs::yasm::pcfa::NodeSet
      uses function getAlgebra() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getValue() defined in edu::toronto::cs::yasm::pcfa::Node
      uses function getPreCube() defined in edu::toronto::cs::yasm::reachability::ReachabilityStructure
      uses function getValue() defined in edu::toronto::cs::mvset::MvSet
   function setRefinerType(String) in line 238
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setSelectorType(String) in line 243
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in visual.m
      uses variable DDSelector defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable BinSelector defined in edu::toronto::cs::yasm::pprogram::PProgram
      uses variable LinSelector defined in edu::toronto::cs::yasm::pprogram::PProgram
   function setStmtBlocking(boolean) in line 255
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function setUnknownInit(boolean) in line 274
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v defined in visual.m
   function usingAbstractionPatterns() in line 222
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function whackOf(char) in line 180
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in sparsemv.m
   function YasrApp() in line 189
      protection public
      16 lines of code
      0 parameters
      1 conditional paths
   variable DEBUG in line 48
      protection public
   variable err in line 61
      protection public
   variable out in line 54
      protection public
   variable PREFS in line 68
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/jsrc/edu/WeirdAnt.java
module edu::WeirdAnt
   inherits from edu::Ant
   function main(String[]) in line 28
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function WeirdAnt(int,int) defined in edu::WeirdAnt
      uses function setID(int) defined in edu::WeirdAnt
      uses variable id defined in edu::WeirdAnt
      uses variable age defined in edu::WeirdAnt
      uses variable i defined in sparsemv.m
      uses function toString() defined in edu::WeirdAnt
   function setID(int) in line 23
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
   function toString() in line 18
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable age defined in edu::WeirdAnt
   function WeirdAnt(int,int) in line 11
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable i defined in sparsemv.m
      uses variable id defined in edu::WeirdAnt
   variable age in line 8
      protection public
   variable id in line 9
      protection public
module edu::Ant
   function setID(int) in line 53
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function toString() in line 58
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function Ant(int,int) in line 47
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   variable age in line 44
      protection public
   variable id in line 45
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/junit/array/ArrayYasmTestSuite.java
module junit::array::ArrayYasmTestSuite
   inherits from junit::framework::TestSuite
   function suite() in line 19
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/junit/overflow/OverflowYasmTestSuite.java
module junit::overflow::OverflowYasmTestSuite
   inherits from junit::framework::TestSuite
   function suite() in line 19
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/junit/ptr/PtrYasmTestSuite.java
module junit::ptr::PtrYasmTestSuite
   inherits from junit::framework::TestSuite
   function suite() in line 19
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/junit/sample/SampleYasmTestSuite.java
module junit::sample::SampleYasmTestSuite
   inherits from junit::framework::TestSuite
   function suite() in line 19
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/junit/yasr/YasrTestSuite.java
module junit::yasr::YasrTestSuite
   inherits from junit::framework::TestSuite
   function suite() in line 19
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/tools/cudd/include/cudd.h
module cudd.h
   macro definition CUDD_VERSION in line 44
      protection public
   macro definition SIZEOF_LONG in line 53
      protection public
   macro definition TRUE in line 57
      protection public
   macro definition FALSE in line 60
      protection public
   macro definition CUDD_VALUE_TYPE in line 67
      protection public
   macro definition CUDD_OUT_OF_MEM in line 69
      protection public
   macro definition CUDD_UNIQUE_SLOTS in line 71
      protection public
   macro definition CUDD_CACHE_SLOTS in line 72
      protection public
   macro definition CUDD_RESIDUE_DEFAULT in line 75
      protection public
   macro definition CUDD_RESIDUE_MSB in line 76
      protection public
   macro definition CUDD_RESIDUE_TC in line 77
      protection public
   macro definition CUDD_MAXINDEX in line 86
      protection public
   macro definition CUDD_CONST_INDEX in line 91
      protection public
   macro definition DD_APA_BITS in line 98
      protection public
   macro definition DD_APA_BASE in line 99
      protection public
   macro definition DD_APA_MASK in line 100
      protection public
   macro definition DD_APA_HEXPRINT in line 101
      protection public
   macro definition Cudd_IsConstant in line 294
      protection public
   macro definition Cudd_Not in line 309
      protection public
   macro definition Cudd_NotCond in line 325
      protection public
   macro definition Cudd_Regular in line 339
      protection public
   macro definition Cudd_Complement in line 353
      protection public
   macro definition Cudd_IsComplement in line 367
      protection public
   macro definition Cudd_T in line 382
      protection public
   macro definition Cudd_E in line 397
      protection public
   macro definition Cudd_V in line 412
      protection public
   macro definition Cudd_ReadIndex in line 429
      protection public
   macro definition Cudd_ForeachCube in line 461
      protection public
   macro definition Cudd_ForeachNode in line 495
      protection public
   macro definition Cudd_zddForeachPath in line 529
      protection public
   enumeration Cudd_ReorderingType in line 119
      protection public
   enumeration Cudd_AggregationType in line 152
      protection public
   enumeration Cudd_HookType in line 173
      protection public
   enumeration Cudd_ErrorType in line 188
      protection public
   enumeration Cudd_LazyGroupType in line 205
      protection public
   enumeration Cudd_VariableType in line 220
      protection public
   typedef DdHalfWord in line 230
      protection public
   typedef DdNode in line 230
      protection public
   typedef DdChildren in line 243
      protection public
   typedef DdManager in line 230
      protection public
   typedef DdGen in line 230
      protection public
   typedef DdApaDigit in line 266
      protection public
   typedef DdApaDoubleDigit in line 267
      protection public
   typedef DdApaNumber in line 268
      protection public
   enumvalue CUDD_REORDER_SAME in line 120
      protection public
   enumvalue CUDD_REORDER_NONE in line 121
      protection public
   enumvalue CUDD_REORDER_RANDOM in line 122
      protection public
   enumvalue CUDD_REORDER_RANDOM_PIVOT in line 123
      protection public
   enumvalue CUDD_REORDER_SIFT in line 124
      protection public
   enumvalue CUDD_REORDER_SIFT_CONVERGE in line 125
      protection public
   enumvalue CUDD_REORDER_SYMM_SIFT in line 126
      protection public
   enumvalue CUDD_REORDER_SYMM_SIFT_CONV in line 127
      protection public
   enumvalue CUDD_REORDER_WINDOW2 in line 128
      protection public
   enumvalue CUDD_REORDER_WINDOW3 in line 129
      protection public
   enumvalue CUDD_REORDER_WINDOW4 in line 130
      protection public
   enumvalue CUDD_REORDER_WINDOW2_CONV in line 131
      protection public
   enumvalue CUDD_REORDER_WINDOW3_CONV in line 132
      protection public
   enumvalue CUDD_REORDER_WINDOW4_CONV in line 133
      protection public
   enumvalue CUDD_REORDER_GROUP_SIFT in line 134
      protection public
   enumvalue CUDD_REORDER_GROUP_SIFT_CONV in line 135
      protection public
   enumvalue CUDD_REORDER_ANNEALING in line 136
      protection public
   enumvalue CUDD_REORDER_GENETIC in line 137
      protection public
   enumvalue CUDD_REORDER_LINEAR in line 138
      protection public
   enumvalue CUDD_REORDER_LINEAR_CONVERGE in line 139
      protection public
   enumvalue CUDD_REORDER_LAZY_SIFT in line 140
      protection public
   enumvalue CUDD_REORDER_EXACT in line 142
      protection public
   enumvalue CUDD_NO_CHECK in line 153
      protection public
   enumvalue CUDD_GROUP_CHECK in line 154
      protection public
   enumvalue CUDD_GROUP_CHECK2 in line 155
      protection public
   enumvalue CUDD_GROUP_CHECK3 in line 156
      protection public
   enumvalue CUDD_GROUP_CHECK4 in line 157
      protection public
   enumvalue CUDD_GROUP_CHECK5 in line 158
      protection public
   enumvalue CUDD_GROUP_CHECK6 in line 159
      protection public
   enumvalue CUDD_GROUP_CHECK7 in line 160
      protection public
   enumvalue CUDD_GROUP_CHECK8 in line 161
      protection public
   enumvalue CUDD_GROUP_CHECK9 in line 163
      protection public
   enumvalue CUDD_PRE_GC_HOOK in line 174
      protection public
   enumvalue CUDD_POST_GC_HOOK in line 175
      protection public
   enumvalue CUDD_PRE_REORDERING_HOOK in line 176
      protection public
   enumvalue CUDD_POST_REORDERING_HOOK in line 178
      protection public
   enumvalue CUDD_NO_ERROR in line 189
      protection public
   enumvalue CUDD_MEMORY_OUT in line 190
      protection public
   enumvalue CUDD_TOO_MANY_NODES in line 191
      protection public
   enumvalue CUDD_MAX_MEM_EXCEEDED in line 192
      protection public
   enumvalue CUDD_INVALID_ARG in line 193
      protection public
   enumvalue CUDD_INTERNAL_ERROR in line 195
      protection public
   enumvalue CUDD_LAZY_NONE in line 206
      protection public
   enumvalue CUDD_LAZY_SOFT_GROUP in line 207
      protection public
   enumvalue CUDD_LAZY_HARD_GROUP in line 208
      protection public
   enumvalue CUDD_LAZY_UNGROUP in line 210
      protection public
   enumvalue CUDD_VAR_PRIMARY_INPUT in line 221
      protection public
   enumvalue CUDD_VAR_PRESENT_STATE in line 222
      protection public
   enumvalue CUDD_VAR_NEXT_STATE in line 224
      protection public
   function ARGS((DdManager *dd)) in line 558
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int level)) in line 559
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int i)) in line 562
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int multiplicity)) in line 565
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, CUDD_VALUE_TYPE c)) in line 566
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdNode *f)) in line 567
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique, Cudd_ReorderingType method)) in line 568
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique)) in line 569
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique, Cudd_ReorderingType *method)) in line 570
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *bck)) in line 587
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, unsigned int hr)) in line 594
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, unsigned int lut)) in line 596
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, unsigned int mc)) in line 599
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int smv)) in line 617
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int sms)) in line 619
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, double mg)) in line 621
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int cycle)) in line 625
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, MtrNode *tree)) in line 627
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdNode *node)) in line 632
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, CUDD_VALUE_TYPE ep)) in line 639
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, Cudd_AggregationType gc)) in line 641
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int recomb)) in line 649
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int symmviolation)) in line 651
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int arcviolation)) in line 653
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int populationSize)) in line 655
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int numberXovers)) in line 657
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, FILE *fp)) in line 659
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int(*f)(DdManager *, char *, void *), Cudd_HookType where)) in line 664
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, char *str, void *data)) in line 667
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, unsigned int next)) in line 679
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, unsigned int maxLive)) in line 682
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, long maxMemory)) in line 684
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int index)) in line 685
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, DdNode *cube)) in line 688
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *(*)(DdManager *, DdNode **, DdNode **), DdNode *f, DdNode *g)) in line 691
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode **f, DdNode **g)) in line 692
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *(*op)(DdManager *, DdNode *), DdNode *f)) in line 708
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f)) in line 709
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int bit)) in line 712
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *epsilon)) in line 713
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, DdNode *h)) in line 714
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g)) in line 716
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int N)) in line 720
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode **x, DdNode **y, int n)) in line 721
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int n, int m, int options, int top)) in line 722
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, DdNode *g, DdNode *cube)) in line 723
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int binaryDigits)) in line 724
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int digits)) in line 725
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int digits, DdApaNumber source, DdApaNumber dest)) in line 726
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int digits, DdApaNumber a, DdApaNumber b, DdApaNumber sum)) in line 727
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int digits, DdApaNumber a, DdApaNumber b, DdApaNumber diff)) in line 728
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int digits, DdApaNumber dividend, DdApaDigit divisor, DdApaNumber quotient)) in line 729
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int digits, DdApaNumber dividend, unsigned int divisor, DdApaNumber quotient)) in line 730
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int digits, DdApaDigit in, DdApaNumber a, DdApaNumber b)) in line 731
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int digits, DdApaNumber number, DdApaDigit literal)) in line 732
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int digits, DdApaNumber number, int power)) in line 733
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int digitsFirst, DdApaNumber first, int digitsSecond, DdApaNumber second)) in line 734
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int digitsFirst, DdApaNumber firstNum, unsigned int firstDen, int digitsSecond, DdApaNumber secondNum, unsigned int secondDen)) in line 735
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((FILE *fp, int digits, DdApaNumber number)) in line 736
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((FILE *fp, int digits, DdApaNumber number, int precision)) in line 738
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *node, int nvars, int *digits)) in line 739
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((FILE *fp, DdManager *dd, DdNode *node, int nvars)) in line 740
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((FILE *fp, DdManager *dd, DdNode *node, int nvars, int precision)) in line 741
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int numVars, int threshold, int safe, double quality)) in line 743
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int numVars, int threshold, double quality)) in line 745
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *b, int numVars, int threshold, double quality1, double quality0)) in line 747
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, int x)) in line 752
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *var)) in line 753
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, DdNode *g)) in line 754
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, DdNode *g, double *prob)) in line 755
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, CUDD_VALUE_TYPE value)) in line 766
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, CUDD_VALUE_TYPE lower, CUDD_VALUE_TYPE upper)) in line 768
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *B)) in line 770
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *ddSource, DdManager *ddDestination, DdNode *f)) in line 772
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table)) in line 773
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, int maxDepth, int direction)) in line 775
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, DdNode *cube, int maxDepth, int direction)) in line 776
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, int v)) in line 778
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *node, int *permut)) in line 780
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode **x, DdNode **y, int n)) in line 781
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f)) in line 783
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode **x, DdNode **y, int n)) in line 784
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *B, DdNode **x, int n)) in line 786
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode **vector)) in line 787
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode **vectorOn, DdNode **vectorOff)) in line 788
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode ***conjuncts)) in line 791
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode ***disjuncts)) in line 792
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, int id, int phase)) in line 800
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int n, DdNode **f, char **inames, char **onames, char *mname, FILE *fp)) in line 801
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int n, DdNode **f, char **inames, char **onames, FILE *fp)) in line 802
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *c)) in line 807
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *l, DdNode *u)) in line 814
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int nvars, int threshold)) in line 816
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, unsigned int low, unsigned int size, unsigned int type)) in line 818
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((FILE *fp, DdManager *dd, DdNode **E, DdNode ***x, DdNode ***y, DdNode ***xn, DdNode ***yn_, int *nx, int *ny, int *m, int *n, int bx, int sx, int by, int sy, int pr)) in line 819
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((unsigned int numVars, unsigned int numVarsZ, unsigned int numSlots, unsigned int cacheSize, unsigned long maxMemory)) in line 820
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, int x, int y)) in line 823
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *A, DdNode *B, DdNode **z, int nz)) in line 825
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, DdNode **z, int nz)) in line 827
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *M, DdNode *r, DdNode *c)) in line 828
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *R, DdNode **x, DdNode **y, DdNode **z, DdNode *Pi, int n, DdNode *(*)(DdManager *, int, DdNode **, DdNode **, DdNode **))) in line 829
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int N, DdNode **z, DdNode **x, DdNode **y)) in line 830
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int N, DdNode **x, DdNode **y)) in line 831
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int N, DdNode **x, DdNode **y, DdNode **z)) in line 833
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *R, DdNode *Y)) in line 835
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode **xVars, DdNode **yVars, int nVars)) in line 836
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int *minterm, int upperBound)) in line 837
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, int *distance)) in line 838
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((FILE *fp, DdManager *dd, DdNode **E, DdNode ***x, DdNode ***y, DdNode ***xn, DdNode ***yn_, int *nx, int *ny, int *m, int *n, int bx, int sx, int by, int sy)) in line 839
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((FILE *fp, DdManager *dd, DdNode **E, DdNode ***x, DdNode ***y, int *nx, int *ny, int *m, int *n, int bx, int sx, int by, int sy)) in line 840
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdNode *n)) in line 841
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, DdNode *n)) in line 842
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager)) in line 847
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, Cudd_ReorderingType heuristic, int minsize)) in line 848
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, int *permutation)) in line 849
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int *inputs)) in line 850
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, int *weight, int *support, int *length)) in line 851
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, int *length)) in line 852
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, int *weight)) in line 853
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int i)) in line 854
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *F, DdNode *G, DdNode *D)) in line 856
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, DdNode *D)) in line 857
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, CUDD_VALUE_TYPE tolerance, int pr)) in line 858
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *cube, DdNode *f)) in line 859
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *node)) in line 860
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *bdd, DdNode *F, DdNode *Y, DdNode **G, int **yIndex, int n)) in line 861
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *bdd, DdNode *F, DdNode **G, int *yIndex, int n)) in line 862
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *S, DdNode **xVars, int n, double m)) in line 863
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int numVars, int threshold)) in line 864
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int numVars, int threshold, int hardlimit)) in line 866
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, int lower, int upper)) in line 868
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((unsigned int p)) in line 869
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *node)) in line 870
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int n, int pr)) in line 872
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *node, int i, int phase)) in line 874
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdNode *node, int i)) in line 875
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdNode **nodeArray, int n)) in line 876
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *node, int nvars)) in line 877
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *node, int nvars, EpDouble *epd)) in line 878
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode **F, int n)) in line 884
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, DdNode **common, DdNode **onlyF, DdNode **onlyG)) in line 887
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *ddm, DdNode *node, char *string)) in line 889
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode **vars, int n)) in line 890
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode **vars, int n, int k)) in line 891
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode **vars, int nvars, DdNode **maskVars, int mvars)) in line 892
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int **cube, CUDD_VALUE_TYPE *value)) in line 893
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdGen *gen, int **cube, CUDD_VALUE_TYPE *value)) in line 894
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode **vars, int *phase, int n)) in line 895
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int *array)) in line 897
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *cube, int *array)) in line 898
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode **node)) in line 899
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdGen *gen, DdNode **node)) in line 900
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdGen *gen)) in line 901
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int *array, int n)) in line 903
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((FILE *fp)) in line 904
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS(()) in line 906
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((long seed)) in line 907
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int nvars)) in line 908
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((long size)) in line 909
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd, DdNode *P)) in line 910
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *L, DdNode *U, DdNode **zdd_I)) in line 920
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *L, DdNode *U)) in line 921
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdNode *p_node)) in line 923
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd, DdNode *node, int path)) in line 924
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *P, DdNode *Q)) in line 931
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd, DdNode *P, DdNode *Q)) in line 934
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *P, int var)) in line 935
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd, DdNode *node)) in line 939
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd, DdNode *f, int n, int pr)) in line 941
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd, DdNode *f, int **path)) in line 942
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdGen *gen, int **path)) in line 943
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd, int *path, char *str)) in line 944
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int index, int pairIndex)) in line 952
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module DdChildren
   variable E in line 242
      protection public
   variable T in line 241
      protection public
module DdNode
   variable index in line 247
      protection public
   variable kids in line 252
      protection public
   variable next in line 249
      protection public
   variable ref in line 248
      protection public
   variable type in line 253
      protection public
   variable value in line 251
      protection public
module DdNode::@0
   variable kids in line 252
      protection public
   variable value in line 251
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/tools/cudd/include/cuddInt.h
module cuddInt.h
   macro definition DD_INLINE in line 60
      protection public
   macro definition DD_UNUSED in line 62
      protection public
   macro definition DD_MAXREF in line 70
      protection public
   macro definition DD_DEFAULT_RESIZE in line 72
      protection public
   macro definition DD_MEM_CHUNK in line 74
      protection public
   macro definition DD_ONE_VAL in line 83
      protection public
   macro definition DD_ZERO_VAL in line 84
      protection public
   macro definition DD_EPSILON in line 85
      protection public
   macro definition DD_PLUS_INF_VAL in line 93
      protection public
   macro definition DD_CRI_HI_MARK in line 94
      protection public
   macro definition DD_CRI_LO_MARK in line 95
      protection public
   macro definition DD_MINUS_INF_VAL in line 97
      protection public
   macro definition DD_NON_CONSTANT in line 99
      protection public
   macro definition DD_MAX_SUBTABLE_DENSITY in line 102
      protection public
   macro definition DD_GC_FRAC_LO in line 109
      protection public
   macro definition DD_GC_FRAC_HI in line 110
      protection public
   macro definition DD_GC_FRAC_MIN in line 111
      protection public
   macro definition DD_MIN_HIT in line 113
      protection public
   macro definition DD_MAX_LOOSE_FRACTION in line 115
      protection public
   macro definition DD_MAX_CACHE_FRACTION in line 117
      protection public
   macro definition DD_STASH_FRACTION in line 119
      protection public
   macro definition DD_MAX_CACHE_TO_SLOTS_RATIO in line 120
      protection public
   macro definition DD_SIFT_MAX_VAR in line 123
      protection public
   macro definition DD_SIFT_MAX_SWAPS in line 124
      protection public
   macro definition DD_DEFAULT_RECOMB in line 125
      protection public
   macro definition DD_MAX_REORDER_GROWTH in line 126
      protection public
   macro definition DD_FIRST_REORDER in line 127
      protection public
   macro definition DD_DYN_RATIO in line 128
      protection public
   macro definition DD_P1 in line 131
      protection public
   macro definition DD_P2 in line 132
      protection public
   macro definition DD_P3 in line 133
      protection public
   macro definition DD_P4 in line 134
      protection public
   macro definition DD_ADD_ITE_TAG in line 148
      protection public
   macro definition DD_BDD_AND_ABSTRACT_TAG in line 149
      protection public
   macro definition DD_BDD_XOR_EXIST_ABSTRACT_TAG in line 150
      protection public
   macro definition DD_BDD_ITE_TAG in line 151
      protection public
   macro definition DD_ADD_BDD_DO_INTERVAL_TAG in line 152
      protection public
   macro definition DD_BDD_CLIPPING_AND_ABSTRACT_UP_TAG in line 153
      protection public
   macro definition DD_BDD_CLIPPING_AND_ABSTRACT_DOWN_TAG in line 154
      protection public
   macro definition DD_BDD_COMPOSE_RECUR_TAG in line 155
      protection public
   macro definition DD_ADD_COMPOSE_RECUR_TAG in line 156
      protection public
   macro definition DD_ADD_NON_SIM_COMPOSE_TAG in line 157
      protection public
   macro definition DD_EQUIV_DC_TAG in line 158
      protection public
   macro definition DD_ZDD_ITE_TAG in line 159
      protection public
   macro definition DD_ADD_ITE_CONSTANT_TAG in line 160
      protection public
   macro definition DD_ADD_EVAL_CONST_TAG in line 161
      protection public
   macro definition DD_BDD_ITE_CONSTANT_TAG in line 162
      protection public
   macro definition DD_ADD_OUT_SUM_TAG in line 163
      protection public
   macro definition DD_BDD_LEQ_UNLESS_TAG in line 164
      protection public
   macro definition DD_ADD_TRIANGLE_TAG in line 165
      protection public
   macro definition CUDD_GEN_CUBES in line 168
      protection public
   macro definition CUDD_GEN_NODES in line 169
      protection public
   macro definition CUDD_GEN_ZDD_PATHS in line 170
      protection public
   macro definition CUDD_GEN_EMPTY in line 171
      protection public
   macro definition CUDD_GEN_NONEMPTY in line 172
      protection public
   macro definition cuddDeallocNode in line 504
      protection public
   macro definition cuddRef in line 523
      protection public
   macro definition cuddDeref in line 543
      protection public
   macro definition cuddIsConstant in line 559
      protection public
   macro definition cuddT in line 575
      protection public
   macro definition cuddE in line 591
      protection public
   macro definition cuddV in line 607
      protection public
   macro definition cuddI in line 625
      protection public
   macro definition cuddIZ in line 643
      protection public
   macro definition ddHash in line 662
      protection public
   macro definition ddCHash in line 684
      protection public
   macro definition ddCHash2 in line 707
      protection public
   macro definition cuddClean in line 723
      protection public
   macro definition ddMin in line 737
      protection public
   macro definition ddMax in line 751
      protection public
   macro definition ddAbs in line 765
      protection public
   macro definition ddEqualVal in line 780
      protection public
   macro definition cuddSatInc in line 797
      protection public
   macro definition cuddSatDec in line 815
      protection public
   macro definition DD_ONE in line 830
      protection public
   macro definition DD_ZERO in line 846
      protection public
   macro definition DD_PLUS_INFINITY in line 860
      protection public
   macro definition DD_MINUS_INFINITY in line 874
      protection public
   macro definition cuddAdjust in line 898
      protection public
   macro definition DD_LSDIGIT in line 914
      protection public
   macro definition DD_MSDIGIT in line 929
      protection public
   macro definition statLine in line 956
      protection public
   typedef DdHook in line 212
      protection public
   typedef ptrint in line 218
      protection public
   typedef ptruint in line 219
      protection public
   typedef DdNodePtr in line 227
      protection public
   typedef DdLocalCacheItem in line 236
      protection public
   typedef DdLocalCache in line 251
      protection public
   typedef DdHashItem in line 259
      protection public
   typedef DdHashTable in line 273
      protection public
   typedef DdCache in line 282
      protection public
   typedef DdSubtable in line 298
      protection public
   typedef Move in line 455
      protection public
   typedef DdQueueItem in line 462
      protection public
   typedef DdLevelQueue in line 476
      protection public
   function ARGS((DdManager *manager, DdNode *f, DdNode *cube)) in line 966
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *(*)(DdManager *, DdNode **, DdNode **), DdNode *f, DdNode *g)) in line 969
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *(*op)(DdManager *, DdNode *), DdNode *f)) in line 970
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *epsilon)) in line 971
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, DdNode *h)) in line 972
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f)) in line 973
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, double trunc)) in line 975
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int numVars, int threshold, int safe, double quality)) in line 976
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int numVars, int threshold, double quality)) in line 977
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *b, int numVars, int threshold, double quality1, double quality0)) in line 978
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, DdNode *g, DdNode *cube)) in line 979
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, int lower, int upper)) in line 980
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, DdNode *var)) in line 983
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g)) in line 985
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, DdNode *f, DdNode *g)) in line 986
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *ddS, DdManager *ddD, DdNode *f)) in line 988
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique, unsigned int cacheSize, unsigned int maxCacheSize)) in line 990
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, ptruint op, DdNode *f, DdNode *g, DdNode *h, DdNode *data)) in line 991
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, DdNode *(*)(DdManager *, DdNode *, DdNode *), DdNode *f, DdNode *g, DdNode *data)) in line 992
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, DdNode *(*)(DdManager *, DdNode *), DdNode *f, DdNode *data)) in line 993
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, ptruint op, DdNode *f, DdNode *g, DdNode *h)) in line 994
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, DdNode *(*)(DdManager *, DdNode *, DdNode *), DdNode *f, DdNode *g)) in line 996
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, DdNode *(*)(DdManager *, DdNode *), DdNode *f)) in line 997
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, FILE *fp)) in line 1001
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table)) in line 1002
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((unsigned int value)) in line 1004
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd)) in line 1005
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdNode *f, FILE *fp)) in line 1006
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, MtrNode *root, int zdd, int silent)) in line 1007
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, int maxDepth, int direction)) in line 1008
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, DdNode *cube, int maxDepth, int direction)) in line 1009
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdNode *g, DdNode **g1, DdNode **g0)) in line 1010
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *g)) in line 1011
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, DdNode *proj)) in line 1013
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *c)) in line 1016
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, Cudd_ReorderingType method)) in line 1022
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd)) in line 1023
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, int x, int y)) in line 1025
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, unsigned int keySize, unsigned int cacheSize, unsigned int maxCacheSize)) in line 1028
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdLocalCache *cache)) in line 1029
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdLocalCache *cache, DdNodePtr *key, DdNode *value)) in line 1030
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdLocalCache *cache, DdNodePtr *key)) in line 1031
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager)) in line 1032
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, unsigned int keySize, unsigned int initSize)) in line 1039
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdHashTable *hash)) in line 1040
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdHashTable *hash, DdNodePtr *key, DdNode *value, ptrint count)) in line 1041
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdHashTable *hash, DdNodePtr *key)) in line 1042
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdHashTable *hash, DdNode *f, DdNode *value, ptrint count)) in line 1043
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdHashTable *hash, DdNode *f)) in line 1044
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdHashTable *hash, DdNode *f, DdNode *g, DdNode *value, ptrint count)) in line 1045
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdHashTable *hash, DdNode *f, DdNode *g)) in line 1046
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdHashTable *hash, DdNode *f, DdNode *g, DdNode *h, DdNode *value, ptrint count)) in line 1047
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdHashTable *hash, DdNode *f, DdNode *g, DdNode *h)) in line 1048
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int levels, int itemSize, int numBuckets)) in line 1049
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdLevelQueue *queue)) in line 1050
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdLevelQueue *queue, void *key, int level)) in line 1051
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdLevelQueue *queue, int level)) in line 1052
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *R, DdNode *Y, DdNode *Ysupp)) in line 1055
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, DdNode *g, CUDD_VALUE_TYPE bound)) in line 1056
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, DdNode *n)) in line 1057
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, int lower, int upper, Cudd_ReorderingType heuristic)) in line 1063
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, int x)) in line 1064
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *cube, DdNode *f)) in line 1068
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *bdd, DdNode *F, DdNode *Y, DdNode **G, int n, int *yIndex, int i)) in line 1069
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *bdd, DdNode *F, DdNode **G, int *yIndex, int n)) in line 1070
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *manager, st_table *mtable, int *varSeen, DdNode *p, double n, double max, int index)) in line 1072
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int numVars, int threshold)) in line 1074
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int numVars, int threshold, int hardlimit)) in line 1075
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique)) in line 1079
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((unsigned int numVars, unsigned int numVarsZ, unsigned int numSlots, unsigned int looseUpTo)) in line 1080
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique, int clearCache)) in line 1082
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd, int id, DdNode *T, DdNode *E)) in line 1084
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, int index, DdNode *g, DdNode *h)) in line 1085
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique, int index, DdNode *T, DdNode *E)) in line 1086
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique, CUDD_VALUE_TYPE value)) in line 1089
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique, int i)) in line 1090
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique, int n, int level)) in line 1092
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique, int n)) in line 1093
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *unique, int index)) in line 1094
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((char *key, char *value, char *arg)) in line 1098
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdNode *f, st_table *visited)) in line 1099
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *table, int low, int high, Cudd_ReorderingType submethod)) in line 1101
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int v, DdNode **f1, DdNode **f0, DdNode **fd)) in line 1108
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *f, int v, DdNode **f1, DdNode **f0)) in line 1109
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *node)) in line 1110
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cuddZddGetPosVarIndex(DdManager *,int) in line 1111
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cuddZddGetNegVarIndex(DdManager *,int) in line 1112
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cuddZddGetPosVarLevel(DdManager *,int) in line 1113
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cuddZddGetNegVarLevel(DdManager *,int) in line 1114
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *L, DdNode *U, DdNode **zdd_I)) in line 1116
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *L, DdNode *U)) in line 1117
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int *ptr_x, int *ptr_y)) in line 1123
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd, DdNode *P, DdNode *Q)) in line 1128
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd, DdNode *P, DdNode *zvar)) in line 1131
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *dd, DdNode *P, int var)) in line 1132
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((DdManager *zdd, DdNode *f)) in line 1138
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module DdGen
   variable cube in line 185
      protection public
   variable cubes in line 187
      protection public
   variable gen in line 192
      protection public
   variable manager in line 180
      protection public
   variable node in line 197
      protection public
   variable nodes in line 191
      protection public
   variable sp in line 194
      protection public
   variable stack in line 195
      protection public
   variable stack in line 196
      protection public
   variable status in line 182
      protection public
   variable stGen in line 190
      protection public
   variable type in line 181
      protection public
   variable value in line 186
      protection public
   variable visited in line 189
      protection public
module DdGen::@1
   variable cubes in line 187
      protection public
   variable nodes in line 191
      protection public
module DdGen::@1::@3
   variable cube in line 185
      protection public
   variable value in line 186
      protection public
module DdGen::@1::@4
   variable stGen in line 190
      protection public
   variable visited in line 189
      protection public
module DdGen::@2
   variable sp in line 194
      protection public
   variable stack in line 195
      protection public
module DdHook
   function ARGS((DdManager *, char *, void *)) in line 210
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable next in line 211
      protection public
module DdLocalCacheItem
   variable key in line 235
      protection public
   variable value in line 231
      protection public
module DdLocalCache
   variable hits in line 247
      protection public
   variable item in line 240
      protection public
   variable itemsize in line 241
      protection public
   variable keysize in line 242
      protection public
   variable lookUps in line 245
      protection public
   variable manager in line 249
      protection public
   variable maxslots in line 248
      protection public
   variable minHit in line 246
      protection public
   variable next in line 250
      protection public
   variable shift in line 244
      protection public
   variable slots in line 243
      protection public
module DdHashItem
   variable count in line 256
      protection public
   variable key in line 258
      protection public
   variable next in line 255
      protection public
   variable value in line 257
      protection public
module DdHashTable
   variable bucket in line 265
      protection public
   variable itemsize in line 264
      protection public
   variable keysize in line 263
      protection public
   variable manager in line 272
      protection public
   variable maxsize in line 271
      protection public
   variable memoryList in line 267
      protection public
   variable nextFree in line 266
      protection public
   variable numBuckets in line 268
      protection public
   variable shift in line 269
      protection public
   variable size in line 270
      protection public
module DdCache
   variable data in line 278
      protection public
   variable f in line 276
      protection public
   variable g in line 276
      protection public
   variable h in line 277
      protection public
module DdSubtable
   variable bindVar in line 292
      protection public
   variable dead in line 290
      protection public
   variable keys in line 288
      protection public
   variable maxKeys in line 289
      protection public
   variable next in line 291
      protection public
   variable nodelist in line 285
      protection public
   variable pairIndex in line 295
      protection public
   variable shift in line 286
      protection public
   variable slots in line 287
      protection public
   variable varHandled in line 296
      protection public
   variable varToBeGrouped in line 297
      protection public
   variable varType in line 294
      protection public
module DdManager
   variable acache in line 309
      protection public
   variable allocated in line 339
      protection public
   variable arcviolation in line 386
      protection public
   variable autoDyn in line 373
      protection public
   variable autoDynZ in line 374
      protection public
   variable autoMethod in line 375
      protection public
   variable autoMethodZ in line 376
      protection public
   variable background in line 307
      protection public
   variable cache in line 310
      protection public
   variable cachecollisions in line 414
      protection public
   variable cachedeletions in line 417
      protection public
   variable cacheHits in line 314
      protection public
   variable cacheinserts in line 415
      protection public
   variable cacheLastInserts in line 416
      protection public
   variable cacheMisses in line 313
      protection public
   variable cacheShift in line 312
      protection public
   variable cacheSlack in line 316
      protection public
   variable cacheSlots in line 311
      protection public
   variable constants in line 325
      protection public
   variable countDead in line 380
      protection public
   variable data in line 445
      protection public
   variable dead in line 329
      protection public
   variable deadMask in line 361
      protection public
   variable deadZ in line 330
      protection public
   variable deathRow in line 358
      protection public
   variable deathRowDepth in line 359
      protection public
   variable epsilon in line 364
      protection public
   variable err in line 399
      protection public
   variable errorCode in line 404
      protection public
   variable garbageCollections in line 409
      protection public
   variable gcEnabled in line 334
      protection public
   variable gcFrac in line 333
      protection public
   variable GCTime in line 410
      protection public
   variable groupcheck in line 383
      protection public
   variable hooks in line 393
      protection public
   variable initSlots in line 337
      protection public
   variable interact in line 351
      protection public
   variable invperm in line 345
      protection public
   variable invpermZ in line 346
      protection public
   variable isolated in line 342
      protection public
   variable keys in line 327
      protection public
   variable keysZ in line 328
      protection public
   variable linear in line 352
      protection public
   variable linearSize in line 350
      protection public
   variable localCaches in line 389
      protection public
   variable looseUpTo in line 335
      protection public
   variable map in line 348
      protection public
   variable maxCacheHard in line 317
      protection public
   variable maxGrowth in line 370
      protection public
   variable maxGrowthAlt in line 371
      protection public
   variable maxLive in line 331
      protection public
   variable maxmem in line 407
      protection public
   variable maxmemhard in line 408
      protection public
   variable maxSize in line 321
      protection public
   variable maxSizeZ in line 322
      protection public
   variable memoryList in line 354
      protection public
   variable memused in line 406
      protection public
   variable minDead in line 332
      protection public
   variable minHit in line 315
      protection public
   variable minusinfinity in line 306
      protection public
   variable nextDead in line 360
      protection public
   variable nextDyn in line 379
      protection public
   variable nextFree in line 355
      protection public
   variable numberXovers in line 388
      protection public
   variable one in line 303
      protection public
   variable out in line 398
      protection public
   variable peakLiveNodes in line 422
      protection public
   variable perm in line 343
      protection public
   variable permZ in line 344
      protection public
   variable plusinfinity in line 305
      protection public
   variable populationSize in line 387
      protection public
   variable postGCHook in line 395
      protection public
   variable postReorderingHook in line 397
      protection public
   variable preGCHook in line 394
      protection public
   variable preReorderingHook in line 396
      protection public
   variable realign in line 377
      protection public
   variable realignZ in line 378
      protection public
   variable reclaimed in line 341
      protection public
   variable recomb in line 384
      protection public
   variable reordCycle in line 372
      protection public
   variable reordered in line 366
      protection public
   variable reorderings in line 367
      protection public
   variable reordTime in line 411
      protection public
   variable sentinel in line 302
      protection public
   variable siftMaxSwap in line 369
      protection public
   variable siftMaxVar in line 368
      protection public
   variable size in line 319
      protection public
   variable sizeZ in line 320
      protection public
   variable slots in line 326
      protection public
   variable stack in line 338
      protection public
   variable stash in line 356
      protection public
   variable subtables in line 323
      protection public
   variable subtableZ in line 324
      protection public
   variable symmviolation in line 385
      protection public
   variable totCachehits in line 412
      protection public
   variable totCacheMisses in line 413
      protection public
   variable tree in line 381
      protection public
   variable treeZ in line 382
      protection public
   variable univ in line 349
      protection public
   variable vars in line 347
      protection public
   variable zero in line 304
      protection public
module Move
   variable flags in line 452
      protection public
   variable next in line 454
      protection public
   variable size in line 453
      protection public
   variable x in line 450
      protection public
   variable y in line 451
      protection public
module DdQueueItem
   variable cnext in line 460
      protection public
   variable key in line 461
      protection public
   variable next in line 459
      protection public
module DdLevelQueue
   variable buckets in line 469
      protection public
   variable first in line 466
      protection public
   variable freelist in line 468
      protection public
   variable itemsize in line 471
      protection public
   variable last in line 467
      protection public
   variable levels in line 470
      protection public
   variable maxsize in line 473
      protection public
   variable numBuckets in line 474
      protection public
   variable shift in line 475
      protection public
   variable size in line 472
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/tools/cudd/include/dddmp.h
module dddmp.h
   macro definition DDDMP_VERSION in line 32
      protection public
   macro definition DDDMP_MODE_TEXT in line 38
      protection public
   macro definition DDDMP_MODE_BINARY in line 39
      protection public
   macro definition DDDMP_MODE_DEFAULT in line 40
      protection public
   enumeration Dddmp_VarInfoType in line 59
      protection public
   enumeration Dddmp_VarMatchType in line 75
      protection public
   enumeration Dddmp_RootMatchType in line 91
      protection public
   enumvalue DDDMP_VARIDS in line 60
      protection public
   enumvalue DDDMP_VARPERMIDS in line 61
      protection public
   enumvalue DDDMP_VARAUXIDS in line 62
      protection public
   enumvalue DDDMP_VARNAMES in line 63
      protection public
   enumvalue DDDMP_VARDEFAULT in line 65
      protection public
   enumvalue DDDMP_VAR_MATCHIDS in line 76
      protection public
   enumvalue DDDMP_VAR_MATCHPERMIDS in line 77
      protection public
   enumvalue DDDMP_VAR_MATCHAUXIDS in line 78
      protection public
   enumvalue DDDMP_VAR_MATCHNAMES in line 79
      protection public
   enumvalue DDDMP_VAR_COMPOSEIDS in line 81
      protection public
   enumvalue DDDMP_ROOT_MATCHNAMES in line 92
      protection public
   enumvalue DDDMP_ROOT_MATCHLIST in line 94
      protection public
   function Dddmp_Text2Bin(char *,char *) in line 111
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Dddmp_Bin2Text(char *,char *) in line 112
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Dddmp_cuddBddDisplayBinary(char *,char *) in line 113
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Dddmp_cuddBddStore(DdManager *,char *,DdNode *,char **,int *,int,Dddmp_VarInfoType,char *,FILE *) in line 114
      protection public
      1 lines of code
      9 parameters
      1 conditional paths
   function Dddmp_cuddBddArrayStore(DdManager *,char *,int,DdNode **,char **,char **,int *,int,Dddmp_VarInfoType,char *,FILE *) in line 115
      protection public
      1 lines of code
      11 parameters
      1 conditional paths
   function Dddmp_cuddBddLoad(DdManager *,Dddmp_VarMatchType,char **,int *,int *,int,char *,FILE *) in line 116
      protection public
      1 lines of code
      8 parameters
      1 conditional paths
   function Dddmp_cuddBddArrayLoad(DdManager *,Dddmp_RootMatchType,char **,Dddmp_VarMatchType,char **,int *,int *,int,char *,FILE *,DdNode ***) in line 117
      protection public
      1 lines of code
      11 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/tools/cudd/include/epd.h
module epd.h
   macro definition EPD_MAX_BIN in line 32
      protection public
   macro definition EPD_MAX_DEC in line 33
      protection public
   macro definition EPD_EXP_INF in line 34
      protection public
   typedef EpDouble in line 117
      protection public
   typedef IeeeDouble in line 117
      protection public
   typedef IeeeNan in line 117
      protection public
   function EpdAlloc() in line 122
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function EpdCmp(const char *,const char *) in line 123
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdFree(EpDouble *) in line 124
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function EpdGetString(EpDouble *,char *) in line 125
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdConvert(double,EpDouble *) in line 126
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdMultiply(EpDouble *,double) in line 127
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdMultiply2(EpDouble *,EpDouble *) in line 128
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdMultiply2Decimal(EpDouble *,EpDouble *) in line 129
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdMultiply3(EpDouble *,EpDouble *,EpDouble *) in line 130
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function EpdMultiply3Decimal(EpDouble *,EpDouble *,EpDouble *) in line 131
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function EpdDivide(EpDouble *,double) in line 132
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdDivide2(EpDouble *,EpDouble *) in line 133
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdDivide3(EpDouble *,EpDouble *,EpDouble *) in line 134
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function EpdAdd(EpDouble *,double) in line 135
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdAdd2(EpDouble *,EpDouble *) in line 136
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdAdd3(EpDouble *,EpDouble *,EpDouble *) in line 137
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function EpdSubtract(EpDouble *,double) in line 138
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdSubtract2(EpDouble *,EpDouble *) in line 139
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdSubtract3(EpDouble *,EpDouble *,EpDouble *) in line 140
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function EpdPow2(int,EpDouble *) in line 141
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdPow2Decimal(int,EpDouble *) in line 142
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdNormalize(EpDouble *) in line 143
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function EpdNormalizeDecimal(EpDouble *) in line 144
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function EpdGetValueAndDecimalExponent(EpDouble *,double *,int *) in line 145
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function EpdGetExponent(double) in line 146
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function EpdGetExponentDecimal(double) in line 147
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function EpdMakeInf(EpDouble *,int) in line 148
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdMakeZero(EpDouble *,int) in line 149
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdMakeNan(EpDouble *) in line 150
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function EpdCopy(EpDouble *,EpDouble *) in line 151
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function EpdIsInf(EpDouble *) in line 152
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function EpdIsZero(EpDouble *) in line 153
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function EpdIsNan(EpDouble *) in line 154
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function EpdIsNanOrInf(EpDouble *) in line 155
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IsInfDouble(double) in line 156
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IsNanDouble(double) in line 157
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IsNanOrInfDouble(double) in line 158
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module IeeeDoubleStruct
   variable exponent in line 60
      protection public
   variable mantissa0 in line 59
      protection public
   variable mantissa1 in line 58
      protection public
   variable sign in line 61
      protection public
module IeeeNanStruct
   variable exponent in line 87
      protection public
   variable mantissa0 in line 85
      protection public
   variable mantissa1 in line 84
      protection public
   variable quiet_bit in line 86
      protection public
   variable sign in line 88
      protection public
module EpDoubleStruct
   variable bits in line 103
      protection public
   variable exponent in line 107
      protection public
   variable nan in line 103
      protection public
   variable type in line 106
      protection public
   variable value in line 103
      protection public
module EpDoubleStruct::@5
   variable bits in line 103
      protection public
   variable nan in line 103
      protection public
   variable value in line 103
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/tools/cudd/include/mnemosyne.h
module mnemosyne.h
   macro definition malloc in line 48
      protection public
   macro definition calloc in line 49
      protection public
   macro definition realloc in line 50
      protection public
   macro definition free in line 51
      protection public
   macro definition _INCL_MNEMOSYNE_H in line 72
      protection public
   typedef mall_t in line 58
      protection public
   function mnem_malloc() in line 61
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function mnem_calloc() in line 62
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function mnem_realloc() in line 63
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function mnem_free() in line 64
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function mnem_recording() in line 67
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function mnem_setrecording() in line 68
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function mnem_setlog() in line 69
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function mnem_writestats() in line 70
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/tools/cudd/include/mtr.h
module mtr.h
   macro definition SIZEOF_VOID_P in line 45
      protection public
   macro definition SIZEOF_INT in line 48
      protection public
   macro definition CONST in line 55
      protection public
   macro definition EXTERN in line 63
      protection public
   macro definition ARGS in line 70
      protection public
   macro definition MTR_INLINE in line 82
      protection public
   macro definition MTR_UNUSED in line 83
      protection public
   macro definition MTR_DEFAULT in line 87
      protection public
   macro definition MTR_TERMINAL in line 88
      protection public
   macro definition MTR_SOFT in line 89
      protection public
   macro definition MTR_FIXED in line 90
      protection public
   macro definition MTR_NEWNODE in line 91
      protection public
   macro definition MTR_MAXHIGH in line 100
      protection public
   macro definition MTR_SET in line 141
      protection public
   macro definition MTR_RESET in line 142
      protection public
   macro definition MTR_TEST in line 143
      protection public
   typedef MtrHalfWord in line 116
      protection public
   typedef MtrNode in line 128
      protection public
   function ARGS(()) in line 152
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((MtrNode *node)) in line 153
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((MtrNode *node, int expansion)) in line 156
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((MtrNode *parent, MtrNode *child)) in line 157
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((MtrNode *parent)) in line 159
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((MtrNode *first, MtrNode *second)) in line 161
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int lower, int size)) in line 163
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((MtrNode *root, unsigned int low, unsigned int high, unsigned int flags)) in line 164
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((MtrNode *group)) in line 165
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((MtrNode *root, unsigned int low, unsigned int high)) in line 166
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((MtrNode *root, int silent)) in line 168
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((FILE *fp, int nleaves)) in line 169
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module MtrNode
   variable child in line 125
      protection public
   variable elder in line 126
      protection public
   variable flags in line 120
      protection public
   variable index in line 123
      protection public
   variable low in line 121
      protection public
   variable parent in line 124
      protection public
   variable size in line 122
      protection public
   variable younger in line 127
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/tools/cudd/include/st.h
module st.h
   macro definition st_is_member in line 43
      protection public
   macro definition st_count in line 44
      protection public
   macro definition ST_DEFAULT_MAX_DENSITY in line 76
      protection public
   macro definition ST_DEFAULT_INIT_TABLE_SIZE in line 77
      protection public
   macro definition ST_DEFAULT_GROW_FACTOR in line 78
      protection public
   macro definition ST_DEFAULT_REORDER_FLAG in line 79
      protection public
   macro definition st_foreach_item in line 81
      protection public
   macro definition st_foreach_item_int in line 84
      protection public
   macro definition ST_OUT_OF_MEM in line 87
      protection public
   enumeration st_retval in line 46
      protection public
   typedef st_table_entry in line 127
      protection public
   typedef st_table in line 127
      protection public
   typedef st_generator in line 127
      protection public
   typedef ST_PFSR in line 127
      protection public
   typedef ST_PFICPCP in line 49
      protection public
   typedef ST_PFICPI in line 50
      protection public
   enumvalue ST_CONTINUE in line 46
      protection public
   enumvalue ST_STOP in line 46
      protection public
   enumvalue ST_DELETE in line 46
      protection public
   function ARGS((ST_PFICPCP, ST_PFICPI, int, int, double, int)) in line 52
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((ST_PFICPCP, ST_PFICPI)) in line 53
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((st_table *)) in line 54
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((st_table *, char *, char **)) in line 55
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((st_table *, char *, int *)) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((st_table *, char *, char *)) in line 57
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((st_table *, char *, char ***)) in line 59
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((st_table *, char **, char **)) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((st_table *, int *, char **)) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((st_table *, ST_PFSR, char *)) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((char *, int)) in line 65
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((const char *, const char *)) in line 68
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((st_generator *, char **, char **)) in line 71
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((st_generator *, char **, long *)) in line 72
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((st_generator *)) in line 73
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module st_table_entry
   variable key in line 19
      protection public
   variable next in line 21
      protection public
   variable record in line 20
      protection public
module st_table
   variable bins in line 33
      protection public
   variable compare in line 26
      protection public
   variable grow_factor in line 32
      protection public
   variable hash in line 27
      protection public
   variable max_density in line 30
      protection public
   variable num_bins in line 28
      protection public
   variable num_entries in line 29
      protection public
   variable reorder_flag in line 31
      protection public
module st_generator
   variable entry in line 39
      protection public
   variable index in line 40
      protection public
   variable table in line 38
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/ptyasm/ptyasm/tools/cudd/include/util.h
module util.h
   macro definition EXTERN in line 9
      protection public
   macro definition ARGS in line 16
      protection public
   macro definition NULLARGS in line 23
      protection public
   macro definition const in line 28
      protection public
   macro definition UTIL_INLINE in line 41
      protection public
   macro definition UTIL_UNUSED in line 42
      protection public
   macro definition SIZEOF_VOID_P in line 46
      protection public
   macro definition SIZEOF_INT in line 49
      protection public
   macro definition SIZEOF_LONG in line 52
      protection public
   macro definition strsav in line 64
      protection public
   macro definition NIL in line 69
      protection public
   macro definition ALLOC in line 101
      protection public
   macro definition REALLOC in line 103
      protection public
   macro definition FREE in line 105
      protection public
   macro definition VOID_OR_INT in line 115
      protection public
   macro definition VOID_OR_CHAR in line 116
      protection public
   macro definition assert in line 183
      protection public
   macro definition fail in line 198
      protection public
   macro definition ABS in line 216
      protection public
   macro definition MAX in line 217
      protection public
   macro definition MIN in line 218
      protection public
   typedef util_ptrint in line 58
      protection public
   variable optarg in line 66
      protection public
   variable optind in line 67
      protection public
   variable opterr in line 67
      protection public
   variable util_optind in line 243
      protection public
   variable util_optarg in line 244
      protection public
   function popen() in line 127
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function tmpfile() in line 127
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function pclose() in line 128
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clearerr() in line 130
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function rewind() in line 133
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function abort() in line 144
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function exit() in line 144
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function perror() in line 147
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function sprintf() in line 152
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ARGS((void *)) in line 157
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function malloc() in line 158
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function realloc() in line 158
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getenv() in line 160
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function system() in line 161
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function atof() in line 162
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strcpy() in line 171
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strncpy() in line 171
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strcat() in line 171
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strncat() in line 171
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strerror() in line 171
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strpbrk() in line 172
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strtok() in line 172
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strchr() in line 172
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strrchr() in line 172
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strstr() in line 172
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strcoll() in line 173
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strxfrm() in line 173
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strncmp() in line 173
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strlen() in line 173
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strspn() in line 173
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strcspn() in line 173
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function memmove() in line 174
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function memccpy() in line 174
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function memchr() in line 174
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function memcpy() in line 174
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function memset() in line 174
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function memcmp() in line 175
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function strcmp() in line 175
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ARGS((long)) in line 222
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((char *, long)) in line 225
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((void)) in line 228
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((int, char **, char *)) in line 229
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((char *)) in line 231
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((char *, char *, char *)) in line 232
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((char **, FILE **, FILE **, int *)) in line 233
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((FILE *)) in line 234
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((unsigned long)) in line 235
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((char *, char *)) in line 236
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ARGS((char *, char *, int)) in line 239
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
