file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable flag1 in line 292
      protection public
   variable flag2 in line 293
      protection public
   variable turn in line 294
      protection public
   variable x in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function thr1() in line 305
      protection public
      41 lines of code
      0 parameters
      20 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function thr2() in line 347
      protection public
      41 lines of code
      0 parameters
      20 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function main_thread(void *) in line 389
      protection public
      16 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function main(void) in line 406
      protection public
      94 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
module benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable flag1 in line 292
      protection public
   variable flag2 in line 293
      protection public
   variable turn in line 294
      protection public
   variable x in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function thr1() in line 305
      protection public
      45 lines of code
      0 parameters
      24 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function thr2() in line 351
      protection public
      45 lines of code
      0 parameters
      24 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function main_thread(void *) in line 397
      protection public
      16 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   function main(void) in line 414
      protection public
      94 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable x in line 292
      protection public
   variable y in line 293
      protection public
   variable b1 in line 294
      protection public
   variable b2 in line 295
      protection public
   variable X in line 296
      protection public
   variable __CS_u in line 296
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function thr1() in line 307
      protection public
      69 lines of code
      0 parameters
      33 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS__u::b1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::X defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function thr2() in line 377
      protection public
      69 lines of code
      0 parameters
      33 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS__u::b2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::X defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function main_thread(void *) in line 447
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function main(void) in line 462
      protection public
      99 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::X defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
module benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable x in line 292
      protection public
   variable y in line 293
      protection public
   variable b1 in line 294
      protection public
   variable b2 in line 295
      protection public
   variable X in line 296
      protection public
   variable __CS_u in line 296
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function thr1() in line 307
      protection public
      79 lines of code
      0 parameters
      43 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS__u::b1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::X defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function thr2() in line 387
      protection public
      79 lines of code
      0 parameters
      43 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS__u::b2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::X defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function main_thread(void *) in line 467
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   function main(void) in line 482
      protection public
      99 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::X defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_lamport_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable flag1 in line 292
      protection public
   variable flag2 in line 293
      protection public
   variable turn in line 294
      protection public
   variable x in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function thr1() in line 305
      protection public
      27 lines of code
      0 parameters
      12 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function thr2() in line 333
      protection public
      27 lines of code
      0 parameters
      12 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function main_thread(void *) in line 361
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function main(void) in line 376
      protection public
      94 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
module benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable flag1 in line 292
      protection public
   variable flag2 in line 293
      protection public
   variable turn in line 294
      protection public
   variable x in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function thr1() in line 305
      protection public
      31 lines of code
      0 parameters
      16 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function thr2() in line 337
      protection public
      31 lines of code
      0 parameters
      16 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function main_thread(void *) in line 369
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   function main(void) in line 384
      protection public
      94 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_peterson_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable w in line 292
      protection public
   variable r in line 293
      protection public
   variable x in line 294
      protection public
   variable y in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __VERIFIER_atomic_take_write_lock() in line 305
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function __VERIFIER_atomic_take_read_lock() in line 311
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __VERIFIER_atomic_release_read_lock() in line 320
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function writer() in line 328
      protection public
      10 lines of code
      0 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function __VERIFIER_atomic_take_write_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function reader() in line 339
      protection public
      27 lines of code
      0 parameters
      12 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function __VERIFIER_atomic_take_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function __VERIFIER_atomic_release_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function main_thread(void *) in line 367
      protection public
      24 lines of code
      1 parameters
      10 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function writer() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function reader() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function main(void) in line 392
      protection public
      96 lines of code
      1 parameters
      11 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
module benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable w in line 292
      protection public
   variable r in line 293
      protection public
   variable x in line 294
      protection public
   variable y in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __VERIFIER_atomic_take_write_lock() in line 305
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function __VERIFIER_atomic_take_read_lock() in line 311
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function __VERIFIER_atomic_release_read_lock() in line 320
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function writer() in line 328
      protection public
      10 lines of code
      0 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function __VERIFIER_atomic_take_write_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function reader() in line 339
      protection public
      28 lines of code
      0 parameters
      13 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function __VERIFIER_atomic_take_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function __VERIFIER_atomic_release_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function main_thread(void *) in line 368
      protection public
      24 lines of code
      1 parameters
      10 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function writer() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function reader() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   function main(void) in line 393
      protection public
      96 lines of code
      1 parameters
      11 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
module benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable w in line 292
      protection public
   variable r in line 293
      protection public
   variable x in line 294
      protection public
   variable y in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __VERIFIER_atomic_take_write_lock() in line 305
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function __VERIFIER_atomic_take_read_lock() in line 311
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function writer() in line 320
      protection public
      10 lines of code
      0 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function __VERIFIER_atomic_take_write_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function reader() in line 331
      protection public
      32 lines of code
      0 parameters
      14 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function __VERIFIER_atomic_take_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 364
      protection public
      24 lines of code
      1 parameters
      10 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function writer() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function reader() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function main(void) in line 389
      protection public
      96 lines of code
      1 parameters
      11 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
module benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable w in line 292
      protection public
   variable r in line 293
      protection public
   variable x in line 294
      protection public
   variable y in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function __VERIFIER_atomic_take_write_lock() in line 305
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function __VERIFIER_atomic_take_read_lock() in line 311
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function writer() in line 320
      protection public
      10 lines of code
      0 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function __VERIFIER_atomic_take_write_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function reader() in line 331
      protection public
      33 lines of code
      0 parameters
      15 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function __VERIFIER_atomic_take_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 365
      protection public
      24 lines of code
      1 parameters
      10 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function writer() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function reader() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   function main(void) in line 390
      protection public
      96 lines of code
      1 parameters
      11 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS__u::w defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::r defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable flag1 in line 292
      protection public
   variable flag2 in line 293
      protection public
   variable x in line 294
      protection public
   variable __CS_u in line 294
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function thr1() in line 303
      protection public
      44 lines of code
      0 parameters
      20 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function thr2() in line 348
      protection public
      44 lines of code
      0 parameters
      20 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function main_thread(void *) in line 393
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function main(void) in line 408
      protection public
      89 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
module benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable flag1 in line 292
      protection public
   variable flag2 in line 293
      protection public
   variable x in line 294
      protection public
   variable __CS_u in line 294
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function thr1() in line 303
      protection public
      61 lines of code
      0 parameters
      29 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function thr2() in line 365
      protection public
      61 lines of code
      0 parameters
      29 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function main_thread(void *) in line 427
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   function main(void) in line 442
      protection public
      89 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_szymanski_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable block in line 292
      protection public
   variable busy in line 293
      protection public
   variable inode in line 294
      protection public
   variable m_inode in line 295
      protection public
   variable m_busy in line 296
      protection public
   variable __CS_u in line 296
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function allocator() in line 307
      protection public
      36 lines of code
      0 parameters
      18 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::block defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function de_allocator() in line 344
      protection public
      28 lines of code
      0 parameters
      14 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::block defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 373
      protection public
      24 lines of code
      1 parameters
      11 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function allocator() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function de_allocator() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function main(void) in line 398
      protection public
      99 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::block defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
module benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable block in line 292
      protection public
   variable busy in line 293
      protection public
   variable inode in line 294
      protection public
   variable m_inode in line 295
      protection public
   variable m_busy in line 296
      protection public
   variable __CS_u in line 296
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function allocator() in line 307
      protection public
      37 lines of code
      0 parameters
      19 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::block defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function de_allocator() in line 345
      protection public
      29 lines of code
      0 parameters
      15 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::block defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 375
      protection public
      24 lines of code
      1 parameters
      11 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_assume(int) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function allocator() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function de_allocator() defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   function main(void) in line 400
      protection public
      99 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::block defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_inode defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m_busy defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_time_var_mutex_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
   macro definition assert in line 6
      protection public
   variable flag1 in line 8
      protection public
   variable flag2 in line 8
      protection public
   variable turn in line 9
      protection public
   variable x in line 10
      protection public
   function thr1() in line 12
      protection public
      16 lines of code
      0 parameters
      4 conditional paths
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable turn defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
   function thr2() in line 29
      protection public
      16 lines of code
      0 parameters
      4 conditional paths
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable turn defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
   function main(void) in line 46
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable turn defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/dekker_safe.c
module benchmarks-esbmc/pthread-atomic/dekker_safe.c
   macro definition assert in line 6
      protection public
   variable flag1 in line 8
      protection public
   variable flag2 in line 8
      protection public
   variable turn in line 9
      protection public
   variable x in line 10
      protection public
   function thr1() in line 12
      protection public
      16 lines of code
      0 parameters
      4 conditional paths
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable turn defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/dekker_safe.c
   function thr2() in line 29
      protection public
      16 lines of code
      0 parameters
      4 conditional paths
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable turn defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/dekker_safe.c
   function main(void) in line 46
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable turn defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
   macro definition assert in line 6
      protection public
   variable x in line 8
      protection public
   variable y in line 8
      protection public
   variable b1 in line 9
      protection public
   variable b2 in line 9
      protection public
   variable X in line 10
      protection public
   function thr1() in line 12
      protection public
      27 lines of code
      0 parameters
      8 conditional paths
      uses variable b1 defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable y defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable b2 defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable X defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
   function thr2() in line 40
      protection public
      27 lines of code
      0 parameters
      8 conditional paths
      uses variable b2 defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable y defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable b1 defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable X defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
   function main(void) in line 68
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/lamport_safe.c
module benchmarks-esbmc/pthread-atomic/lamport_safe.c
   macro definition assert in line 6
      protection public
   variable x in line 8
      protection public
   variable y in line 8
      protection public
   variable b1 in line 9
      protection public
   variable b2 in line 9
      protection public
   variable X in line 10
      protection public
   function thr1() in line 12
      protection public
      27 lines of code
      0 parameters
      8 conditional paths
      uses variable b1 defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable y defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable b2 defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable X defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/lamport_safe.c
   function thr2() in line 40
      protection public
      27 lines of code
      0 parameters
      8 conditional paths
      uses variable b2 defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable y defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable b1 defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses variable X defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/lamport_safe.c
   function main(void) in line 68
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/lamport_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
   macro definition assert in line 6
      protection public
   variable flag1 in line 8
      protection public
   variable flag2 in line 8
      protection public
   variable turn in line 9
      protection public
   variable x in line 10
      protection public
   function thr1() in line 12
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable turn defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
   function thr2() in line 23
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable turn defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
   function main(void) in line 34
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/peterson_safe.c
module benchmarks-esbmc/pthread-atomic/peterson_safe.c
   macro definition assert in line 6
      protection public
   variable flag1 in line 8
      protection public
   variable flag2 in line 8
      protection public
   variable turn in line 9
      protection public
   variable x in line 10
      protection public
   function thr1() in line 12
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable turn defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/peterson_safe.c
   function thr2() in line 23
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable turn defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/peterson_safe.c
   function main(void) in line 34
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/peterson_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
   macro definition assert in line 10
      protection public
   variable w in line 12
      protection public
   variable r in line 12
      protection public
   variable x in line 12
      protection public
   variable y in line 12
      protection public
   function __VERIFIER_atomic_take_write_lock() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
   function __VERIFIER_atomic_take_read_lock() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
   function __VERIFIER_atomic_release_read_lock() in line 24
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
   function writer() in line 28
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function __VERIFIER_atomic_take_write_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
   function reader() in line 34
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function __VERIFIER_atomic_take_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable y defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses function __VERIFIER_atomic_release_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
   function main(void) in line 43
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function writer() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses function reader() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/read_write_lock_safe.c
module benchmarks-esbmc/pthread-atomic/read_write_lock_safe.c
   macro definition assert in line 10
      protection public
   variable w in line 12
      protection public
   variable r in line 12
      protection public
   variable x in line 12
      protection public
   variable y in line 12
      protection public
   function __VERIFIER_atomic_take_write_lock() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
   function __VERIFIER_atomic_take_read_lock() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
   function __VERIFIER_atomic_release_read_lock() in line 24
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
   function writer() in line 28
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function __VERIFIER_atomic_take_write_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
   function reader() in line 34
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function __VERIFIER_atomic_take_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses variable y defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/read_write_lock_safe.c
      uses function __VERIFIER_atomic_release_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
   function main(void) in line 43
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function writer() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses function reader() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
module benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
   macro definition assert in line 10
      protection public
   variable w in line 12
      protection public
   variable r in line 12
      protection public
   variable x in line 12
      protection public
   variable y in line 12
      protection public
   function __VERIFIER_atomic_take_write_lock() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
   function __VERIFIER_atomic_take_read_lock() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
   function writer() in line 24
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function __VERIFIER_atomic_take_write_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
   function reader() in line 30
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses function __VERIFIER_atomic_take_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable y defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
   function main(void) in line 40
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function writer() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses function reader() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/read_write_lock_unsafe.c
module benchmarks-esbmc/pthread-atomic/read_write_lock_unsafe.c
   macro definition assert in line 10
      protection public
   variable w in line 12
      protection public
   variable r in line 12
      protection public
   variable x in line 12
      protection public
   variable y in line 12
      protection public
   function __VERIFIER_atomic_take_write_lock() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
   function __VERIFIER_atomic_take_read_lock() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
   function writer() in line 24
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function __VERIFIER_atomic_take_write_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
   function reader() in line 30
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses function __VERIFIER_atomic_take_read_lock() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses variable y defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/read_write_lock_unsafe.c
      uses variable r defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
   function main(void) in line 40
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function writer() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses function reader() defined in benchmarks-cbmc-4.5/pthread-atomic/read_write_lock_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   macro definition assert in line 8
      protection public
   macro definition container_of in line 26
      protection public
   macro definition scull_release in line 114
      protection public
   variable i in line 10
      protection public
   variable lock in line 11
      protection public
   variable scull_quantum in line 69
      protection public
   variable scull_qset in line 70
      protection public
   variable dev_data in line 71
      protection public
   variable dev_quantum in line 72
      protection public
   variable dev_qset in line 73
      protection public
   variable dev_size in line 74
      protection public
   variable __X__ in line 75
      protection public
   function __VERIFIER_nondet_int() in line 1
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function down_interruptible() in line 16
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function up() in line 21
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function copy_to_user(char,char,unsigned_long) in line 28
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function __VERIFIER_nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function copy_from_user(char,char,unsigned_long) in line 33
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function __VERIFIER_nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function __get_user(int,void_ptr) in line 38
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function __VERIFIER_nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function __put_user(int,void_ptr) in line 43
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function __VERIFIER_nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_trim(scull_dev) in line 81
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable dev_qset defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_size defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_quantum defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable scull_quantum defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable scull_qset defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_data defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_open(int,inode,file) in line 97
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses macro definition scull_dev defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition container_of defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function down_interruptible() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition ERESTARTSYS defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable __X__ defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function scull_trim(scull_dev) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function up() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_follow(scull_dev,int) in line 119
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses function __VERIFIER_nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_read(int,file,char,size_t,loff_t) in line 127
      protection public
      45 lines of code
      5 parameters
      8 conditional paths
      uses macro definition scull_dev defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition scull_qset_type defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable dev_quantum defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_qset defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function down_interruptible() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition ERESTARTSYS defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable __X__ defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_size defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function scull_follow(scull_dev,int) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function copy_to_user(char,char,unsigned_long) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_data defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition EFAULT defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function up() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_write(int,file,char,size_t,loff_t) in line 173
      protection public
      46 lines of code
      5 parameters
      8 conditional paths
      uses macro definition scull_dev defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition scull_qset_type defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable dev_quantum defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_qset defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition ENOMEM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function down_interruptible() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition ERESTARTSYS defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function scull_follow(scull_dev,int) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __X__ defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function copy_from_user(char,char,unsigned_long) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_data defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition EFAULT defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable dev_size defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function up() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_ioctl(inode,file,unsigned_int,unsigned_long) in line 224
      protection public
      75 lines of code
      4 parameters
      16 conditional paths
      uses macro definition SCULL_IOCRESET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable scull_quantum defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition SCULL_QUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable scull_qset defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition SCULL_QSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCSQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function __get_user(int,void_ptr) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition SCULL_IOCTQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCGQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function __put_user(int,void_ptr) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition SCULL_IOCQQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCXQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCHQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCSQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCTQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCGQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCQQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCXQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCHQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition ENOTTY defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
   function scull_llseek(file,loff_t,int,loff_t) in line 305
      protection public
      25 lines of code
      4 parameters
      5 conditional paths
      uses macro definition scull_dev defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition loff_t defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable dev_size defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition EINVAL defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
   function scull_cleanup_module(void) in line 340
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition scull_dev defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function scull_trim(scull_dev) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_init_module() in line 347
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses function scull_cleanup_module(void) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function loader() in line 361
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function scull_init_module() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function scull_cleanup_module(void) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function thread1() in line 366
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition file defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition loff_t defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function scull_open(int,inode,file) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition tid1 defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable i defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function scull_read(int,file,char,size_t,loff_t) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition scull_release defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function thread2() in line 376
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition file defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition loff_t defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function scull_open(int,inode,file) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition tid2 defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable i defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function scull_write(int,file,char,size_t,loff_t) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition scull_release defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function main(void) in line 386
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition FILE_WITH_LOCK_UNLOCKED defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function loader() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function thread1() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function thread2() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_mutex_destroy(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/scull_safe.c
module benchmarks-esbmc/pthread-atomic/scull_safe.c
   macro definition assert in line 8
      protection public
   macro definition container_of in line 26
      protection public
   macro definition scull_release in line 114
      protection public
   variable i in line 10
      protection public
   variable lock in line 11
      protection public
   variable scull_quantum in line 69
      protection public
   variable scull_qset in line 70
      protection public
   variable dev_data in line 71
      protection public
   variable dev_quantum in line 72
      protection public
   variable dev_qset in line 73
      protection public
   variable dev_size in line 74
      protection public
   variable __X__ in line 75
      protection public
   function __VERIFIER_nondet_int() in line 1
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function down_interruptible() in line 16
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function up() in line 21
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function copy_to_user(char,char,unsigned_long) in line 28
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function __VERIFIER_nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function copy_from_user(char,char,unsigned_long) in line 33
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function __VERIFIER_nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function __get_user(int,void_ptr) in line 38
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function __VERIFIER_nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function __put_user(int,void_ptr) in line 43
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function __VERIFIER_nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_trim(scull_dev) in line 81
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable dev_qset defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_size defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_quantum defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable scull_quantum defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable scull_qset defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_data defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_open(int,inode,file) in line 97
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses macro definition scull_dev defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition container_of defined in benchmarks-esbmc/pthread-atomic/scull_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function down_interruptible() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition ERESTARTSYS defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable __X__ defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function scull_trim(scull_dev) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/scull_safe.c
      uses function up() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_follow(scull_dev,int) in line 119
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses function __VERIFIER_nondet_int() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_read(int,file,char,size_t,loff_t) in line 127
      protection public
      45 lines of code
      5 parameters
      8 conditional paths
      uses macro definition scull_dev defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition scull_qset_type defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable dev_quantum defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_qset defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function down_interruptible() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition ERESTARTSYS defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable __X__ defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_size defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function scull_follow(scull_dev,int) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function copy_to_user(char,char,unsigned_long) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_data defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition EFAULT defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/scull_safe.c
      uses function up() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_write(int,file,char,size_t,loff_t) in line 173
      protection public
      46 lines of code
      5 parameters
      8 conditional paths
      uses macro definition scull_dev defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition scull_qset_type defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable dev_quantum defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_qset defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition ENOMEM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function down_interruptible() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition ERESTARTSYS defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function scull_follow(scull_dev,int) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __X__ defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function copy_from_user(char,char,unsigned_long) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable dev_data defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition EFAULT defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable dev_size defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/scull_safe.c
      uses function up() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_ioctl(inode,file,unsigned_int,unsigned_long) in line 224
      protection public
      75 lines of code
      4 parameters
      16 conditional paths
      uses macro definition SCULL_IOCRESET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable scull_quantum defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition SCULL_QUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable scull_qset defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition SCULL_QSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCSQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function __get_user(int,void_ptr) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition SCULL_IOCTQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCGQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function __put_user(int,void_ptr) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition SCULL_IOCQQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCXQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCHQUANTUM defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCSQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCTQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCGQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCQQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCXQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition SCULL_IOCHQSET defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition ENOTTY defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
   function scull_llseek(file,loff_t,int,loff_t) in line 305
      protection public
      25 lines of code
      4 parameters
      5 conditional paths
      uses macro definition scull_dev defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition loff_t defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable dev_size defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition EINVAL defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
   function scull_cleanup_module(void) in line 340
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition scull_dev defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function scull_trim(scull_dev) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function scull_init_module() in line 347
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses function scull_cleanup_module(void) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function loader() in line 361
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function scull_init_module() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function scull_cleanup_module(void) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
   function thread1() in line 366
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition file defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition loff_t defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function scull_open(int,inode,file) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition tid1 defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable i defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function scull_read(int,file,char,size_t,loff_t) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition scull_release defined in benchmarks-esbmc/pthread-atomic/scull_safe.c
   function thread2() in line 376
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition file defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses macro definition loff_t defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function scull_open(int,inode,file) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition tid2 defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses variable i defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function scull_write(int,file,char,size_t,loff_t) defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition scull_release defined in benchmarks-esbmc/pthread-atomic/scull_safe.c
   function main(void) in line 386
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses macro definition FILE_WITH_LOCK_UNLOCKED defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function loader() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function thread1() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function thread2() defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_mutex_destroy(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
module benchmarks-cbmc-4.5/pthread-atomic/scull_safe.h
   macro definition inode in line 1
      protection public
   macro definition file in line 2
      protection public
   macro definition scull_dev in line 3
      protection public
   macro definition scull_qset_type in line 4
      protection public
   macro definition loff_t in line 5
      protection public
   macro definition ssize_t in line 6
      protection public
   macro definition size_t in line 7
      protection public
   macro definition unsigned_long in line 8
      protection public
   macro definition unsigned_int in line 9
      protection public
   macro definition char in line 10
      protection public
   macro definition void_ptr in line 11
      protection public
   macro definition tid1 in line 13
      protection public
   macro definition tid2 in line 14
      protection public
   macro definition FILE_WITH_LOCK_UNLOCKED in line 16
      protection public
   macro definition ERESTARTSYS in line 18
      protection public
   macro definition EFAULT in line 20
      protection public
   macro definition ENOMEM in line 21
      protection public
   macro definition ENOTTY in line 22
      protection public
   macro definition EINVAL in line 23
      protection public
   macro definition SCULL_QUANTUM in line 24
      protection public
   macro definition SCULL_QSET in line 25
      protection public
   macro definition _IOW in line 26
      protection public
   macro definition _IO in line 27
      protection public
   macro definition _IOR in line 28
      protection public
   macro definition _IOWR in line 29
      protection public
   macro definition SCULL_IOC_MAGIC in line 36
      protection public
   macro definition SCULL_IOCRESET in line 39
      protection public
   macro definition SCULL_IOCSQUANTUM in line 49
      protection public
   macro definition SCULL_IOCSQSET in line 50
      protection public
   macro definition SCULL_IOCTQUANTUM in line 51
      protection public
   macro definition SCULL_IOCTQSET in line 52
      protection public
   macro definition SCULL_IOCGQUANTUM in line 53
      protection public
   macro definition SCULL_IOCGQSET in line 54
      protection public
   macro definition SCULL_IOCQQUANTUM in line 55
      protection public
   macro definition SCULL_IOCQQSET in line 56
      protection public
   macro definition SCULL_IOCXQUANTUM in line 57
      protection public
   macro definition SCULL_IOCXQSET in line 58
      protection public
   macro definition SCULL_IOCHQUANTUM in line 59
      protection public
   macro definition SCULL_IOCHQSET in line 60
      protection public
   macro definition SCULL_P_IOCTSIZE in line 67
      protection public
   macro definition SCULL_P_IOCQSIZE in line 68
      protection public
   macro definition SCULL_IOC_MAXNR in line 71
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/scull_safe.h
module benchmarks-esbmc/pthread-atomic/scull_safe.h
   macro definition inode in line 1
      protection public
   macro definition file in line 2
      protection public
   macro definition scull_dev in line 3
      protection public
   macro definition scull_qset_type in line 4
      protection public
   macro definition loff_t in line 5
      protection public
   macro definition ssize_t in line 6
      protection public
   macro definition size_t in line 7
      protection public
   macro definition unsigned_long in line 8
      protection public
   macro definition unsigned_int in line 9
      protection public
   macro definition char in line 10
      protection public
   macro definition void_ptr in line 11
      protection public
   macro definition tid1 in line 13
      protection public
   macro definition tid2 in line 14
      protection public
   macro definition FILE_WITH_LOCK_UNLOCKED in line 16
      protection public
   macro definition ERESTARTSYS in line 18
      protection public
   macro definition EFAULT in line 20
      protection public
   macro definition ENOMEM in line 21
      protection public
   macro definition ENOTTY in line 22
      protection public
   macro definition EINVAL in line 23
      protection public
   macro definition SCULL_QUANTUM in line 24
      protection public
   macro definition SCULL_QSET in line 25
      protection public
   macro definition _IOW in line 26
      protection public
   macro definition _IO in line 27
      protection public
   macro definition _IOR in line 28
      protection public
   macro definition _IOWR in line 29
      protection public
   macro definition SCULL_IOC_MAGIC in line 36
      protection public
   macro definition SCULL_IOCRESET in line 39
      protection public
   macro definition SCULL_IOCSQUANTUM in line 49
      protection public
   macro definition SCULL_IOCSQSET in line 50
      protection public
   macro definition SCULL_IOCTQUANTUM in line 51
      protection public
   macro definition SCULL_IOCTQSET in line 52
      protection public
   macro definition SCULL_IOCGQUANTUM in line 53
      protection public
   macro definition SCULL_IOCGQSET in line 54
      protection public
   macro definition SCULL_IOCQQUANTUM in line 55
      protection public
   macro definition SCULL_IOCQQSET in line 56
      protection public
   macro definition SCULL_IOCXQUANTUM in line 57
      protection public
   macro definition SCULL_IOCXQSET in line 58
      protection public
   macro definition SCULL_IOCHQUANTUM in line 59
      protection public
   macro definition SCULL_IOCHQSET in line 60
      protection public
   macro definition SCULL_P_IOCTSIZE in line 67
      protection public
   macro definition SCULL_P_IOCQSIZE in line 68
      protection public
   macro definition SCULL_IOC_MAXNR in line 71
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
   macro definition assert in line 6
      protection public
   variable flag1 in line 8
      protection public
   variable flag2 in line 8
      protection public
   variable x in line 9
      protection public
   function thr1() in line 11
      protection public
      17 lines of code
      0 parameters
      6 conditional paths
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
   function thr2() in line 29
      protection public
      17 lines of code
      0 parameters
      6 conditional paths
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
   function main(void) in line 47
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/szymanski_safe.c
module benchmarks-esbmc/pthread-atomic/szymanski_safe.c
   macro definition assert in line 6
      protection public
   variable flag1 in line 8
      protection public
   variable flag2 in line 8
      protection public
   variable x in line 9
      protection public
   function thr1() in line 11
      protection public
      17 lines of code
      0 parameters
      6 conditional paths
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/szymanski_safe.c
   function thr2() in line 29
      protection public
      17 lines of code
      0 parameters
      6 conditional paths
      uses variable flag2 defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses variable flag1 defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/szymanski_safe.c
   function main(void) in line 47
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thr1() defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses function thr2() defined in benchmarks-cbmc-4.5/pthread-atomic/szymanski_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
module benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
   macro definition assert in line 10
      protection public
   variable block in line 12
      protection public
   variable busy in line 13
      protection public
   variable inode in line 14
      protection public
   variable m_inode in line 15
      protection public
   variable m_busy in line 16
      protection public
   function allocator() in line 18
      protection public
      13 lines of code
      0 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m_inode defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable inode defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable m_busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable block defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses macro definition NULL defined in _fake_defines.h
   function de_allocator() in line 32
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m_busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable block defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function main(void) in line 42
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable inode defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m_inode defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable m_busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function allocator() defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses function de_allocator() defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_mutex_destroy(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/time_var_mutex_safe.c
module benchmarks-esbmc/pthread-atomic/time_var_mutex_safe.c
   macro definition assert in line 10
      protection public
   variable block in line 12
      protection public
   variable busy in line 13
      protection public
   variable inode in line 14
      protection public
   variable m_inode in line 15
      protection public
   variable m_busy in line 16
      protection public
   function allocator() in line 18
      protection public
      13 lines of code
      0 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m_inode defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable inode defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable m_busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable block defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/time_var_mutex_safe.c
      uses macro definition NULL defined in _fake_defines.h
   function de_allocator() in line 32
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m_busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable block defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses macro definition assert defined in benchmarks-esbmc/pthread-atomic/time_var_mutex_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function main(void) in line 42
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable inode defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m_inode defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses variable m_busy defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function allocator() defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses function de_allocator() defined in benchmarks-cbmc-4.5/pthread-atomic/time_var_mutex_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_mutex_destroy(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
module benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable i in line 292
      protection public
   variable j in line 293
      protection public
   variable __CS_u in line 293
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function t1(void *) in line 301
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function t2(void *) in line 319
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 337
      protection public
      23 lines of code
      1 parameters
      10 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function main(int,char **) in line 361
      protection public
      148 lines of code
      2 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
module benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable i in line 292
      protection public
   variable j in line 293
      protection public
   variable __CS_u in line 293
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function t1(void *) in line 301
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function t2(void *) in line 319
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 337
      protection public
      24 lines of code
      1 parameters
      11 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   function main(int,char **) in line 362
      protection public
      148 lines of code
      2 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
module benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable i in line 292
      protection public
   variable j in line 293
      protection public
   variable __CS_u in line 293
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function t1(void *) in line 301
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function t2(void *) in line 319
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 337
      protection public
      23 lines of code
      1 parameters
      10 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function main(int,char **) in line 361
      protection public
      148 lines of code
      2 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
module benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable i in line 292
      protection public
   variable j in line 293
      protection public
   variable __CS_u in line 293
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function t1(void *) in line 301
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function t2(void *) in line 319
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 337
      protection public
      24 lines of code
      1 parameters
      11 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   function main(int,char **) in line 362
      protection public
      148 lines of code
      2 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
module benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable i in line 292
      protection public
   variable j in line 293
      protection public
   variable __CS_u in line 293
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function t1(void *) in line 301
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function t2(void *) in line 319
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 337
      protection public
      23 lines of code
      1 parameters
      10 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function main(int,char **) in line 361
      protection public
      132 lines of code
      2 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_fib_safe.c
module benchmarks-esbmc/pthread/_cs_fib_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable i in line 292
      protection public
   variable j in line 293
      protection public
   variable __CS_u in line 293
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function t1(void *) in line 301
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function t2(void *) in line 319
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 337
      protection public
      24 lines of code
      1 parameters
      11 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_fib_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   function main(int,char **) in line 362
      protection public
      132 lines of code
      2 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_fib_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_fib_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
module benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable i in line 292
      protection public
   variable j in line 293
      protection public
   variable __CS_u in line 293
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function t1(void *) in line 301
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function t2(void *) in line 319
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 337
      protection public
      23 lines of code
      1 parameters
      10 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function main(int,char **) in line 361
      protection public
      132 lines of code
      2 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_fib_unsafe.c
module benchmarks-esbmc/pthread/_cs_fib_unsafe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable i in line 292
      protection public
   variable j in line 293
      protection public
   variable __CS_u in line 293
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function t1(void *) in line 301
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function t2(void *) in line 319
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 337
      protection public
      24 lines of code
      1 parameters
      11 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_fib_unsafe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   function main(int,char **) in line 362
      protection public
      132 lines of code
      2 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_fib_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::j defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_fib_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
module benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable mutex in line 292
      protection public
   variable data in line 293
      protection public
   variable __CS_u in line 293
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function thread1(void *) in line 301
      protection public
      10 lines of code
      1 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::mutex defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::data defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function thread2(void *) in line 312
      protection public
      10 lines of code
      1 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::mutex defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::data defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function thread3(void *) in line 323
      protection public
      19 lines of code
      1 parameters
      10 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::mutex defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::data defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function main_thread(void *) in line 343
      protection public
      21 lines of code
      1 parameters
      9 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::mutex defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function thread3(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function main(void) in line 365
      protection public
      79 lines of code
      1 parameters
      9 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::mutex defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
module benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable mutex in line 292
      protection public
   variable data in line 293
      protection public
   variable __CS_u in line 293
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function thread1(void *) in line 301
      protection public
      10 lines of code
      1 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::mutex defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::data defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function thread2(void *) in line 312
      protection public
      10 lines of code
      1 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::mutex defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::data defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function thread3(void *) in line 323
      protection public
      20 lines of code
      1 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::mutex defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::data defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function main_thread(void *) in line 344
      protection public
      21 lines of code
      1 parameters
      9 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::mutex defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function thread3(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   function main(void) in line 366
      protection public
      79 lines of code
      1 parameters
      9 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-esbmc/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS__u::mutex defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_lazy_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
module benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   typedef QType in line 299
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable m in line 300
      protection public
   variable stored_elements in line 302
      protection public
   variable enqueue_flag in line 303
      protection public
   variable dequeue_flag in line 304
      protection public
   variable queue in line 305
      protection public
   variable __CS_u in line 305
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function init(QType *) in line 316
      protection public
      10 lines of code
      1 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function empty(QType *) in line 327
      protection public
      17 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function full(QType *) in line 345
      protection public
      17 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function enqueue(QType *,int) in line 363
      protection public
      23 lines of code
      2 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function dequeue(QType *) in line 387
      protection public
      22 lines of code
      1 parameters
      10 conditional paths
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function t1(void *) in line 410
      protection public
      32 lines of code
      1 parameters
      16 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function enqueue(QType *,int) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function t2(void *) in line 443
      protection public
      41 lines of code
      1 parameters
      21 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function dequeue(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function main_thread(void *) in line 485
      protection public
      33 lines of code
      1 parameters
      16 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function init(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function main(void) in line 519
      protection public
      159 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_anonstruct_0::element defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::head defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::tail defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::amount defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   variable __CS_anonstruct_0::amount in line 298
      protection public
   variable __CS_anonstruct_0::element in line 295
      protection public
   variable __CS_anonstruct_0::head in line 296
      protection public
   variable __CS_anonstruct_0::tail in line 297
      protection public
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_queue_safe.c
module benchmarks-esbmc/pthread/_cs_queue_safe.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   typedef QType in line 299
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable m in line 300
      protection public
   variable stored_elements in line 302
      protection public
   variable enqueue_flag in line 303
      protection public
   variable dequeue_flag in line 304
      protection public
   variable queue in line 305
      protection public
   variable __CS_u in line 305
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_queue_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_queue_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_queue_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_anonstruct_0::element defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::head defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::tail defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::amount defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
   function init(QType *) in line 316
      protection public
      10 lines of code
      1 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function empty(QType *) in line 327
      protection public
      17 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function full(QType *) in line 345
      protection public
      17 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function enqueue(QType *,int) in line 363
      protection public
      23 lines of code
      2 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function dequeue(QType *) in line 387
      protection public
      22 lines of code
      1 parameters
      10 conditional paths
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function t1(void *) in line 410
      protection public
      32 lines of code
      1 parameters
      16 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function enqueue(QType *,int) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function t2(void *) in line 443
      protection public
      42 lines of code
      1 parameters
      22 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function dequeue(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function main_thread(void *) in line 486
      protection public
      34 lines of code
      1 parameters
      17 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_queue_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function init(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   function main(void) in line 521
      protection public
      159 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_queue_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_queue_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_queue_safe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-esbmc/pthread/_cs_queue_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable __CS_anonstruct_0::element defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::head defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::tail defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::amount defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
   variable __CS_anonstruct_0::amount in line 298
      protection public
   variable __CS_anonstruct_0::element in line 295
      protection public
   variable __CS_anonstruct_0::head in line 296
      protection public
   variable __CS_anonstruct_0::tail in line 297
      protection public
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
module benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   typedef QType in line 299
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable m in line 300
      protection public
   variable stored_elements in line 302
      protection public
   variable enqueue_flag in line 303
      protection public
   variable dequeue_flag in line 304
      protection public
   variable queue in line 305
      protection public
   variable __CS_u in line 305
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::element defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::head defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::tail defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::amount defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
   function init(QType *) in line 316
      protection public
      10 lines of code
      1 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function empty(QType *) in line 327
      protection public
      17 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function full(QType *) in line 345
      protection public
      17 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function enqueue(QType *,int) in line 363
      protection public
      23 lines of code
      2 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function dequeue(QType *) in line 387
      protection public
      22 lines of code
      1 parameters
      10 conditional paths
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function t1(void *) in line 410
      protection public
      58 lines of code
      1 parameters
      31 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function enqueue(QType *,int) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function t2(void *) in line 469
      protection public
      36 lines of code
      1 parameters
      19 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function dequeue(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function main_thread(void *) in line 506
      protection public
      33 lines of code
      1 parameters
      16 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function init(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function main(void) in line 540
      protection public
      159 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::element defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::head defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::tail defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::amount defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   variable __CS_anonstruct_0::amount in line 298
      protection public
   variable __CS_anonstruct_0::element in line 295
      protection public
   variable __CS_anonstruct_0::head in line 296
      protection public
   variable __CS_anonstruct_0::tail in line 297
      protection public
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_queue_unsafe.c
module benchmarks-esbmc/pthread/_cs_queue_unsafe.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   typedef QType in line 299
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable m in line 300
      protection public
   variable stored_elements in line 302
      protection public
   variable enqueue_flag in line 303
      protection public
   variable dequeue_flag in line 304
      protection public
   variable queue in line 305
      protection public
   variable __CS_u in line 305
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::element defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::head defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::tail defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::amount defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
   function init(QType *) in line 316
      protection public
      10 lines of code
      1 parameters
      5 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function empty(QType *) in line 327
      protection public
      17 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function full(QType *) in line 345
      protection public
      17 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function enqueue(QType *,int) in line 363
      protection public
      23 lines of code
      2 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function dequeue(QType *) in line 387
      protection public
      22 lines of code
      1 parameters
      10 conditional paths
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function t1(void *) in line 410
      protection public
      59 lines of code
      1 parameters
      32 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function enqueue(QType *,int) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function t2(void *) in line 470
      protection public
      37 lines of code
      1 parameters
      20 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function dequeue(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function main_thread(void *) in line 508
      protection public
      34 lines of code
      1 parameters
      17 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function init(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   function main(void) in line 543
      protection public
      159 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::element defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::head defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::tail defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses variable __CS_anonstruct_0::amount defined in benchmarks-esbmc/pthread/_cs_queue_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_queue_unsafe.c
   variable __CS_anonstruct_0::amount in line 298
      protection public
   variable __CS_anonstruct_0::element in line 295
      protection public
   variable __CS_anonstruct_0::head in line 296
      protection public
   variable __CS_anonstruct_0::tail in line 297
      protection public
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
module benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   macro definition __CS_type in line 10
      protection public
   macro definition __CS_pthread_t in line 11
      protection public
   macro definition __CS_pthread_mutex_t in line 12
      protection public
   macro definition __CS_pthread_cond_t in line 13
      protection public
   macro definition __CS_ROUNDS in line 16
      protection public
   macro definition __CS_THREADS in line 17
      protection public
   variable __CS_round in line 22
      protection public
   variable __CS_ret in line 24
      protection public
   variable __CS_ret_PREEMPTED in line 25
      protection public
   variable __CS_ret_ERROR in line 26
      protection public
   variable __CS_ret_FINISHED in line 27
      protection public
   variable __CS_error in line 29
      protection public
   variable __CS_thread_index in line 45
      protection public
   variable __CS_thread_allocated in line 47
      protection public
   variable __CS_thread_born_round in line 48
      protection public
   variable __CS_thread in line 50
      protection public
   variable __CS_thread_status in line 52
      protection public
   variable __THREAD_UNUSED in line 53
      protection public
   variable __THREAD_RUNNING in line 54
      protection public
   variable __THREAD_FINISHED in line 55
      protection public
   variable __CS_thread_lockedon in line 61
      protection public
   variable iSet in line 294
      protection public
   variable iCheck in line 295
      protection public
   variable a in line 296
      protection public
   variable b in line 297
      protection public
   variable __CS_u in line 302
      protection public
   function nondet_int() in line 76
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 78
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 107
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 112
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 124
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 132
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 144
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 149
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 160
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 171
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_assert(int) in line 192
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_assume(int) in line 201
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 206
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 241
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function setThread(void *) in line 298
      protection public
      13 lines of code
      1 parameters
      6 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function checkThread(void *) in line 299
      protection public
      19 lines of code
      1 parameters
      10 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function set() in line 300
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 301
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function main_thread(void *) in line 302
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable iSet defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable iCheck defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable a defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable b defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function main_thread(int,char *) in line 314
      protection public
      86 lines of code
      2 parameters
      45 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable iSet defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable iCheck defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function main(int,char *) in line 410
      protection public
      150 lines of code
      2 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::iSet defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::iCheck defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
module benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
   macro definition __CS_type in line 10
      protection public
   macro definition __CS_pthread_t in line 11
      protection public
   macro definition __CS_pthread_mutex_t in line 12
      protection public
   macro definition __CS_pthread_cond_t in line 13
      protection public
   macro definition __CS_ROUNDS in line 16
      protection public
   macro definition __CS_THREADS in line 17
      protection public
   variable __CS_round in line 22
      protection public
   variable __CS_ret in line 24
      protection public
   variable __CS_ret_PREEMPTED in line 25
      protection public
   variable __CS_ret_ERROR in line 26
      protection public
   variable __CS_ret_FINISHED in line 27
      protection public
   variable __CS_error in line 29
      protection public
   variable __CS_thread_index in line 45
      protection public
   variable __CS_thread_allocated in line 47
      protection public
   variable __CS_thread_born_round in line 48
      protection public
   variable __CS_thread in line 50
      protection public
   variable __CS_thread_status in line 52
      protection public
   variable __THREAD_UNUSED in line 53
      protection public
   variable __THREAD_RUNNING in line 54
      protection public
   variable __THREAD_FINISHED in line 55
      protection public
   variable __CS_thread_lockedon in line 61
      protection public
   variable iSet in line 294
      protection public
   variable iCheck in line 295
      protection public
   variable a in line 296
      protection public
   variable b in line 297
      protection public
   variable __CS_u in line 302
      protection public
   function nondet_int() in line 76
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 78
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 107
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 112
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 124
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 132
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 144
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 149
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 160
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 171
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_assert(int) in line 192
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_assume(int) in line 201
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 206
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 241
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function setThread(void *) in line 298
      protection public
      13 lines of code
      1 parameters
      6 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function checkThread(void *) in line 299
      protection public
      20 lines of code
      1 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function set() in line 300
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 301
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function main_thread(void *) in line 302
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable iSet defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable iCheck defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable a defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable b defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
   function main_thread(int,char *) in line 314
      protection public
      86 lines of code
      2 parameters
      45 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable iSet defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable iCheck defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::iSet defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::iCheck defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   function main(int,char *) in line 410
      protection public
      150 lines of code
      2 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS__u::iSet defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::iCheck defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_2_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
module benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable iSet in line 293
      protection public
   variable iCheck in line 294
      protection public
   variable a in line 295
      protection public
   variable b in line 296
      protection public
   variable __CS_u in line 299
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __ESBMC_yield() in line 297
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function set() in line 298
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 299
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setThread(void *) in line 309
      protection public
      13 lines of code
      1 parameters
      6 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function checkThread(void *) in line 323
      protection public
      19 lines of code
      1 parameters
      10 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function main_thread(void *) in line 343
      protection public
      88 lines of code
      1 parameters
      45 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::iSet defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::iCheck defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function main(int,char *) in line 432
      protection public
      208 lines of code
      2 parameters
      11 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::iSet defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::iCheck defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
module benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable iSet in line 293
      protection public
   variable iCheck in line 294
      protection public
   variable a in line 295
      protection public
   variable b in line 296
      protection public
   variable __CS_u in line 299
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function __ESBMC_yield() in line 297
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function set() in line 298
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 299
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setThread(void *) in line 309
      protection public
      13 lines of code
      1 parameters
      6 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function checkThread(void *) in line 323
      protection public
      20 lines of code
      1 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function main_thread(void *) in line 344
      protection public
      88 lines of code
      1 parameters
      45 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::iSet defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::iCheck defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   function main(int,char *) in line 433
      protection public
      208 lines of code
      2 parameters
      11 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS__u::iSet defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::iCheck defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe3.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
module benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   macro definition __CS_type in line 10
      protection public
   macro definition __CS_pthread_t in line 11
      protection public
   macro definition __CS_pthread_mutex_t in line 12
      protection public
   macro definition __CS_pthread_cond_t in line 13
      protection public
   macro definition __CS_ROUNDS in line 16
      protection public
   macro definition __CS_THREADS in line 17
      protection public
   variable __CS_round in line 22
      protection public
   variable __CS_ret in line 24
      protection public
   variable __CS_ret_PREEMPTED in line 25
      protection public
   variable __CS_ret_ERROR in line 26
      protection public
   variable __CS_ret_FINISHED in line 27
      protection public
   variable __CS_error in line 29
      protection public
   variable __CS_thread_index in line 45
      protection public
   variable __CS_thread_allocated in line 47
      protection public
   variable __CS_thread_born_round in line 48
      protection public
   variable __CS_thread in line 50
      protection public
   variable __CS_thread_status in line 52
      protection public
   variable __THREAD_UNUSED in line 53
      protection public
   variable __THREAD_RUNNING in line 54
      protection public
   variable __THREAD_FINISHED in line 55
      protection public
   variable __CS_thread_lockedon in line 61
      protection public
   variable iSet in line 294
      protection public
   variable iCheck in line 295
      protection public
   variable a in line 296
      protection public
   variable b in line 297
      protection public
   variable __CS_u in line 299
      protection public
   function nondet_int() in line 76
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 78
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 107
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 112
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 124
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 132
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 144
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 149
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 160
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 171
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_assert(int) in line 192
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_assume(int) in line 201
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 206
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 241
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function set() in line 298
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 299
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setThread(void *) in line 309
      protection public
      13 lines of code
      1 parameters
      6 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function checkThread(void *) in line 323
      protection public
      20 lines of code
      1 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function main_thread(void *) in line 344
      protection public
      66 lines of code
      1 parameters
      34 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::iSet defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::iCheck defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function main(void) in line 411
      protection public
      74 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::iSet defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::iCheck defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
module benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
   macro definition __CS_type in line 10
      protection public
   macro definition __CS_pthread_t in line 11
      protection public
   macro definition __CS_pthread_mutex_t in line 12
      protection public
   macro definition __CS_pthread_cond_t in line 13
      protection public
   macro definition __CS_ROUNDS in line 16
      protection public
   macro definition __CS_THREADS in line 17
      protection public
   variable __CS_round in line 22
      protection public
   variable __CS_ret in line 24
      protection public
   variable __CS_ret_PREEMPTED in line 25
      protection public
   variable __CS_ret_ERROR in line 26
      protection public
   variable __CS_ret_FINISHED in line 27
      protection public
   variable __CS_error in line 29
      protection public
   variable __CS_thread_index in line 45
      protection public
   variable __CS_thread_allocated in line 47
      protection public
   variable __CS_thread_born_round in line 48
      protection public
   variable __CS_thread in line 50
      protection public
   variable __CS_thread_status in line 52
      protection public
   variable __THREAD_UNUSED in line 53
      protection public
   variable __THREAD_RUNNING in line 54
      protection public
   variable __THREAD_FINISHED in line 55
      protection public
   variable __CS_thread_lockedon in line 61
      protection public
   variable iSet in line 294
      protection public
   variable iCheck in line 295
      protection public
   variable a in line 296
      protection public
   variable b in line 297
      protection public
   variable __CS_u in line 299
      protection public
   function nondet_int() in line 76
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 78
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 107
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 112
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 124
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 132
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 144
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 149
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 160
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 171
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_assert(int) in line 192
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_assume(int) in line 201
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 206
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 241
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function set() in line 298
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 299
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setThread(void *) in line 309
      protection public
      13 lines of code
      1 parameters
      6 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_u defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function checkThread(void *) in line 323
      protection public
      20 lines of code
      1 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function main_thread(void *) in line 344
      protection public
      66 lines of code
      1 parameters
      34 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::iSet defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::iCheck defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   function main(void) in line 411
      protection public
      74 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS__u::iSet defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::iCheck defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::a defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_reorder_5_unsafe_2.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
module benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable top in line 294
      protection public
   variable arr in line 295
      protection public
   variable m in line 296
      protection public
   variable flag in line 297
      protection public
   variable __CS_u in line 297
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __VERIFIER_nondet_uint() in line 293
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function error(void) in line 307
      protection public
      12 lines of code
      1 parameters
      6 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function inc_top(void) in line 320
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function dec_top(void) in line 327
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function get_top(void) in line 334
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function stack_empty(void) in line 341
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function push(unsigned int *,int) in line 348
      protection public
      23 lines of code
      2 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function inc_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function pop(unsigned int *) in line 372
      protection public
      23 lines of code
      1 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function dec_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function t1(void *) in line 396
      protection public
      24 lines of code
      1 parameters
      11 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function push(unsigned int *,int) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function t2(void *) in line 421
      protection public
      26 lines of code
      1 parameters
      13 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function pop(unsigned int *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function main_thread(void *) in line 448
      protection public
      16 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function main(void) in line 465
      protection public
      82 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_stack_safe.c
module benchmarks-esbmc/pthread/_cs_stack_safe.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable top in line 294
      protection public
   variable arr in line 295
      protection public
   variable m in line 296
      protection public
   variable flag in line 297
      protection public
   variable __CS_u in line 297
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stack_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stack_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stack_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stack_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function __VERIFIER_nondet_uint() in line 293
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function error(void) in line 307
      protection public
      13 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function inc_top(void) in line 321
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function dec_top(void) in line 328
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function get_top(void) in line 335
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function stack_empty(void) in line 342
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function push(unsigned int *,int) in line 349
      protection public
      23 lines of code
      2 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function inc_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function pop(unsigned int *) in line 373
      protection public
      23 lines of code
      1 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function dec_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function t1(void *) in line 397
      protection public
      24 lines of code
      1 parameters
      11 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function push(unsigned int *,int) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function t2(void *) in line 422
      protection public
      26 lines of code
      1 parameters
      13 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function pop(unsigned int *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function main_thread(void *) in line 449
      protection public
      16 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_stack_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   function main(void) in line 466
      protection public
      82 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_stack_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_stack_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stack_safe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-esbmc/pthread/_cs_stack_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
module benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable top in line 294
      protection public
   variable arr in line 295
      protection public
   variable m in line 296
      protection public
   variable flag in line 297
      protection public
   variable __CS_u in line 297
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __VERIFIER_nondet_uint() in line 293
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function error(void) in line 307
      protection public
      12 lines of code
      1 parameters
      6 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function inc_top(void) in line 320
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function dec_top(void) in line 327
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function get_top(void) in line 334
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function stack_empty(void) in line 341
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function push(unsigned int *,int) in line 348
      protection public
      23 lines of code
      2 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function inc_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function pop(unsigned int *) in line 372
      protection public
      23 lines of code
      1 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function dec_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function t1(void *) in line 396
      protection public
      26 lines of code
      1 parameters
      12 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function push(unsigned int *,int) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function t2(void *) in line 423
      protection public
      26 lines of code
      1 parameters
      13 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function pop(unsigned int *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function main_thread(void *) in line 450
      protection public
      16 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function main(void) in line 467
      protection public
      82 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_stack_unsafe.c
module benchmarks-esbmc/pthread/_cs_stack_unsafe.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable top in line 294
      protection public
   variable arr in line 295
      protection public
   variable m in line 296
      protection public
   variable flag in line 297
      protection public
   variable __CS_u in line 297
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stack_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function __VERIFIER_nondet_uint() in line 293
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function error(void) in line 307
      protection public
      13 lines of code
      1 parameters
      7 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function inc_top(void) in line 321
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function dec_top(void) in line 328
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function get_top(void) in line 335
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function stack_empty(void) in line 342
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function push(unsigned int *,int) in line 349
      protection public
      23 lines of code
      2 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function inc_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function pop(unsigned int *) in line 373
      protection public
      23 lines of code
      1 parameters
      11 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function dec_top(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function t1(void *) in line 397
      protection public
      26 lines of code
      1 parameters
      12 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function push(unsigned int *,int) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function t2(void *) in line 424
      protection public
      26 lines of code
      1 parameters
      13 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function pop(unsigned int *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function main_thread(void *) in line 451
      protection public
      16 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_stack_unsafe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   function main(void) in line 468
      protection public
      82 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_stack_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_stack_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stack_unsafe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-esbmc/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS__u::top defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::arr defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stack_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
module benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable ma in line 292
      protection public
   variable mb in line 293
      protection public
   variable data1 in line 294
      protection public
   variable data2 in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function thread1(void *) in line 305
      protection public
      16 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function thread2(void *) in line 322
      protection public
      16 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 339
      protection public
      33 lines of code
      1 parameters
      16 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::mb defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function main(void) in line 373
      protection public
      74 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::mb defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_stateful_safe.c
module benchmarks-esbmc/pthread/_cs_stateful_safe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable ma in line 292
      protection public
   variable mb in line 293
      protection public
   variable data1 in line 294
      protection public
   variable data2 in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stateful_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function thread1(void *) in line 305
      protection public
      16 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function thread2(void *) in line 322
      protection public
      16 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 339
      protection public
      34 lines of code
      1 parameters
      17 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_stateful_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::mb defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   function main(void) in line 374
      protection public
      74 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_stateful_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_stateful_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stateful_safe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-esbmc/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::mb defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
module benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable ma in line 292
      protection public
   variable mb in line 293
      protection public
   variable data1 in line 294
      protection public
   variable data2 in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function thread1(void *) in line 305
      protection public
      16 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function thread2(void *) in line 322
      protection public
      16 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 339
      protection public
      33 lines of code
      1 parameters
      16 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::mb defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function main(void) in line 373
      protection public
      74 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::mb defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
module benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable ma in line 292
      protection public
   variable mb in line 293
      protection public
   variable data1 in line 294
      protection public
   variable data2 in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function thread1(void *) in line 305
      protection public
      16 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function thread2(void *) in line 322
      protection public
      16 lines of code
      1 parameters
      8 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 339
      protection public
      34 lines of code
      1 parameters
      17 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::mb defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   function main(void) in line 374
      protection public
      74 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-esbmc/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS__u::ma defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::mb defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::data2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_stateful_unsafe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
module benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable num in line 293
      protection public
   variable m in line 294
      protection public
   variable empty in line 295
      protection public
   variable full in line 296
      protection public
   variable __CS_u in line 296
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function thread1(void *) in line 306
      protection public
      19 lines of code
      1 parameters
      9 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::num defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::empty defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_cond_signal(__CS_pthread_cond_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::full defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function thread2(void *) in line 326
      protection public
      19 lines of code
      1 parameters
      9 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::num defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::full defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_cond_signal(__CS_pthread_cond_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::empty defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 346
      protection public
      33 lines of code
      1 parameters
      16 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::num defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::empty defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::full defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function main(void) in line 380
      protection public
      74 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses macro definition __CS_pthread_cond_t defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::num defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::empty defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::full defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_sync_safe.c
module benchmarks-esbmc/pthread/_cs_sync_safe.c
   macro definition __CS_type in line 9
      protection public
   macro definition __CS_pthread_t in line 10
      protection public
   macro definition __CS_pthread_mutex_t in line 11
      protection public
   macro definition __CS_pthread_cond_t in line 12
      protection public
   macro definition __CS_ROUNDS in line 15
      protection public
   macro definition __CS_THREADS in line 16
      protection public
   variable __CS_round in line 21
      protection public
   variable __CS_ret in line 23
      protection public
   variable __CS_ret_PREEMPTED in line 24
      protection public
   variable __CS_ret_ERROR in line 25
      protection public
   variable __CS_ret_FINISHED in line 26
      protection public
   variable __CS_error in line 28
      protection public
   variable __CS_thread_index in line 44
      protection public
   variable __CS_thread_allocated in line 46
      protection public
   variable __CS_thread_born_round in line 47
      protection public
   variable __CS_thread in line 49
      protection public
   variable __CS_thread_status in line 51
      protection public
   variable __THREAD_UNUSED in line 52
      protection public
   variable __THREAD_RUNNING in line 53
      protection public
   variable __THREAD_FINISHED in line 54
      protection public
   variable __CS_thread_lockedon in line 60
      protection public
   variable num in line 293
      protection public
   variable m in line 294
      protection public
   variable empty in line 295
      protection public
   variable full in line 296
      protection public
   variable __CS_u in line 296
      protection public
   function nondet_int() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 77
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 111
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 131
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 143
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 148
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 159
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 170
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_assert(int) in line 191
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_assume(int) in line 200
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 205
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_UNUSED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 240
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function thread1(void *) in line 306
      protection public
      19 lines of code
      1 parameters
      9 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::num defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::empty defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_cond_signal(__CS_pthread_cond_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::full defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function thread2(void *) in line 326
      protection public
      19 lines of code
      1 parameters
      9 conditional paths
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::num defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::full defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_cond_signal(__CS_pthread_cond_t *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::empty defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
   function main_thread(void *) in line 346
      protection public
      34 lines of code
      1 parameters
      17 conditional paths
      uses macro definition __CS_pthread_t defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::num defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::empty defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::full defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_ERROR defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   function main(void) in line 381
      protection public
      74 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses macro definition __CS_ROUNDS defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses macro definition __CS_THREADS defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses macro definition __CS_pthread_mutex_t defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses macro definition __CS_pthread_cond_t defined in benchmarks-esbmc/pthread/_cs_sync_safe.c
      uses variable __CS_thread_status defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_lockedon defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS__u::num defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::empty defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::full defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_index defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_born_round defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_RUNNING defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses function main_thread(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_thread_allocated defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __CS_ret_PREEMPTED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses variable __THREAD_FINISHED defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in benchmarks-cbmc-4.5/pthread/_cs_sync_safe.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/_cs_twostage_3_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/_cs_twostage_3_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
module benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
   macro definition NUM in line 5
      protection public
   variable i in line 3
      protection public
   variable j in line 3
      protection public
   function t1(void *) in line 8
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 19
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(int,char **) in line 30
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/fib_longer_safe.c
module benchmarks-esbmc/pthread/fib_longer_safe.c
   macro definition NUM in line 5
      protection public
   variable i in line 3
      protection public
   variable j in line 3
      protection public
   function t1(void *) in line 8
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-esbmc/pthread/fib_longer_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 19
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-esbmc/pthread/fib_longer_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(int,char **) in line 30
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_safe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
module benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
   macro definition NUM in line 5
      protection public
   variable i in line 3
      protection public
   variable j in line 3
      protection public
   function t1(void *) in line 8
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 19
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(int,char **) in line 30
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/fib_longer_unsafe.c
module benchmarks-esbmc/pthread/fib_longer_unsafe.c
   macro definition NUM in line 5
      protection public
   variable i in line 3
      protection public
   variable j in line 3
      protection public
   function t1(void *) in line 8
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-esbmc/pthread/fib_longer_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 19
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-esbmc/pthread/fib_longer_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(int,char **) in line 30
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_longer_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/fib_safe.c
module benchmarks-cbmc-4.5/pthread/fib_safe.c
   macro definition NUM in line 5
      protection public
   variable i in line 3
      protection public
   variable j in line 3
      protection public
   function t1(void *) in line 8
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 19
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(int,char **) in line 30
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/fib_safe.c
module benchmarks-esbmc/pthread/fib_safe.c
   macro definition NUM in line 5
      protection public
   variable i in line 3
      protection public
   variable j in line 3
      protection public
   function t1(void *) in line 8
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-esbmc/pthread/fib_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 19
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-esbmc/pthread/fib_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(int,char **) in line 30
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_safe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/fib_unsafe.c
module benchmarks-cbmc-4.5/pthread/fib_unsafe.c
   macro definition NUM in line 5
      protection public
   variable i in line 3
      protection public
   variable j in line 3
      protection public
   function t1(void *) in line 8
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 19
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(int,char **) in line 30
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/fib_unsafe.c
module benchmarks-esbmc/pthread/fib_unsafe.c
   macro definition NUM in line 5
      protection public
   variable i in line 3
      protection public
   variable j in line 3
      protection public
   function t1(void *) in line 8
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-esbmc/pthread/fib_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 19
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NUM defined in benchmarks-esbmc/pthread/fib_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(int,char **) in line 30
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses variable i defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
      uses variable j defined in benchmarks-cbmc-4.5/pthread/fib_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/indexer_safe.c
module benchmarks-cbmc-4.5/pthread/indexer_safe.c
   macro definition SIZE in line 4
      protection public
   macro definition MAX in line 5
      protection public
   macro definition NUM_THREADS in line 6
      protection public
   variable table in line 8
      protection public
   variable cas_mutex in line 9
      protection public
   variable tids in line 11
      protection public
   function cas(int *,int,int,int) in line 14
      protection public
      16 lines of code
      4 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable cas_mutex defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function thread_routine(void *) in line 33
      protection public
      28 lines of code
      1 parameters
      6 conditional paths
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition MAX defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses function cas(int *,int,int,int) defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses variable table defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
   function main(void) in line 63
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable cas_mutex defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses macro definition NULL defined in _fake_defines.h
      uses macro definition NUM_THREADS defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable tids defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses function thread_routine(void *) defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_mutex_destroy(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/indexer_safe.c
module benchmarks-esbmc/pthread/indexer_safe.c
   macro definition SIZE in line 4
      protection public
   macro definition MAX in line 5
      protection public
   macro definition NUM_THREADS in line 6
      protection public
   variable table in line 8
      protection public
   variable cas_mutex in line 9
      protection public
   variable tids in line 11
      protection public
   function cas(int *,int,int,int) in line 14
      protection public
      16 lines of code
      4 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable cas_mutex defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function thread_routine(void *) in line 33
      protection public
      28 lines of code
      1 parameters
      6 conditional paths
      uses variable m defined in benchmarks-cbmc-4.5/pthread/_cs_queue_safe.c
      uses variable w defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_read_write_lock_safe.c
      uses macro definition MAX defined in benchmarks-esbmc/pthread/indexer_safe.c
      uses function pthread_exit(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/indexer_safe.c
      uses function cas(int *,int,int,int) defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses variable table defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
   function main(void) in line 63
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/indexer_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable cas_mutex defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses macro definition NULL defined in _fake_defines.h
      uses macro definition NUM_THREADS defined in benchmarks-esbmc/pthread/indexer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable tids defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses function thread_routine(void *) defined in benchmarks-cbmc-4.5/pthread/indexer_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_mutex_destroy(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/lazy_safe.c
module benchmarks-cbmc-4.5/pthread/lazy_safe.c
   variable mutex in line 4
      protection public
   variable data in line 5
      protection public
   function thread1(void *) in line 7
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function thread2(void *) in line 15
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function thread3(void *) in line 23
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function main(void) in line 34
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function thread3(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/lazy_safe.c
module benchmarks-esbmc/pthread/lazy_safe.c
   variable mutex in line 4
      protection public
   variable data in line 5
      protection public
   function thread1(void *) in line 7
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function thread2(void *) in line 15
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function thread3(void *) in line 23
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function main(void) in line 34
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function thread3(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
module benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
   variable mutex in line 4
      protection public
   variable data in line 5
      protection public
   function thread1(void *) in line 7
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function thread2(void *) in line 15
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function thread3(void *) in line 23
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function main(void) in line 34
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function thread3(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/lazy_unsafe.c
module benchmarks-esbmc/pthread/lazy_unsafe.c
   variable mutex in line 4
      protection public
   variable data in line 5
      protection public
   function thread1(void *) in line 7
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function thread2(void *) in line 15
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function thread3(void *) in line 23
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses variable data defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function main(void) in line 34
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable mutex defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function thread3(void *) defined in benchmarks-cbmc-4.5/pthread/lazy_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/queue_safe.c
module benchmarks-cbmc-4.5/pthread/queue_safe.c
   macro definition SIZE in line 5
      protection public
   macro definition EMPTY in line 6
      protection public
   macro definition FULL in line 7
      protection public
   macro definition FALSE in line 8
      protection public
   macro definition TRUE in line 9
      protection public
   variable m in line 18
      protection public
   variable stored_elements in line 20
      protection public
   variable enqueue_flag in line 21
      protection public
   variable dequeue_flag in line 21
      protection public
   variable queue in line 22
      protection public
   function nondet_int() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function init(QType *) in line 24
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function empty(QType *) in line 31
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition EMPTY defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
   function full(QType *) in line 42
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses macro definition FULL defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
   function enqueue(QType *,int) in line 53
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
   function dequeue(QType *) in line 69
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
   function t1(void *) in line 85
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::enqueue_flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function enqueue(QType *,int) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable __CS__u::queue defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::stored_elements defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition FALSE defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable __CS__u::dequeue_flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition TRUE defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 106
      protection public
      23 lines of code
      1 parameters
      6 conditional paths
      uses variable __CS__u::i defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::dequeue_flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable __CS__u::empty defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::queue defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition EMPTY defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function dequeue(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable __CS__u::stored_elements defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition FALSE defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable __CS__u::enqueue_flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition TRUE defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(void) in line 130
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses variable __CS__u::enqueue_flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition TRUE defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable __CS__u::dequeue_flag defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition FALSE defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function init(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable __CS__u::queue defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::empty defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses macro definition EMPTY defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable __CS__u::m defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   variable QType::amount in line 15
      protection public
   variable QType::element in line 12
      protection public
   variable QType::head in line 13
      protection public
   variable QType::tail in line 14
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/queue_safe.c
module benchmarks-esbmc/pthread/queue_safe.c
   macro definition SIZE in line 5
      protection public
   macro definition EMPTY in line 6
      protection public
   macro definition FULL in line 7
      protection public
   macro definition FALSE in line 8
      protection public
   macro definition TRUE in line 9
      protection public
   variable m in line 18
      protection public
   variable stored_elements in line 20
      protection public
   variable enqueue_flag in line 21
      protection public
   variable dequeue_flag in line 21
      protection public
   variable queue in line 22
      protection public
   function nondet_int() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function init(QType *) in line 24
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function empty(QType *) in line 31
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition EMPTY defined in benchmarks-esbmc/pthread/queue_safe.c
   function full(QType *) in line 42
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/queue_safe.c
      uses macro definition FULL defined in benchmarks-esbmc/pthread/queue_safe.c
   function enqueue(QType *,int) in line 53
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/queue_safe.c
   function dequeue(QType *) in line 69
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/queue_safe.c
   function t1(void *) in line 85
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/queue_safe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function enqueue(QType *,int) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses macro definition FALSE defined in benchmarks-esbmc/pthread/queue_safe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses macro definition TRUE defined in benchmarks-esbmc/pthread/queue_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 106
      protection public
      23 lines of code
      1 parameters
      6 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/queue_safe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses macro definition EMPTY defined in benchmarks-esbmc/pthread/queue_safe.c
      uses function dequeue(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses macro definition FALSE defined in benchmarks-esbmc/pthread/queue_safe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses macro definition TRUE defined in benchmarks-esbmc/pthread/queue_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(void) in line 130
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses macro definition TRUE defined in benchmarks-esbmc/pthread/queue_safe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses macro definition FALSE defined in benchmarks-esbmc/pthread/queue_safe.c
      uses function init(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses macro definition EMPTY defined in benchmarks-esbmc/pthread/queue_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/queue_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   variable QType::amount in line 15
      protection public
   variable QType::element in line 12
      protection public
   variable QType::head in line 13
      protection public
   variable QType::tail in line 14
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/queue_unsafe.c
module benchmarks-cbmc-4.5/pthread/queue_unsafe.c
   macro definition SIZE in line 5
      protection public
   macro definition EMPTY in line 6
      protection public
   macro definition FULL in line 7
      protection public
   macro definition FALSE in line 8
      protection public
   macro definition TRUE in line 9
      protection public
   variable m in line 18
      protection public
   variable stored_elements in line 20
      protection public
   variable enqueue_flag in line 21
      protection public
   variable dequeue_flag in line 21
      protection public
   variable queue in line 22
      protection public
   function nondet_int() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function init(QType *) in line 24
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function empty(QType *) in line 31
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition EMPTY defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
   function full(QType *) in line 42
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition FULL defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
   function enqueue(QType *,int) in line 53
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
   function dequeue(QType *) in line 69
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
   function t1(void *) in line 85
      protection public
      36 lines of code
      1 parameters
      7 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function enqueue(QType *,int) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition FALSE defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition TRUE defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 122
      protection public
      22 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function dequeue(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition FALSE defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition TRUE defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(void) in line 145
      protection public
      26 lines of code
      1 parameters
      3 conditional paths
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition TRUE defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition FALSE defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function init(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition EMPTY defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   variable QType::amount in line 15
      protection public
   variable QType::element in line 12
      protection public
   variable QType::head in line 13
      protection public
   variable QType::tail in line 14
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/queue_unsafe.c
module benchmarks-esbmc/pthread/queue_unsafe.c
   macro definition SIZE in line 5
      protection public
   macro definition EMPTY in line 6
      protection public
   macro definition FULL in line 7
      protection public
   macro definition FALSE in line 8
      protection public
   macro definition TRUE in line 9
      protection public
   variable m in line 18
      protection public
   variable stored_elements in line 20
      protection public
   variable enqueue_flag in line 21
      protection public
   variable dequeue_flag in line 21
      protection public
   variable queue in line 22
      protection public
   function nondet_int() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function init(QType *) in line 24
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function empty(QType *) in line 31
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition EMPTY defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function full(QType *) in line 42
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition FULL defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function enqueue(QType *,int) in line 53
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::tail defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function dequeue(QType *) in line 69
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses variable QType::element defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::head defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable QType::amount defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/queue_unsafe.c
   function t1(void *) in line 85
      protection public
      36 lines of code
      1 parameters
      7 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function nondet_int() defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function enqueue(QType *,int) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition FALSE defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition TRUE defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function t2(void *) in line 122
      protection public
      22 lines of code
      1 parameters
      5 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function dequeue(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable stored_elements defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition FALSE defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition TRUE defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function main(void) in line 145
      protection public
      26 lines of code
      1 parameters
      3 conditional paths
      uses variable enqueue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition TRUE defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses variable dequeue_flag defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition FALSE defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses function init(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses variable queue defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function empty(QType *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses macro definition EMPTY defined in benchmarks-esbmc/pthread/queue_unsafe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/queue_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   variable QType::amount in line 15
      protection public
   variable QType::element in line 12
      protection public
   variable QType::head in line 13
      protection public
   variable QType::tail in line 14
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
module benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
   macro definition USAGE in line 5
      protection public
   variable iSet in line 7
      protection public
   variable iCheck in line 8
      protection public
   variable a in line 10
      protection public
   variable b in line 11
      protection public
   function setThread(void *) in line 13
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
      uses variable b defined in benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function checkThread(void *) in line 14
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable a defined in benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
      uses variable b defined in benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function set() in line 15
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 16
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function main(int,char *) in line 18
      protection public
      49 lines of code
      2 parameters
      11 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition USAGE defined in benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
      uses variable iSet defined in benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
      uses variable iCheck defined in benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/reorder_2_unsafe.c
module benchmarks-esbmc/pthread/reorder_2_unsafe.c
   macro definition USAGE in line 5
      protection public
   variable iSet in line 7
      protection public
   variable iCheck in line 8
      protection public
   variable a in line 10
      protection public
   variable b in line 11
      protection public
   function setThread(void *) in line 13
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in benchmarks-esbmc/pthread/reorder_2_unsafe.c
      uses variable b defined in benchmarks-esbmc/pthread/reorder_2_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function checkThread(void *) in line 14
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable a defined in benchmarks-esbmc/pthread/reorder_2_unsafe.c
      uses variable b defined in benchmarks-esbmc/pthread/reorder_2_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function set() in line 15
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 16
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function main(int,char *) in line 18
      protection public
      49 lines of code
      2 parameters
      11 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition USAGE defined in benchmarks-esbmc/pthread/reorder_2_unsafe.c
      uses variable iSet defined in benchmarks-esbmc/pthread/reorder_2_unsafe.c
      uses variable iCheck defined in benchmarks-esbmc/pthread/reorder_2_unsafe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_2_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
module benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   enumeration @0 in line 214
      protection public
   enumeration @1 in line 232
      protection public
   enumeration __codecvt_result in line 396
      protection public
   enumeration @2 in line 2227
      protection public
   enumeration @3 in line 2236
      protection public
   enumeration @4 in line 2244
      protection public
   enumeration @5 in line 2254
      protection public
   enumeration @6 in line 2264
      protection public
   enumeration @7 in line 2281
      protection public
   enumeration @8 in line 2288
      protection public
   typedef size_t in line 36
      protection public
   typedef __u_char in line 49
      protection public
   typedef __u_short in line 50
      protection public
   typedef __u_int in line 51
      protection public
   typedef __u_long in line 52
      protection public
   typedef __int8_t in line 55
      protection public
   typedef __uint8_t in line 56
      protection public
   typedef __int16_t in line 57
      protection public
   typedef __uint16_t in line 58
      protection public
   typedef __int32_t in line 59
      protection public
   typedef __uint32_t in line 60
      protection public
   typedef __int64_t in line 62
      protection public
   typedef __uint64_t in line 63
      protection public
   typedef __quad_t in line 71
      protection public
   typedef __u_quad_t in line 72
      protection public
   typedef __dev_t in line 78
      protection public
   typedef __uid_t in line 79
      protection public
   typedef __gid_t in line 80
      protection public
   typedef __ino_t in line 81
      protection public
   typedef __ino64_t in line 82
      protection public
   typedef __mode_t in line 83
      protection public
   typedef __nlink_t in line 84
      protection public
   typedef __off_t in line 85
      protection public
   typedef __off64_t in line 86
      protection public
   typedef __pid_t in line 87
      protection public
   typedef __clock_t in line 89
      protection public
   typedef __rlim_t in line 90
      protection public
   typedef __rlim64_t in line 91
      protection public
   typedef __id_t in line 92
      protection public
   typedef __time_t in line 93
      protection public
   typedef __useconds_t in line 94
      protection public
   typedef __suseconds_t in line 95
      protection public
   typedef __daddr_t in line 97
      protection public
   typedef __swblk_t in line 98
      protection public
   typedef __key_t in line 99
      protection public
   typedef __clockid_t in line 102
      protection public
   typedef __timer_t in line 105
      protection public
   typedef __blksize_t in line 108
      protection public
   typedef __blkcnt_t in line 113
      protection public
   typedef __blkcnt64_t in line 114
      protection public
   typedef __fsblkcnt_t in line 117
      protection public
   typedef __fsblkcnt64_t in line 118
      protection public
   typedef __fsfilcnt_t in line 121
      protection public
   typedef __fsfilcnt64_t in line 122
      protection public
   typedef __ssize_t in line 124
      protection public
   typedef __loff_t in line 128
      protection public
   typedef __qaddr_t in line 129
      protection public
   typedef __caddr_t in line 130
      protection public
   typedef __intptr_t in line 133
      protection public
   typedef __socklen_t in line 136
      protection public
   typedef FILE in line 136
      protection public
   typedef __FILE in line 136
      protection public
   typedef wchar_t in line 162
      protection public
   typedef wint_t in line 164
      protection public
   typedef __gconv_fct in line 246
      protection public
   typedef __gconv_btowc_fct in line 251
      protection public
   typedef __gconv_init_fct in line 254
      protection public
   typedef __gconv_end_fct in line 255
      protection public
   typedef __gconv_trans_fct in line 259
      protection public
   typedef __gconv_trans_context_fct in line 267
      protection public
   typedef __gconv_trans_query_fct in line 272
      protection public
   typedef __gconv_trans_init_fct in line 276
      protection public
   typedef __gconv_trans_end_fct in line 277
      protection public
   typedef __gconv_t in line 353
      protection public
   typedef __attribute__ in line 365
      protection public
   typedef __gnuc_va_list in line 373
      protection public
   typedef _IO_lock_t in line 378
      protection public
   typedef _IO_FILE in line 378
      protection public
   typedef __io_read_fn in line 468
      protection public
   typedef __io_write_fn in line 476
      protection public
   typedef __io_seek_fn in line 485
      protection public
   typedef __io_close_fn in line 488
      protection public
   typedef sigset_t in line 1217
      protection public
   typedef suseconds_t in line 1242
      protection public
   typedef __fd_mask in line 1248
      protection public
   typedef fd_mask in line 1268
      protection public
   typedef blkcnt_t in line 1323
      protection public
   typedef fsblkcnt_t in line 1327
      protection public
   typedef fsfilcnt_t in line 1331
      protection public
   typedef pthread_t in line 1338
      protection public
   typedef __pthread_list_t in line 1353
      protection public
   typedef pthread_key_t in line 1411
      protection public
   typedef pthread_once_t in line 1415
      protection public
   typedef pthread_spinlock_t in line 1455
      protection public
   typedef __cpu_mask in line 1927
      protection public
   variable _IO_2_1_stdin_ in line 378
      protection public
   variable _IO_2_1_stdout_ in line 378
      protection public
   variable _IO_2_1_stderr_ in line 378
      protection public
   variable div_t in line 944
      protection public
   variable __sigset_t in line 1212
      protection public
   variable iSet in line 2788
      protection public
   variable iCheck in line 2789
      protection public
   variable a in line 2791
      protection public
   variable b in line 2792
      protection public
   enumvalue __GCONV_OK in line 215
      protection public
   enumvalue __GCONV_NOCONV in line 216
      protection public
   enumvalue __GCONV_NODB in line 217
      protection public
   enumvalue __GCONV_NOMEM in line 218
      protection public
   enumvalue __GCONV_EMPTY_INPUT in line 220
      protection public
   enumvalue __GCONV_FULL_OUTPUT in line 221
      protection public
   enumvalue __GCONV_ILLEGAL_INPUT in line 222
      protection public
   enumvalue __GCONV_INCOMPLETE_INPUT in line 223
      protection public
   enumvalue __GCONV_ILLEGAL_DESCRIPTOR in line 225
      protection public
   enumvalue __GCONV_INTERNAL_ERROR in line 227
      protection public
   enumvalue __GCONV_IS_LAST in line 233
      protection public
   enumvalue __GCONV_IGNORE_ERRORS in line 235
      protection public
   enumvalue __codecvt_ok in line 397
      protection public
   enumvalue __codecvt_partial in line 398
      protection public
   enumvalue __codecvt_error in line 399
      protection public
   enumvalue __codecvt_noconv in line 401
      protection public
   enumvalue PTHREAD_MUTEX_TIMED_NP in line 2228
      protection public
   enumvalue PTHREAD_MUTEX_RECURSIVE_NP in line 2229
      protection public
   enumvalue PTHREAD_MUTEX_ERRORCHECK_NP in line 2230
      protection public
   enumvalue PTHREAD_MUTEX_ADAPTIVE_NP in line 2233
      protection public
   enumvalue PTHREAD_RWLOCK_PREFER_READER_NP in line 2237
      protection public
   enumvalue PTHREAD_RWLOCK_PREFER_WRITER_NP in line 2238
      protection public
   enumvalue PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP in line 2239
      protection public
   enumvalue PTHREAD_RWLOCK_DEFAULT_NP in line 2241
      protection public
   enumvalue PTHREAD_INHERIT_SCHED in line 2245
      protection public
   enumvalue PTHREAD_EXPLICIT_SCHED in line 2249
      protection public
   enumvalue PTHREAD_SCOPE_SYSTEM in line 2255
      protection public
   enumvalue PTHREAD_SCOPE_PROCESS in line 2259
      protection public
   enumvalue PTHREAD_PROCESS_PRIVATE in line 2265
      protection public
   enumvalue PTHREAD_PROCESS_SHARED in line 2269
      protection public
   enumvalue PTHREAD_CANCEL_ENABLE in line 2282
      protection public
   enumvalue PTHREAD_CANCEL_DISABLE in line 2286
      protection public
   enumvalue PTHREAD_CANCEL_DEFERRED in line 2289
      protection public
   enumvalue PTHREAD_CANCEL_ASYNCHRONOUS in line 2293
      protection public
   function __underflow(_IO_FILE *) in line 490
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __uflow(_IO_FILE *) in line 491
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __overflow(_IO_FILE *,int) in line 492
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __wunderflow(_IO_FILE *) in line 493
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __wuflow(_IO_FILE *) in line 494
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __woverflow(_IO_FILE *,wint_t) in line 495
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function _IO_getc(_IO_FILE *) in line 497
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _IO_putc(int,_IO_FILE *) in line 498
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function _IO_feof(_IO_FILE *) in line 499
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _IO_ferror(_IO_FILE *) in line 500
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _IO_peekc_locked(_IO_FILE *) in line 502
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _IO_flockfile(_IO_FILE *) in line 508
      protection public
      437 lines of code
      1 parameters
      1 conditional paths
   function __ctype_get_mb_cur_max(void) in line 957
      protection public
      256 lines of code
      1 parameters
      1 conditional paths
   function select(int,fd_set *__restrict,fd_set *__restrict,fd_set *__restrict,struct timeval *__restrict) in line 1272
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function pselect(int,fd_set *__restrict,fd_set *__restrict,fd_set *__restrict,const struct timespec *__restrict,const __sigset_t *__restrict) in line 1277
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function gnu_dev_major(unsigned long long int) in line 1291
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function gnu_dev_minor(unsigned long long int) in line 1294
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function gnu_dev_makedev(unsigned int,unsigned int) in line 1297
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __attribute__((__nothrow__)) in line 1303
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function gnu_dev_minor(unsigned long long int) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function gnu_dev_makedev(unsigned int,unsigned int) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function random(void) in line 1482
      protection public
      32 lines of code
      1 parameters
      1 conditional paths
      uses function random_r(struct random_data *__restrict,int32_t *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function srandom_r(unsigned int,struct random_data *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function initstate_r(unsigned int,char *__restrict,size_t,struct random_data *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function setstate_r(char *__restrict,struct random_data *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function random_r(struct random_data *__restrict,int32_t *__restrict) in line 1515
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function srandom_r(unsigned int,struct random_data *) in line 1518
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function initstate_r(unsigned int,char *__restrict,size_t,struct random_data *__restrict) in line 1521
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function setstate_r(char *__restrict,struct random_data *__restrict) in line 1526
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function rand(void) in line 1535
      protection public
      46 lines of code
      1 parameters
      1 conditional paths
      uses function drand48_r(struct drand48_data *__restrict,double *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function erand48_r(unsigned short int,struct drand48_data *__restrict,double *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function lrand48_r(struct drand48_data *__restrict,long int *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function nrand48_r(unsigned short int,struct drand48_data *__restrict,long int *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function mrand48_r(struct drand48_data *__restrict,long int *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function jrand48_r(unsigned short int,struct drand48_data *__restrict,long int *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function srand48_r(long int,struct drand48_data *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function seed48_r(unsigned short int,struct drand48_data *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function lcong48_r(unsigned short int,struct drand48_data *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function malloc(size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function calloc(size_t,size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function realloc(void *,size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function free(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function cfree(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function alloca(size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function valloc(size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function posix_memalign(void **,size_t,size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function drand48_r(struct drand48_data *__restrict,double *__restrict) in line 1583
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function erand48_r(unsigned short int,struct drand48_data *__restrict,double *__restrict) in line 1585
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function lrand48_r(struct drand48_data *__restrict,long int *__restrict) in line 1590
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function nrand48_r(unsigned short int,struct drand48_data *__restrict,long int *__restrict) in line 1593
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function mrand48_r(struct drand48_data *__restrict,long int *__restrict) in line 1599
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function jrand48_r(unsigned short int,struct drand48_data *__restrict,long int *__restrict) in line 1602
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function srand48_r(long int,struct drand48_data *) in line 1608
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function seed48_r(unsigned short int,struct drand48_data *) in line 1611
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function lcong48_r(unsigned short int,struct drand48_data *) in line 1614
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function malloc(size_t) in line 1626
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function calloc(size_t,size_t) in line 1628
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function realloc(void *,size_t) in line 1637
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function free(void *) in line 1640
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cfree(void *) in line 1645
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function alloca(size_t) in line 1660
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function valloc(size_t) in line 1672
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function posix_memalign(void **,size_t,size_t) in line 1677
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function abort(extern int on_exit ( (*__func) (int __status) in line 1683
      protection public
      219 lines of code
      1 parameters
      1 conditional paths
   function clone(int(*)(void *__arg),void *,int,void *,...) in line 1907
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function unshare(int) in line 1911
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function sched_setparam(__pid_t,__const struct sched_param *) in line 1946
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function sched_getparam(__pid_t,struct sched_param *) in line 1950
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function sched_setscheduler(__pid_t,int,__const struct sched_param *) in line 1953
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function sched_getscheduler(__pid_t) in line 1957
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function sched_yield(void) in line 1960
      protection public
      60 lines of code
      1 parameters
      1 conditional paths
   function clock(void) in line 2040
      protection public
      183 lines of code
      1 parameters
      1 conditional paths
   function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) in line 2300
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function pthread_exit(void *) in line 2309
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_join(pthread_t,void **) in line 2317
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_detach(pthread_t) in line 2319
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_self(void) in line 2323
      protection public
      160 lines of code
      1 parameters
      1 conditional paths
   function __attribute__((__aligned__)) in line 2482
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __pthread_register_cancel(__pthread_unwind_buf_t *) in line 2492
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __pthread_unregister_cancel(__pthread_unwind_buf_t *) in line 2495
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __pthread_unwind_next(__pthread_unwind_buf_t *) in line 2498
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __sigsetjmp(struct __jmp_buf_tag *,int) in line 2508
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) in line 2514
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_mutex_destroy(pthread_mutex_t *) in line 2519
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutex_trylock(pthread_mutex_t *) in line 2523
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutex_lock(pthread_mutex_t *) in line 2527
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutex_timedlock(pthread_mutex_t *__restrict,__const struct timespec *__restrict) in line 2532
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_mutex_unlock(pthread_mutex_t *) in line 2538
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutexattr_init(pthread_mutexattr_t *) in line 2541
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutexattr_destroy(pthread_mutexattr_t *) in line 2545
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutexattr_getpshared(__const pthread_mutexattr_t *__restrict,int *__restrict) in line 2549
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_mutexattr_setpshared(pthread_mutexattr_t *,int) in line 2555
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlock_init(pthread_rwlock_t *__restrict,__const pthread_rwlockattr_t *__restrict) in line 2559
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlock_destroy(pthread_rwlock_t *) in line 2564
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlock_rdlock(pthread_rwlock_t *) in line 2568
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlock_tryrdlock(pthread_rwlock_t *) in line 2572
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict,__const struct timespec *__restrict) in line 2577
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlock_wrlock(pthread_rwlock_t *) in line 2583
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlock_trywrlock(pthread_rwlock_t *) in line 2587
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict,__const struct timespec *__restrict) in line 2592
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlock_unlock(pthread_rwlock_t *) in line 2598
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlockattr_init(pthread_rwlockattr_t *) in line 2605
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlockattr_destroy(pthread_rwlockattr_t *) in line 2609
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlockattr_getpshared(__const pthread_rwlockattr_t *__restrict,int *__restrict) in line 2613
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlockattr_setpshared(pthread_rwlockattr_t *,int) in line 2619
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlockattr_getkind_np(__const pthread_rwlockattr_t *__restrict,int *__restrict) in line 2624
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *,int) in line 2630
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_cond_init(pthread_cond_t *__restrict,__const pthread_condattr_t *__restrict) in line 2639
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_cond_destroy(pthread_cond_t *) in line 2644
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_cond_signal(pthread_cond_t *) in line 2648
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_cond_broadcast(pthread_cond_t *) in line 2652
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_cond_wait(pthread_cond_t *__restrict,pthread_mutex_t *__restrict) in line 2660
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_cond_timedwait(pthread_cond_t *__restrict,pthread_mutex_t *__restrict,__const struct timespec *__restrict) in line 2664
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function pthread_condattr_init(pthread_condattr_t *) in line 2672
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_condattr_destroy(pthread_condattr_t *) in line 2676
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_condattr_getpshared(__const pthread_condattr_t *__restrict,int *__restrict) in line 2680
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_condattr_setpshared(pthread_condattr_t *,int) in line 2686
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_condattr_getclock(__const pthread_condattr_t *__restrict,__clockid_t *__restrict) in line 2691
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_condattr_setclock(pthread_condattr_t *,__clockid_t) in line 2697
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_spin_init(pthread_spinlock_t *,int) in line 2701
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_spin_destroy(pthread_spinlock_t *) in line 2705
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_spin_lock(pthread_spinlock_t *) in line 2709
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_spin_trylock(pthread_spinlock_t *) in line 2713
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_spin_unlock(pthread_spinlock_t *) in line 2717
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_barrier_init(pthread_barrier_t *__restrict,__const pthread_barrierattr_t *__restrict,unsigned int) in line 2725
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function pthread_barrier_destroy(pthread_barrier_t *) in line 2731
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_barrier_wait(pthread_barrier_t *) in line 2735
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_barrierattr_init(pthread_barrierattr_t *) in line 2740
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_barrierattr_destroy(pthread_barrierattr_t *) in line 2744
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_barrierattr_getpshared(__const pthread_barrierattr_t *__restrict,int *__restrict) in line 2748
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_barrierattr_setpshared(pthread_barrierattr_t *,int) in line 2754
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_key_create(pthread_key_t *,void(*)(void *)) in line 2758
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_key_delete(pthread_key_t) in line 2763
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_getspecific(pthread_key_t) in line 2766
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_setspecific(pthread_key_t,__const void *) in line 2769
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_getcpuclockid(pthread_t,__clockid_t *) in line 2775
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_atfork(void(*)(void),void(*)(void),void(*)(void)) in line 2779
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function __ESBMC_yield() in line 2794
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setThread(void *) in line 2796
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable b defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function checkThread(void *) in line 2797
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable a defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable b defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function set() in line 2798
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 2799
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function main(int,char *) in line 2801
      protection public
      49 lines of code
      2 parameters
      11 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable iSet defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable iCheck defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   variable __fsid_t::__val in line 88
      protection public
   variable __mbstate_t::__count in line 177
      protection public
   variable __mbstate_t::__value in line 182
      protection public
   variable __mbstate_t::__value in line 182
      protection public
   variable __mbstate_t::__wch in line 180
      protection public
   variable __mbstate_t::__wchb in line 181
      protection public
   variable __mbstate_t::@9::__wch in line 180
      protection public
   variable __mbstate_t::@9::__wchb in line 181
      protection public
   variable _G_fpos_t::__pos in line 188
      protection public
   variable _G_fpos_t::__state in line 189
      protection public
   variable _G_fpos64_t::__pos in line 193
      protection public
   variable _G_fpos64_t::__state in line 194
      protection public
   variable __gconv_trans_data::__data in line 285
      protection public
   variable __gconv_trans_data::__next in line 286
      protection public
   variable __gconv_trans_data::__trans_context_fct in line 283
      protection public
   variable __gconv_trans_data::__trans_end_fct in line 284
      protection public
   variable __gconv_trans_data::__trans_fct in line 282
      protection public
   variable __gconv_step::__btowc_fct in line 302
      protection public
   variable __gconv_step::__counter in line 296
      protection public
   variable __gconv_step::__data in line 316
      protection public
   variable __gconv_step::__end_fct in line 304
      protection public
   variable __gconv_step::__fct in line 301
      protection public
   variable __gconv_step::__from_name in line 298
      protection public
   variable __gconv_step::__init_fct in line 303
      protection public
   variable __gconv_step::__max_needed_from in line 309
      protection public
   variable __gconv_step::__max_needed_to in line 311
      protection public
   variable __gconv_step::__min_needed_from in line 308
      protection public
   variable __gconv_step::__min_needed_to in line 310
      protection public
   variable __gconv_step::__modname in line 294
      protection public
   variable __gconv_step::__shlib_handle in line 293
      protection public
   variable __gconv_step::__stateful in line 314
      protection public
   variable __gconv_step::__to_name in line 299
      protection public
   variable __gconv_step_data::__flags in line 328
      protection public
   variable __gconv_step_data::__internal_use in line 336
      protection public
   variable __gconv_step_data::__invocation_counter in line 332
      protection public
   variable __gconv_step_data::__outbuf in line 323
      protection public
   variable __gconv_step_data::__outbufend in line 324
      protection public
   variable __gconv_step_data::__state in line 339
      protection public
   variable __gconv_step_data::__statep in line 338
      protection public
   variable __gconv_step_data::__trans in line 343
      protection public
   variable __gconv_info::__data in line 352
      protection public
   variable __gconv_info::__nsteps in line 350
      protection public
   variable __gconv_info::__steps in line 351
      protection public
   variable _G_iconv_t::__cd in line 352
      protection public
   variable _G_iconv_t::__combined in line 362
      protection public
   variable _G_iconv_t::__combined in line 362
      protection public
   variable _G_iconv_t::__data in line 352
      protection public
   variable _G_iconv_t::@10::__cd in line 352
      protection public
   variable _G_iconv_t::@10::__data in line 352
      protection public
   variable _IO_marker::_next in line 385
      protection public
   variable _IO_marker::_pos in line 390
      protection public
   variable _IO_marker::_sbuf in line 386
      protection public
   variable _IO_FILE::__pad1 in line 446
      protection public
   variable _IO_FILE::__pad2 in line 447
      protection public
   variable _IO_FILE::__pad3 in line 448
      protection public
   variable _IO_FILE::__pad4 in line 449
      protection public
   variable _IO_FILE::__pad5 in line 450
      protection public
   variable _IO_FILE::_chain in line 424
      protection public
   variable _IO_FILE::_cur_column in line 436
      protection public
   variable _IO_FILE::_fileno in line 426
      protection public
   variable _IO_FILE::_flags in line 404
      protection public
   variable _IO_FILE::_flags2 in line 430
      protection public
   variable _IO_FILE::_IO_backup_base in line 419
      protection public
   variable _IO_FILE::_IO_buf_base in line 415
      protection public
   variable _IO_FILE::_IO_buf_end in line 416
      protection public
   variable _IO_FILE::_IO_read_base in line 411
      protection public
   variable _IO_FILE::_IO_read_end in line 410
      protection public
   variable _IO_FILE::_IO_read_ptr in line 409
      protection public
   variable _IO_FILE::_IO_save_base in line 418
      protection public
   variable _IO_FILE::_IO_save_end in line 420
      protection public
   variable _IO_FILE::_IO_write_base in line 412
      protection public
   variable _IO_FILE::_IO_write_end in line 414
      protection public
   variable _IO_FILE::_IO_write_ptr in line 413
      protection public
   variable _IO_FILE::_lock in line 442
      protection public
   variable _IO_FILE::_markers in line 422
      protection public
   variable _IO_FILE::_mode in line 452
      protection public
   variable _IO_FILE::_offset in line 444
      protection public
   variable _IO_FILE::_old_offset in line 432
      protection public
   variable _IO_FILE::_shortbuf in line 438
      protection public
   variable _IO_FILE::_unused2 in line 454
      protection public
   variable _IO_FILE::_vtable_offset in line 437
      protection public
   variable ldiv_t::quot in line 950
      protection public
   variable ldiv_t::rem in line 951
      protection public
   variable timespec::tv_nsec in line 1228
      protection public
   variable timespec::tv_sec in line 1227
      protection public
   variable timeval::tv_sec in line 1236
      protection public
   variable timeval::tv_usec in line 1237
      protection public
   variable fd_set::__fds_bits in line 1258
      protection public
   variable pthread_attr_t::__align in line 1344
      protection public
   variable pthread_attr_t::__size in line 1343
      protection public
   variable __pthread_internal_list::__next in line 1352
      protection public
   variable __pthread_internal_list::__prev in line 1351
      protection public
   variable pthread_mutex_t::__align in line 1374
      protection public
   variable pthread_mutex_t::__data in line 1372
      protection public
   variable pthread_mutex_t::__size in line 1373
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__count in line 1360
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__kind in line 1367
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__list in line 1370
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__lock in line 1359
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__nusers in line 1363
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__owner in line 1361
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__spins in line 1369
      protection public
   variable pthread_mutexattr_t::__align in line 1380
      protection public
   variable pthread_mutexattr_t::__size in line 1379
      protection public
   variable pthread_cond_t::__align in line 1400
      protection public
   variable pthread_cond_t::__broadcast_seq in line 1397
      protection public
   variable pthread_cond_t::__data in line 1398
      protection public
   variable pthread_cond_t::__data in line 1398
      protection public
   variable pthread_cond_t::__futex in line 1391
      protection public
   variable pthread_cond_t::__lock in line 1390
      protection public
   variable pthread_cond_t::__mutex in line 1395
      protection public
   variable pthread_cond_t::__nwaiters in line 1396
      protection public
   variable pthread_cond_t::__size in line 1399
      protection public
   variable pthread_cond_t::__total_seq in line 1392
      protection public
   variable pthread_cond_t::__wakeup_seq in line 1393
      protection public
   variable pthread_cond_t::__woken_seq in line 1394
      protection public
   variable pthread_cond_t::@11::__broadcast_seq in line 1397
      protection public
   variable pthread_cond_t::@11::__futex in line 1391
      protection public
   variable pthread_cond_t::@11::__lock in line 1390
      protection public
   variable pthread_cond_t::@11::__mutex in line 1395
      protection public
   variable pthread_cond_t::@11::__nwaiters in line 1396
      protection public
   variable pthread_cond_t::@11::__total_seq in line 1392
      protection public
   variable pthread_cond_t::@11::__wakeup_seq in line 1393
      protection public
   variable pthread_cond_t::@11::__woken_seq in line 1394
      protection public
   variable pthread_condattr_t::__align in line 1406
      protection public
   variable pthread_condattr_t::__size in line 1405
      protection public
   variable pthread_rwlock_t::__align in line 1442
      protection public
   variable pthread_rwlock_t::__data in line 1439
      protection public
   variable pthread_rwlock_t::__data in line 1439
      protection public
   variable pthread_rwlock_t::__flags in line 1438
      protection public
   variable pthread_rwlock_t::__lock in line 1426
      protection public
   variable pthread_rwlock_t::__nr_readers in line 1427
      protection public
   variable pthread_rwlock_t::__nr_readers_queued in line 1430
      protection public
   variable pthread_rwlock_t::__nr_writers_queued in line 1431
      protection public
   variable pthread_rwlock_t::__pad1 in line 1433
      protection public
   variable pthread_rwlock_t::__pad2 in line 1434
      protection public
   variable pthread_rwlock_t::__pad3 in line 1435
      protection public
   variable pthread_rwlock_t::__readers_wakeup in line 1428
      protection public
   variable pthread_rwlock_t::__size in line 1441
      protection public
   variable pthread_rwlock_t::__writer in line 1432
      protection public
   variable pthread_rwlock_t::__writer_wakeup in line 1429
      protection public
   variable pthread_rwlock_t::@12::__flags in line 1438
      protection public
   variable pthread_rwlock_t::@12::__lock in line 1426
      protection public
   variable pthread_rwlock_t::@12::__nr_readers in line 1427
      protection public
   variable pthread_rwlock_t::@12::__nr_readers_queued in line 1430
      protection public
   variable pthread_rwlock_t::@12::__nr_writers_queued in line 1431
      protection public
   variable pthread_rwlock_t::@12::__pad1 in line 1433
      protection public
   variable pthread_rwlock_t::@12::__pad2 in line 1434
      protection public
   variable pthread_rwlock_t::@12::__pad3 in line 1435
      protection public
   variable pthread_rwlock_t::@12::__readers_wakeup in line 1428
      protection public
   variable pthread_rwlock_t::@12::__writer in line 1432
      protection public
   variable pthread_rwlock_t::@12::__writer_wakeup in line 1429
      protection public
   variable pthread_rwlockattr_t::__align in line 1448
      protection public
   variable pthread_rwlockattr_t::__size in line 1447
      protection public
   variable pthread_barrier_t::__align in line 1463
      protection public
   variable pthread_barrier_t::__size in line 1462
      protection public
   variable pthread_barrierattr_t::__align in line 1469
      protection public
   variable pthread_barrierattr_t::__size in line 1468
      protection public
   variable __sched_param::__sched_priority in line 1924
      protection public
   variable cpu_set_t::__bits in line 1936
      protection public
   variable itimerspec::it_interval in line 1936
      protection public
   variable itimerspec::it_value in line 1936
      protection public
   variable _pthread_cleanup_buffer::__arg in line 2274
      protection public
   variable _pthread_cleanup_buffer::__canceltype in line 2275
      protection public
   variable _pthread_cleanup_buffer::__prev in line 2276
      protection public
   variable _pthread_cleanup_buffer::__routine in line 2273
      protection public
   variable __pthread_cleanup_frame::__cancel_arg in line 2487
      protection public
   variable __pthread_cleanup_frame::__cancel_routine in line 2486
      protection public
   variable __pthread_cleanup_frame::__cancel_type in line 2489
      protection public
   variable __pthread_cleanup_frame::__do_it in line 2488
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/reorder_5_unsafe.c
module benchmarks-esbmc/pthread/reorder_5_unsafe.c
   enumeration @13 in line 214
      protection public
   enumeration @14 in line 232
      protection public
   enumeration __codecvt_result in line 396
      protection public
   enumeration @15 in line 2227
      protection public
   enumeration @16 in line 2236
      protection public
   enumeration @17 in line 2244
      protection public
   enumeration @18 in line 2254
      protection public
   enumeration @19 in line 2264
      protection public
   enumeration @20 in line 2281
      protection public
   enumeration @21 in line 2288
      protection public
   typedef size_t in line 36
      protection public
   typedef __u_char in line 49
      protection public
   typedef __u_short in line 50
      protection public
   typedef __u_int in line 51
      protection public
   typedef __u_long in line 52
      protection public
   typedef __int8_t in line 55
      protection public
   typedef __uint8_t in line 56
      protection public
   typedef __int16_t in line 57
      protection public
   typedef __uint16_t in line 58
      protection public
   typedef __int32_t in line 59
      protection public
   typedef __uint32_t in line 60
      protection public
   typedef __int64_t in line 62
      protection public
   typedef __uint64_t in line 63
      protection public
   typedef __quad_t in line 71
      protection public
   typedef __u_quad_t in line 72
      protection public
   typedef __dev_t in line 78
      protection public
   typedef __uid_t in line 79
      protection public
   typedef __gid_t in line 80
      protection public
   typedef __ino_t in line 81
      protection public
   typedef __ino64_t in line 82
      protection public
   typedef __mode_t in line 83
      protection public
   typedef __nlink_t in line 84
      protection public
   typedef __off_t in line 85
      protection public
   typedef __off64_t in line 86
      protection public
   typedef __pid_t in line 87
      protection public
   typedef __clock_t in line 89
      protection public
   typedef __rlim_t in line 90
      protection public
   typedef __rlim64_t in line 91
      protection public
   typedef __id_t in line 92
      protection public
   typedef __time_t in line 93
      protection public
   typedef __useconds_t in line 94
      protection public
   typedef __suseconds_t in line 95
      protection public
   typedef __daddr_t in line 97
      protection public
   typedef __swblk_t in line 98
      protection public
   typedef __key_t in line 99
      protection public
   typedef __clockid_t in line 102
      protection public
   typedef __timer_t in line 105
      protection public
   typedef __blksize_t in line 108
      protection public
   typedef __blkcnt_t in line 113
      protection public
   typedef __blkcnt64_t in line 114
      protection public
   typedef __fsblkcnt_t in line 117
      protection public
   typedef __fsblkcnt64_t in line 118
      protection public
   typedef __fsfilcnt_t in line 121
      protection public
   typedef __fsfilcnt64_t in line 122
      protection public
   typedef __ssize_t in line 124
      protection public
   typedef __loff_t in line 128
      protection public
   typedef __qaddr_t in line 129
      protection public
   typedef __caddr_t in line 130
      protection public
   typedef __intptr_t in line 133
      protection public
   typedef __socklen_t in line 136
      protection public
   typedef FILE in line 136
      protection public
   typedef __FILE in line 136
      protection public
   typedef wchar_t in line 162
      protection public
   typedef wint_t in line 164
      protection public
   typedef __gconv_fct in line 246
      protection public
   typedef __gconv_btowc_fct in line 251
      protection public
   typedef __gconv_init_fct in line 254
      protection public
   typedef __gconv_end_fct in line 255
      protection public
   typedef __gconv_trans_fct in line 259
      protection public
   typedef __gconv_trans_context_fct in line 267
      protection public
   typedef __gconv_trans_query_fct in line 272
      protection public
   typedef __gconv_trans_init_fct in line 276
      protection public
   typedef __gconv_trans_end_fct in line 277
      protection public
   typedef __gconv_t in line 353
      protection public
   typedef __attribute__ in line 365
      protection public
   typedef __gnuc_va_list in line 373
      protection public
   typedef _IO_lock_t in line 378
      protection public
   typedef _IO_FILE in line 378
      protection public
   typedef __io_read_fn in line 468
      protection public
   typedef __io_write_fn in line 476
      protection public
   typedef __io_seek_fn in line 485
      protection public
   typedef __io_close_fn in line 488
      protection public
   typedef sigset_t in line 1217
      protection public
   typedef suseconds_t in line 1242
      protection public
   typedef __fd_mask in line 1248
      protection public
   typedef fd_mask in line 1268
      protection public
   typedef blkcnt_t in line 1323
      protection public
   typedef fsblkcnt_t in line 1327
      protection public
   typedef fsfilcnt_t in line 1331
      protection public
   typedef pthread_t in line 1338
      protection public
   typedef __pthread_list_t in line 1353
      protection public
   typedef pthread_key_t in line 1411
      protection public
   typedef pthread_once_t in line 1415
      protection public
   typedef pthread_spinlock_t in line 1455
      protection public
   typedef __cpu_mask in line 1927
      protection public
   variable _IO_2_1_stdin_ in line 378
      protection public
   variable _IO_2_1_stdout_ in line 378
      protection public
   variable _IO_2_1_stderr_ in line 378
      protection public
   variable div_t in line 944
      protection public
   variable __sigset_t in line 1212
      protection public
   variable iSet in line 2788
      protection public
   variable iCheck in line 2789
      protection public
   variable a in line 2791
      protection public
   variable b in line 2792
      protection public
   enumvalue __GCONV_OK in line 215
      protection public
   enumvalue __GCONV_NOCONV in line 216
      protection public
   enumvalue __GCONV_NODB in line 217
      protection public
   enumvalue __GCONV_NOMEM in line 218
      protection public
   enumvalue __GCONV_EMPTY_INPUT in line 220
      protection public
   enumvalue __GCONV_FULL_OUTPUT in line 221
      protection public
   enumvalue __GCONV_ILLEGAL_INPUT in line 222
      protection public
   enumvalue __GCONV_INCOMPLETE_INPUT in line 223
      protection public
   enumvalue __GCONV_ILLEGAL_DESCRIPTOR in line 225
      protection public
   enumvalue __GCONV_INTERNAL_ERROR in line 227
      protection public
   enumvalue __GCONV_IS_LAST in line 233
      protection public
   enumvalue __GCONV_IGNORE_ERRORS in line 235
      protection public
   enumvalue __codecvt_ok in line 397
      protection public
   enumvalue __codecvt_partial in line 398
      protection public
   enumvalue __codecvt_error in line 399
      protection public
   enumvalue __codecvt_noconv in line 401
      protection public
   enumvalue PTHREAD_MUTEX_TIMED_NP in line 2228
      protection public
   enumvalue PTHREAD_MUTEX_RECURSIVE_NP in line 2229
      protection public
   enumvalue PTHREAD_MUTEX_ERRORCHECK_NP in line 2230
      protection public
   enumvalue PTHREAD_MUTEX_ADAPTIVE_NP in line 2233
      protection public
   enumvalue PTHREAD_RWLOCK_PREFER_READER_NP in line 2237
      protection public
   enumvalue PTHREAD_RWLOCK_PREFER_WRITER_NP in line 2238
      protection public
   enumvalue PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP in line 2239
      protection public
   enumvalue PTHREAD_RWLOCK_DEFAULT_NP in line 2241
      protection public
   enumvalue PTHREAD_INHERIT_SCHED in line 2245
      protection public
   enumvalue PTHREAD_EXPLICIT_SCHED in line 2249
      protection public
   enumvalue PTHREAD_SCOPE_SYSTEM in line 2255
      protection public
   enumvalue PTHREAD_SCOPE_PROCESS in line 2259
      protection public
   enumvalue PTHREAD_PROCESS_PRIVATE in line 2265
      protection public
   enumvalue PTHREAD_PROCESS_SHARED in line 2269
      protection public
   enumvalue PTHREAD_CANCEL_ENABLE in line 2282
      protection public
   enumvalue PTHREAD_CANCEL_DISABLE in line 2286
      protection public
   enumvalue PTHREAD_CANCEL_DEFERRED in line 2289
      protection public
   enumvalue PTHREAD_CANCEL_ASYNCHRONOUS in line 2293
      protection public
   function __underflow(_IO_FILE *) in line 490
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __uflow(_IO_FILE *) in line 491
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __overflow(_IO_FILE *,int) in line 492
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __wunderflow(_IO_FILE *) in line 493
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __wuflow(_IO_FILE *) in line 494
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __woverflow(_IO_FILE *,wint_t) in line 495
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function _IO_getc(_IO_FILE *) in line 497
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _IO_putc(int,_IO_FILE *) in line 498
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function _IO_feof(_IO_FILE *) in line 499
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _IO_ferror(_IO_FILE *) in line 500
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _IO_peekc_locked(_IO_FILE *) in line 502
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _IO_flockfile(_IO_FILE *) in line 508
      protection public
      437 lines of code
      1 parameters
      1 conditional paths
   function __ctype_get_mb_cur_max(void) in line 957
      protection public
      256 lines of code
      1 parameters
      1 conditional paths
   function select(int,fd_set *__restrict,fd_set *__restrict,fd_set *__restrict,struct timeval *__restrict) in line 1272
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function pselect(int,fd_set *__restrict,fd_set *__restrict,fd_set *__restrict,const struct timespec *__restrict,const __sigset_t *__restrict) in line 1277
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function gnu_dev_major(unsigned long long int) in line 1291
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function gnu_dev_minor(unsigned long long int) in line 1294
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function gnu_dev_makedev(unsigned int,unsigned int) in line 1297
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __attribute__((__nothrow__)) in line 1303
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function gnu_dev_minor(unsigned long long int) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function gnu_dev_makedev(unsigned int,unsigned int) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function random(void) in line 1482
      protection public
      32 lines of code
      1 parameters
      1 conditional paths
      uses function random_r(struct random_data *__restrict,int32_t *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function srandom_r(unsigned int,struct random_data *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function initstate_r(unsigned int,char *__restrict,size_t,struct random_data *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function setstate_r(char *__restrict,struct random_data *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function random_r(struct random_data *__restrict,int32_t *__restrict) in line 1515
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function srandom_r(unsigned int,struct random_data *) in line 1518
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function initstate_r(unsigned int,char *__restrict,size_t,struct random_data *__restrict) in line 1521
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function setstate_r(char *__restrict,struct random_data *__restrict) in line 1526
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function rand(void) in line 1535
      protection public
      46 lines of code
      1 parameters
      1 conditional paths
      uses function drand48_r(struct drand48_data *__restrict,double *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function erand48_r(unsigned short int,struct drand48_data *__restrict,double *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function lrand48_r(struct drand48_data *__restrict,long int *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function nrand48_r(unsigned short int,struct drand48_data *__restrict,long int *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function mrand48_r(struct drand48_data *__restrict,long int *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function jrand48_r(unsigned short int,struct drand48_data *__restrict,long int *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function srand48_r(long int,struct drand48_data *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function seed48_r(unsigned short int,struct drand48_data *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function lcong48_r(unsigned short int,struct drand48_data *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function malloc(size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function calloc(size_t,size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function realloc(void *,size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function free(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function cfree(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function alloca(size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function valloc(size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function posix_memalign(void **,size_t,size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function drand48_r(struct drand48_data *__restrict,double *__restrict) in line 1583
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function erand48_r(unsigned short int,struct drand48_data *__restrict,double *__restrict) in line 1585
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function lrand48_r(struct drand48_data *__restrict,long int *__restrict) in line 1590
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function nrand48_r(unsigned short int,struct drand48_data *__restrict,long int *__restrict) in line 1593
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function mrand48_r(struct drand48_data *__restrict,long int *__restrict) in line 1599
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function jrand48_r(unsigned short int,struct drand48_data *__restrict,long int *__restrict) in line 1602
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function srand48_r(long int,struct drand48_data *) in line 1608
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function seed48_r(unsigned short int,struct drand48_data *) in line 1611
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function lcong48_r(unsigned short int,struct drand48_data *) in line 1614
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function malloc(size_t) in line 1626
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function calloc(size_t,size_t) in line 1628
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function realloc(void *,size_t) in line 1637
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function free(void *) in line 1640
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cfree(void *) in line 1645
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function alloca(size_t) in line 1660
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function valloc(size_t) in line 1672
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function posix_memalign(void **,size_t,size_t) in line 1677
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function abort(extern int on_exit ( (*__func) (int __status) in line 1683
      protection public
      219 lines of code
      1 parameters
      1 conditional paths
   function clone(int(*)(void *__arg),void *,int,void *,...) in line 1907
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function unshare(int) in line 1911
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function sched_setparam(__pid_t,__const struct sched_param *) in line 1946
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function sched_getparam(__pid_t,struct sched_param *) in line 1950
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function sched_setscheduler(__pid_t,int,__const struct sched_param *) in line 1953
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function sched_getscheduler(__pid_t) in line 1957
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function sched_yield(void) in line 1960
      protection public
      60 lines of code
      1 parameters
      1 conditional paths
   function clock(void) in line 2040
      protection public
      183 lines of code
      1 parameters
      1 conditional paths
   function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) in line 2300
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function pthread_exit(void *) in line 2309
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_join(pthread_t,void **) in line 2317
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_detach(pthread_t) in line 2319
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_self(void) in line 2323
      protection public
      160 lines of code
      1 parameters
      1 conditional paths
   function __attribute__((__aligned__)) in line 2482
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __pthread_register_cancel(__pthread_unwind_buf_t *) in line 2492
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __pthread_unregister_cancel(__pthread_unwind_buf_t *) in line 2495
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __pthread_unwind_next(__pthread_unwind_buf_t *) in line 2498
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __sigsetjmp(struct __jmp_buf_tag *,int) in line 2508
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) in line 2514
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_mutex_destroy(pthread_mutex_t *) in line 2519
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutex_trylock(pthread_mutex_t *) in line 2523
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutex_lock(pthread_mutex_t *) in line 2527
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutex_timedlock(pthread_mutex_t *__restrict,__const struct timespec *__restrict) in line 2532
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_mutex_unlock(pthread_mutex_t *) in line 2538
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutexattr_init(pthread_mutexattr_t *) in line 2541
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutexattr_destroy(pthread_mutexattr_t *) in line 2545
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_mutexattr_getpshared(__const pthread_mutexattr_t *__restrict,int *__restrict) in line 2549
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_mutexattr_setpshared(pthread_mutexattr_t *,int) in line 2555
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlock_init(pthread_rwlock_t *__restrict,__const pthread_rwlockattr_t *__restrict) in line 2559
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlock_destroy(pthread_rwlock_t *) in line 2564
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlock_rdlock(pthread_rwlock_t *) in line 2568
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlock_tryrdlock(pthread_rwlock_t *) in line 2572
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict,__const struct timespec *__restrict) in line 2577
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlock_wrlock(pthread_rwlock_t *) in line 2583
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlock_trywrlock(pthread_rwlock_t *) in line 2587
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict,__const struct timespec *__restrict) in line 2592
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlock_unlock(pthread_rwlock_t *) in line 2598
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlockattr_init(pthread_rwlockattr_t *) in line 2605
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlockattr_destroy(pthread_rwlockattr_t *) in line 2609
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_rwlockattr_getpshared(__const pthread_rwlockattr_t *__restrict,int *__restrict) in line 2613
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlockattr_setpshared(pthread_rwlockattr_t *,int) in line 2619
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlockattr_getkind_np(__const pthread_rwlockattr_t *__restrict,int *__restrict) in line 2624
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *,int) in line 2630
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_cond_init(pthread_cond_t *__restrict,__const pthread_condattr_t *__restrict) in line 2639
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_cond_destroy(pthread_cond_t *) in line 2644
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_cond_signal(pthread_cond_t *) in line 2648
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_cond_broadcast(pthread_cond_t *) in line 2652
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_cond_wait(pthread_cond_t *__restrict,pthread_mutex_t *__restrict) in line 2660
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_cond_timedwait(pthread_cond_t *__restrict,pthread_mutex_t *__restrict,__const struct timespec *__restrict) in line 2664
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function pthread_condattr_init(pthread_condattr_t *) in line 2672
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_condattr_destroy(pthread_condattr_t *) in line 2676
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_condattr_getpshared(__const pthread_condattr_t *__restrict,int *__restrict) in line 2680
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_condattr_setpshared(pthread_condattr_t *,int) in line 2686
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_condattr_getclock(__const pthread_condattr_t *__restrict,__clockid_t *__restrict) in line 2691
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_condattr_setclock(pthread_condattr_t *,__clockid_t) in line 2697
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_spin_init(pthread_spinlock_t *,int) in line 2701
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_spin_destroy(pthread_spinlock_t *) in line 2705
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_spin_lock(pthread_spinlock_t *) in line 2709
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_spin_trylock(pthread_spinlock_t *) in line 2713
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_spin_unlock(pthread_spinlock_t *) in line 2717
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_barrier_init(pthread_barrier_t *__restrict,__const pthread_barrierattr_t *__restrict,unsigned int) in line 2725
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function pthread_barrier_destroy(pthread_barrier_t *) in line 2731
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_barrier_wait(pthread_barrier_t *) in line 2735
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_barrierattr_init(pthread_barrierattr_t *) in line 2740
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_barrierattr_destroy(pthread_barrierattr_t *) in line 2744
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_barrierattr_getpshared(__const pthread_barrierattr_t *__restrict,int *__restrict) in line 2748
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_barrierattr_setpshared(pthread_barrierattr_t *,int) in line 2754
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_key_create(pthread_key_t *,void(*)(void *)) in line 2758
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_key_delete(pthread_key_t) in line 2763
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_getspecific(pthread_key_t) in line 2766
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pthread_setspecific(pthread_key_t,__const void *) in line 2769
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_getcpuclockid(pthread_t,__clockid_t *) in line 2775
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pthread_atfork(void(*)(void),void(*)(void),void(*)(void)) in line 2779
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function __ESBMC_yield() in line 2794
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setThread(void *) in line 2796
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in benchmarks-esbmc/pthread/reorder_5_unsafe.c
      uses variable b defined in benchmarks-esbmc/pthread/reorder_5_unsafe.c
   function checkThread(void *) in line 2797
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable a defined in benchmarks-esbmc/pthread/reorder_5_unsafe.c
      uses variable b defined in benchmarks-esbmc/pthread/reorder_5_unsafe.c
   function set() in line 2798
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 2799
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function main(int,char *) in line 2801
      protection public
      49 lines of code
      2 parameters
      11 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable iSet defined in benchmarks-esbmc/pthread/reorder_5_unsafe.c
      uses variable iCheck defined in benchmarks-esbmc/pthread/reorder_5_unsafe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   variable __fsid_t::__val in line 88
      protection public
   variable __mbstate_t::__count in line 177
      protection public
   variable __mbstate_t::__value in line 182
      protection public
   variable __mbstate_t::__value in line 182
      protection public
   variable __mbstate_t::__wch in line 180
      protection public
   variable __mbstate_t::__wchb in line 181
      protection public
   variable __mbstate_t::@22::__wch in line 180
      protection public
   variable __mbstate_t::@22::__wchb in line 181
      protection public
   variable _G_fpos_t::__pos in line 188
      protection public
   variable _G_fpos_t::__state in line 189
      protection public
   variable _G_fpos64_t::__pos in line 193
      protection public
   variable _G_fpos64_t::__state in line 194
      protection public
   variable __gconv_trans_data::__data in line 285
      protection public
   variable __gconv_trans_data::__next in line 286
      protection public
   variable __gconv_trans_data::__trans_context_fct in line 283
      protection public
   variable __gconv_trans_data::__trans_end_fct in line 284
      protection public
   variable __gconv_trans_data::__trans_fct in line 282
      protection public
   variable __gconv_step::__btowc_fct in line 302
      protection public
   variable __gconv_step::__counter in line 296
      protection public
   variable __gconv_step::__data in line 316
      protection public
   variable __gconv_step::__end_fct in line 304
      protection public
   variable __gconv_step::__fct in line 301
      protection public
   variable __gconv_step::__from_name in line 298
      protection public
   variable __gconv_step::__init_fct in line 303
      protection public
   variable __gconv_step::__max_needed_from in line 309
      protection public
   variable __gconv_step::__max_needed_to in line 311
      protection public
   variable __gconv_step::__min_needed_from in line 308
      protection public
   variable __gconv_step::__min_needed_to in line 310
      protection public
   variable __gconv_step::__modname in line 294
      protection public
   variable __gconv_step::__shlib_handle in line 293
      protection public
   variable __gconv_step::__stateful in line 314
      protection public
   variable __gconv_step::__to_name in line 299
      protection public
   variable __gconv_step_data::__flags in line 328
      protection public
   variable __gconv_step_data::__internal_use in line 336
      protection public
   variable __gconv_step_data::__invocation_counter in line 332
      protection public
   variable __gconv_step_data::__outbuf in line 323
      protection public
   variable __gconv_step_data::__outbufend in line 324
      protection public
   variable __gconv_step_data::__state in line 339
      protection public
   variable __gconv_step_data::__statep in line 338
      protection public
   variable __gconv_step_data::__trans in line 343
      protection public
   variable __gconv_info::__data in line 352
      protection public
   variable __gconv_info::__nsteps in line 350
      protection public
   variable __gconv_info::__steps in line 351
      protection public
   variable _G_iconv_t::__cd in line 352
      protection public
   variable _G_iconv_t::__combined in line 362
      protection public
   variable _G_iconv_t::__combined in line 362
      protection public
   variable _G_iconv_t::__data in line 352
      protection public
   variable _G_iconv_t::@23::__cd in line 352
      protection public
   variable _G_iconv_t::@23::__data in line 352
      protection public
   variable _IO_marker::_next in line 385
      protection public
   variable _IO_marker::_pos in line 390
      protection public
   variable _IO_marker::_sbuf in line 386
      protection public
   variable _IO_FILE::__pad1 in line 446
      protection public
   variable _IO_FILE::__pad2 in line 447
      protection public
   variable _IO_FILE::__pad3 in line 448
      protection public
   variable _IO_FILE::__pad4 in line 449
      protection public
   variable _IO_FILE::__pad5 in line 450
      protection public
   variable _IO_FILE::_chain in line 424
      protection public
   variable _IO_FILE::_cur_column in line 436
      protection public
   variable _IO_FILE::_fileno in line 426
      protection public
   variable _IO_FILE::_flags in line 404
      protection public
   variable _IO_FILE::_flags2 in line 430
      protection public
   variable _IO_FILE::_IO_backup_base in line 419
      protection public
   variable _IO_FILE::_IO_buf_base in line 415
      protection public
   variable _IO_FILE::_IO_buf_end in line 416
      protection public
   variable _IO_FILE::_IO_read_base in line 411
      protection public
   variable _IO_FILE::_IO_read_end in line 410
      protection public
   variable _IO_FILE::_IO_read_ptr in line 409
      protection public
   variable _IO_FILE::_IO_save_base in line 418
      protection public
   variable _IO_FILE::_IO_save_end in line 420
      protection public
   variable _IO_FILE::_IO_write_base in line 412
      protection public
   variable _IO_FILE::_IO_write_end in line 414
      protection public
   variable _IO_FILE::_IO_write_ptr in line 413
      protection public
   variable _IO_FILE::_lock in line 442
      protection public
   variable _IO_FILE::_markers in line 422
      protection public
   variable _IO_FILE::_mode in line 452
      protection public
   variable _IO_FILE::_offset in line 444
      protection public
   variable _IO_FILE::_old_offset in line 432
      protection public
   variable _IO_FILE::_shortbuf in line 438
      protection public
   variable _IO_FILE::_unused2 in line 454
      protection public
   variable _IO_FILE::_vtable_offset in line 437
      protection public
   variable ldiv_t::quot in line 950
      protection public
   variable ldiv_t::rem in line 951
      protection public
   variable timespec::tv_nsec in line 1228
      protection public
   variable timespec::tv_sec in line 1227
      protection public
   variable timeval::tv_sec in line 1236
      protection public
   variable timeval::tv_usec in line 1237
      protection public
   variable fd_set::__fds_bits in line 1258
      protection public
   variable pthread_attr_t::__align in line 1344
      protection public
   variable pthread_attr_t::__size in line 1343
      protection public
   variable __pthread_internal_list::__next in line 1352
      protection public
   variable __pthread_internal_list::__prev in line 1351
      protection public
   variable pthread_mutex_t::__align in line 1374
      protection public
   variable pthread_mutex_t::__data in line 1372
      protection public
   variable pthread_mutex_t::__size in line 1373
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__count in line 1360
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__kind in line 1367
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__list in line 1370
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__lock in line 1359
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__nusers in line 1363
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__owner in line 1361
      protection public
   variable pthread_mutex_t::__pthread_mutex_s::__spins in line 1369
      protection public
   variable pthread_mutexattr_t::__align in line 1380
      protection public
   variable pthread_mutexattr_t::__size in line 1379
      protection public
   variable pthread_cond_t::__align in line 1400
      protection public
   variable pthread_cond_t::__broadcast_seq in line 1397
      protection public
   variable pthread_cond_t::__data in line 1398
      protection public
   variable pthread_cond_t::__data in line 1398
      protection public
   variable pthread_cond_t::__futex in line 1391
      protection public
   variable pthread_cond_t::__lock in line 1390
      protection public
   variable pthread_cond_t::__mutex in line 1395
      protection public
   variable pthread_cond_t::__nwaiters in line 1396
      protection public
   variable pthread_cond_t::__size in line 1399
      protection public
   variable pthread_cond_t::__total_seq in line 1392
      protection public
   variable pthread_cond_t::__wakeup_seq in line 1393
      protection public
   variable pthread_cond_t::__woken_seq in line 1394
      protection public
   variable pthread_cond_t::@24::__broadcast_seq in line 1397
      protection public
   variable pthread_cond_t::@24::__futex in line 1391
      protection public
   variable pthread_cond_t::@24::__lock in line 1390
      protection public
   variable pthread_cond_t::@24::__mutex in line 1395
      protection public
   variable pthread_cond_t::@24::__nwaiters in line 1396
      protection public
   variable pthread_cond_t::@24::__total_seq in line 1392
      protection public
   variable pthread_cond_t::@24::__wakeup_seq in line 1393
      protection public
   variable pthread_cond_t::@24::__woken_seq in line 1394
      protection public
   variable pthread_condattr_t::__align in line 1406
      protection public
   variable pthread_condattr_t::__size in line 1405
      protection public
   variable pthread_rwlock_t::__align in line 1442
      protection public
   variable pthread_rwlock_t::__data in line 1439
      protection public
   variable pthread_rwlock_t::__data in line 1439
      protection public
   variable pthread_rwlock_t::__flags in line 1438
      protection public
   variable pthread_rwlock_t::__lock in line 1426
      protection public
   variable pthread_rwlock_t::__nr_readers in line 1427
      protection public
   variable pthread_rwlock_t::__nr_readers_queued in line 1430
      protection public
   variable pthread_rwlock_t::__nr_writers_queued in line 1431
      protection public
   variable pthread_rwlock_t::__pad1 in line 1433
      protection public
   variable pthread_rwlock_t::__pad2 in line 1434
      protection public
   variable pthread_rwlock_t::__pad3 in line 1435
      protection public
   variable pthread_rwlock_t::__readers_wakeup in line 1428
      protection public
   variable pthread_rwlock_t::__size in line 1441
      protection public
   variable pthread_rwlock_t::__writer in line 1432
      protection public
   variable pthread_rwlock_t::__writer_wakeup in line 1429
      protection public
   variable pthread_rwlock_t::@25::__flags in line 1438
      protection public
   variable pthread_rwlock_t::@25::__lock in line 1426
      protection public
   variable pthread_rwlock_t::@25::__nr_readers in line 1427
      protection public
   variable pthread_rwlock_t::@25::__nr_readers_queued in line 1430
      protection public
   variable pthread_rwlock_t::@25::__nr_writers_queued in line 1431
      protection public
   variable pthread_rwlock_t::@25::__pad1 in line 1433
      protection public
   variable pthread_rwlock_t::@25::__pad2 in line 1434
      protection public
   variable pthread_rwlock_t::@25::__pad3 in line 1435
      protection public
   variable pthread_rwlock_t::@25::__readers_wakeup in line 1428
      protection public
   variable pthread_rwlock_t::@25::__writer in line 1432
      protection public
   variable pthread_rwlock_t::@25::__writer_wakeup in line 1429
      protection public
   variable pthread_rwlockattr_t::__align in line 1448
      protection public
   variable pthread_rwlockattr_t::__size in line 1447
      protection public
   variable pthread_barrier_t::__align in line 1463
      protection public
   variable pthread_barrier_t::__size in line 1462
      protection public
   variable pthread_barrierattr_t::__align in line 1469
      protection public
   variable pthread_barrierattr_t::__size in line 1468
      protection public
   variable __sched_param::__sched_priority in line 1924
      protection public
   variable cpu_set_t::__bits in line 1936
      protection public
   variable itimerspec::it_interval in line 1936
      protection public
   variable itimerspec::it_value in line 1936
      protection public
   variable _pthread_cleanup_buffer::__arg in line 2274
      protection public
   variable _pthread_cleanup_buffer::__canceltype in line 2275
      protection public
   variable _pthread_cleanup_buffer::__prev in line 2276
      protection public
   variable _pthread_cleanup_buffer::__routine in line 2273
      protection public
   variable __pthread_cleanup_frame::__cancel_arg in line 2487
      protection public
   variable __pthread_cleanup_frame::__cancel_routine in line 2486
      protection public
   variable __pthread_cleanup_frame::__cancel_type in line 2489
      protection public
   variable __pthread_cleanup_frame::__do_it in line 2488
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
module benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
   variable iSet in line 6
      protection public
   variable iCheck in line 7
      protection public
   variable a in line 9
      protection public
   variable b in line 10
      protection public
   function __ESBMC_yield() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function set() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 15
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setThread(void *) in line 17
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
      uses variable b defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
   function checkThread(void *) in line 24
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable a defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
      uses variable b defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
   function main(int,char *) in line 36
      protection public
      49 lines of code
      2 parameters
      11 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable iSet defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
      uses variable iCheck defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/reorder_5_unsafe3.c
module benchmarks-esbmc/pthread/reorder_5_unsafe3.c
   variable iSet in line 6
      protection public
   variable iCheck in line 7
      protection public
   variable a in line 9
      protection public
   variable b in line 10
      protection public
   function __ESBMC_yield() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function set() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 15
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setThread(void *) in line 17
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in benchmarks-esbmc/pthread/reorder_5_unsafe3.c
      uses variable b defined in benchmarks-esbmc/pthread/reorder_5_unsafe3.c
   function checkThread(void *) in line 24
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable a defined in benchmarks-esbmc/pthread/reorder_5_unsafe3.c
      uses variable b defined in benchmarks-esbmc/pthread/reorder_5_unsafe3.c
   function main(int,char *) in line 36
      protection public
      49 lines of code
      2 parameters
      11 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable iSet defined in benchmarks-esbmc/pthread/reorder_5_unsafe3.c
      uses variable iCheck defined in benchmarks-esbmc/pthread/reorder_5_unsafe3.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe3.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
module benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
   variable iSet in line 6
      protection public
   variable iCheck in line 7
      protection public
   variable a in line 9
      protection public
   variable b in line 10
      protection public
   function set() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setThread(void *) in line 16
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
      uses variable b defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
   function checkThread(void *) in line 23
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable a defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
      uses variable b defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
   function main(void) in line 36
      protection public
      53 lines of code
      1 parameters
      9 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable iSet defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
      uses variable iCheck defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/reorder_5_unsafe_2.c
module benchmarks-esbmc/pthread/reorder_5_unsafe_2.c
   variable iSet in line 6
      protection public
   variable iCheck in line 7
      protection public
   variable a in line 9
      protection public
   variable b in line 10
      protection public
   function set() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function check() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setThread(void *) in line 16
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in benchmarks-esbmc/pthread/reorder_5_unsafe_2.c
      uses variable b defined in benchmarks-esbmc/pthread/reorder_5_unsafe_2.c
   function checkThread(void *) in line 23
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable a defined in benchmarks-esbmc/pthread/reorder_5_unsafe_2.c
      uses variable b defined in benchmarks-esbmc/pthread/reorder_5_unsafe_2.c
   function main(void) in line 36
      protection public
      53 lines of code
      1 parameters
      9 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable iSet defined in benchmarks-esbmc/pthread/reorder_5_unsafe_2.c
      uses variable iCheck defined in benchmarks-esbmc/pthread/reorder_5_unsafe_2.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function setThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
      uses function checkThread(void *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe_2.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/stack_safe.c
module benchmarks-cbmc-4.5/pthread/stack_safe.c
   macro definition TRUE in line 4
      protection public
   macro definition FALSE in line 5
      protection public
   macro definition SIZE in line 6
      protection public
   macro definition OVERFLOW in line 7
      protection public
   macro definition UNDERFLOW in line 8
      protection public
   variable top in line 11
      protection public
   variable arr in line 12
      protection public
   variable m in line 13
      protection public
   variable flag in line 14
      protection public
   function __VERIFIER_nondet_uint() in line 10
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function error(void) in line 16
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function inc_top(void) in line 23
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
   function dec_top(void) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
   function get_top(void) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
   function stack_empty(void) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses macro definition TRUE defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses macro definition FALSE defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
   function push(unsigned int *,int) in line 43
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses macro definition OVERFLOW defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function inc_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
   function pop(unsigned int *) in line 58
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses macro definition UNDERFLOW defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function dec_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
   function t1(void *) in line 73
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function push(unsigned int *,int) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses variable arr defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses macro definition OVERFLOW defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function t2(void *) in line 88
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function pop(unsigned int *) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses variable arr defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses macro definition UNDERFLOW defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function main(void) in line 105
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/stack_safe.c
module benchmarks-esbmc/pthread/stack_safe.c
   macro definition TRUE in line 4
      protection public
   macro definition FALSE in line 5
      protection public
   macro definition SIZE in line 6
      protection public
   macro definition OVERFLOW in line 7
      protection public
   macro definition UNDERFLOW in line 8
      protection public
   variable top in line 11
      protection public
   variable arr in line 12
      protection public
   variable m in line 13
      protection public
   variable flag in line 14
      protection public
   function __VERIFIER_nondet_uint() in line 10
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function error(void) in line 16
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function inc_top(void) in line 23
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-esbmc/pthread/stack_safe.c
   function dec_top(void) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-esbmc/pthread/stack_safe.c
   function get_top(void) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-esbmc/pthread/stack_safe.c
   function stack_empty(void) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-esbmc/pthread/stack_safe.c
      uses macro definition TRUE defined in benchmarks-esbmc/pthread/stack_safe.c
      uses macro definition FALSE defined in benchmarks-esbmc/pthread/stack_safe.c
   function push(unsigned int *,int) in line 43
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable top defined in benchmarks-esbmc/pthread/stack_safe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/stack_safe.c
      uses macro definition OVERFLOW defined in benchmarks-esbmc/pthread/stack_safe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function inc_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
   function pop(unsigned int *) in line 58
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable top defined in benchmarks-esbmc/pthread/stack_safe.c
      uses macro definition UNDERFLOW defined in benchmarks-esbmc/pthread/stack_safe.c
      uses function dec_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
   function t1(void *) in line 73
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/stack_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function push(unsigned int *,int) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses variable arr defined in benchmarks-esbmc/pthread/stack_safe.c
      uses macro definition OVERFLOW defined in benchmarks-esbmc/pthread/stack_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function t2(void *) in line 88
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/stack_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses variable top defined in benchmarks-esbmc/pthread/stack_safe.c
      uses function pop(unsigned int *) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses variable arr defined in benchmarks-esbmc/pthread/stack_safe.c
      uses macro definition UNDERFLOW defined in benchmarks-esbmc/pthread/stack_safe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function main(void) in line 105
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/stack_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/stack_unsafe.c
module benchmarks-cbmc-4.5/pthread/stack_unsafe.c
   macro definition TRUE in line 4
      protection public
   macro definition FALSE in line 5
      protection public
   macro definition SIZE in line 6
      protection public
   macro definition OVERFLOW in line 7
      protection public
   macro definition UNDERFLOW in line 8
      protection public
   variable top in line 11
      protection public
   variable arr in line 12
      protection public
   variable m in line 13
      protection public
   variable flag in line 14
      protection public
   function __VERIFIER_nondet_uint() in line 10
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function error(void) in line 16
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function inc_top(void) in line 23
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
   function dec_top(void) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
   function get_top(void) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
   function stack_empty(void) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses macro definition TRUE defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses macro definition FALSE defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
   function push(unsigned int *,int) in line 43
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable top defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses macro definition OVERFLOW defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function inc_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
   function pop(unsigned int *) in line 58
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses macro definition UNDERFLOW defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function dec_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
   function t1(void *) in line 73
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function push(unsigned int *,int) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses variable arr defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses macro definition OVERFLOW defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses variable flag defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses macro definition TRUE defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function t2(void *) in line 89
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses variable flag defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function pop(unsigned int *) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses variable arr defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses macro definition UNDERFLOW defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function main(void) in line 106
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/stack_unsafe.c
module benchmarks-esbmc/pthread/stack_unsafe.c
   macro definition TRUE in line 4
      protection public
   macro definition FALSE in line 5
      protection public
   macro definition SIZE in line 6
      protection public
   macro definition OVERFLOW in line 7
      protection public
   macro definition UNDERFLOW in line 8
      protection public
   variable top in line 11
      protection public
   variable arr in line 12
      protection public
   variable m in line 13
      protection public
   variable flag in line 14
      protection public
   function __VERIFIER_nondet_uint() in line 10
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function error(void) in line 16
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function inc_top(void) in line 23
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-esbmc/pthread/stack_unsafe.c
   function dec_top(void) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-esbmc/pthread/stack_unsafe.c
   function get_top(void) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-esbmc/pthread/stack_unsafe.c
   function stack_empty(void) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable top defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses macro definition TRUE defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses macro definition FALSE defined in benchmarks-esbmc/pthread/stack_unsafe.c
   function push(unsigned int *,int) in line 43
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable top defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses macro definition OVERFLOW defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses variable x defined in benchmarks-cbmc-4.5/pthread-atomic/_cs_dekker_safe.c
      uses function inc_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
   function pop(unsigned int *) in line 58
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function get_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses macro definition UNDERFLOW defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses function dec_top(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
   function t1(void *) in line 73
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function __VERIFIER_nondet_uint() defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function push(unsigned int *,int) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses variable arr defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses macro definition OVERFLOW defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses variable flag defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses macro definition TRUE defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function t2(void *) in line 89
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition SIZE defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses variable flag defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function pop(unsigned int *) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses variable arr defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses macro definition UNDERFLOW defined in benchmarks-esbmc/pthread/stack_unsafe.c
      uses function error(void) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function main(void) in line 106
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/stack_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/stateful_safe.c
module benchmarks-cbmc-4.5/pthread/stateful_safe.c
   variable ma in line 3
      protection public
   variable mb in line 3
      protection public
   variable data1 in line 4
      protection public
   variable data2 in line 4
      protection public
   function thread1(void *) in line 6
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
   function thread2(void *) in line 18
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
   function main(void) in line 30
      protection public
      24 lines of code
      1 parameters
      3 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses variable mb defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/stateful_safe.c
module benchmarks-esbmc/pthread/stateful_safe.c
   variable ma in line 3
      protection public
   variable mb in line 3
      protection public
   variable data1 in line 4
      protection public
   variable data2 in line 4
      protection public
   function thread1(void *) in line 6
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
   function thread2(void *) in line 18
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
   function main(void) in line 30
      protection public
      24 lines of code
      1 parameters
      3 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses variable mb defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/stateful_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
module benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
   variable ma in line 3
      protection public
   variable mb in line 3
      protection public
   variable data1 in line 4
      protection public
   variable data2 in line 4
      protection public
   function thread1(void *) in line 6
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
   function thread2(void *) in line 18
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
   function main(void) in line 30
      protection public
      24 lines of code
      1 parameters
      3 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses variable mb defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/stateful_unsafe.c
module benchmarks-esbmc/pthread/stateful_unsafe.c
   variable ma in line 3
      protection public
   variable mb in line 3
      protection public
   variable data1 in line 4
      protection public
   variable data2 in line 4
      protection public
   function thread1(void *) in line 6
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
   function thread2(void *) in line 18
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
   function main(void) in line 30
      protection public
      24 lines of code
      1 parameters
      3 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable ma defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses variable mb defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses variable data1 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses variable data2 defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/stateful_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/sync_safe.c
module benchmarks-cbmc-4.5/pthread/sync_safe.c
   variable num in line 4
      protection public
   variable m in line 6
      protection public
   variable empty in line 7
      protection public
   variable full in line 7
      protection public
   function thread1(void *) in line 9
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses variable num defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_cond_wait(pthread_cond_t *__restrict,pthread_mutex_t *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable empty defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_cond_signal(pthread_cond_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable full defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
   function thread2(void *) in line 23
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses variable num defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_cond_wait(pthread_cond_t *__restrict,pthread_mutex_t *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable full defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_cond_signal(pthread_cond_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable empty defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
   function main(void) in line 38
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable num defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_cond_init(pthread_cond_t *__restrict,__const pthread_condattr_t *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable empty defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses variable full defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/sync_safe.c
module benchmarks-esbmc/pthread/sync_safe.c
   variable num in line 4
      protection public
   variable m in line 6
      protection public
   variable empty in line 7
      protection public
   variable full in line 7
      protection public
   function thread1(void *) in line 9
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses variable num defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_cond_wait(pthread_cond_t *__restrict,pthread_mutex_t *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable empty defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_cond_signal(pthread_cond_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable full defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
   function thread2(void *) in line 23
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses variable num defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_cond_wait(pthread_cond_t *__restrict,pthread_mutex_t *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable full defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function pthread_cond_signal(pthread_cond_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable empty defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
   function main(void) in line 38
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable num defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable m defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_cond_init(pthread_cond_t *__restrict,__const pthread_condattr_t *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable empty defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses variable full defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function thread1(void *) defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function thread2(void *) defined in benchmarks-cbmc-4.5/pthread/sync_safe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
module benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
   macro definition USAGE in line 6
      protection public
   variable iTThreads in line 8
      protection public
   variable iRThreads in line 9
      protection public
   variable data1Value in line 10
      protection public
   variable data2Value in line 11
      protection public
   variable data1Lock in line 12
      protection public
   variable data2Lock in line 13
      protection public
   function lock(pthread_mutex_t *) in line 15
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
   function unlock(pthread_mutex_t *) in line 16
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
   function funcA(void *) in line 18
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data1Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses variable data1Value defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses variable data2Value defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function funcB(void *) in line 30
      protection public
      24 lines of code
      1 parameters
      4 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data1Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses variable data1Value defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses variable data2Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses variable data2Value defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
   function main(int,char *) in line 55
      protection public
      57 lines of code
      2 parameters
      13 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition USAGE defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses variable iTThreads defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses variable iRThreads defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses variable data1Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses function malloc(size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function funcA(void *) defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses function funcB(void *) defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread/twostage_3_unsafe.c
module benchmarks-esbmc/pthread/twostage_3_unsafe.c
   macro definition USAGE in line 6
      protection public
   variable iTThreads in line 8
      protection public
   variable iRThreads in line 9
      protection public
   variable data1Value in line 10
      protection public
   variable data2Value in line 11
      protection public
   variable data1Lock in line 12
      protection public
   variable data2Lock in line 13
      protection public
   function lock(pthread_mutex_t *) in line 15
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
   function unlock(pthread_mutex_t *) in line 16
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
   function funcA(void *) in line 18
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data1Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses variable data1Value defined in benchmarks-esbmc/pthread/twostage_3_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses variable data2Value defined in benchmarks-esbmc/pthread/twostage_3_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
   function funcB(void *) in line 30
      protection public
      24 lines of code
      1 parameters
      4 conditional paths
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function pthread_mutex_lock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data1Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses variable data1Value defined in benchmarks-esbmc/pthread/twostage_3_unsafe.c
      uses function pthread_mutex_unlock(pthread_mutex_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses variable data2Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses variable data2Value defined in benchmarks-esbmc/pthread/twostage_3_unsafe.c
   function main(int,char *) in line 55
      protection public
      57 lines of code
      2 parameters
      13 conditional paths
      uses variable i defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition USAGE defined in benchmarks-esbmc/pthread/twostage_3_unsafe.c
      uses variable iTThreads defined in benchmarks-esbmc/pthread/twostage_3_unsafe.c
      uses variable iRThreads defined in benchmarks-esbmc/pthread/twostage_3_unsafe.c
      uses variable data1Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses function malloc(size_t) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses variable data2Lock defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses function pthread_mutex_init(pthread_mutex_t *,__const pthread_mutexattr_t *) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses macro definition NULL defined in _fake_defines.h
      uses function pthread_create(pthread_t *__restrict,__const pthread_attr_t *__restrict,void *(*)(void *),void *__restrict) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
      uses function funcA(void *) defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses function funcB(void *) defined in benchmarks-cbmc-4.5/pthread/twostage_3_unsafe.c
      uses function pthread_join(pthread_t,void **) defined in benchmarks-cbmc-4.5/pthread/reorder_5_unsafe.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/_cs_dekker_safe.mod.c
module _cs_dekker_safe.mod.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable flag1 in line 292
      protection public
   variable flag2 in line 293
      protection public
   variable turn in line 294
      protection public
   variable x in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in _cs_dekker_safe.mod.c
      uses variable __CS_round defined in _cs_dekker_safe.mod.c
      uses macro definition __CS_ROUNDS defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses function nondet_int() defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_dekker_safe.mod.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_dekker_safe.mod.c
      uses variable __CS_error defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_dekker_safe.mod.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_dekker_safe.mod.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_dekker_safe.mod.c
      uses variable __CS_error defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_dekker_safe.mod.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_dekker_safe.mod.c
      uses variable __CS_round defined in _cs_dekker_safe.mod.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_dekker_safe.mod.c
      uses variable __CS_round defined in _cs_dekker_safe.mod.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_dekker_safe.mod.c
      uses variable __CS_error defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_dekker_safe.mod.c
      uses variable __CS_round defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_dekker_safe.mod.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_dekker_safe.mod.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_dekker_safe.mod.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in _cs_dekker_safe.mod.c
      uses variable __CS_error defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread_status defined in _cs_dekker_safe.mod.c
      uses variable __CS_round defined in _cs_dekker_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_dekker_safe.mod.c
      uses variable __THREAD_UNUSED defined in _cs_dekker_safe.mod.c
      uses variable __THREAD_FINISHED defined in _cs_dekker_safe.mod.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in _cs_dekker_safe.mod.c
      uses macro definition __CS_THREADS defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread_allocated defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread_born_round defined in _cs_dekker_safe.mod.c
      uses variable __CS_round defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread defined in _cs_dekker_safe.mod.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in _cs_dekker_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_dekker_safe.mod.c
   function thr1() in line 305
      protection public
      40 lines of code
      0 parameters
      21 conditional paths
      uses function __CS_cs(void) defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_dekker_safe.mod.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_dekker_safe.mod.c
   function thr2() in line 346
      protection public
      40 lines of code
      0 parameters
      21 conditional paths
      uses function __CS_cs(void) defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_dekker_safe.mod.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_dekker_safe.mod.c
   function main_thread(void *) in line 387
      protection public
      16 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_pthread_t defined in _cs_dekker_safe.mod.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses function __CS_assume(int) defined in _cs_dekker_safe.mod.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_dekker_safe.mod.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in _cs_dekker_safe.mod.c
      uses function thr1() defined in _cs_dekker_safe.mod.c
      uses function thr2() defined in _cs_dekker_safe.mod.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in _cs_dekker_safe.mod.c
   function main(void) in line 404
      protection public
      94 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in _cs_dekker_safe.mod.c
      uses macro definition __CS_ROUNDS defined in _cs_dekker_safe.mod.c
      uses macro definition __CS_THREADS defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread_status defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_dekker_safe.mod.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread_index defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread_born_round defined in _cs_dekker_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread defined in _cs_dekker_safe.mod.c
      uses function main_thread(void *) defined in _cs_dekker_safe.mod.c
      uses variable __CS_thread_allocated defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret defined in _cs_dekker_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_dekker_safe.mod.c
      uses variable __THREAD_FINISHED defined in _cs_dekker_safe.mod.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in _cs_dekker_safe.mod.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/_cs_lamport_safe.mod.c
module _cs_lamport_safe.mod.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable x in line 292
      protection public
   variable y in line 293
      protection public
   variable b1 in line 294
      protection public
   variable b2 in line 295
      protection public
   variable X in line 296
      protection public
   variable __CS_u in line 296
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in _cs_lamport_safe.mod.c
      uses variable __CS_round defined in _cs_lamport_safe.mod.c
      uses macro definition __CS_ROUNDS defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses function nondet_int() defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_lamport_safe.mod.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_lamport_safe.mod.c
      uses variable __CS_error defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_lamport_safe.mod.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_lamport_safe.mod.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_lamport_safe.mod.c
      uses variable __CS_error defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_lamport_safe.mod.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_lamport_safe.mod.c
      uses variable __CS_round defined in _cs_lamport_safe.mod.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_lamport_safe.mod.c
      uses variable __CS_round defined in _cs_lamport_safe.mod.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_lamport_safe.mod.c
      uses variable __CS_error defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_lamport_safe.mod.c
      uses variable __CS_round defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_lamport_safe.mod.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_lamport_safe.mod.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_lamport_safe.mod.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in _cs_lamport_safe.mod.c
      uses variable __CS_error defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread_status defined in _cs_lamport_safe.mod.c
      uses variable __CS_round defined in _cs_lamport_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_lamport_safe.mod.c
      uses variable __THREAD_UNUSED defined in _cs_lamport_safe.mod.c
      uses variable __THREAD_FINISHED defined in _cs_lamport_safe.mod.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in _cs_lamport_safe.mod.c
      uses macro definition __CS_THREADS defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread_allocated defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread_born_round defined in _cs_lamport_safe.mod.c
      uses variable __CS_round defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread defined in _cs_lamport_safe.mod.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in _cs_lamport_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_lamport_safe.mod.c
   function thr1() in line 307
      protection public
      64 lines of code
      0 parameters
      34 conditional paths
      uses function __CS_cs(void) defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses variable __CS__u::b1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_lamport_safe.mod.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::X defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_lamport_safe.mod.c
   function thr2() in line 372
      protection public
      64 lines of code
      0 parameters
      34 conditional paths
      uses function __CS_cs(void) defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses variable __CS__u::b2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_lamport_safe.mod.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::X defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_lamport_safe.mod.c
   function main_thread(void *) in line 437
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses macro definition __CS_pthread_t defined in _cs_lamport_safe.mod.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in _cs_lamport_safe.mod.c
      uses function thr1() defined in _cs_lamport_safe.mod.c
      uses function thr2() defined in _cs_lamport_safe.mod.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in _cs_lamport_safe.mod.c
   function main(void) in line 452
      protection public
      99 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in _cs_lamport_safe.mod.c
      uses macro definition __CS_ROUNDS defined in _cs_lamport_safe.mod.c
      uses macro definition __CS_THREADS defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread_status defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_lamport_safe.mod.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::y defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::b2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::X defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread_index defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread_born_round defined in _cs_lamport_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread defined in _cs_lamport_safe.mod.c
      uses function main_thread(void *) defined in _cs_lamport_safe.mod.c
      uses variable __CS_thread_allocated defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret defined in _cs_lamport_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_lamport_safe.mod.c
      uses variable __THREAD_FINISHED defined in _cs_lamport_safe.mod.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in _cs_lamport_safe.mod.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/_cs_peterson_safe.mod.c
module _cs_peterson_safe.mod.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable flag1 in line 292
      protection public
   variable flag2 in line 293
      protection public
   variable turn in line 294
      protection public
   variable x in line 295
      protection public
   variable __CS_u in line 295
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in _cs_peterson_safe.mod.c
      uses variable __CS_round defined in _cs_peterson_safe.mod.c
      uses macro definition __CS_ROUNDS defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses function nondet_int() defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_peterson_safe.mod.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_peterson_safe.mod.c
      uses variable __CS_error defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_peterson_safe.mod.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_peterson_safe.mod.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_peterson_safe.mod.c
      uses variable __CS_error defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_peterson_safe.mod.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_peterson_safe.mod.c
      uses variable __CS_round defined in _cs_peterson_safe.mod.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_peterson_safe.mod.c
      uses variable __CS_round defined in _cs_peterson_safe.mod.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_peterson_safe.mod.c
      uses variable __CS_error defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_peterson_safe.mod.c
      uses variable __CS_round defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_peterson_safe.mod.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_peterson_safe.mod.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_peterson_safe.mod.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in _cs_peterson_safe.mod.c
      uses variable __CS_error defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread_status defined in _cs_peterson_safe.mod.c
      uses variable __CS_round defined in _cs_peterson_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_peterson_safe.mod.c
      uses variable __THREAD_UNUSED defined in _cs_peterson_safe.mod.c
      uses variable __THREAD_FINISHED defined in _cs_peterson_safe.mod.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in _cs_peterson_safe.mod.c
      uses macro definition __CS_THREADS defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread_allocated defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread_born_round defined in _cs_peterson_safe.mod.c
      uses variable __CS_round defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread defined in _cs_peterson_safe.mod.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in _cs_peterson_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_peterson_safe.mod.c
   function thr1() in line 305
      protection public
      26 lines of code
      0 parameters
      13 conditional paths
      uses function __CS_cs(void) defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_peterson_safe.mod.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_peterson_safe.mod.c
   function thr2() in line 332
      protection public
      26 lines of code
      0 parameters
      13 conditional paths
      uses function __CS_cs(void) defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_peterson_safe.mod.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_peterson_safe.mod.c
   function main_thread(void *) in line 359
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses macro definition __CS_pthread_t defined in _cs_peterson_safe.mod.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in _cs_peterson_safe.mod.c
      uses function thr1() defined in _cs_peterson_safe.mod.c
      uses function thr2() defined in _cs_peterson_safe.mod.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in _cs_peterson_safe.mod.c
   function main(void) in line 374
      protection public
      94 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in _cs_peterson_safe.mod.c
      uses macro definition __CS_ROUNDS defined in _cs_peterson_safe.mod.c
      uses macro definition __CS_THREADS defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread_status defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_peterson_safe.mod.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::turn defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread_index defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread_born_round defined in _cs_peterson_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread defined in _cs_peterson_safe.mod.c
      uses function main_thread(void *) defined in _cs_peterson_safe.mod.c
      uses variable __CS_thread_allocated defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret defined in _cs_peterson_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_peterson_safe.mod.c
      uses variable __THREAD_FINISHED defined in _cs_peterson_safe.mod.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in _cs_peterson_safe.mod.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/benchmarks-esbmc/pthread-atomic/_cs_szymanski_safe.mod.c
module _cs_szymanski_safe.mod.c
   macro definition __CS_type in line 8
      protection public
   macro definition __CS_pthread_t in line 9
      protection public
   macro definition __CS_pthread_mutex_t in line 10
      protection public
   macro definition __CS_pthread_cond_t in line 11
      protection public
   macro definition __CS_ROUNDS in line 14
      protection public
   macro definition __CS_THREADS in line 15
      protection public
   variable __CS_round in line 20
      protection public
   variable __CS_ret in line 22
      protection public
   variable __CS_ret_PREEMPTED in line 23
      protection public
   variable __CS_ret_ERROR in line 24
      protection public
   variable __CS_ret_FINISHED in line 25
      protection public
   variable __CS_error in line 27
      protection public
   variable __CS_thread_index in line 43
      protection public
   variable __CS_thread_allocated in line 45
      protection public
   variable __CS_thread_born_round in line 46
      protection public
   variable __CS_thread in line 48
      protection public
   variable __CS_thread_status in line 50
      protection public
   variable __THREAD_UNUSED in line 51
      protection public
   variable __THREAD_RUNNING in line 52
      protection public
   variable __THREAD_FINISHED in line 53
      protection public
   variable __CS_thread_lockedon in line 59
      protection public
   variable flag1 in line 292
      protection public
   variable flag2 in line 293
      protection public
   variable x in line 294
      protection public
   variable __CS_u in line 294
      protection public
   function nondet_int() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 76
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in _cs_szymanski_safe.mod.c
      uses variable __CS_round defined in _cs_szymanski_safe.mod.c
      uses macro definition __CS_ROUNDS defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses function nondet_int() defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_szymanski_safe.mod.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 110
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_szymanski_safe.mod.c
      uses variable __CS_error defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_szymanski_safe.mod.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 122
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_szymanski_safe.mod.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 130
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_szymanski_safe.mod.c
      uses variable __CS_error defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_szymanski_safe.mod.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 147
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_szymanski_safe.mod.c
      uses variable __CS_round defined in _cs_szymanski_safe.mod.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_szymanski_safe.mod.c
      uses variable __CS_round defined in _cs_szymanski_safe.mod.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 169
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in _cs_szymanski_safe.mod.c
      uses variable __CS_error defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_szymanski_safe.mod.c
      uses variable __CS_round defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_szymanski_safe.mod.c
   function __CS_assert(int) in line 190
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_szymanski_safe.mod.c
   function __CS_assume(int) in line 199
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_szymanski_safe.mod.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 204
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in _cs_szymanski_safe.mod.c
      uses variable __CS_error defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread_status defined in _cs_szymanski_safe.mod.c
      uses variable __CS_round defined in _cs_szymanski_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_szymanski_safe.mod.c
      uses variable __THREAD_UNUSED defined in _cs_szymanski_safe.mod.c
      uses variable __THREAD_FINISHED defined in _cs_szymanski_safe.mod.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 239
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in _cs_szymanski_safe.mod.c
      uses macro definition __CS_THREADS defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread_allocated defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread_born_round defined in _cs_szymanski_safe.mod.c
      uses variable __CS_round defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread defined in _cs_szymanski_safe.mod.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in _cs_szymanski_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_szymanski_safe.mod.c
   function thr1() in line 303
      protection public
      45 lines of code
      0 parameters
      21 conditional paths
      uses function __CS_cs(void) defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_szymanski_safe.mod.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_szymanski_safe.mod.c
   function thr2() in line 349
      protection public
      45 lines of code
      0 parameters
      21 conditional paths
      uses function __CS_cs(void) defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_szymanski_safe.mod.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_error defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_ERROR defined in _cs_szymanski_safe.mod.c
   function main_thread(void *) in line 395
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses macro definition __CS_pthread_t defined in _cs_szymanski_safe.mod.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function t2(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses function __CS_cs(void) defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) defined in _cs_szymanski_safe.mod.c
      uses function thr1() defined in _cs_szymanski_safe.mod.c
      uses function thr2() defined in _cs_szymanski_safe.mod.c
      uses function __CS_pthread_join(__CS_pthread_t,void **) defined in _cs_szymanski_safe.mod.c
   function main(void) in line 410
      protection public
      89 lines of code
      1 parameters
      7 conditional paths
      uses macro definition __CS_type defined in _cs_szymanski_safe.mod.c
      uses macro definition __CS_ROUNDS defined in _cs_szymanski_safe.mod.c
      uses macro definition __CS_THREADS defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread_status defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread_lockedon defined in _cs_szymanski_safe.mod.c
      uses variable __CS__u::flag1 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::flag2 defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS__u::x defined in benchmarks-esbmc/pthread-atomic/_cs_time_var_mutex_safe.c
      uses variable __CS_round defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread_index defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread_born_round defined in _cs_szymanski_safe.mod.c
      uses variable __THREAD_RUNNING defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread defined in _cs_szymanski_safe.mod.c
      uses function main_thread(void *) defined in _cs_szymanski_safe.mod.c
      uses variable __CS_thread_allocated defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret defined in _cs_szymanski_safe.mod.c
      uses variable __CS_ret_PREEMPTED defined in _cs_szymanski_safe.mod.c
      uses variable __THREAD_FINISHED defined in _cs_szymanski_safe.mod.c
      uses macro definition assert defined in benchmarks-cbmc-4.5/pthread-atomic/dekker_safe.c
      uses variable __CS_error defined in _cs_szymanski_safe.mod.c
   variable __CS__u::a in line 404
      protection public
   variable __CS__u::arr in line 300
      protection public
   variable __CS__u::b in line 405
      protection public
   variable __CS__u::b1 in line 300
      protection public
   variable __CS__u::b2 in line 301
      protection public
   variable __CS__u::block in line 298
      protection public
   variable __CS__u::busy in line 299
      protection public
   variable __CS__u::data in line 296
      protection public
   variable __CS__u::data1 in line 299
      protection public
   variable __CS__u::data2 in line 300
      protection public
   variable __CS__u::dequeue_flag in line 310
      protection public
   variable __CS__u::empty in line 300
      protection public
   variable __CS__u::enqueue_flag in line 309
      protection public
   variable __CS__u::flag in line 302
      protection public
   variable __CS__u::flag1 in line 297
      protection public
   variable __CS__u::flag2 in line 298
      protection public
   variable __CS__u::full in line 301
      protection public
   variable __CS__u::i in line 295
      protection public
   variable __CS__u::iCheck in line 403
      protection public
   variable __CS__u::inode in line 300
      protection public
   variable __CS__u::iSet in line 402
      protection public
   variable __CS__u::j in line 296
      protection public
   variable __CS__u::m in line 307
      protection public
   variable __CS__u::m_busy in line 302
      protection public
   variable __CS__u::m_inode in line 301
      protection public
   variable __CS__u::ma in line 297
      protection public
   variable __CS__u::mb in line 298
      protection public
   variable __CS__u::mutex in line 295
      protection public
   variable __CS__u::num in line 298
      protection public
   variable __CS__u::queue in line 311
      protection public
   variable __CS__u::r in line 298
      protection public
   variable __CS__u::stored_elements in line 308
      protection public
   variable __CS__u::top in line 299
      protection public
   variable __CS__u::turn in line 299
      protection public
   variable __CS__u::w in line 297
      protection public
   variable __CS__u::x in line 300
      protection public
   variable __CS__u::X in line 302
      protection public
   variable __CS__u::y in line 299
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/cseq-feeder.py
module cseq-feeder.py
   variable backendFilename in line 25
      protection public
   variable cmdLineOptions in line 31
      protection public
   variable verificationOK in line 40
      protection public
   variable verificationFAIL in line 47
      protection public
   function rreplace((null),(null),(null),(null)) in line 114
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
   function usage((null)) in line 119
      protection public
      24 lines of code
      1 parameters
      1 conditional paths
   function strip((null),(null),(null)) in line 143
      protection public
      22 lines of code
      3 parameters
      1 conditional paths
   function fileStartsWith((null),(null)) in line 165
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
   function fileContains((null),(null)) in line 180
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
   function isPreprocessed((null)) in line 195
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function fileContains((null),(null)) defined in cseq-feeder.py
   function stripIfNeeded((null)) in line 199
      protection public
      82 lines of code
      1 parameters
      1 conditional paths
      uses function isPreprocessed((null)) defined in cseq-feeder.py
      uses function fileStartsWith((null),(null)) defined in cseq-feeder.py
   function main((null)) in line 281
      protection public
      192 lines of code
      1 parameters
      1 conditional paths
      uses function usage((null)) defined in cseq-feeder.py
      uses function rreplace((null),(null),(null),(null)) defined in cseq-feeder.py
   variable cseq-feeder::colors::BLACK in line 73
      protection public
   variable cseq-feeder::colors::BLUE in line 77
      protection public
   variable cseq-feeder::colors::GREEN in line 75
      protection public
   variable cseq-feeder::colors::NO in line 78
      protection public
   variable cseq-feeder::colors::RED in line 74
      protection public
   variable cseq-feeder::colors::YELLOW in line 76
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/cseq.py
module cseq.py
   variable notHandledPrimitives in line 120
      protection public
   variable mainSimulationBlock in line 128
      protection public
   variable extraChecks in line 171
      protection public
   variable threadLaunchBlock in line 181
      protection public
   variable threadLaunchBlockEXPERIMENTAL in line 193
      protection public
   variable csBlock in line 217
      protection public
   variable errorBlock in line 224
      protection public
   variable errorBlockDetail in line 228
      protection public
   variable pthreadExitBlock in line 233
      protection public
   function printFile((null)) in line 239
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
   function fileContains((null),(null)) in line 252
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
   function strip((null)) in line 1846
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
   function sequentialise((null),(null),(null),(null),(null),(null),(null),(null)) in line 1869
      protection public
      170 lines of code
      8 parameters
      1 conditional paths
      uses function fileContains((null),(null)) defined in cseq.py
      uses function strip((null)) defined in cseq.py
   function usage((null)) in line 2039
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
   function main((null)) in line 2056
      protection public
      52 lines of code
      1 parameters
      1 conditional paths
      uses function usage((null)) defined in cseq.py
      uses function sequentialise((null),(null),(null),(null),(null),(null),(null),(null)) defined in cseq.py
   variable cseq::colors::BLACK in line 264
      protection public
   variable cseq::colors::BLUE in line 268
      protection public
   variable cseq::colors::GREEN in line 266
      protection public
   variable cseq::colors::NO in line 269
      protection public
   variable cseq::colors::RED in line 265
      protection public
   variable cseq::colors::YELLOW in line 267
      protection public
   variable cseq::CSequentialiser::_maxrounds in line 440
   variable cseq::CSequentialiser::_maxthreads in line 439
   variable cseq::CSequentialiser::append in line 358
      protection public
   variable cseq::CSequentialiser::copyVariableDeclaration in line 415
      protection public
   variable cseq::CSequentialiser::currentAnonStructsCount in line 290
      protection public
   variable cseq::CSequentialiser::currentFunct in line 283
      protection public
   variable cseq::CSequentialiser::CurrentFunct in line 1385
      protection public
   variable cseq::CSequentialiser::currentStruct in line 288
      protection public
   variable cseq::CSequentialiser::currentVarAssign in line 286
      protection public
   variable cseq::CSequentialiser::debugMode in line 371
      protection public
   variable cseq::CSequentialiser::declMarkerA in line 374
      protection public
   variable cseq::CSequentialiser::declMarkerB in line 375
      protection public
   variable cseq::CSequentialiser::detail in line 279
      protection public
   variable cseq::CSequentialiser::extraGlovalVarCount in line 309
      protection public
   variable cseq::CSequentialiser::firstFunctionDefinitionDone in line 431
      protection public
   variable cseq::CSequentialiser::funcName in line 284
      protection public
   variable cseq::CSequentialiser::globalInitStatements in line 428
      protection public
   variable cseq::CSequentialiser::globalInitVarNodes in line 362
      protection public
   variable cseq::CSequentialiser::INDENT_SPACING in line 368
      protection public
   variable cseq::CSequentialiser::indentLevel in line 367
      protection public
   variable cseq::CSequentialiser::lastDeclaration in line 413
      protection public
   variable cseq::CSequentialiser::lastDeclarationL in line 411
      protection public
   variable cseq::CSequentialiser::lastDeclarationR in line 412
      protection public
   variable cseq::CSequentialiser::mainParametersDecl in line 292
      protection public
   variable cseq::CSequentialiser::memcmpBlockGenerated in line 444
      protection public
   variable cseq::CSequentialiser::parsingAtomic in line 447
      protection public
   variable cseq::CSequentialiser::parsingFuncDecl in line 393
      protection public
   variable cseq::CSequentialiser::parsingMain in line 399
      protection public
   variable cseq::CSequentialiser::parsingSideEffect in line 405
      protection public
   variable cseq::CSequentialiser::parsingStruct in line 396
      protection public
   variable cseq::CSequentialiser::parsingTypedef in line 437
      protection public
   variable cseq::CSequentialiser::parsingVoidFunction in line 434
      protection public
   variable cseq::CSequentialiser::parsingWhileCond in line 402
      protection public
   variable cseq::CSequentialiser::stmtMarkerA in line 378
      protection public
   variable cseq::CSequentialiser::stmtMarkerB in line 379
      protection public
   variable cseq::CSequentialiser::structMarkerA in line 380
      protection public
   variable cseq::CSequentialiser::structMarkerB in line 381
      protection public
   variable cseq::CSequentialiser::structName in line 289
      protection public
   variable cseq::CSequentialiser::typedefExpansion in line 353
      protection public
   variable cseq::CSequentialiser::typedefs in line 352
      protection public
   variable cseq::CSequentialiser::typeMarkerA in line 376
      protection public
   variable cseq::CSequentialiser::typeMarkerB in line 377
      protection public
   variable cseq::CSequentialiser::unionDeclaration in line 424
      protection public
   variable cseq::CSequentialiser::varArity in line 303
      protection public
   variable cseq::CSequentialiser::varCount in line 308
      protection public
   variable cseq::CSequentialiser::varID in line 307
      protection public
   variable cseq::CSequentialiser::varKind in line 305
      protection public
   variable cseq::CSequentialiser::varMallocd in line 306
      protection public
   variable cseq::CSequentialiser::varNames in line 301
      protection public
   variable cseq::CSequentialiser::varSize in line 304
      protection public
   variable cseq::CSequentialiser::varType in line 302
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/_ansi.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/_fake_defines.h
module _fake_defines.h
   macro definition NULL in line 4
      protection public
   macro definition BUFSIZ in line 5
      protection public
   macro definition FOPEN_MAX in line 6
      protection public
   macro definition FILENAME_MAX in line 7
      protection public
   macro definition SEEK_SET in line 10
      protection public
   macro definition SEEK_CUR in line 13
      protection public
   macro definition SEEK_END in line 16
      protection public
   macro definition EXIT_FAILURE in line 20
      protection public
   macro definition EXIT_SUCCESS in line 21
      protection public
   macro definition RAND_MAX in line 23
      protection public
   macro definition INT_MAX in line 24
      protection public
   macro definition __bool_true_false_are_defined in line 27
      protection public
   macro definition false in line 28
      protection public
   macro definition true in line 29
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/_fake_typedefs.h
module _fake_typedefs.h
   typedef _____STARTSTRIPPINGFROMHERE_____ in line 5
      protection public
   typedef size_t in line 6
      protection public
   typedef __builtin_va_list in line 7
      protection public
   typedef __gnuc_va_list in line 8
      protection public
   typedef __int8_t in line 9
      protection public
   typedef __uint8_t in line 10
      protection public
   typedef __int16_t in line 11
      protection public
   typedef __uint16_t in line 12
      protection public
   typedef __int_least16_t in line 13
      protection public
   typedef __uint_least16_t in line 14
      protection public
   typedef __int32_t in line 15
      protection public
   typedef __uint32_t in line 16
      protection public
   typedef __int_least32_t in line 17
      protection public
   typedef __uint_least32_t in line 18
      protection public
   typedef _LOCK_T in line 19
      protection public
   typedef _LOCK_RECURSIVE_T in line 20
      protection public
   typedef _off_t in line 21
      protection public
   typedef __dev_t in line 22
      protection public
   typedef __uid_t in line 23
      protection public
   typedef __gid_t in line 24
      protection public
   typedef _off64_t in line 25
      protection public
   typedef _fpos_t in line 26
      protection public
   typedef _ssize_t in line 27
      protection public
   typedef wint_t in line 28
      protection public
   typedef _mbstate_t in line 29
      protection public
   typedef _flock_t in line 30
      protection public
   typedef _iconv_t in line 31
      protection public
   typedef __ULong in line 32
      protection public
   typedef __FILE in line 33
      protection public
   typedef ptrdiff_t in line 34
      protection public
   typedef wchar_t in line 35
      protection public
   typedef __off_t in line 36
      protection public
   typedef __pid_t in line 37
      protection public
   typedef __loff_t in line 38
      protection public
   typedef u_char in line 39
      protection public
   typedef u_short in line 40
      protection public
   typedef u_int in line 41
      protection public
   typedef u_long in line 42
      protection public
   typedef ushort in line 43
      protection public
   typedef uint in line 44
      protection public
   typedef clock_t in line 45
      protection public
   typedef time_t in line 46
      protection public
   typedef daddr_t in line 47
      protection public
   typedef caddr_t in line 48
      protection public
   typedef ino_t in line 49
      protection public
   typedef off_t in line 50
      protection public
   typedef dev_t in line 51
      protection public
   typedef uid_t in line 52
      protection public
   typedef gid_t in line 53
      protection public
   typedef pid_t in line 54
      protection public
   typedef key_t in line 55
      protection public
   typedef ssize_t in line 56
      protection public
   typedef mode_t in line 57
      protection public
   typedef nlink_t in line 58
      protection public
   typedef fd_mask in line 59
      protection public
   typedef _types_fd_set in line 60
      protection public
   typedef clockid_t in line 61
      protection public
   typedef timer_t in line 62
      protection public
   typedef useconds_t in line 63
      protection public
   typedef suseconds_t in line 64
      protection public
   typedef FILE in line 65
      protection public
   typedef fpos_t in line 66
      protection public
   typedef cookie_read_function_t in line 67
      protection public
   typedef cookie_write_function_t in line 68
      protection public
   typedef cookie_seek_function_t in line 69
      protection public
   typedef cookie_close_function_t in line 70
      protection public
   typedef cookie_io_functions_t in line 71
      protection public
   typedef div_t in line 72
      protection public
   typedef ldiv_t in line 73
      protection public
   typedef lldiv_t in line 74
      protection public
   typedef sigset_t in line 75
      protection public
   typedef _sig_func_ptr in line 76
      protection public
   typedef sig_atomic_t in line 77
      protection public
   typedef __tzrule_type in line 78
      protection public
   typedef __tzinfo_type in line 79
      protection public
   typedef mbstate_t in line 80
      protection public
   typedef sem_t in line 81
      protection public
   typedef pthread_t in line 82
      protection public
   typedef pthread_attr_t in line 83
      protection public
   typedef pthread_mutex_t in line 84
      protection public
   typedef pthread_mutexattr_t in line 85
      protection public
   typedef pthread_cond_t in line 86
      protection public
   typedef pthread_condattr_t in line 87
      protection public
   typedef pthread_key_t in line 88
      protection public
   typedef pthread_once_t in line 89
      protection public
   typedef pthread_rwlock_t in line 90
      protection public
   typedef pthread_rwlockattr_t in line 91
      protection public
   typedef pthread_spinlock_t in line 92
      protection public
   typedef pthread_barrier_t in line 93
      protection public
   typedef pthread_barrierattr_t in line 94
      protection public
   typedef int8_t in line 97
      protection public
   typedef uint8_t in line 98
      protection public
   typedef int16_t in line 99
      protection public
   typedef uint16_t in line 100
      protection public
   typedef int32_t in line 101
      protection public
   typedef uint32_t in line 102
      protection public
   typedef int64_t in line 103
      protection public
   typedef uint64_t in line 104
      protection public
   typedef bool in line 107
      protection public
   typedef va_list in line 109
      protection public
   typedef _____STOPSTRIPPINGFROMHERE_____ in line 111
      protection public
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/_syslist.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/alloca.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/ar.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/argz.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/assert.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/complex.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/cseq-include.c
module cseq-include.c
   macro definition __CS_type in line 3
      protection public
   macro definition __CS_pthread_t in line 4
      protection public
   macro definition __CS_pthread_mutex_t in line 5
      protection public
   macro definition __CS_pthread_cond_t in line 6
      protection public
   macro definition __CS_ROUNDS in line 9
      protection public
   macro definition __CS_THREADS in line 10
      protection public
   variable __CS_round in line 15
      protection public
   variable __CS_ret in line 17
      protection public
   variable __CS_ret_PREEMPTED in line 18
      protection public
   variable __CS_ret_ERROR in line 19
      protection public
   variable __CS_ret_FINISHED in line 20
      protection public
   variable __CS_error in line 22
      protection public
   variable __CS_thread_index in line 38
      protection public
   variable __CS_thread_allocated in line 40
      protection public
   variable __CS_thread_born_round in line 41
      protection public
   variable __CS_thread in line 43
      protection public
   variable __CS_thread_status in line 45
      protection public
   variable __THREAD_UNUSED in line 46
      protection public
   variable __THREAD_RUNNING in line 47
      protection public
   variable __THREAD_FINISHED in line 48
      protection public
   variable __CS_thread_lockedon in line 54
      protection public
   function nondet_int() in line 69
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 71
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in cseq-include.c
      uses variable __CS_round defined in cseq-include.c
      uses macro definition __CS_ROUNDS defined in cseq-include.c
      uses variable __CS_thread_lockedon defined in cseq-include.c
      uses variable __CS_thread_index defined in cseq-include.c
      uses variable __CS_ret defined in cseq-include.c
      uses function nondet_int() defined in cseq-include.c
      uses variable __CS_ret_PREEMPTED defined in cseq-include.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 100
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 105
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in cseq-include.c
      uses variable __CS_error defined in cseq-include.c
      uses variable __CS_ret defined in cseq-include.c
      uses variable __CS_ret_ERROR defined in cseq-include.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 117
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in cseq-include.c
      uses variable __CS_ret defined in cseq-include.c
      uses variable __CS_ret_PREEMPTED defined in cseq-include.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 125
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in cseq-include.c
      uses variable __CS_error defined in cseq-include.c
      uses variable __CS_ret defined in cseq-include.c
      uses variable __CS_ret_ERROR defined in cseq-include.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 137
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 142
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in cseq-include.c
      uses variable __CS_thread_lockedon defined in cseq-include.c
      uses variable __CS_round defined in cseq-include.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 153
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in cseq-include.c
      uses variable __CS_thread_lockedon defined in cseq-include.c
      uses variable __CS_round defined in cseq-include.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 164
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in cseq-include.c
      uses variable __CS_error defined in cseq-include.c
      uses variable __CS_ret defined in cseq-include.c
      uses variable __CS_ret_ERROR defined in cseq-include.c
      uses variable __CS_thread_lockedon defined in cseq-include.c
      uses variable __CS_round defined in cseq-include.c
      uses variable __CS_ret_PREEMPTED defined in cseq-include.c
   function __CS_assert(int) in line 185
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in cseq-include.c
      uses variable __CS_ret defined in cseq-include.c
      uses variable __CS_ret_ERROR defined in cseq-include.c
   function __CS_assume(int) in line 194
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in cseq-include.c
      uses variable __CS_ret_PREEMPTED defined in cseq-include.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 199
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in cseq-include.c
      uses variable __CS_error defined in cseq-include.c
      uses variable __CS_ret defined in cseq-include.c
      uses variable __CS_ret_ERROR defined in cseq-include.c
      uses variable __CS_thread_status defined in cseq-include.c
      uses variable __CS_round defined in cseq-include.c
      uses variable __THREAD_RUNNING defined in cseq-include.c
      uses variable __CS_ret_PREEMPTED defined in cseq-include.c
      uses variable __THREAD_UNUSED defined in cseq-include.c
      uses variable __THREAD_FINISHED defined in cseq-include.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 234
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in cseq-include.c
      uses macro definition __CS_THREADS defined in cseq-include.c
      uses variable __CS_thread_allocated defined in cseq-include.c
      uses variable __CS_thread_born_round defined in cseq-include.c
      uses variable __CS_round defined in cseq-include.c
      uses variable __CS_thread defined in cseq-include.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in cseq-include.c
      uses variable __THREAD_RUNNING defined in cseq-include.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/cseq-include.full.c
module cseq-include.full.c
   macro definition __CS_type in line 3
      protection public
   macro definition __CS_pthread_t in line 4
      protection public
   macro definition __CS_pthread_mutex_t in line 5
      protection public
   macro definition __CS_pthread_cond_t in line 6
      protection public
   macro definition __CS_ROUNDS in line 9
      protection public
   macro definition __CS_THREADS in line 10
      protection public
   variable __CS_round in line 15
      protection public
   variable __CS_ret in line 17
      protection public
   variable __CS_ret_PREEMPTED in line 18
      protection public
   variable __CS_ret_ERROR in line 19
      protection public
   variable __CS_ret_FINISHED in line 20
      protection public
   variable __CS_error in line 22
      protection public
   variable __CS_error_detail in line 24
      protection public
   variable __ERR_MAXTHREADS_REACHED in line 25
      protection public
   variable __ERR_ERROR_LABEL_REACHED in line 26
      protection public
   variable __ERR_ASSERT_FAILURE in line 27
      protection public
   variable __ERR_UNLOCK_ATTEMPT in line 28
      protection public
   variable __ERR_JOIN_FAILED_WRONG_THREAD_ID in line 29
      protection public
   variable __ERR_JOIN_FAILED_THREAD_NOT_CREATED in line 30
      protection public
   variable __ERR_COND_WAIT_MUTEX_NOT_OWNED in line 31
      protection public
   variable __ERR_MUTEX_DESTROY in line 32
      protection public
   variable __ERR_MUTEX_NOT_OWNED in line 33
      protection public
   variable __CS_thread_index in line 36
      protection public
   variable __CS_thread_allocated in line 38
      protection public
   variable __CS_thread_born_round in line 39
      protection public
   variable __CS_thread in line 41
      protection public
   variable __CS_thread_status in line 43
      protection public
   variable __THREAD_UNUSED in line 44
      protection public
   variable __THREAD_RUNNING in line 45
      protection public
   variable __THREAD_FINISHED in line 46
      protection public
   variable __CS_thread_lockedon in line 53
      protection public
   function nondet_int() in line 68
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function __CS_cs(void) in line 70
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __CS_type defined in cseq-include.full.c
      uses variable __CS_round defined in cseq-include.full.c
      uses macro definition __CS_ROUNDS defined in cseq-include.full.c
      uses variable __CS_thread_lockedon defined in cseq-include.full.c
      uses variable __CS_thread_index defined in cseq-include.full.c
      uses variable __CS_ret defined in cseq-include.full.c
      uses function nondet_int() defined in cseq-include.full.c
      uses variable __CS_ret_PREEMPTED defined in cseq-include.full.c
   function __CS_pthread_mutex_init(__CS_pthread_mutex_t *,void *) in line 99
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_mutex_destroy(__CS_pthread_mutex_t *) in line 104
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in cseq-include.full.c
      uses variable __CS_error defined in cseq-include.full.c
      uses variable __CS_ret defined in cseq-include.full.c
      uses variable __CS_ret_ERROR defined in cseq-include.full.c
      uses variable __CS_error_detail defined in cseq-include.full.c
      uses variable __ERR_MUTEX_DESTROY defined in cseq-include.full.c
   function __CS_pthread_mutex_lock(__CS_pthread_mutex_t *) in line 116
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in cseq-include.full.c
      uses variable __CS_ret defined in cseq-include.full.c
      uses variable __CS_ret_PREEMPTED defined in cseq-include.full.c
   function __CS_pthread_mutex_unlock(__CS_pthread_mutex_t *) in line 124
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in cseq-include.full.c
      uses variable __CS_error defined in cseq-include.full.c
      uses variable __CS_ret defined in cseq-include.full.c
      uses variable __CS_ret_ERROR defined in cseq-include.full.c
      uses variable __CS_error_detail defined in cseq-include.full.c
      uses variable __ERR_UNLOCK_ATTEMPT defined in cseq-include.full.c
   function __CS_pthread_cond_init(__CS_pthread_cond_t *,void *) in line 136
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function __CS_pthread_cond_signal(__CS_pthread_cond_t *) in line 141
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in cseq-include.full.c
      uses variable __CS_thread_lockedon defined in cseq-include.full.c
      uses variable __CS_round defined in cseq-include.full.c
   function __CS_pthread_cond_broadcast(__CS_pthread_cond_t *) in line 152
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable j defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses macro definition __CS_THREADS defined in cseq-include.full.c
      uses variable __CS_thread_lockedon defined in cseq-include.full.c
      uses variable __CS_round defined in cseq-include.full.c
   function __CS_pthread_cond_wait(__CS_pthread_cond_t *,__CS_pthread_mutex_t *) in line 163
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable lock defined in benchmarks-cbmc-4.5/pthread-atomic/scull_safe.c
      uses variable __CS_thread_index defined in cseq-include.full.c
      uses variable __CS_error defined in cseq-include.full.c
      uses variable __CS_ret defined in cseq-include.full.c
      uses variable __CS_ret_ERROR defined in cseq-include.full.c
      uses variable __CS_error_detail defined in cseq-include.full.c
      uses variable __ERR_COND_WAIT_MUTEX_NOT_OWNED defined in cseq-include.full.c
      uses variable __CS_thread_lockedon defined in cseq-include.full.c
      uses variable __CS_round defined in cseq-include.full.c
      uses variable __CS_ret_PREEMPTED defined in cseq-include.full.c
   function __CS_assert(int) in line 184
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_error defined in cseq-include.full.c
      uses variable __CS_error_detail defined in cseq-include.full.c
      uses variable __ERR_ASSERT_FAILURE defined in cseq-include.full.c
      uses variable __CS_ret defined in cseq-include.full.c
      uses variable __CS_ret_ERROR defined in cseq-include.full.c
   function __CS_assume(int) in line 193
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable __CS_ret defined in cseq-include.full.c
      uses variable __CS_ret_PREEMPTED defined in cseq-include.full.c
   function __CS_pthread_join(__CS_pthread_t,void **) in line 198
      protection public
      34 lines of code
      2 parameters
      4 conditional paths
      uses macro definition __CS_THREADS defined in cseq-include.full.c
      uses variable __CS_error defined in cseq-include.full.c
      uses variable __CS_error_detail defined in cseq-include.full.c
      uses variable __ERR_JOIN_FAILED_WRONG_THREAD_ID defined in cseq-include.full.c
      uses variable __CS_ret defined in cseq-include.full.c
      uses variable __CS_ret_ERROR defined in cseq-include.full.c
      uses variable __CS_thread_status defined in cseq-include.full.c
      uses variable __CS_round defined in cseq-include.full.c
      uses variable __THREAD_RUNNING defined in cseq-include.full.c
      uses variable __CS_ret_PREEMPTED defined in cseq-include.full.c
      uses variable __THREAD_UNUSED defined in cseq-include.full.c
      uses variable __ERR_JOIN_FAILED_THREAD_NOT_CREATED defined in cseq-include.full.c
      uses variable __THREAD_FINISHED defined in cseq-include.full.c
   function __CS_pthread_create(__CS_pthread_t *,void *,void *(*)(void *),void *) in line 233
      protection public
      29 lines of code
      4 parameters
      2 conditional paths
      uses variable __CS_thread_index defined in cseq-include.full.c
      uses macro definition __CS_THREADS defined in cseq-include.full.c
      uses variable __CS_thread_allocated defined in cseq-include.full.c
      uses variable __CS_thread_born_round defined in cseq-include.full.c
      uses variable __CS_round defined in cseq-include.full.c
      uses variable __CS_thread defined in cseq-include.full.c
      uses function t1(void *) defined in benchmarks-cbmc-4.5/pthread/_cs_fib_longer_safe.c
      uses variable __CS_thread_status defined in cseq-include.full.c
      uses variable __THREAD_RUNNING defined in cseq-include.full.c
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/ctype.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/dirent.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/envz.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/errno.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/fastmath.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/fcntl.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/fenv.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/float.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/getopt.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/grp.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/iconv.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/ieeefp.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/inttypes.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/iso646.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/langinfo.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/libgen.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/limits.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/locale.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/malloc.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/math.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/newlib.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/paths.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/process.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/pthread.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/pwd.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/reent.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/regdef.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/sched.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/search.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/semaphore.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/setjmp.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/signal.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/stdarg.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/stdbool.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/stddef.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/stdint.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/stdio.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/stdlib.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/string.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/tar.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/termios.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/tgmath.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/time.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/unctrl.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/unistd.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/utime.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/utmp.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/wchar.h
file /DISSERTACAO-UFBA-2016/dataset/PAPERS/cseq/cseq-0.5/include/wctype.h
