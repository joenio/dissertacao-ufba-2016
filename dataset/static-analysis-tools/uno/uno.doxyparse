file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/dflow.c
module dflow.c
   typedef Fbase in line 463
      protection public
   typedef Cached in line 596
      protection public
   variable Verbose in line 19
      protection public
   variable uno in line 19
      protection public
   variable vis in line 19
      protection public
   variable type_check in line 19
      protection public
   variable picky in line 19
      protection public
   variable want in line 20
      protection public
   variable progname in line 20
      protection public
   variable SaveMe in line 28
      protection public
   variable is_a_prototype in line 29
      protection public
   variable Fct_name in line 31
      protection public
   variable RealDecls in line 32
      protection public
   variable watch in line 33
      protection public
   variable is_final in line 34
      protection public
   variable complaint in line 35
      protection public
   variable c_origin in line 36
      protection public
   variable d_g in line 37
      protection public
   variable freesyml in line 39
      protection public
   variable allsym in line 40
      protection public
   variable ref1_pref in line 433
      protection public
   variable fbase in line 465
      protection public
   variable cst in line 604
      protection public
   variable xtable in line 621
      protection public
   function bugger(char *,treenode *,int) in line 22
      protection public
      41 lines of code
      3 parameters
      11 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses variable leafnode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses enumvalue NODE_T defined in tree.h
      uses enumvalue TN_SELECT defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_FUNC_CALL defined in tree.h
   function emalloc(size_t) in line 23
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
   function x_stmnt(treenode *) in line 24
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function find_symbol(scopetab_t *,symentry_t *) in line 25
      protection public
      48 lines of code
      2 parameters
      1 conditional paths
      uses variable hashtab::tsize defined in symtab.h
      uses variable hashtab::tab defined in symtab.h
      uses variable symentry::next defined in symtab.h
      uses variable symentry::fn defined in symtab.h
      uses variable symentry::ln defined in symtab.h
      uses variable symentry::container defined in symtab.h
      uses function x_stmnt(treenode *) defined in symtab.c
      uses variable Verbose defined in symtab.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable vis defined in symtab.c
   function new_symentry(void) in line 26
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable symentry::next defined in symtab.h
      uses function emalloc(size_t) defined in symtab.c
      uses variable symentry::ln defined in symtab.h
      uses function current_linenumber(void) defined in symtab.c
      uses variable symentry::fn defined in symtab.h
      uses function current_filename(void) defined in symtab.c
   function doit(leafnode *,int) in line 46
      protection public
      23 lines of code
      2 parameters
      6 conditional paths
      uses variable leafnode::syment defined in tree.h
      uses variable symentry::nes defined in symtab.h
      uses variable leafnode::hdr defined in tree.h
      uses variable common::line defined in tree.h
      uses variable scopetab::owner defined in symtab.h
      uses function nmestr(str_t *) defined in nmetab.c
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
   function dep_node(SymList *,int) in line 71
      protection public
      22 lines of code
      2 parameters
      5 conditional paths
      uses variable d_g defined in dflow.c
      uses variable DuG::nxt defined in dflow.h
      uses variable DuG::sm defined in dflow.h
      uses variable SymList::sm defined in dflow.h
      uses variable DuG::marks defined in dflow.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable progname defined in dflow.c
      uses variable DuG::rdcls defined in dflow.h
      uses variable RealDecls defined in dflow.c
      uses variable DuG::d_e defined in dflow.h
   function dep_edge(DuG *,DuG *,int) in line 95
      protection public
      19 lines of code
      3 parameters
      4 conditional paths
      uses variable DuG::sm defined in dflow.h
      uses variable DuG::d_e defined in dflow.h
      uses variable DuGP::nxt defined in dflow.h
      uses variable DuGP::ptr defined in dflow.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable DuGP::dist defined in dflow.h
   function dep_graph(DefUse *) in line 116
      protection public
      19 lines of code
      1 parameters
      7 conditional paths
      uses variable uno defined in dflow.c
      uses variable DefUse::def defined in dflow.h
      uses variable DefUse::use defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses function dep_node(SymList *,int) defined in dflow.c
      uses macro definition USE defined in dtags.h
      uses macro definition DEF defined in dtags.h
      uses variable SymList::sm defined in dflow.h
      uses function dep_edge(DuG *,DuG *,int) defined in dflow.c
   function dump_defuse(DefUse *,FILE *) in line 137
      protection public
      49 lines of code
      2 parameters
      1 conditional paths
      uses variable DefUse::def defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable DefUse::use defined in dflow.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses macro definition DEF defined in dtags.h
      uses macro definition USE defined in dtags.h
      uses macro definition FCALL defined in dtags.h
      uses macro definition REF0 defined in dtags.h
      uses macro definition REF1 defined in dtags.h
      uses macro definition REF2 defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses macro definition ALIAS defined in dtags.h
      uses macro definition ARRAY_DECL defined in dtags.h
      uses macro definition HIDE defined in dtags.h
      uses macro definition DECL defined in dtags.h
      uses macro definition USEafterdef defined in dtags.h
      uses macro definition USEbeforedef defined in dtags.h
      uses macro definition PARAM defined in dtags.h
      uses macro definition IN_SIZEOF defined in dtags.h
      uses macro definition IS_PTR defined in dtags.h
      uses variable DefUse::aio defined in dflow.h
      uses variable ArList::nxt defined in dflow.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable ArList::tn defined in dflow.h
   function same_defuse(DefUse *,DefUse *) in line 188
      protection public
      28 lines of code
      2 parameters
      12 conditional paths
      uses variable DefUse::def defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::sm defined in dflow.h
      uses variable DefUse::use defined in dflow.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::mark defined in dflow.h
   function attach_defuse(treenode *,char *,DefUse *) in line 218
      protection public
      31 lines of code
      3 parameters
      5 conditional paths
      uses variable DefUse::def defined in dflow.h
      uses variable DefUse::use defined in dflow.h
      uses function dep_graph(DefUse *) defined in dflow.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::defuse defined in tree.h
      uses function same_defuse(DefUse *,DefUse *) defined in dflow.c
      uses variable progname defined in dflow.c
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function dump_defuse(DefUse *,FILE *) defined in dflow.c
   function rel_all(SymList *) in line 251
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable SymList::all defined in dflow.h
      uses variable freesyml defined in dflow.c
   function dflow_reset(void) in line 261
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function rel_all(SymList *) defined in dflow.c
      uses variable allsym defined in dflow.c
   function symadd(symentry_t *,int) in line 268
      protection public
      19 lines of code
      2 parameters
      2 conditional paths
      uses variable freesyml defined in dflow.c
      uses variable SymList::all defined in dflow.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses variable SymList::sm defined in dflow.h
      uses variable allsym defined in dflow.c
   function get_arlist(void) in line 289
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable ArList::nxt defined in dflow.h
      uses function emalloc(size_t) defined in dflow.c
   function merge_aio(ArList *,ArList *) in line 303
      protection public
      29 lines of code
      2 parameters
      9 conditional paths
      uses variable ArList::nxt defined in dflow.h
      uses variable ArList::tn defined in dflow.h
      uses function get_arlist(void) defined in dflow.c
   function merge_syms(SymList *,SymList *) in line 334
      protection public
      33 lines of code
      2 parameters
      9 conditional paths
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::sm defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses function symadd(symentry_t *,int) defined in dflow.c
   function track_clr(void) in line 369
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable complaint defined in dflow.c
   function merge_lists(DefUse *,DefUse *) in line 375
      protection public
      37 lines of code
      2 parameters
      10 conditional paths
      uses function emalloc(size_t) defined in dflow.c
      uses variable uno defined in dflow.c
      uses variable DefUse::def defined in dflow.h
      uses function merge_syms(SymList *,SymList *) defined in dflow.c
      uses variable DefUse::use defined in dflow.h
      uses variable DefUse::other defined in dflow.h
      uses variable DefUse::aio defined in dflow.h
      uses function merge_aio(ArList *,ArList *) defined in dflow.c
      uses variable type_check defined in dflow.c
      uses variable DefUse::der_type defined in dflow.h
      uses variable complaint defined in dflow.c
      uses variable is_final defined in dflow.c
      uses variable c_origin defined in dflow.c
   function def_and_use(int) in line 414
      protection public
      18 lines of code
      1 parameters
      12 conditional paths
   function set_u(struct symentry *,char *) in line 436
      protection public
      21 lines of code
      2 parameters
      6 conditional paths
      uses variable Fct_name defined in dflow.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable ref1_pref defined in dflow.c
      uses variable symentry::decl_level defined in symtab.h
   function set_fbase(int,char *) in line 468
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable fbase defined in dflow.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable Fbase::nm defined in dflow.c
      uses variable Fbase::ln defined in dflow.c
      uses variable Fbase::fcalls defined in dflow.c
      uses variable Fbase::nxt defined in dflow.c
   function add_fbase(int,char *) in line 483
      protection public
      24 lines of code
      2 parameters
      5 conditional paths
      uses variable vis defined in dflow.c
      uses variable fbase defined in dflow.c
      uses function set_fbase(int,char *) defined in dflow.c
      uses variable want defined in dflow.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable Fbase::nm defined in dflow.c
      uses variable Fbase::ln defined in dflow.c
      uses variable Fbase::nxt defined in dflow.c
      uses variable Fbase::fcalls defined in dflow.c
   function storefname(treenode *) in line 509
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable SaveMe defined in dflow.c
      uses function bugger(char *,treenode *,int) defined in dflow.c
      uses variable treenode::lnode defined in tree.h
      uses function add_fbase(int,char *) defined in dflow.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
   function dflow_mark(FILE *,int) in line 517
      protection public
      25 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ANY defined in dtags.h
      uses macro definition DEF defined in dtags.h
      uses macro definition FCALL defined in dtags.h
      uses macro definition USE defined in dtags.h
      uses macro definition REF0 defined in dtags.h
      uses macro definition REF1 defined in dtags.h
      uses macro definition REF2 defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses macro definition ALIAS defined in dtags.h
      uses macro definition ARRAY_DECL defined in dtags.h
      uses macro definition HIDE defined in dtags.h
      uses macro definition DECL defined in dtags.h
      uses macro definition USEafterdef defined in dtags.h
      uses macro definition USEbeforedef defined in dtags.h
      uses macro definition UNO_CONST defined in dtags.h
      uses macro definition PARAM defined in dtags.h
      uses macro definition IN_SIZEOF defined in dtags.h
      uses macro definition IS_PTR defined in dtags.h
      uses macro definition INCOND defined in dtags.h
   function add_aio(DefUse *,treenode *) in line 544
      protection public
      19 lines of code
      2 parameters
      5 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable DefUse::aio defined in dflow.h
      uses variable ArList::nxt defined in dflow.h
      uses variable ArList::tn defined in dflow.h
      uses function get_arlist(void) defined in dflow.c
   function sym_babble(leafnode *,unsigned long) in line 565
      protection public
      30 lines of code
      2 parameters
      8 conditional paths
      uses variable leafnode::syment defined in tree.h
      uses variable symentry::nes defined in symtab.h
      uses variable leafnode::hdr defined in tree.h
      uses variable common::line defined in tree.h
      uses variable scopetab::owner defined in symtab.h
      uses function nmestr(str_t *) defined in nmetab.c
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable scopetab::owner_t defined in symtab.h
      uses enumvalue TN_OBJ_DEF defined in tree.h
      uses enumvalue TN_FUNC_DEF defined in tree.h
      uses function dflow_mark(FILE *,int) defined in dflow.c
      uses function find_symbol(scopetab_t *,symentry_t *) defined in dflow.c
      uses variable symentry::used defined in symtab.h
      uses function zero_test(treenode *) defined in dflow.c
   function zero_test(treenode *) in line 596
      protection public
      39 lines of code
      1 parameters
      1 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses macro definition ZT defined in uno_lts.h
      uses variable treenode::rnode defined in tree.h
   function cache_str(char *) in line 607
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable cst defined in dflow.c
      uses variable Cached::nxt defined in dflow.c
      uses variable Cached::nm defined in dflow.c
      uses function emalloc(size_t) defined in dflow.c
   function track_types(DefUse *,leafnode *) in line 629
      protection public
      61 lines of code
      2 parameters
      14 conditional paths
      uses variable type_check defined in dflow.c
      uses variable leafnode::syment defined in tree.h
      uses variable symentry::fn defined in symtab.h
      uses variable symentry::kind defined in symtab.h
      uses macro definition TYPEDEF_ENTRY defined in symtab.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable symentry::node defined in symtab.h
      uses variable xtable defined in dflow.c
      uses macro definition PARAM_ENTRY defined in symtab.h
      uses variable DefUse::der_type defined in dflow.h
      uses function cache_str(char *) defined in dflow.c
      uses variable symentry::ln defined in symtab.h
   function walk_tree(treenode *,unsigned long) in line 692
      protection public
      524 lines of code
      2 parameters
      1 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
      uses function name_of_nodetype(node_type) defined in tree.c
      uses variable common::which defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses variable common::type defined in tree.h
      uses function dflow_mark(FILE *,int) defined in dflow.c
      uses enumvalue LEAF_T defined in tree.h
      uses variable leafnode::hdr defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable Verbose defined in dflow.c
      uses function sym_babble(leafnode *,unsigned long) defined in dflow.c
      uses variable leafnode::syment defined in tree.h
      uses variable symentry::used defined in symtab.h
      uses variable uno defined in dflow.c
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses function new_symentry(void) defined in dflow.c
      uses variable symentry::nme defined in symtab.h
      uses variable symentry::node defined in symtab.h
      uses variable symentry::ln defined in symtab.h
      uses variable symentry::fn defined in symtab.h
      uses variable common::fnm defined in tree.h
      uses function is_typedef(symentry_t *) defined in symtab.c
      uses variable symentry::nes defined in symtab.h
      uses variable scopetab::owner_t defined in symtab.h
      uses enumvalue TN_OBJ_DEF defined in tree.h
      uses macro definition FCALL defined in dtags.h
      uses function nmestr(str_t *) defined in nmetab.c
      uses variable symentry::decl_level defined in symtab.h
      uses macro definition USE defined in dtags.h
      uses macro definition REF0 defined in dtags.h
      uses macro definition REF1 defined in dtags.h
      uses macro definition REF2 defined in dtags.h
      uses function doit(leafnode *,int) defined in dflow.c
      uses variable ref1_pref defined in dflow.c
      uses variable scopetab::owner defined in symtab.h
      uses function set_u(struct symentry *,char *) defined in dflow.c
      uses function emalloc(size_t) defined in dflow.c
      uses macro definition PARAM defined in dtags.h
      uses variable symentry::kind defined in symtab.h
      uses macro definition PARAM_ENTRY defined in symtab.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable symentry::container defined in symtab.h
      uses variable is_a_prototype defined in dflow.c
      uses variable DefUse::der_type defined in dflow.h
      uses variable DefUse::other defined in dflow.h
      uses function symadd(symentry_t *,int) defined in dflow.c
      uses variable DefUse::special defined in dflow.h
      uses macro definition ALIAS defined in dtags.h
      uses variable DefUse::use defined in dflow.h
      uses macro definition DEF defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses variable DefUse::def defined in dflow.h
      uses macro definition DECL defined in dtags.h
      uses macro definition ARRAY_DECL defined in dtags.h
      uses function track_types(DefUse *,leafnode *) defined in dflow.c
      uses function dump_defuse(DefUse *,FILE *) defined in dflow.c
      uses enumvalue IF_T defined in tree.h
      uses variable if_node::hdr defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses function zero_test(treenode *) defined in dflow.c
      uses variable if_node::cond defined in tree.h
      uses function walk_tree(treenode *,unsigned long) defined in dflow.c
      uses macro definition INCOND defined in dtags.h
      uses function attach_defuse(treenode *,char *,DefUse *) defined in dflow.c
      uses variable if_node::then_n defined in tree.h
      uses function merge_lists(DefUse *,DefUse *) defined in dflow.c
      uses variable if_node::else_n defined in tree.h
      uses enumvalue TN_COND_EXPR defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses variable RealDecls defined in dflow.c
      uses variable for_node::init defined in tree.h
      uses variable for_node::hdr defined in tree.h
      uses enumvalue TN_FUNC_DEF defined in tree.h
      uses variable for_node::test defined in tree.h
      uses enumvalue TN_FOR defined in tree.h
      uses variable for_node::incr defined in tree.h
      uses variable for_node::stemnt defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable Fct_name defined in dflow.c
      uses variable want defined in dflow.c
      uses variable vis defined in dflow.c
      uses function set_fbase(int,char *) defined in dflow.c
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses macro definition IS_PTR defined in dtags.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses function add_aio(DefUse *,treenode *) defined in dflow.c
      uses enumvalue TN_SELECT defined in tree.h
      uses variable common::tok defined in tree.h
      uses enumvalue TN_CAST defined in tree.h
      uses variable type_check defined in dflow.c
      uses function cache_str(char *) defined in dflow.c
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses function storefname(treenode *) defined in dflow.c
      uses enumvalue TN_EXPR defined in tree.h
      uses macro definition IN_SIZEOF defined in dtags.h
      uses variable progname defined in dflow.c
      uses variable is_final defined in dflow.c
      uses enumvalue TN_SWITCH defined in tree.h
      uses enumvalue TN_WHILE defined in tree.h
      uses enumvalue TN_DOWHILE defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses variable watch defined in dflow.c
      uses variable c_origin defined in dflow.c
      uses function track_clr(void) defined in dflow.c
      uses function def_and_use(int) defined in dflow.c
      uses enumvalue TN_DEREF defined in tree.h
      uses macro definition USEafterdef defined in dtags.h
      uses variable picky defined in dflow.c
      uses enumvalue TN_INT defined in tree.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses enumvalue TN_STRING defined in tree.h
      uses enumvalue TN_JUMP defined in tree.h
      uses enumvalue TN_INDEX defined in tree.h
      uses enumvalue TN_TRANS_LIST defined in tree.h
      uses enumvalue TN_TYPE_LIST defined in tree.h
      uses enumvalue NONE_T defined in tree.h
   variable Fbase::fcalls in line 461
      protection public
   variable Fbase::ln in line 460
      protection public
   variable Fbase::nm in line 459
      protection public
   variable Fbase::nxt in line 462
      protection public
   variable Cached::nm in line 600
      protection public
   variable Cached::nxt in line 601
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/dflow.h
module dflow.h
   macro definition UB in line 79
      protection public
   macro definition LB in line 80
      protection public
   macro definition UNK in line 81
      protection public
   macro definition FROMASGN in line 82
      protection public
   macro definition FROMEXPR in line 83
      protection public
   macro definition DUP in line 84
      protection public
   macro definition NEG in line 85
      protection public
   typedef ArSize in line 601
      protection public
   typedef ArBound in line 601
      protection public
   typedef SymList in line 601
      protection public
   typedef ArList in line 601
      protection public
   typedef DefUse in line 601
      protection public
   typedef DuG in line 601
      protection public
   typedef DuGP in line 601
      protection public
   typedef BoundStack in line 601
      protection public
   variable SymList::all in line 25
      protection public
   variable SymList::mark in line 22
      protection public
   variable SymList::nxt in line 24
      protection public
   variable SymList::selected in line 21
      protection public
   variable SymList::sm in line 23
      protection public
   variable ArList::nxt in line 30
      protection public
   variable ArList::tn in line 29
      protection public
   variable ArSize::b in line 35
      protection public
   variable ArSize::nxt in line 36
      protection public
   variable ArSize::s in line 34
      protection public
   variable ArBound::bounds in line 45
      protection public
   variable ArBound::dup in line 44
      protection public
   variable ArBound::lb in line 46
      protection public
   variable ArBound::level_set in line 47
      protection public
   variable ArBound::nxt in line 48
      protection public
   variable ArBound::s in line 42
      protection public
   variable ArBound::sameas in line 43
      protection public
   variable ArBound::ub in line 46
      protection public
   variable DefUse::aio in line 56
      protection public
   variable DefUse::def in line 53
      protection public
   variable DefUse::der_type in line 57
      protection public
   variable DefUse::other in line 55
      protection public
   variable DefUse::special in line 52
      protection public
   variable DefUse::use in line 54
      protection public
   variable DuG::d_e in line 64
      protection public
   variable DuG::marks in line 62
      protection public
   variable DuG::nxt in line 65
      protection public
   variable DuG::rdcls in line 63
      protection public
   variable DuG::sm in line 61
      protection public
   variable DuGP::dist in line 70
      protection public
   variable DuGP::nxt in line 71
      protection public
   variable DuGP::ptr in line 69
      protection public
   variable BoundStack::curbounds in line 75
      protection public
   variable BoundStack::nxt in line 76
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/dtags.h
module dtags.h
   macro definition DEF in line 15
      protection public
   macro definition FCALL in line 16
      protection public
   macro definition USE in line 17
      protection public
   macro definition REF0 in line 18
      protection public
   macro definition REF1 in line 19
      protection public
   macro definition REF2 in line 20
      protection public
   macro definition DEREF in line 21
      protection public
   macro definition ALIAS in line 22
      protection public
   macro definition ARRAY_DECL in line 23
      protection public
   macro definition HIDE in line 24
      protection public
   macro definition DECL in line 25
      protection public
   macro definition USEafterdef in line 26
      protection public
   macro definition USEbeforedef in line 27
      protection public
   macro definition UNO_CONST in line 28
      protection public
   macro definition PARAM in line 29
      protection public
   macro definition INCOND in line 30
      protection public
   macro definition ISTATIC in line 31
      protection public
   macro definition IN_SIZEOF in line 32
      protection public
   macro definition IS_PTR in line 33
      protection public
   macro definition NONE in line 35
      protection public
   macro definition ANY in line 36
      protection public
   macro definition SELECTED in line 38
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/globals.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/heap.c
module heap.c
   typedef FC in line 23
      protection public
   variable free_chunks in line 59
      protection public
   function emalloc(size_t) in line 19
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
   function efree(void *) in line 20
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function CreateHeap(unsigned int,unsigned int) in line 23
      protection public
      28 lines of code
      2 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in heap.c
      uses macro definition max defined in heap.h
      uses macro definition MIN_SZE defined in heap.h
      uses macro definition ALGN_SZE defined in heap.h
      uses variable hp_strt::chnk_sze defined in heap.h
      uses variable hp_strt::ch_ratio defined in heap.h
      uses macro definition DEFLT_RATIO defined in heap.h
      uses variable hp_strt::num_alloc defined in heap.h
      uses variable hp_strt::num_free defined in heap.h
      uses variable hp_strt::num_hunks defined in heap.h
      uses variable hp_strt::next_chunk defined in heap.h
      uses variable hp_strt::hunk_array_sze defined in heap.h
      uses macro definition MIN_HUNK_ARRY defined in heap.h
      uses variable hp_strt::free_list defined in heap.h
      uses variable hp_strt::hunks defined in heap.h
      uses macro definition PNTR_SZE defined in heap.h
   function rel_chunk(void *) in line 85
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses macro definition MX_NODE_SZE defined in treestk.h
      uses variable FC::fc defined in heap.c
      uses variable FC::nxt defined in heap.c
      uses variable free_chunks defined in heap.c
   function DestroyHeap(Heap *) in line 102
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses variable hp_strt::num_hunks defined in heap.h
      uses variable hp_strt::ch_ratio defined in heap.h
      uses variable hp_strt::hunks defined in heap.h
      uses macro definition MX_NODE_SZE defined in treestk.h
      uses function rel_chunk(void *) defined in heap.c
   function HeapAlloc_Gen(Heap *) in line 122
      protection public
      63 lines of code
      1 parameters
      1 conditional paths
      uses variable free_chunks defined in heap.c
      uses variable FC::fc defined in heap.c
      uses variable FC::nxt defined in heap.c
      uses variable hp_strt::num_hunks defined in heap.h
      uses variable hp_strt::next_chunk defined in heap.h
      uses variable hp_strt::ch_ratio defined in heap.h
      uses variable hp_strt::hunk_array_sze defined in heap.h
      uses function emalloc(size_t) defined in heap.c
      uses macro definition PNTR_SZE defined in heap.h
      uses variable hp_strt::hunks defined in heap.h
      uses function efree(void *) defined in heap.c
      uses variable hp_strt::chnk_sze defined in heap.h
      uses variable hp_strt::num_alloc defined in heap.h
   function HeapFree(Heap *,void *) in line 187
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function rel_chunk(void *) defined in heap.c
   function HeapAlloc(Heap *) in line 193
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function HeapAlloc_Gen(Heap *) defined in heap.c
   variable FC::base in line 56
      protection public
   variable FC::fc in line 57
      protection public
   variable FC::nxt in line 55
      protection public
   variable FC::@0::base in line 56
      protection public
   variable FC::@0::nxt in line 55
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/heap.h
module heap.h
   macro definition max in line 12
      protection public
   macro definition MIN_HUNK_ARRY in line 18
      protection public
   macro definition DEFLT_RATIO in line 19
      protection public
   macro definition PNTR_SZE in line 23
      protection public
   macro definition ALGN_SZE in line 24
      protection public
   macro definition MIN_SZE in line 25
      protection public
   typedef Heap in line 40
      protection public
   function CreateHeap(unsigned int,unsigned int) in line 42
      protection public
      28 lines of code
      2 parameters
      3 conditional paths
      uses function emalloc(size_t) defined in heap.c
      uses macro definition max defined in heap.h
      uses macro definition MIN_SZE defined in heap.h
      uses macro definition ALGN_SZE defined in heap.h
      uses variable hp_strt::chnk_sze defined in heap.h
      uses variable hp_strt::ch_ratio defined in heap.h
      uses macro definition DEFLT_RATIO defined in heap.h
      uses variable hp_strt::num_alloc defined in heap.h
      uses variable hp_strt::num_free defined in heap.h
      uses variable hp_strt::num_hunks defined in heap.h
      uses variable hp_strt::next_chunk defined in heap.h
      uses variable hp_strt::hunk_array_sze defined in heap.h
      uses macro definition MIN_HUNK_ARRY defined in heap.h
      uses variable hp_strt::free_list defined in heap.h
      uses variable hp_strt::hunks defined in heap.h
      uses macro definition PNTR_SZE defined in heap.h
   function DestroyHeap(Heap *) in line 43
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable hp_strt::num_hunks defined in heap.h
      uses variable hp_strt::ch_ratio defined in heap.h
      uses variable hp_strt::hunks defined in heap.h
      uses macro definition MX_NODE_SZE defined in treestk.h
      uses function rel_chunk(void *) defined in heap.c
   function FreeHeap(Heap *) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function HeapAlloc_Gen(Heap *) in line 45
      protection public
      63 lines of code
      1 parameters
      6 conditional paths
      uses variable FC::fc defined in heap.c
      uses variable FC::nxt defined in heap.c
      uses variable hp_strt::num_hunks defined in heap.h
      uses variable hp_strt::next_chunk defined in heap.h
      uses variable hp_strt::ch_ratio defined in heap.h
      uses variable hp_strt::hunk_array_sze defined in heap.h
      uses function emalloc(size_t) defined in heap.c
      uses macro definition PNTR_SZE defined in heap.h
      uses variable hp_strt::hunks defined in heap.h
      uses function efree(void *) defined in heap.c
      uses variable hp_strt::chnk_sze defined in heap.h
      uses variable hp_strt::num_alloc defined in heap.h
   function HeapAlloc(Heap *) in line 46
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function HeapAlloc_Gen(Heap *) defined in heap.c
   function HeapFree(Heap *,void *) in line 47
      protection public
      4 lines of code
      2 parameters
      2 conditional paths
      uses function rel_chunk(void *) defined in heap.c
   variable hp_strt::ch_ratio in line 29
      protection public
   variable hp_strt::chnk_sze in line 28
      protection public
   variable hp_strt::free_list in line 38
      protection public
   variable hp_strt::hunk_array_sze in line 35
      protection public
   variable hp_strt::hunks in line 39
      protection public
   variable hp_strt::next_chunk in line 36
      protection public
   variable hp_strt::num_alloc in line 31
      protection public
   variable hp_strt::num_free in line 32
      protection public
   variable hp_strt::num_hunks in line 33
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/lexer.h
module lexer.h
   macro definition MAX_STRING_LEN in line 17
      protection public
   macro definition MAX_TOKN_LEN in line 20
      protection public
   macro definition YYSTYPE in line 31
      protection public
   function get_lineno(int) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yywarn(char *) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yyerror(char *) in line 35
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yyerr(char *) in line 36
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable tree_union::forn in line 26
      protection public
   variable tree_union::ifn in line 25
      protection public
   variable tree_union::leaf in line 24
      protection public
   variable tree_union::node in line 23
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/nmetab.c
module nmetab.c
   macro definition BITS_IN_int in line 18
      protection public
   macro definition THREE_QUARTERS in line 19
      protection public
   macro definition ONE_EIGHTH in line 20
      protection public
   macro definition HIGH_BITS in line 21
      protection public
   macro definition HASH_ITEM_SZE in line 23
      protection public
   macro definition MAX_HASH_BCKTS in line 24
      protection public
   typedef HashItem in line 29
      protection public
   variable NmeTab in line 31
      protection public
   function emalloc(size_t) in line 33
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
   function nmestr(str_t *) in line 36
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable hi::sym defined in nmetab.c
      uses variable string_str::str defined in nmetab.h
   function calc_hash(char *) in line 44
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses macro definition ONE_EIGHTH defined in nmetab.c
      uses macro definition HIGH_BITS defined in nmetab.c
      uses macro definition THREE_QUARTERS defined in nmetab.c
   function init_nmetab(void) in line 56
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition MAX_HASH_BCKTS defined in nmetab.c
      uses variable NmeTab defined in nmetab.c
   function nmelook(char *,int) in line 64
      protection public
      27 lines of code
      2 parameters
      1 conditional paths
      uses function calc_hash(char *) defined in nmetab.c
      uses variable hi::sym defined in nmetab.c
      uses macro definition MAX_HASH_BCKTS defined in nmetab.c
      uses variable NmeTab defined in nmetab.c
      uses variable hi::next defined in nmetab.c
      uses variable string_str::hash defined in nmetab.h
      uses variable string_str::str defined in nmetab.h
      uses function emalloc(size_t) defined in nmetab.c
      uses macro definition HASH_ITEM_SZE defined in nmetab.c
   variable hi::next in line 28
      protection public
   variable hi::sym in line 27
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/nmetab.h
module nmetab.h
   typedef str_t in line 17
      protection public
   function init_nmetab(void) in line 19
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses macro definition MAX_HASH_BCKTS defined in nmetab.c
   function nmelook(char *,int) in line 20
      protection public
      27 lines of code
      2 parameters
      4 conditional paths
      uses variable hi::sym defined in nmetab.c
      uses macro definition MAX_HASH_BCKTS defined in nmetab.c
      uses variable hi::next defined in nmetab.c
      uses variable string_str::hash defined in nmetab.h
      uses variable string_str::str defined in nmetab.h
      uses function emalloc(size_t) defined in nmetab.c
      uses macro definition HASH_ITEM_SZE defined in nmetab.c
   function nmestr(str_t *) in line 21
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable hi::sym defined in nmetab.c
      uses variable string_str::str defined in nmetab.h
   variable string_str::hash in line 15
      protection public
   variable string_str::str in line 16
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/prnttree.c
module prnttree.c
   macro definition BufLimit in line 17
      protection public
   variable decl_cnt in line 19
      protection public
   variable just_left_blk in line 20
      protection public
   variable enum_list_cnt in line 21
      protection public
   variable can_flush in line 22
      protection public
   variable PBuf in line 23
      protection public
   variable progname in line 25
      protection public
   variable saw_a_typedef_name in line 26
      protection public
   function clean_tmps(void) in line 27
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function indented(int) in line 30
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable PBuf defined in prnttree.c
   function fput_meta(int,int) in line 38
      protection public
      43 lines of code
      2 parameters
      12 conditional paths
      uses variable PBuf defined in prnttree.c
   function fput_meta2(char *) in line 83
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses function fput_meta(int,int) defined in prnttree.c
   function do_recur(treenode *,int) in line 90
      protection public
      507 lines of code
      2 parameters
      92 conditional paths
      uses variable can_flush defined in prnttree.c
      uses variable PBuf defined in prnttree.c
      uses macro definition BufLimit defined in prnttree.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function clean_tmps(void) defined in prnttree.c
      uses variable just_left_blk defined in prnttree.c
      uses variable common::which defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses variable progname defined in prnttree.c
      uses enumvalue LEAF_T defined in tree.h
      uses variable leafnode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_LABEL defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_COMMENT defined in tree.h
      uses variable leafnode::str defined in tree.h
      uses enumvalue TN_ELLIPSIS defined in tree.h
      uses enumvalue TN_STRING defined in tree.h
      uses function fput_meta2(char *) defined in prnttree.c
      uses enumvalue TN_TYPE defined in tree.h
      uses function toksym(int,int) defined in prnttree.h
      uses variable saw_a_typedef_name defined in prnttree.c
      uses enumvalue TN_INT defined in tree.h
      uses function fput_meta(int,int) defined in prnttree.c
      uses variable leafnode::ival defined in tree.h
      uses enumvalue TN_REAL defined in tree.h
      uses variable leafnode::dval defined in tree.h
      uses enumvalue TN_INIT_BLK defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses variable if_node::hdr defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable if_node::cond defined in tree.h
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
      uses function indented(int) defined in prnttree.c
      uses enumvalue TN_COND_EXPR defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses variable for_node::hdr defined in tree.h
      uses enumvalue TN_FUNC_DEF defined in tree.h
      uses variable for_node::init defined in tree.h
      uses variable for_node::test defined in tree.h
      uses variable for_node::incr defined in tree.h
      uses variable for_node::stemnt defined in tree.h
      uses enumvalue TN_FOR defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses enumvalue TN_TRANS_LIST defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses variable decl_cnt defined in prnttree.c
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses enumvalue TN_BLOCK defined in tree.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses enumvalue TN_EXPR_LIST defined in tree.h
      uses enumvalue TN_NAME_LIST defined in tree.h
      uses enumvalue TN_ENUM_LIST defined in tree.h
      uses variable enum_list_cnt defined in prnttree.c
      uses enumvalue TN_FIELD_LIST defined in tree.h
      uses enumvalue TN_PARAM_LIST defined in tree.h
      uses enumvalue TN_IDENT_LIST defined in tree.h
      uses enumvalue TN_TYPE_LIST defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses enumvalue TN_STEMNT_LIST defined in tree.h
      uses enumvalue TN_STEMNT defined in tree.h
      uses enumvalue TN_COMP_DECL defined in tree.h
      uses enumvalue TN_BIT_FIELD defined in tree.h
      uses enumvalue TN_TYPE_NME defined in tree.h
      uses enumvalue TN_INIT_LIST defined in tree.h
      uses enumvalue TN_OBJ_DEF defined in tree.h
      uses enumvalue TN_OBJ_REF defined in tree.h
      uses enumvalue TN_CAST defined in tree.h
      uses enumvalue TN_JUMP defined in tree.h
      uses enumvalue TN_SWITCH defined in tree.h
      uses enumvalue TN_INDEX defined in tree.h
      uses enumvalue TN_DEREF defined in tree.h
      uses enumvalue TN_SELECT defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses enumvalue TN_WHILE defined in tree.h
      uses enumvalue TN_DOWHILE defined in tree.h
      uses enumvalue TN_EMPTY defined in tree.h
   function buf_recur(treenode *) in line 599
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable PBuf defined in prnttree.c
      uses function do_recur(treenode *,int) defined in prnttree.c
   function print_recur(treenode *,FILE *) in line 607
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable can_flush defined in prnttree.c
      uses variable PBuf defined in prnttree.c
      uses function do_recur(treenode *,int) defined in prnttree.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/prnttree.h
module prnttree.h
   macro definition VERY_LARGE in line 25
      protection public
   macro definition MEDIUM_LARGE in line 26
      protection public
   function indent(int,FILE *) in line 19
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function fputs_metachr(char,int) in line 20
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function fputs_metastr(char *) in line 21
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function print_ptr(void *) in line 22
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function toksym(int,int) in line 23
      protection public
      246 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/symtab.c
module symtab.c
   macro definition DBG in line 20
      protection public
   macro definition CHUNK in line 39
      protection public
   macro definition ALGN in line 40
      protection public
   typedef Scoop in line 301
      protection public
   typedef Cname in line 857
      protection public
   variable Verbose in line 36
      protection public
   variable progname in line 37
      protection public
   variable memcnt in line 42
      protection public
   variable memwaste in line 43
      protection public
   variable left in line 53
      protection public
   variable have in line 54
      protection public
   variable fses in line 55
      protection public
   variable freehtab in line 57
      protection public
   variable freestab in line 58
      protection public
   variable freesymt in line 59
      protection public
   variable vis in line 61
      protection public
   variable scoop in line 317
      protection public
   variable freescoop in line 317
      protection public
   variable cnames in line 859
      protection public
   function child_insert(scopetab_t *,scopetab_t *) in line 22
      protection public
      20 lines of code
      2 parameters
      4 conditional paths
      uses variable scopetab::level defined in symtab.h
      uses variable scopetab::nchild defined in symtab.h
      uses variable scopetab::size defined in symtab.h
      uses variable scopetab::children defined in symtab.h
      uses function emalloc(size_t) defined in symtab.c
   function mk_g(str_t *,treenode *,int) in line 23
      protection public
      14 lines of code
      3 parameters
      1 conditional paths
      uses function new_symentry(void) defined in symtab.c
      uses variable symentry::kind defined in symtab.h
      uses variable symentry::nme defined in symtab.h
      uses variable symentry::node defined in symtab.h
      uses variable symentry::nes defined in symtab.h
      uses variable symentry::decl_level defined in symtab.h
      uses variable symentry::container defined in symtab.h
   function po_deltabs(scopetab_t *) in line 24
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable scopetab::nchild defined in symtab.h
      uses variable scopetab::children defined in symtab.h
      uses function free_scopetab(scopetab_t *) defined in symtab.c
   function show_hashtab(hashtab_t *,int,FILE *) in line 25
      protection public
      8 lines of code
      3 parameters
      3 conditional paths
      uses variable hashtab::tsize defined in symtab.h
      uses variable hashtab::tab defined in symtab.h
      uses variable symentry::next defined in symtab.h
      uses function show_symentry(symentry_t *,int,FILE *) defined in symtab.c
   function show_scopetab(scopetab_t *,int,FILE *) in line 26
      protection public
      44 lines of code
      3 parameters
      12 conditional paths
      uses variable scopetab::level defined in symtab.h
      uses variable scopetab::nsyms defined in symtab.h
      uses variable scopetab::nchild defined in symtab.h
      uses variable scopetab::htab defined in symtab.h
      uses variable scopetab::parent defined in symtab.h
      uses variable scopetab::owner defined in symtab.h
      uses variable scopetab::owner_t defined in symtab.h
      uses enumvalue TN_OBJ_DEF defined in tree.h
      uses enumvalue TN_FUNC_DEF defined in tree.h
      uses function dotabs(int,FILE *) defined in symtab.c
      uses function show_hashtab(hashtab_t *,int,FILE *) defined in symtab.c
      uses variable scopetab::children defined in symtab.h
   function show_symentry(symentry_t *,int,FILE *) in line 27
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function dotabs(int,FILE *) defined in symtab.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function print_frag(treenode *,FILE *) defined in symtab.c
      uses variable symentry::node defined in symtab.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_FUNC_DEF defined in tree.h
      uses variable symentry::used defined in symtab.h
   function current_filename(void) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function current_linenumber(void) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function sbrk(unsigned) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function uno_ignore(symentry_t *) in line 32
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function x_stmnt(treenode *) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function x_frag(treenode *,FILE *) in line 35
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function efree(void *) in line 45
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function not_malloc(unsigned int) in line 65
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable left defined in symtab.c
      uses macro definition CHUNK defined in symtab.c
      uses variable have defined in symtab.c
      uses variable progname defined in symtab.c
   function emalloc(size_t) in line 87
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
   function memstats(void) in line 117
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable memcnt defined in symtab.c
      uses variable memwaste defined in symtab.c
   function dotabs(int,FILE *) in line 125
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
   function print_frag(treenode *,FILE *) in line 133
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses function x_stmnt(treenode *) defined in symtab.c
   function new_symentry(void) in line 157
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable fses defined in symtab.c
      uses variable symentry::next defined in symtab.h
      uses function emalloc(size_t) defined in symtab.c
      uses variable symentry::ln defined in symtab.h
      uses function current_linenumber(void) defined in symtab.c
      uses variable symentry::fn defined in symtab.h
      uses function current_filename(void) defined in symtab.c
   function mk_typedef(str_t *,treenode *) in line 189
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function mk_g(str_t *,treenode *,int) defined in symtab.c
      uses macro definition TYPEDEF_ENTRY defined in symtab.h
   function mk_funcdef(str_t *,treenode *) in line 192
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function mk_g(str_t *,treenode *,int) defined in symtab.c
      uses macro definition FUNCDEF_ENTRY defined in symtab.h
   function mk_vardecl(str_t *,treenode *) in line 195
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function mk_g(str_t *,treenode *,int) defined in symtab.c
      uses macro definition VARDECL_ENTRY defined in symtab.h
   function mk_enum_const(str_t *,treenode *) in line 198
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function mk_g(str_t *,treenode *,int) defined in symtab.c
      uses macro definition ENUM_ENTRY defined in symtab.h
   function mk_label(str_t *,treenode *) in line 201
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function mk_g(str_t *,treenode *,int) defined in symtab.c
      uses macro definition LABEL_ENTRY defined in symtab.h
   function mk_tag(str_t *,treenode *) in line 204
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function mk_g(str_t *,treenode *,int) defined in symtab.c
      uses macro definition TAG_ENTRY defined in symtab.h
   function mk_component(str_t *,treenode *,treenode *) in line 207
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function mk_g(str_t *,treenode *,int) defined in symtab.c
      uses macro definition COMP_ENTRY defined in symtab.h
      uses variable symentry::container defined in symtab.h
   function is_typedef(symentry_t *) in line 214
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable symentry::kind defined in symtab.h
      uses macro definition TYPEDEF_ENTRY defined in symtab.h
   function is_enum_const(symentry_t *) in line 215
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable symentry::kind defined in symtab.h
      uses macro definition ENUM_ENTRY defined in symtab.h
   function free_symlist(symentry_t *) in line 218
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable symentry::next defined in symtab.h
      uses variable fses defined in symtab.c
   function free_hashtab(hashtab_t *) in line 229
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable hashtab::tsize defined in symtab.h
      uses function free_symlist(symentry_t *) defined in symtab.c
      uses variable hashtab::tab defined in symtab.h
      uses variable hashtab::nxt defined in symtab.h
      uses variable freehtab defined in symtab.c
   function new_hashtab(void) in line 243
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
      uses variable freehtab defined in symtab.c
      uses variable hashtab::nxt defined in symtab.h
      uses variable hashtab::tsize defined in symtab.h
      uses macro definition INIT_HASHTAB_SIZE defined in symtab.h
      uses variable hashtab::tab defined in symtab.h
      uses function emalloc(size_t) defined in symtab.c
      uses variable hashtab::nent defined in symtab.h
   function hashtab_lookup(hashtab_t *,str_t *) in line 265
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable string_str::hash defined in nmetab.h
      uses variable hashtab::tsize defined in symtab.h
      uses variable hashtab::tab defined in symtab.h
      uses variable symentry::next defined in symtab.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
   function hashtab_insert(hashtab_t *,symentry_t *) in line 281
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses function hashtab_lookup(hashtab_t *,str_t *) defined in symtab.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable string_str::hash defined in nmetab.h
      uses variable hashtab::tsize defined in symtab.h
      uses variable symentry::next defined in symtab.h
      uses variable hashtab::tab defined in symtab.h
   function getscoop(int) in line 320
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses variable Scoop::g defined in symtab.c
      uses variable scoop defined in symtab.c
      uses variable Scoop::nxt defined in symtab.c
      uses variable Scoop::n defined in symtab.c
      uses variable freescoop defined in symtab.c
      uses function emalloc(size_t) defined in symtab.c
   function free_scopetab(scopetab_t *) in line 345
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses function free_hashtab(hashtab_t *) defined in symtab.c
      uses variable scopetab::htab defined in symtab.h
      uses variable freescoop defined in symtab.c
      uses variable Scoop::nxt defined in symtab.c
      uses function emalloc(size_t) defined in symtab.c
      uses variable Scoop::n defined in symtab.c
      uses variable scopetab::size defined in symtab.h
      uses variable Scoop::g defined in symtab.c
      uses variable scopetab::children defined in symtab.h
      uses variable scoop defined in symtab.c
      uses variable scopetab::parent defined in symtab.h
      uses variable freestab defined in symtab.c
   function new_scopetab(scopetab_t *) in line 368
      protection public
      25 lines of code
      1 parameters
      1 conditional paths
      uses variable freestab defined in symtab.c
      uses variable scopetab::parent defined in symtab.h
      uses function emalloc(size_t) defined in symtab.c
      uses variable scopetab::level defined in symtab.h
      uses macro definition EXTERN_SCOPE defined in symtab.h
      uses variable scopetab::size defined in symtab.h
      uses macro definition INIT_CHILD_SIZE defined in symtab.h
      uses variable scopetab::children defined in symtab.h
      uses function getscoop(int) defined in symtab.c
   function scopetab_find(scopetab_t *,str_t *) in line 395
      protection public
      45 lines of code
      2 parameters
      1 conditional paths
      uses macro definition DBG defined in symtab.c
      uses variable string_str::str defined in nmetab.h
      uses variable scopetab::htab defined in symtab.h
      uses variable scopetab::level defined in symtab.h
      uses variable scopetab::nsyms defined in symtab.h
      uses variable scopetab::nchild defined in symtab.h
      uses variable scopetab::owner_t defined in symtab.h
      uses variable scopetab::visited defined in symtab.h
      uses enumvalue TN_OBJ_DEF defined in tree.h
      uses function hashtab_lookup(hashtab_t *,str_t *) defined in symtab.c
      uses function scopetab_find(scopetab_t *,str_t *) defined in symtab.c
      uses variable scopetab::children defined in symtab.h
      uses variable symentry::used defined in symtab.h
      uses variable symentry::fn defined in symtab.h
      uses variable symentry::ln defined in symtab.h
      uses variable symentry::nes defined in symtab.h
      uses variable scopetab::owner defined in symtab.h
      uses variable scopetab::parent defined in symtab.h
   function scopetab_insert(scopetab_t *,symentry_t *) in line 442
      protection public
      21 lines of code
      2 parameters
      1 conditional paths
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable scopetab::level defined in symtab.h
      uses variable scopetab::owner defined in symtab.h
      uses variable scopetab::owner_t defined in symtab.h
      uses variable scopetab::nchild defined in symtab.h
      uses variable scopetab::children defined in symtab.h
      uses variable scopetab::htab defined in symtab.h
      uses function new_hashtab(void) defined in symtab.c
      uses function hashtab_insert(hashtab_t *,symentry_t *) defined in symtab.c
   function find_symbol(scopetab_t *,symentry_t *) in line 499
      protection public
      48 lines of code
      2 parameters
      16 conditional paths
      uses variable hashtab::tsize defined in symtab.h
      uses variable hashtab::tab defined in symtab.h
      uses variable symentry::next defined in symtab.h
      uses variable symentry::fn defined in symtab.h
      uses variable symentry::ln defined in symtab.h
      uses variable symentry::container defined in symtab.h
      uses function x_stmnt(treenode *) defined in symtab.c
      uses variable Verbose defined in symtab.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable vis defined in symtab.c
      uses function show_scopetab(scopetab_t *,int,FILE *) defined in symtab.c
   function check_struct_use(FILE *,scopetab_t *) in line 549
      protection public
      39 lines of code
      2 parameters
      10 conditional paths
      uses variable vis defined in symtab.c
      uses variable scopetab::htab defined in symtab.h
      uses variable scopetab::parent defined in symtab.h
      uses variable scopetab::owner defined in symtab.h
      uses variable scopetab::owner_t defined in symtab.h
      uses enumvalue TN_OBJ_DEF defined in tree.h
      uses variable hashtab::tsize defined in symtab.h
      uses variable hashtab::tab defined in symtab.h
      uses variable symentry::next defined in symtab.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable symentry::used defined in symtab.h
      uses function uno_ignore(symentry_t *) defined in symtab.c
      uses variable symentry::node defined in symtab.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable scopetab::nchild defined in symtab.h
      uses variable scopetab::children defined in symtab.h
   function struct_fields(FILE *) in line 590
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable contxt defined in uno_local.c
      uses function check_struct_use(FILE *,scopetab_t *) defined in symtab.c
      uses variable context::syms defined in symtab.h
      uses variable symtab::root defined in symtab.h
   function set_owner(scopetab_t *,char *,int) in line 643
      protection public
      14 lines of code
      3 parameters
      4 conditional paths
      uses variable scopetab::owner defined in symtab.h
      uses variable scopetab::owner_t defined in symtab.h
      uses variable scopetab::nchild defined in symtab.h
      uses variable scopetab::children defined in symtab.h
   function name_scope(context_t *,char *,int) in line 659
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable context::syms defined in symtab.h
      uses variable symtab::current defined in symtab.h
      uses variable symtab::clevel defined in symtab.h
      uses variable scopetab::level defined in symtab.h
      uses function set_owner(scopetab_t *,char *,int) defined in symtab.c
      uses variable Verbose defined in symtab.c
   function new_symtab(void) in line 676
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable freesymt defined in symtab.c
      uses variable symtab::nxt defined in symtab.h
      uses function emalloc(size_t) defined in symtab.c
      uses variable symtab::root defined in symtab.h
      uses function new_scopetab(scopetab_t *) defined in symtab.c
      uses variable symtab::clevel defined in symtab.h
      uses macro definition EXTERN_SCOPE defined in symtab.h
      uses variable symtab::current defined in symtab.h
   function symtab_lookup(symtab_t *,str_t *) in line 694
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable symtab::current defined in symtab.h
      uses function scopetab_find(scopetab_t *,str_t *) defined in symtab.c
   function free_symtab(symtab_t *) in line 704
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function po_deltabs(scopetab_t *) defined in symtab.c
      uses variable symtab::root defined in symtab.h
      uses variable symtab::nxt defined in symtab.h
      uses variable freesymt defined in symtab.c
   function symtab_insert(symtab_t *,symentry_t *) in line 716
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable symtab::clevel defined in symtab.h
      uses variable symtab::current defined in symtab.h
      uses variable scopetab::level defined in symtab.h
      uses function new_scopetab(scopetab_t *) defined in symtab.c
      uses function child_insert(scopetab_t *,scopetab_t *) defined in symtab.c
      uses function scopetab_insert(scopetab_t *,symentry_t *) defined in symtab.c
   function symtab_insert_at(symtab_t *,symentry_t *,int) in line 738
      protection public
      32 lines of code
      3 parameters
      1 conditional paths
      uses variable symtab::current defined in symtab.h
      uses variable scopetab::level defined in symtab.h
      uses variable symtab::clevel defined in symtab.h
      uses function new_scopetab(scopetab_t *) defined in symtab.c
      uses function child_insert(scopetab_t *,scopetab_t *) defined in symtab.c
      uses variable scopetab::parent defined in symtab.h
      uses function scopetab_insert(scopetab_t *,symentry_t *) defined in symtab.c
   function st_enter_scope(symtab_t *) in line 772
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable symtab::clevel defined in symtab.h
   function st_exit_scope(symtab_t *) in line 778
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable symtab::clevel defined in symtab.h
      uses variable symtab::current defined in symtab.h
      uses variable scopetab::level defined in symtab.h
      uses variable scopetab::parent defined in symtab.h
   function show_symtab(symtab_t *,FILE *) in line 788
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable vis defined in symtab.c
      uses function show_scopetab(scopetab_t *,int,FILE *) defined in symtab.c
      uses variable symtab::root defined in symtab.h
   function new_context(void) in line 795
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in symtab.c
      uses variable context::labels defined in symtab.h
      uses function new_symtab(void) defined in symtab.c
      uses variable context::tags defined in symtab.h
      uses variable context::syms defined in symtab.h
   function free_context(context_t *) in line 806
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function free_symtab(symtab_t *) defined in symtab.c
      uses variable context::labels defined in symtab.h
      uses variable context::tags defined in symtab.h
      uses variable context::syms defined in symtab.h
      uses function efree(void *) defined in symtab.c
   function enter_scope(context_t *) in line 818
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable context::syms defined in symtab.h
      uses variable symtab::clevel defined in symtab.h
      uses function st_enter_scope(symtab_t *) defined in symtab.c
      uses variable context::labels defined in symtab.h
      uses variable context::tags defined in symtab.h
   function exit_scope(context_t *) in line 832
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable context::syms defined in symtab.h
      uses variable symtab::clevel defined in symtab.h
      uses function st_exit_scope(symtab_t *) defined in symtab.c
      uses variable context::labels defined in symtab.h
      uses variable context::tags defined in symtab.h
   function exit_scopes(context_t *,int) in line 845
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition EXTERN_SCOPE defined in symtab.h
      uses function exit_scope(context_t *) defined in symtab.c
   function add_constant(char *) in line 862
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable cnames defined in symtab.c
      uses variable Cname::nxt defined in symtab.c
      uses variable Cname::vn defined in symtab.c
      uses function emalloc(size_t) defined in symtab.c
   function is_constant(char *) in line 877
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable cnames defined in symtab.c
      uses variable Cname::nxt defined in symtab.c
      uses variable Cname::vn defined in symtab.c
   variable Scoop::g in line 313
      protection public
   variable Scoop::n in line 312
      protection public
   variable Scoop::nxt in line 314
      protection public
   variable Cname::nxt in line 856
      protection public
   variable Cname::vn in line 855
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/symtab.h
module symtab.h
   macro definition TYPEDEF_ENTRY in line 51
      protection public
   macro definition FUNCDEF_ENTRY in line 52
      protection public
   macro definition VARDECL_ENTRY in line 53
      protection public
   macro definition ENUM_ENTRY in line 54
      protection public
   macro definition LABEL_ENTRY in line 57
      protection public
   macro definition TAG_ENTRY in line 58
      protection public
   macro definition COMP_ENTRY in line 61
      protection public
   macro definition PARAM_ENTRY in line 63
      protection public
   macro definition CURRENT_SCOPE in line 65
      protection public
   macro definition EXTERN_SCOPE in line 66
      protection public
   macro definition FILE_SCOPE in line 67
      protection public
   macro definition FUNCTION_SCOPE in line 68
      protection public
   macro definition BLOCK_SCOPE in line 69
      protection public
   macro definition INIT_HASHTAB_SIZE in line 99
      protection public
   macro definition INIT_CHILD_SIZE in line 112
      protection public
   typedef symentry_t in line 84
      protection public
   typedef hashtab_t in line 106
      protection public
   typedef scopetab_t in line 127
      protection public
   typedef symtab_t in line 140
      protection public
   typedef context_t in line 155
      protection public
   function mk_typedef(str_t *,treenode *) in line 86
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses macro definition TYPEDEF_ENTRY defined in symtab.h
   function mk_funcdef(str_t *,treenode *) in line 87
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FUNCDEF_ENTRY defined in symtab.h
   function mk_vardecl(str_t *,treenode *) in line 88
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses macro definition VARDECL_ENTRY defined in symtab.h
   function mk_enum_const(str_t *,treenode *) in line 89
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ENUM_ENTRY defined in symtab.h
   function mk_label(str_t *,treenode *) in line 90
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LABEL_ENTRY defined in symtab.h
   function mk_tag(str_t *,treenode *) in line 91
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses macro definition TAG_ENTRY defined in symtab.h
   function mk_component(str_t *,treenode *,treenode *) in line 92
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses macro definition COMP_ENTRY defined in symtab.h
      uses variable symentry::container defined in symtab.h
   function is_typedef(symentry_t *) in line 94
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable symentry::kind defined in symtab.h
      uses macro definition TYPEDEF_ENTRY defined in symtab.h
   function is_funcdef(symentry_t *) in line 95
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function is_vardecl(symentry_t *) in line 96
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function is_enum_const(symentry_t *) in line 97
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable symentry::kind defined in symtab.h
      uses macro definition ENUM_ENTRY defined in symtab.h
   function new_hashtab(void) in line 108
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses variable hashtab::nxt defined in symtab.h
      uses variable hashtab::tsize defined in symtab.h
      uses macro definition INIT_HASHTAB_SIZE defined in symtab.h
      uses variable hashtab::tab defined in symtab.h
      uses function emalloc(size_t) defined in symtab.c
      uses variable hashtab::nent defined in symtab.h
   function hashtab_lookup(hashtab_t *,str_t *) in line 109
      protection public
      14 lines of code
      2 parameters
      4 conditional paths
      uses variable string_str::hash defined in nmetab.h
      uses variable hashtab::tsize defined in symtab.h
      uses variable hashtab::tab defined in symtab.h
      uses variable symentry::next defined in symtab.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
   function hashtab_insert(hashtab_t *,symentry_t *) in line 110
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses function hashtab_lookup(hashtab_t *,str_t *) defined in symtab.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable string_str::hash defined in nmetab.h
      uses variable hashtab::tsize defined in symtab.h
      uses variable symentry::next defined in symtab.h
      uses variable hashtab::tab defined in symtab.h
   function new_scopetab(scopetab_t *) in line 129
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses variable scopetab::parent defined in symtab.h
      uses function emalloc(size_t) defined in symtab.c
      uses variable scopetab::level defined in symtab.h
      uses macro definition EXTERN_SCOPE defined in symtab.h
      uses variable scopetab::size defined in symtab.h
      uses macro definition INIT_CHILD_SIZE defined in symtab.h
      uses variable scopetab::children defined in symtab.h
      uses function getscoop(int) defined in symtab.c
   function scopetab_lookup(scopetab_t *,str_t *) in line 130
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function scopetab_find(scopetab_t *,str_t *) in line 131
      protection public
      45 lines of code
      2 parameters
      13 conditional paths
      uses macro definition DBG defined in symtab.c
      uses variable string_str::str defined in nmetab.h
      uses variable scopetab::htab defined in symtab.h
      uses variable scopetab::level defined in symtab.h
      uses variable scopetab::nsyms defined in symtab.h
      uses variable scopetab::nchild defined in symtab.h
      uses variable scopetab::owner_t defined in symtab.h
      uses variable scopetab::visited defined in symtab.h
      uses enumvalue TN_OBJ_DEF defined in tree.h
      uses function hashtab_lookup(hashtab_t *,str_t *) defined in symtab.c
      uses function scopetab_find(scopetab_t *,str_t *) defined in symtab.c
      uses variable scopetab::children defined in symtab.h
      uses variable symentry::used defined in symtab.h
      uses variable symentry::fn defined in symtab.h
      uses variable symentry::ln defined in symtab.h
      uses variable symentry::nes defined in symtab.h
      uses variable scopetab::owner defined in symtab.h
      uses variable scopetab::parent defined in symtab.h
   function scopetab_insert(scopetab_t *,symentry_t *) in line 132
      protection public
      21 lines of code
      2 parameters
      4 conditional paths
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable scopetab::level defined in symtab.h
      uses variable scopetab::owner defined in symtab.h
      uses variable scopetab::owner_t defined in symtab.h
      uses variable scopetab::nchild defined in symtab.h
      uses variable scopetab::children defined in symtab.h
      uses variable scopetab::htab defined in symtab.h
      uses function new_hashtab(void) defined in symtab.c
      uses function hashtab_insert(hashtab_t *,symentry_t *) defined in symtab.c
   function new_symtab(void) in line 142
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses variable symtab::nxt defined in symtab.h
      uses function emalloc(size_t) defined in symtab.c
      uses variable symtab::root defined in symtab.h
      uses function new_scopetab(scopetab_t *) defined in symtab.c
      uses variable symtab::clevel defined in symtab.h
      uses macro definition EXTERN_SCOPE defined in symtab.h
      uses variable symtab::current defined in symtab.h
   function symtab_lookup(symtab_t *,str_t *) in line 143
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable symtab::current defined in symtab.h
      uses function scopetab_find(scopetab_t *,str_t *) defined in symtab.c
   function symtab_insert(symtab_t *,symentry_t *) in line 144
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable symtab::clevel defined in symtab.h
      uses variable symtab::current defined in symtab.h
      uses variable scopetab::level defined in symtab.h
      uses function new_scopetab(scopetab_t *) defined in symtab.c
      uses function scopetab_insert(scopetab_t *,symentry_t *) defined in symtab.c
   function symtab_insert_at(symtab_t *,symentry_t *,int) in line 145
      protection public
      32 lines of code
      3 parameters
      5 conditional paths
      uses variable symtab::current defined in symtab.h
      uses variable scopetab::level defined in symtab.h
      uses variable symtab::clevel defined in symtab.h
      uses function new_scopetab(scopetab_t *) defined in symtab.c
      uses variable scopetab::parent defined in symtab.h
      uses function scopetab_insert(scopetab_t *,symentry_t *) defined in symtab.c
   function st_enter_scope(symtab_t *) in line 147
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable symtab::clevel defined in symtab.h
   function st_exit_scope(symtab_t *) in line 148
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable symtab::clevel defined in symtab.h
      uses variable symtab::current defined in symtab.h
      uses variable scopetab::level defined in symtab.h
      uses variable scopetab::parent defined in symtab.h
   function show_symtab(symtab_t *,FILE *) in line 149
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable vis defined in symtab.c
      uses variable symtab::root defined in symtab.h
   function new_context(void) in line 157
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in symtab.c
      uses variable context::labels defined in symtab.h
      uses function new_symtab(void) defined in symtab.c
      uses variable context::tags defined in symtab.h
      uses variable context::syms defined in symtab.h
   function free_context(context_t *) in line 158
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable context::labels defined in symtab.h
      uses variable context::tags defined in symtab.h
      uses variable context::syms defined in symtab.h
      uses function efree(void *) defined in symtab.c
   function enter_scope(context_t *) in line 159
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable context::syms defined in symtab.h
      uses variable symtab::clevel defined in symtab.h
      uses function st_enter_scope(symtab_t *) defined in symtab.c
      uses variable context::labels defined in symtab.h
      uses variable context::tags defined in symtab.h
   function exit_scope(context_t *) in line 160
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable context::syms defined in symtab.h
      uses variable symtab::clevel defined in symtab.h
      uses function st_exit_scope(symtab_t *) defined in symtab.c
      uses variable context::labels defined in symtab.h
      uses variable context::tags defined in symtab.h
   function exit_scopes(context_t *,int) in line 161
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
      uses macro definition EXTERN_SCOPE defined in symtab.h
      uses function exit_scope(context_t *) defined in symtab.c
   variable symentry::container in line 82
      protection public
   variable symentry::decl_level in line 77
      protection public
   variable symentry::fn in line 80
      protection public
   variable symentry::kind in line 72
      protection public
   variable symentry::ln in line 79
      protection public
   variable symentry::nes in line 76
      protection public
   variable symentry::next in line 83
      protection public
   variable symentry::nme in line 73
      protection public
   variable symentry::node in line 74
      protection public
   variable symentry::used in line 78
      protection public
   variable hashtab::nent in line 103
      protection public
   variable hashtab::nxt in line 105
      protection public
   variable hashtab::tab in line 104
      protection public
   variable hashtab::tsize in line 102
      protection public
   variable scopetab::children in line 126
      protection public
   variable scopetab::htab in line 117
      protection public
   variable scopetab::level in line 116
      protection public
   variable scopetab::nchild in line 124
      protection public
   variable scopetab::nsyms in line 115
      protection public
   variable scopetab::owner in line 120
      protection public
   variable scopetab::owner_t in line 121
      protection public
   variable scopetab::parent in line 118
      protection public
   variable scopetab::size in line 125
      protection public
   variable scopetab::visited in line 123
      protection public
   variable symtab::clevel in line 136
      protection public
   variable symtab::current in line 137
      protection public
   variable symtab::nxt in line 139
      protection public
   variable symtab::root in line 135
      protection public
   variable context::labels in line 152
      protection public
   variable context::syms in line 154
      protection public
   variable context::tags in line 153
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/token.c
module token.c
   function toksym(int,int) in line 20
      protection public
      246 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/tree.c
module tree.c
   macro definition SHOW in line 544
      protection public
   variable progname in line 21
      protection public
   variable Parse_TOS in line 22
      protection public
   function efree(void *) in line 20
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function print_ptr(void *) in line 25
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function make_if(tn_t) in line 34
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function HeapAlloc(Heap *) defined in heap.c
      uses variable Parse_TOS defined in tree.c
      uses variable stk_item::node_heap defined in treestk.h
      uses variable if_node::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses variable common::type defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable if_node::cond defined in tree.h
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
   function make_for(tn_t) in line 55
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses function HeapAlloc(Heap *) defined in heap.c
      uses variable Parse_TOS defined in tree.c
      uses variable stk_item::node_heap defined in treestk.h
      uses variable for_node::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses variable common::type defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable for_node::init defined in tree.h
      uses variable for_node::test defined in tree.h
      uses variable for_node::incr defined in tree.h
      uses variable for_node::stemnt defined in tree.h
   function make_leaf(tn_t) in line 78
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function HeapAlloc(Heap *) defined in heap.c
      uses variable Parse_TOS defined in tree.c
      uses variable stk_item::node_heap defined in treestk.h
      uses variable leafnode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses variable common::type defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable leafnode::syment defined in tree.h
   function make_node(tn_t) in line 99
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses function HeapAlloc(Heap *) defined in heap.c
      uses variable Parse_TOS defined in tree.c
      uses variable stk_item::node_heap defined in treestk.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses variable treenode::syment defined in tree.h
   function free_tree(treenode *) in line 123
      protection public
      44 lines of code
      1 parameters
      1 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses variable leafnode::hdr defined in tree.h
      uses variable common::tok defined in tree.h
      uses function efree(void *) defined in tree.c
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::str defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses function free_tree(treenode *) defined in tree.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses variable if_node::cond defined in tree.h
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses variable for_node::init defined in tree.h
      uses variable for_node::test defined in tree.h
      uses variable for_node::incr defined in tree.h
      uses variable for_node::stemnt defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses function HeapFree(Heap *,void *) defined in heap.c
      uses variable Parse_TOS defined in tree.c
      uses variable stk_item::node_heap defined in treestk.h
   function leftmost(treenode *) in line 169
      protection public
      61 lines of code
      1 parameters
      1 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses function leftmost(treenode *) defined in tree.c
      uses variable treenode::rnode defined in tree.h
      uses function print_ptr(void *) defined in tree.c
      uses enumvalue IF_T defined in tree.h
      uses variable if_node::cond defined in tree.h
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses variable for_node::init defined in tree.h
      uses variable for_node::test defined in tree.h
      uses variable for_node::incr defined in tree.h
      uses variable for_node::stemnt defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses variable progname defined in tree.c
      uses function name_of_nodetype(node_type) defined in tree.c
   function find_typedef_name(treenode *,treenode *,FindFunction) in line 234
      protection public
      76 lines of code
      3 parameters
      1 conditional paths
      uses variable progname defined in tree.c
      uses function name_of_nodetype(node_type) defined in tree.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses variable common::type defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses function find_typedef_name(treenode *,treenode *,FindFunction) defined in tree.c
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses enumvalue TN_PARAM_LIST defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses function print_ptr(void *) defined in tree.c
   function find_ident_name(treenode *,treenode *,treenode *,FindFunction) in line 312
      protection public
      72 lines of code
      4 parameters
      1 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses function find_ident_name(treenode *,treenode *,treenode *,FindFunction) defined in tree.c
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_COMP_DECL defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue TN_FIELD_LIST defined in tree.h
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses enumvalue TN_PARAM_LIST defined in tree.h
      uses enumvalue TN_IDENT_LIST defined in tree.h
      uses enumvalue TN_ELLIPSIS defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses enumvalue TN_BIT_FIELD defined in tree.h
      uses variable progname defined in tree.c
      uses variable common::line defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses enumvalue IF_T defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses function name_of_nodetype(node_type) defined in tree.c
   function find_func_name(treenode *) in line 388
      protection public
      32 lines of code
      1 parameters
      1 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue TN_FUNC_DEF defined in tree.h
      uses variable progname defined in tree.c
      uses function name_of_nodetype(node_type) defined in tree.c
      uses function name_of_node(tn_t) defined in tree.c
   function find_params(treenode *,FindFunction) in line 422
      protection public
      66 lines of code
      2 parameters
      1 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses function find_params(treenode *,FindFunction) defined in tree.c
      uses function find_ident_name(treenode *,treenode *,treenode *,FindFunction) defined in tree.c
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue TN_IDENT_LIST defined in tree.h
      uses enumvalue TN_PARAM_LIST defined in tree.h
      uses variable progname defined in tree.c
      uses variable common::line defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses enumvalue LEAF_T defined in tree.h
      uses variable leafnode::hdr defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses enumvalue IF_T defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses function name_of_nodetype(node_type) defined in tree.c
   function find_components(treenode *,treenode *,treenode *,FindFunction) in line 490
      protection public
      53 lines of code
      4 parameters
      1 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_COMP_DECL defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses function find_ident_name(treenode *,treenode *,treenode *,FindFunction) defined in tree.c
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses function find_components(treenode *,treenode *,treenode *,FindFunction) defined in tree.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_FIELD_LIST defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses variable progname defined in tree.c
      uses function name_of_node(tn_t) defined in tree.c
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses function print_ptr(void *) defined in tree.c
      uses function name_of_nodetype(node_type) defined in tree.c
   function name_of_node(tn_t) in line 547
      protection public
      120 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue TN_EMPTY defined in tree.h
      uses macro definition SHOW defined in tree.c
      uses enumvalue TN_FUNC_DEF defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses enumvalue TN_BLOCK defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses enumvalue TN_TRANS_LIST defined in tree.h
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses enumvalue TN_STEMNT_LIST defined in tree.h
      uses enumvalue TN_EXPR_LIST defined in tree.h
      uses enumvalue TN_NAME_LIST defined in tree.h
      uses enumvalue TN_ENUM_LIST defined in tree.h
      uses enumvalue TN_FIELD_LIST defined in tree.h
      uses enumvalue TN_PARAM_LIST defined in tree.h
      uses enumvalue TN_IDENT_LIST defined in tree.h
      uses enumvalue TN_COMP_DECL defined in tree.h
      uses enumvalue TN_BIT_FIELD defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses enumvalue TN_TYPE_LIST defined in tree.h
      uses enumvalue TN_TYPE_NME defined in tree.h
      uses enumvalue TN_INIT_LIST defined in tree.h
      uses enumvalue TN_INIT_BLK defined in tree.h
      uses enumvalue TN_OBJ_DEF defined in tree.h
      uses enumvalue TN_OBJ_REF defined in tree.h
      uses enumvalue TN_CAST defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses enumvalue TN_JUMP defined in tree.h
      uses enumvalue TN_FOR defined in tree.h
      uses enumvalue TN_WHILE defined in tree.h
      uses enumvalue TN_DOWHILE defined in tree.h
      uses enumvalue TN_SWITCH defined in tree.h
      uses enumvalue TN_LABEL defined in tree.h
      uses enumvalue TN_STEMNT defined in tree.h
      uses enumvalue TN_INDEX defined in tree.h
      uses enumvalue TN_DEREF defined in tree.h
      uses enumvalue TN_SELECT defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses enumvalue TN_COND_EXPR defined in tree.h
      uses enumvalue TN_COMMENT defined in tree.h
      uses enumvalue TN_CPP defined in tree.h
      uses enumvalue TN_ELLIPSIS defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_TYPE defined in tree.h
      uses enumvalue TN_STRING defined in tree.h
      uses enumvalue TN_INT defined in tree.h
      uses enumvalue TN_REAL defined in tree.h
   function name_of_nodetype(node_type) in line 669
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue NONE_T defined in tree.h
      uses macro definition SHOW defined in tree.c
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue NODE_T defined in tree.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/tree.h
module tree.h
   enumeration tn_t in line 19
      protection public
   enumeration node_type in line 82
      protection public
   typedef Nuts in line 669
      protection public
   typedef treenode in line 116
      protection public
   typedef if_node in line 125
      protection public
   typedef for_node in line 135
      protection public
   typedef leafnode in line 148
      protection public
   typedef FindFunction in line 150
      protection public
   enumvalue TN_EMPTY in line 20
      protection public
   enumvalue TN_FUNC_DEF in line 21
      protection public
   enumvalue TN_FUNC_DECL in line 22
      protection public
   enumvalue TN_FUNC_CALL in line 23
      protection public
   enumvalue TN_BLOCK in line 24
      protection public
   enumvalue TN_DECL in line 25
      protection public
   enumvalue TN_ARRAY_DECL in line 26
      protection public
   enumvalue TN_TRANS_LIST in line 27
      protection public
   enumvalue TN_DECL_LIST in line 28
      protection public
   enumvalue TN_STEMNT_LIST in line 29
      protection public
   enumvalue TN_EXPR_LIST in line 30
      protection public
   enumvalue TN_NAME_LIST in line 31
      protection public
   enumvalue TN_ENUM_LIST in line 32
      protection public
   enumvalue TN_FIELD_LIST in line 33
      protection public
   enumvalue TN_PARAM_LIST in line 34
      protection public
   enumvalue TN_IDENT_LIST in line 35
      protection public
   enumvalue TN_DECLS in line 36
      protection public
   enumvalue TN_COMP_DECL in line 38
      protection public
   enumvalue TN_BIT_FIELD in line 39
      protection public
   enumvalue TN_PNTR in line 40
      protection public
   enumvalue TN_TYPE_LIST in line 42
      protection public
   enumvalue TN_TYPE_NME in line 43
      protection public
   enumvalue TN_INIT_LIST in line 45
      protection public
   enumvalue TN_INIT_BLK in line 46
      protection public
   enumvalue TN_OBJ_DEF in line 48
      protection public
   enumvalue TN_OBJ_REF in line 49
      protection public
   enumvalue TN_CAST in line 52
      protection public
   enumvalue TN_IF in line 53
      protection public
   enumvalue TN_ASSIGN in line 54
      protection public
   enumvalue TN_JUMP in line 55
      protection public
   enumvalue TN_FOR in line 56
      protection public
   enumvalue TN_WHILE in line 57
      protection public
   enumvalue TN_DOWHILE in line 58
      protection public
   enumvalue TN_SWITCH in line 59
      protection public
   enumvalue TN_LABEL in line 60
      protection public
   enumvalue TN_STEMNT in line 61
      protection public
   enumvalue TN_INDEX in line 63
      protection public
   enumvalue TN_ADDROF in line 64
      protection public
   enumvalue TN_DEREF in line 65
      protection public
   enumvalue TN_SELECT in line 66
      protection public
   enumvalue TN_EXPR in line 68
      protection public
   enumvalue TN_COND_EXPR in line 69
      protection public
   enumvalue TN_COMMENT in line 71
      protection public
   enumvalue TN_CPP in line 72
      protection public
   enumvalue TN_ELLIPSIS in line 74
      protection public
   enumvalue TN_IDENT in line 75
      protection public
   enumvalue TN_TYPE in line 76
      protection public
   enumvalue TN_STRING in line 77
      protection public
   enumvalue TN_INT in line 78
      protection public
   enumvalue TN_REAL in line 80
      protection public
   enumvalue NONE_T in line 82
      protection public
   enumvalue LEAF_T in line 82
      protection public
   enumvalue IF_T in line 82
      protection public
   enumvalue FOR_T in line 82
      protection public
   enumvalue NODE_T in line 82
      protection public
   function name_of_node(tn_t) in line 152
      protection public
      120 lines of code
      1 parameters
      50 conditional paths
      uses enumvalue TN_EMPTY defined in tree.h
      uses macro definition SHOW defined in tree.c
      uses enumvalue TN_FUNC_DEF defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses enumvalue TN_BLOCK defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses enumvalue TN_TRANS_LIST defined in tree.h
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses enumvalue TN_STEMNT_LIST defined in tree.h
      uses enumvalue TN_EXPR_LIST defined in tree.h
      uses enumvalue TN_NAME_LIST defined in tree.h
      uses enumvalue TN_ENUM_LIST defined in tree.h
      uses enumvalue TN_FIELD_LIST defined in tree.h
      uses enumvalue TN_PARAM_LIST defined in tree.h
      uses enumvalue TN_IDENT_LIST defined in tree.h
      uses enumvalue TN_COMP_DECL defined in tree.h
      uses enumvalue TN_BIT_FIELD defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses enumvalue TN_TYPE_LIST defined in tree.h
      uses enumvalue TN_TYPE_NME defined in tree.h
      uses enumvalue TN_INIT_LIST defined in tree.h
      uses enumvalue TN_INIT_BLK defined in tree.h
      uses enumvalue TN_OBJ_DEF defined in tree.h
      uses enumvalue TN_OBJ_REF defined in tree.h
      uses enumvalue TN_CAST defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses enumvalue TN_JUMP defined in tree.h
      uses enumvalue TN_FOR defined in tree.h
      uses enumvalue TN_WHILE defined in tree.h
      uses enumvalue TN_DOWHILE defined in tree.h
      uses enumvalue TN_SWITCH defined in tree.h
      uses enumvalue TN_LABEL defined in tree.h
      uses enumvalue TN_STEMNT defined in tree.h
      uses enumvalue TN_INDEX defined in tree.h
      uses enumvalue TN_DEREF defined in tree.h
      uses enumvalue TN_SELECT defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses enumvalue TN_COND_EXPR defined in tree.h
      uses enumvalue TN_COMMENT defined in tree.h
      uses enumvalue TN_CPP defined in tree.h
      uses enumvalue TN_ELLIPSIS defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_TYPE defined in tree.h
      uses enumvalue TN_STRING defined in tree.h
      uses enumvalue TN_INT defined in tree.h
      uses enumvalue TN_REAL defined in tree.h
   function name_of_nodetype(node_type) in line 153
      protection public
      18 lines of code
      1 parameters
      6 conditional paths
      uses enumvalue NONE_T defined in tree.h
      uses macro definition SHOW defined in tree.c
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue NODE_T defined in tree.h
   function make_leaf(tn_t) in line 155
      protection public
      19 lines of code
      1 parameters
      2 conditional paths
      uses function HeapAlloc(Heap *) defined in heap.c
      uses variable Parse_TOS defined in tree.c
      uses variable stk_item::node_heap defined in treestk.h
      uses variable leafnode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses variable common::type defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable leafnode::syment defined in tree.h
   function make_if(tn_t) in line 156
      protection public
      19 lines of code
      1 parameters
      2 conditional paths
      uses function HeapAlloc(Heap *) defined in heap.c
      uses variable Parse_TOS defined in tree.c
      uses variable stk_item::node_heap defined in treestk.h
      uses variable if_node::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses variable common::type defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable if_node::cond defined in tree.h
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
   function make_for(tn_t) in line 157
      protection public
      21 lines of code
      1 parameters
      2 conditional paths
      uses function HeapAlloc(Heap *) defined in heap.c
      uses variable Parse_TOS defined in tree.c
      uses variable stk_item::node_heap defined in treestk.h
      uses variable for_node::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses variable common::type defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable for_node::init defined in tree.h
      uses variable for_node::test defined in tree.h
      uses variable for_node::incr defined in tree.h
      uses variable for_node::stemnt defined in tree.h
   function make_node(tn_t) in line 159
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses function HeapAlloc(Heap *) defined in heap.c
      uses variable Parse_TOS defined in tree.c
      uses variable stk_item::node_heap defined in treestk.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses variable treenode::syment defined in tree.h
   function copy_tree(treenode *) in line 160
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function leftmost(treenode *) in line 162
      protection public
      61 lines of code
      1 parameters
      16 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses function leftmost(treenode *) defined in tree.c
      uses variable treenode::rnode defined in tree.h
      uses function print_ptr(void *) defined in tree.c
      uses enumvalue IF_T defined in tree.h
      uses variable if_node::cond defined in tree.h
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses variable for_node::init defined in tree.h
      uses variable for_node::test defined in tree.h
      uses variable for_node::incr defined in tree.h
      uses variable for_node::stemnt defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses variable progname defined in tree.c
      uses function name_of_nodetype(node_type) defined in tree.c
   function rightmost(treenode *) in line 163
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function find_func_name(treenode *) in line 164
      protection public
      32 lines of code
      1 parameters
      8 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue TN_FUNC_DEF defined in tree.h
      uses variable progname defined in tree.c
      uses function name_of_nodetype(node_type) defined in tree.c
      uses function name_of_node(tn_t) defined in tree.c
   function free_tree(treenode *) in line 166
      protection public
      44 lines of code
      1 parameters
      8 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses variable leafnode::hdr defined in tree.h
      uses variable common::tok defined in tree.h
      uses function efree(void *) defined in tree.c
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::str defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses function free_tree(treenode *) defined in tree.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses variable if_node::cond defined in tree.h
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses variable for_node::init defined in tree.h
      uses variable for_node::test defined in tree.h
      uses variable for_node::incr defined in tree.h
      uses variable for_node::stemnt defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses function HeapFree(Heap *,void *) defined in heap.c
      uses variable Parse_TOS defined in tree.c
      uses variable stk_item::node_heap defined in treestk.h
   function find_typedef_name(treenode *,treenode *,FindFunction) in line 167
      protection public
      76 lines of code
      3 parameters
      18 conditional paths
      uses variable progname defined in tree.c
      uses function name_of_nodetype(node_type) defined in tree.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses variable common::type defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses function find_typedef_name(treenode *,treenode *,FindFunction) defined in tree.c
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses enumvalue TN_PARAM_LIST defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses function print_ptr(void *) defined in tree.c
   function find_ident_name(treenode *,treenode *,treenode *,FindFunction) in line 168
      protection public
      72 lines of code
      4 parameters
      21 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses function find_ident_name(treenode *,treenode *,treenode *,FindFunction) defined in tree.c
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_COMP_DECL defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue TN_FIELD_LIST defined in tree.h
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses enumvalue TN_PARAM_LIST defined in tree.h
      uses enumvalue TN_IDENT_LIST defined in tree.h
      uses enumvalue TN_ELLIPSIS defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses enumvalue TN_BIT_FIELD defined in tree.h
      uses variable progname defined in tree.c
      uses variable common::line defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses enumvalue IF_T defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses function name_of_nodetype(node_type) defined in tree.c
   function find_params(treenode *,FindFunction) in line 169
      protection public
      66 lines of code
      2 parameters
      16 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses function find_params(treenode *,FindFunction) defined in tree.c
      uses function find_ident_name(treenode *,treenode *,treenode *,FindFunction) defined in tree.c
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue TN_IDENT_LIST defined in tree.h
      uses enumvalue TN_PARAM_LIST defined in tree.h
      uses variable progname defined in tree.c
      uses variable common::line defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses enumvalue LEAF_T defined in tree.h
      uses variable leafnode::hdr defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses enumvalue IF_T defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses function name_of_nodetype(node_type) defined in tree.c
   function find_components(treenode *,treenode *,treenode *,FindFunction) in line 170
      protection public
      53 lines of code
      4 parameters
      13 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_COMP_DECL defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses function find_ident_name(treenode *,treenode *,treenode *,FindFunction) defined in tree.c
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses function find_components(treenode *,treenode *,treenode *,FindFunction) defined in tree.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_FIELD_LIST defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses variable progname defined in tree.c
      uses function name_of_node(tn_t) defined in tree.c
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses function print_ptr(void *) defined in tree.c
      uses function name_of_nodetype(node_type) defined in tree.c
   variable Nuts::nut in line 86
      protection public
   variable Nuts::nxt in line 87
      protection public
   variable common::col in line 94
      protection public
   variable common::defuse in line 99
      protection public
   variable common::fnm in line 92
      protection public
   variable common::line in line 93
      protection public
   variable common::nuts in line 98
      protection public
   variable common::tok in line 95
      protection public
   variable common::type in line 96
      protection public
   variable common::which in line 91
      protection public
   variable treenode::hdr in line 99
      protection public
   variable treenode::lnode in line 113
      protection public
   variable treenode::rnode in line 114
      protection public
   variable treenode::syment in line 111
      protection public
   variable if_node::cond in line 122
      protection public
   variable if_node::else_n in line 124
      protection public
   variable if_node::hdr in line 114
      protection public
   variable if_node::syment in line 120
      protection public
   variable if_node::then_n in line 123
      protection public
   variable for_node::hdr in line 124
      protection public
   variable for_node::incr in line 133
      protection public
   variable for_node::init in line 131
      protection public
   variable for_node::stemnt in line 134
      protection public
   variable for_node::syment in line 129
      protection public
   variable for_node::test in line 132
      protection public
   variable leafnode::cval in line 142
      protection public
   variable leafnode::data in line 147
      protection public
   variable leafnode::dval in line 146
      protection public
   variable leafnode::hdr in line 134
      protection public
   variable leafnode::ival in line 145
      protection public
   variable leafnode::str in line 144
      protection public
   variable leafnode::sval in line 143
      protection public
   variable leafnode::syment in line 139
      protection public
   variable leafnode::@1::cval in line 142
      protection public
   variable leafnode::@1::dval in line 146
      protection public
   variable leafnode::@1::ival in line 145
      protection public
   variable leafnode::@1::str in line 144
      protection public
   variable leafnode::@1::sval in line 143
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/treestk.c
module treestk.c
   variable yyin in line 15
      protection public
   variable DoneStack in line 23
      protection public
   variable Parse_TOS in line 24
      protection public
   variable freestk in line 26
      protection public
   function yyparse(void) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yy_create_buffer(FILE *,int) in line 17
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function yy_switch_to_buffer(YY_BUFFER_STATE) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yy_delete_buffer(YY_BUFFER_STATE) in line 19
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function emalloc(size_t) in line 20
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
   function efree(void *) in line 21
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function new_stk_item(FILE *,char *) in line 29
      protection public
      39 lines of code
      2 parameters
      1 conditional paths
      uses variable freestk defined in treestk.c
      uses variable stk_item::next defined in treestk.h
      uses macro definition STK_ITEM_SZE defined in treestk.h
      uses function emalloc(size_t) defined in treestk.c
      uses variable stk_item::filename defined in treestk.h
      uses variable stk_item::yybuff defined in treestk.h
      uses function yy_create_buffer(FILE *,int) defined in treestk.c
      uses macro definition YYBUFF_SIZE defined in treestk.h
      uses function efree(void *) defined in treestk.c
      uses variable stk_item::node_heap defined in treestk.h
      uses function CreateHeap(unsigned int,unsigned int) defined in heap.c
      uses macro definition MX_NODE_SZE defined in treestk.h
      uses function yy_delete_buffer(YY_BUFFER_STATE) defined in treestk.c
      uses variable stk_item::yyin defined in treestk.h
      uses variable stk_item::yylineno defined in treestk.h
      uses variable stk_item::yycolno defined in treestk.h
      uses variable stk_item::yynxtcol defined in treestk.h
      uses variable stk_item::parse_tree defined in treestk.h
   function delete_stk_item(Stk_Item *) in line 70
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable stk_item::yybuff defined in treestk.h
      uses function yy_delete_buffer(YY_BUFFER_STATE) defined in treestk.c
      uses variable stk_item::node_heap defined in treestk.h
      uses function DestroyHeap(Heap *) defined in heap.c
      uses variable stk_item::next defined in treestk.h
      uses variable freestk defined in treestk.c
   function new_treestk(void) in line 88
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in treestk.c
      uses variable treestk::top defined in treestk.h
      uses variable treestk::bottom defined in treestk.h
      uses variable treestk::contxt defined in treestk.h
   function push(TreeStack *,Stk_Item *) in line 100
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable stk_item::next defined in treestk.h
      uses variable treestk::top defined in treestk.h
      uses variable treestk::bottom defined in treestk.h
   function pop(TreeStack *) in line 114
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function is_empty(TreeStack *) defined in treestk.c
      uses variable treestk::top defined in treestk.h
      uses variable stk_item::next defined in treestk.h
      uses variable treestk::bottom defined in treestk.h
   function is_empty(TreeStack *) in line 133
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable treestk::top defined in treestk.h
   function top_of_stack(TreeStack *) in line 142
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function is_empty(TreeStack *) defined in treestk.c
      uses variable treestk::top defined in treestk.h
   function top_file(TreeStack *) in line 151
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function is_empty(TreeStack *) defined in treestk.c
      uses variable treestk::top defined in treestk.h
      uses variable stk_item::yyin defined in treestk.h
   function reset_position(TreeStack *) in line 160
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable Parse_TOS defined in treestk.c
      uses function top_of_stack(TreeStack *) defined in treestk.c
      uses function yy_switch_to_buffer(YY_BUFFER_STATE) defined in treestk.c
      uses variable stk_item::yybuff defined in treestk.h
      uses variable yyin defined in treestk.c
      uses function top_file(TreeStack *) defined in treestk.c
   function tree_parse(TreeStack *,int) in line 170
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses function is_empty(TreeStack *) defined in treestk.c
      uses function yyparse(void) defined in treestk.c
      uses function get_next_file(TreeStack *) defined in treestk.c
   function handle_new_file(TreeStack *,FILE *,char *) in line 191
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function new_stk_item(FILE *,char *) defined in treestk.c
      uses function push(TreeStack *,Stk_Item *) defined in treestk.c
      uses function reset_position(TreeStack *) defined in treestk.c
   function get_next_file(TreeStack *) in line 203
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses function is_empty(TreeStack *) defined in treestk.c
      uses variable Parse_TOS defined in treestk.c
      uses variable DoneStack defined in treestk.c
      uses function push(TreeStack *,Stk_Item *) defined in treestk.c
      uses function pop(TreeStack *) defined in treestk.c
      uses function delete_stk_item(Stk_Item *) defined in treestk.c
      uses function reset_position(TreeStack *) defined in treestk.c
      uses variable treestk::top defined in treestk.h
      uses variable stk_item::next defined in treestk.h
      uses variable stk_item::filename defined in treestk.h
      uses variable stk_item::yylineno defined in treestk.h
      uses variable stk_item::yycolno defined in treestk.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/treestk.h
module treestk.h
   macro definition YYBUFF_SIZE in line 21
      protection public
   macro definition MX_NODE_1 in line 28
      protection public
   macro definition MX_NODE_2 in line 29
      protection public
   macro definition MX_NODE_SZE in line 30
      protection public
   macro definition STK_ITEM_SZE in line 50
      protection public
   macro definition TREESTK_SZE in line 61
      protection public
   typedef YY_BUFFER_STATE in line 25
      protection public
   typedef Stk_Item in line 48
      protection public
   typedef TreeStack in line 59
      protection public
   function new_treestk(void) in line 63
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in treestk.c
      uses variable treestk::top defined in treestk.h
      uses variable treestk::bottom defined in treestk.h
      uses variable treestk::contxt defined in treestk.h
   function new_stk_item(FILE *,char *) in line 65
      protection public
      39 lines of code
      2 parameters
      4 conditional paths
      uses variable stk_item::next defined in treestk.h
      uses macro definition STK_ITEM_SZE defined in treestk.h
      uses function emalloc(size_t) defined in treestk.c
      uses variable stk_item::filename defined in treestk.h
      uses variable stk_item::yybuff defined in treestk.h
      uses function yy_create_buffer(FILE *,int) defined in treestk.c
      uses macro definition YYBUFF_SIZE defined in treestk.h
      uses function efree(void *) defined in treestk.c
      uses variable stk_item::node_heap defined in treestk.h
      uses function CreateHeap(unsigned int,unsigned int) defined in heap.c
      uses macro definition MX_NODE_SZE defined in treestk.h
      uses function yy_delete_buffer(YY_BUFFER_STATE) defined in treestk.c
      uses variable stk_item::yyin defined in treestk.h
      uses variable stk_item::yylineno defined in treestk.h
      uses variable stk_item::yycolno defined in treestk.h
      uses variable stk_item::yynxtcol defined in treestk.h
      uses variable stk_item::parse_tree defined in treestk.h
   function pop(TreeStack *) in line 66
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses function is_empty(TreeStack *) defined in treestk.c
      uses variable treestk::top defined in treestk.h
      uses variable stk_item::next defined in treestk.h
      uses variable treestk::bottom defined in treestk.h
   function top_of_stack(TreeStack *) in line 67
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function is_empty(TreeStack *) defined in treestk.c
      uses variable treestk::top defined in treestk.h
   function delete_stk_item(Stk_Item *) in line 68
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses variable stk_item::yybuff defined in treestk.h
      uses function yy_delete_buffer(YY_BUFFER_STATE) defined in treestk.c
      uses variable stk_item::node_heap defined in treestk.h
      uses function DestroyHeap(Heap *) defined in heap.c
      uses variable stk_item::next defined in treestk.h
   function push(TreeStack *,Stk_Item *) in line 69
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable stk_item::next defined in treestk.h
      uses variable treestk::top defined in treestk.h
      uses variable treestk::bottom defined in treestk.h
   function reset_position(TreeStack *) in line 70
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable Parse_TOS defined in treestk.c
      uses function top_of_stack(TreeStack *) defined in treestk.c
      uses function yy_switch_to_buffer(YY_BUFFER_STATE) defined in treestk.c
      uses variable stk_item::yybuff defined in treestk.h
      uses variable yyin defined in treestk.c
      uses function top_file(TreeStack *) defined in treestk.c
   function handle_new_file(TreeStack *,FILE *,char *) in line 71
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function new_stk_item(FILE *,char *) defined in treestk.c
      uses function push(TreeStack *,Stk_Item *) defined in treestk.c
      uses function reset_position(TreeStack *) defined in treestk.c
   function is_empty(TreeStack *) in line 72
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable treestk::top defined in treestk.h
   function tree_parse(TreeStack *,int) in line 73
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses function is_empty(TreeStack *) defined in treestk.c
      uses function yyparse(void) defined in treestk.c
      uses function get_next_file(TreeStack *) defined in treestk.c
   function get_next_file(TreeStack *) in line 74
      protection public
      21 lines of code
      1 parameters
      7 conditional paths
      uses function is_empty(TreeStack *) defined in treestk.c
      uses variable Parse_TOS defined in treestk.c
      uses variable DoneStack defined in treestk.c
      uses function push(TreeStack *,Stk_Item *) defined in treestk.c
      uses function pop(TreeStack *) defined in treestk.c
      uses function delete_stk_item(Stk_Item *) defined in treestk.c
      uses function reset_position(TreeStack *) defined in treestk.c
      uses variable treestk::top defined in treestk.h
      uses variable stk_item::next defined in treestk.h
      uses variable stk_item::filename defined in treestk.h
      uses variable stk_item::yylineno defined in treestk.h
      uses variable stk_item::yycolno defined in treestk.h
   function top_file(TreeStack *) in line 76
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function is_empty(TreeStack *) defined in treestk.c
      uses variable treestk::top defined in treestk.h
      uses variable stk_item::yyin defined in treestk.h
   function top_filename(TreeStack *) in line 77
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable stk_item::filename in line 37
      protection public
   variable stk_item::next in line 46
      protection public
   variable stk_item::node_heap in line 35
      protection public
   variable stk_item::parse_tree in line 34
      protection public
   variable stk_item::yybuff in line 44
      protection public
   variable stk_item::yycolno in line 41
      protection public
   variable stk_item::yyin in line 38
      protection public
   variable stk_item::yylineno in line 40
      protection public
   variable stk_item::yynxtcol in line 42
      protection public
   variable treestk::bottom in line 55
      protection public
   variable treestk::contxt in line 57
      protection public
   variable treestk::top in line 54
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno.c
module uno.c
   macro definition BINDIR in line 29
      protection public
   macro definition LX in line 34
      protection public
   macro definition GX in line 38
      protection public
   macro definition System in line 48
      protection public
   macro definition BSIZE in line 51
      protection public
   typedef Fnm in line 55
      protection public
   variable localonly in line 41
      protection public
   variable usecheck in line 41
      protection public
   variable glob_base in line 42
      protection public
   variable verbose in line 42
      protection public
   variable glob_prop in line 42
      protection public
   variable w_dir in line 43
      protection public
   variable loc_args in line 53
      protection public
   variable glob_cmd in line 54
      protection public
   variable buf in line 55
      protection public
   variable fnames in line 63
      protection public
   function uno_usage(void) in line 66
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
   function add_target(char *) in line 95
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable Fnm::f defined in uno.c
      uses variable Fnm::nxt defined in uno.c
      uses variable fnames defined in uno.c
   function pass_loc(char *,char *) in line 109
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable loc_args defined in uno.c
   function set_glb(char *) in line 119
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses variable glob_prop defined in uno.c
      uses macro definition System defined in uno.c
      uses variable buf defined in uno.c
      uses macro definition BINDIR defined in uno.c
      uses macro definition LX defined in uno.c
   function cleanup(int) in line 143
      protection public
      27 lines of code
      1 parameters
      5 conditional paths
      uses variable verbose defined in uno.c
      uses variable glob_cmd defined in uno.c
      uses variable glob_base defined in uno.c
      uses variable w_dir defined in uno.c
      uses macro definition System defined in uno.c
   function version_info(void) in line 172
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable loc_args defined in uno.c
      uses macro definition System defined in uno.c
   function run_uno(void) in line 179
      protection public
      32 lines of code
      1 parameters
      6 conditional paths
      uses variable fnames defined in uno.c
      uses variable buf defined in uno.c
      uses variable loc_args defined in uno.c
      uses variable Fnm::f defined in uno.c
      uses macro definition System defined in uno.c
      uses variable glob_cmd defined in uno.c
      uses variable Fnm::nxt defined in uno.c
      uses variable localonly defined in uno.c
      uses variable glob_prop defined in uno.c
      uses variable w_dir defined in uno.c
      uses function cleanup(int) defined in uno.c
   function main(int,char *) in line 213
      protection public
      107 lines of code
      2 parameters
      28 conditional paths
      uses variable loc_args defined in uno.c
      uses macro definition BINDIR defined in uno.c
      uses macro definition LX defined in uno.c
      uses variable glob_cmd defined in uno.c
      uses macro definition GX defined in uno.c
      uses function pass_loc(char *,char *) defined in uno.c
      uses variable w_dir defined in uno.c
      uses function set_glb(char *) defined in uno.c
      uses variable localonly defined in uno.c
      uses function version_info(void) defined in uno.c
      uses variable verbose defined in uno.c
      uses variable usecheck defined in uno.c
      uses function uno_usage(void) defined in uno.c
      uses function add_target(char *) defined in uno.c
      uses variable fnames defined in uno.c
      uses function cleanup(int) defined in uno.c
      uses variable glob_base defined in uno.c
      uses function run_uno(void) defined in uno.c
   variable Fnm::f in line 59
      protection public
   variable Fnm::nxt in line 60
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno_bounds.c
module uno_bounds.c
   variable debug in line 17
      protection public
   variable boundstack in line 19
      protection public
   variable freestack in line 20
      protection public
   variable bounded in line 22
      protection public
   variable freebounds in line 23
      protection public
   variable arsize in line 25
      protection public
   variable freears in line 25
      protection public
   variable arnosize in line 26
      protection public
   variable nogood in line 28
      protection public
   variable size_seen in line 29
      protection public
   variable size_notfound in line 29
      protection public
   variable size_outofscope in line 29
      protection public
   variable size_is_simple in line 29
      protection public
   variable simple_checked in line 29
      protection public
   variable size_other in line 29
      protection public
   variable size_dunno in line 30
      protection public
   variable size_deref in line 30
      protection public
   variable size_zero in line 30
      protection public
   variable size_zero_resolved in line 30
      protection public
   variable simple_known in line 30
      protection public
   variable size_ok in line 31
      protection public
   variable size_nok in line 31
      protection public
   variable uno_prop in line 47
      protection public
   variable Verbose in line 51
      protection public
   variable depth in line 51
      protection public
   variable uno in line 51
      protection public
   variable v_reps in line 359
      protection public
   function check_bounds(ArBound *,int,treenode *) in line 33
      protection public
      51 lines of code
      3 parameters
      1 conditional paths
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition DUP defined in dflow.h
      uses variable ArBound::dup defined in dflow.h
      uses function unsatisfiable(ArBound *) defined in uno_intervals.c
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_intervals.c
      uses macro definition NEG defined in dflow.h
      uses macro definition LB defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses function uno_assert(int,char *) defined in uno_intervals.c
      uses variable size_nok defined in uno_intervals.c
      uses function uno_warn(char *,treenode *,symentry_t *) defined in uno_intervals.c
      uses variable ArBound::s defined in dflow.h
      uses variable size_ok defined in uno_intervals.c
   function infeasible(treenode *,treenode *) in line 34
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
   function merge_bounds(ArBound *,ArBound *) in line 35
      protection public
      38 lines of code
      2 parameters
      1 conditional paths
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_intervals.c
      uses macro definition ZT defined in uno_lts.h
      uses function uno_assert(int,char *) defined in uno_intervals.c
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses macro definition DUP defined in dflow.h
      uses function first_inside_second(ArBound *,ArBound *) defined in uno_intervals.c
   function same_bounds(ArBound *,ArBound *) in line 36
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable ArBound::s defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses function first_inside_second(ArBound *,ArBound *) defined in uno_intervals.c
   function uno_ignore(symentry_t *) in line 37
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable symentry::fn defined in symtab.h
   function negate_bound(ArBound *) in line 38
      protection public
      25 lines of code
      1 parameters
      1 conditional paths
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_intervals.c
      uses macro definition ZT defined in uno_lts.h
      uses function uno_assert(int,char *) defined in uno_intervals.c
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition DUP defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses macro definition LB defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses macro definition NEG defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
   function uno_assert(int,char *) in line 39
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
   function eval_fct(treenode *,treenode *) in line 40
      protection public
      76 lines of code
      2 parameters
      1 conditional paths
      uses variable GenStack::e defined in uno_generic.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable err_path defined in uno_generic.c
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_STRING defined in tree.h
      uses variable leafnode::str defined in tree.h
      uses variable Fct::cmd defined in uno_global.h
      uses variable nogood defined in uno_generic.c
      uses variable Cmd::cmd defined in uno_generic.c
      uses function doit(leafnode *,int) defined in dflow.c
      uses enumvalue TN_EXPR_LIST defined in tree.h
      uses function eval_const_expr(treenode *,treenode *) defined in uno_generic.c
      uses variable Fct::fn defined in uno_global.h
   function print_recur(treenode *,FILE *) in line 41
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function dump_defuse(DefUse *,FILE *) in line 42
      protection public
      49 lines of code
      2 parameters
      1 conditional paths
   function suppress(char *,int) in line 43
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
   function toksym(int,int) in line 44
      protection public
      246 lines of code
      2 parameters
      1 conditional paths
   function unsatisfiable(ArBound *) in line 45
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses macro definition LB defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
   function explain_bound(char *,ArBound *,treenode *) in line 49
      protection public
      59 lines of code
      3 parameters
      1 conditional paths
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses macro definition DUP defined in dflow.h
      uses variable ArBound::s defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable ArBound::sameas defined in dflow.h
      uses macro definition NEG defined in dflow.h
      uses macro definition LB defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses macro definition FROMASGN defined in dflow.h
      uses macro definition FROMEXPR defined in dflow.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable ArBound::level_set defined in dflow.h
   function could_be_fct(char *) in line 53
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable Graphs::status defined in uno_lts.h
   function count_leafs(treenode *) in line 56
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses function could_be_fct(char *) defined in uno_bounds.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function has_right_decl(symentry_t *,treenode *) in line 70
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function find_ininode(symentry_t *,treenode *) in line 84
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_INIT_BLK defined in tree.h
      uses function has_right_decl(symentry_t *,treenode *) defined in uno_bounds.c
      uses variable treenode::lnode defined in tree.h
      uses function count_leafs(treenode *) defined in uno_bounds.c
   function getars(void) in line 101
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable freears defined in uno_bounds.c
      uses variable ArSize::nxt defined in dflow.h
      uses function emalloc(size_t) defined in dflow.c
   function add_size(symentry_t *,treenode *,treenode *) in line 115
      protection public
      40 lines of code
      3 parameters
      8 conditional paths
      uses variable arsize defined in uno_bounds.c
      uses variable ArSize::nxt defined in dflow.h
      uses variable ArSize::s defined in dflow.h
      uses function find_ininode(symentry_t *,treenode *) defined in uno_bounds.c
      uses variable size_zero_resolved defined in uno_bounds.c
      uses variable Verbose defined in uno_bounds.c
      uses variable debug defined in uno_bounds.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable leafnode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_INT defined in tree.h
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::ival defined in tree.h
      uses variable size_zero defined in uno_bounds.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function getars(void) defined in uno_bounds.c
      uses variable ArSize::b defined in dflow.h
   function find_size(symentry_t *,treenode *) in line 157
      protection public
      48 lines of code
      2 parameters
      10 conditional paths
      uses macro definition ZT defined in uno_lts.h
      uses variable arsize defined in uno_bounds.c
      uses variable ArSize::nxt defined in dflow.h
      uses variable ArSize::s defined in dflow.h
      uses variable ArSize::b defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable symentry::decl_level defined in symtab.h
      uses variable symentry::ln defined in symtab.h
      uses variable symentry::nes defined in symtab.h
      uses variable symentry::node defined in symtab.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
      uses variable arnosize defined in uno_bounds.c
      uses function getars(void) defined in uno_bounds.c
      uses variable Verbose defined in uno_bounds.c
      uses variable common::fnm defined in tree.h
      uses variable size_other defined in uno_bounds.c
   function has_node_comp_ops(treenode *) in line 207
      protection public
      29 lines of code
      1 parameters
      1 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses variable common::tok defined in tree.h
      uses enumvalue TN_EMPTY defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses function has_node_comp_ops(treenode *) defined in uno_bounds.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function has_node_type(treenode *,int) in line 238
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses function has_node_type(treenode *,int) defined in uno_bounds.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function simple_node_type(treenode *) in line 254
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable treenode::syment defined in tree.h
   function eval_const_expr(treenode *,treenode *) in line 264
      protection public
      76 lines of code
      2 parameters
      1 conditional paths
      uses function get_state_val(void) defined in uno_generic.c
      uses variable statename defined in uno_generic.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_INT defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable uno_prop defined in uno_bounds.c
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses function eval_fct(treenode *,treenode *) defined in uno_bounds.c
      uses enumvalue TN_EXPR defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses function eval_const_expr(treenode *,treenode *) defined in uno_bounds.c
      uses variable treenode::rnode defined in tree.h
      uses variable nogood defined in uno_bounds.c
      uses variable common::tok defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function toksym(int,int) defined in uno_bounds.c
      uses function x_stmnt(treenode *) defined in dflow.c
   function eval_cond(treenode *,treenode *) in line 342
      protection public
      16 lines of code
      2 parameters
      4 conditional paths
      uses variable nogood defined in uno_bounds.c
      uses function eval_const_expr(treenode *,treenode *) defined in uno_bounds.c
      uses macro definition ZT defined in uno_lts.h
   function v_matched(treenode *) in line 362
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable v_reps defined in uno_bounds.c
      uses variable Stack::nxt defined in uno_lts.h
      uses variable Stack::n defined in uno_lts.h
      uses function suppress(char *,int) defined in uno_bounds.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
   function v_reported(treenode *) in line 376
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function v_matched(treenode *) defined in uno_bounds.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable Stack::n defined in uno_lts.h
      uses variable Stack::nxt defined in uno_lts.h
      uses variable v_reps defined in uno_bounds.c
   function ana_aio_ix(State *,treenode *) in line 390
      protection public
      117 lines of code
      2 parameters
      28 conditional paths
      uses variable State::n defined in uno_lts.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_INDEX defined in tree.h
      uses variable debug defined in uno_bounds.c
      uses variable treenode::syment defined in tree.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses function print_recur(treenode *,FILE *) defined in uno_bounds.c
      uses variable treenode::rnode defined in tree.h
      uses variable size_seen defined in uno_bounds.c
      uses function has_node_type(treenode *,int) defined in uno_bounds.c
      uses enumvalue TN_DEREF defined in tree.h
      uses variable size_deref defined in uno_bounds.c
      uses function find_size(symentry_t *,treenode *) defined in uno_bounds.c
      uses variable size_notfound defined in uno_bounds.c
      uses function simple_node_type(treenode *) defined in uno_bounds.c
      uses variable size_outofscope defined in uno_bounds.c
      uses variable size_is_simple defined in uno_bounds.c
      uses variable nogood defined in uno_bounds.c
      uses function eval_const_expr(treenode *,treenode *) defined in uno_bounds.c
      uses macro definition ZT defined in uno_lts.h
      uses variable simple_checked defined in uno_bounds.c
      uses variable boundstack defined in uno_bounds.c
      uses variable BoundStack::curbounds defined in dflow.h
      uses variable ArBound::nxt defined in dflow.h
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_bounds.c
      uses variable ArBound::s defined in dflow.h
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses variable simple_known defined in uno_bounds.c
      uses function check_bounds(ArBound *,int,treenode *) defined in uno_bounds.c
      uses function eval_cond(treenode *,treenode *) defined in uno_bounds.c
      uses variable size_ok defined in uno_bounds.c
      uses function v_reported(treenode *) defined in uno_bounds.c
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable size_nok defined in uno_bounds.c
      uses variable size_dunno defined in uno_bounds.c
   function ana_aio_decl(SymList *,treenode *,treenode *) in line 509
      protection public
      30 lines of code
      3 parameters
      5 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable treenode::syment defined in tree.h
      uses variable SymList::sm defined in dflow.h
      uses function add_size(symentry_t *,treenode *,treenode *) defined in uno_bounds.c
      uses variable debug defined in uno_bounds.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses function name_of_node(tn_t) defined in tree.c
      uses function print_recur(treenode *,FILE *) defined in uno_bounds.c
   function uno_freshbound(void) in line 541
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable freebounds defined in uno_bounds.c
      uses variable ArBound::nxt defined in dflow.h
      uses variable ArBound::sameas defined in dflow.h
      uses variable ArBound::dup defined in dflow.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable ArBound::level_set defined in dflow.h
      uses variable depth defined in uno_bounds.c
   function loose_bound(symentry_t *,int,int,int) in line 558
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses function uno_assert(int,char *) defined in uno_bounds.c
      uses function uno_freshbound(void) defined in uno_bounds.c
      uses variable ArBound::s defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
      uses variable ArBound::bounds defined in dflow.h
   function add_bound(symentry_t *,int,int,int) in line 572
      protection public
      25 lines of code
      4 parameters
      8 conditional paths
      uses variable bounded defined in uno_bounds.c
      uses variable ArBound::nxt defined in dflow.h
      uses variable ArBound::s defined in dflow.h
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses macro definition FROMASGN defined in dflow.h
      uses variable debug defined in uno_bounds.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function loose_bound(symentry_t *,int,int,int) defined in uno_bounds.c
   function bound_from_asgn(symentry_t *,treenode *) in line 599
      protection public
      29 lines of code
      2 parameters
      6 conditional paths
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable treenode::syment defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses function add_bound(symentry_t *,int,int,int) defined in uno_bounds.c
      uses macro definition DUP defined in dflow.h
      uses macro definition FROMASGN defined in dflow.h
      uses variable ArBound::sameas defined in dflow.h
      uses variable nogood defined in uno_bounds.c
      uses function eval_const_expr(treenode *,treenode *) defined in uno_bounds.c
      uses macro definition ZT defined in uno_lts.h
      uses macro definition LB defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses variable debug defined in uno_bounds.c
   function uno_dig(symentry_t *,treenode *) in line 630
      protection public
      18 lines of code
      2 parameters
      5 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses function bound_from_asgn(symentry_t *,treenode *) defined in uno_bounds.c
      uses enumvalue TN_DECL defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function dual_work(State *) in line 650
      protection public
      30 lines of code
      1 parameters
      7 conditional paths
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::defuse defined in tree.h
      uses function leftmost(treenode *) defined in tree.c
      uses variable leafnode::hdr defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::decl_level defined in symtab.h
      uses macro definition FUNCTION_SCOPE defined in symtab.h
      uses variable SymList::mark defined in dflow.h
      uses macro definition DECL defined in dtags.h
      uses macro definition DEF defined in dtags.h
      uses macro definition ARRAY_DECL defined in dtags.h
      uses function uno_ignore(symentry_t *) defined in uno_bounds.c
      uses macro definition REF2 defined in dtags.h
      uses function uno_dig(symentry_t *,treenode *) defined in uno_bounds.c
      uses variable debug defined in uno_bounds.c
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_bounds.c
   function uno_freears(ArSize *) in line 682
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable ArSize::nxt defined in dflow.h
      uses variable freears defined in uno_bounds.c
   function uno_dumpbounds(ArBound *) in line 693
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable ArBound::nxt defined in dflow.h
      uses variable freebounds defined in uno_bounds.c
   function bound_from_expr(treenode *) in line 704
      protection public
      40 lines of code
      1 parameters
      9 conditional paths
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable nogood defined in uno_bounds.c
      uses function eval_const_expr(treenode *,treenode *) defined in uno_bounds.c
      uses variable treenode::rnode defined in tree.h
      uses macro definition ZT defined in uno_lts.h
      uses variable treenode::syment defined in tree.h
      uses variable common::tok defined in tree.h
      uses function add_bound(symentry_t *,int,int,int) defined in uno_bounds.c
      uses macro definition LB defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses macro definition FROMEXPR defined in dflow.h
      uses macro definition NEG defined in dflow.h
   function expr_bound(treenode *,treenode *) in line 807
      protection public
      38 lines of code
      2 parameters
      11 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses function bound_from_expr(treenode *) defined in uno_bounds.c
      uses variable common::tok defined in tree.h
      uses variable debug defined in uno_bounds.c
      uses function negate_bound(ArBound *) defined in uno_bounds.c
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_bounds.c
      uses function uno_assert(int,char *) defined in uno_bounds.c
      uses variable bounded defined in uno_bounds.c
      uses variable ArBound::nxt defined in dflow.h
      uses variable freebounds defined in uno_bounds.c
   function asgn_bound(State *) in line 847
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses variable common::tok defined in tree.h
      uses function bound_from_asgn(symentry_t *,treenode *) defined in uno_bounds.c
      uses variable debug defined in uno_bounds.c
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_bounds.c
   function gather_bounds(State *) in line 864
      protection public
      92 lines of code
      1 parameters
      26 conditional paths
      uses variable debug defined in uno_bounds.c
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::defuse defined in tree.h
      uses function dump_defuse(DefUse *,FILE *) defined in uno_bounds.c
      uses variable bounded defined in uno_bounds.c
      uses variable ArBound::nxt defined in dflow.h
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_bounds.c
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses macro definition DEF defined in dtags.h
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable ArBound::s defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses variable ArBound::bounds defined in dflow.h
      uses variable ArBound::level_set defined in dflow.h
      uses variable depth defined in uno_bounds.c
      uses macro definition FROMEXPR defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses variable boundstack defined in uno_bounds.c
      uses variable BoundStack::curbounds defined in dflow.h
      uses macro definition FROMASGN defined in dflow.h
      uses function merge_bounds(ArBound *,ArBound *) defined in uno_bounds.c
      uses function loose_bound(symentry_t *,int,int,int) defined in uno_bounds.c
      uses variable ArBound::sameas defined in dflow.h
      uses variable ArBound::dup defined in dflow.h
      uses function uno_dumpbounds(ArBound *) defined in uno_bounds.c
   function bound_stats(void) in line 958
      protection public
      40 lines of code
      1 parameters
      1 conditional paths
      uses variable Verbose defined in uno_bounds.c
      uses variable size_zero_resolved defined in uno_bounds.c
      uses variable size_zero defined in uno_bounds.c
      uses variable size_seen defined in uno_bounds.c
      uses variable size_notfound defined in uno_bounds.c
      uses variable size_other defined in uno_bounds.c
      uses variable size_deref defined in uno_bounds.c
      uses variable size_outofscope defined in uno_bounds.c
      uses variable size_dunno defined in uno_bounds.c
      uses variable simple_checked defined in uno_bounds.c
      uses variable simple_known defined in uno_bounds.c
      uses variable size_ok defined in uno_bounds.c
      uses variable size_nok defined in uno_bounds.c
      uses variable size_is_simple defined in uno_bounds.c
   function uno_bounds(SymList *,ArList *,treenode *) in line 1000
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable ArList::nxt defined in dflow.h
      uses function ana_aio_decl(SymList *,treenode *,treenode *) defined in uno_bounds.c
      uses variable ArList::tn defined in dflow.h
   function uno_index(State *) in line 1008
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable DefUse::aio defined in dflow.h
      uses variable ArList::nxt defined in dflow.h
      uses function ana_aio_ix(State *,treenode *) defined in uno_bounds.c
      uses variable ArList::tn defined in dflow.h
   function fix_dups(State *) in line 1025
      protection public
      68 lines of code
      1 parameters
      15 conditional paths
      uses variable boundstack defined in uno_bounds.c
      uses variable BoundStack::curbounds defined in dflow.h
      uses variable ArBound::nxt defined in dflow.h
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition DUP defined in dflow.h
      uses variable ArBound::dup defined in dflow.h
      uses variable ArBound::s defined in dflow.h
      uses variable ArBound::sameas defined in dflow.h
      uses variable Verbose defined in uno_bounds.c
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_bounds.c
      uses variable State::n defined in uno_lts.h
      uses variable debug defined in uno_bounds.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses macro definition ZT defined in uno_lts.h
      uses macro definition UNK defined in dflow.h
   function uno_bframe(void) in line 1095
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable freestack defined in uno_bounds.c
      uses variable BoundStack::nxt defined in dflow.h
      uses function emalloc(size_t) defined in dflow.c
   function bound_push(State *,treenode *,treenode *,State *) in line 1108
      protection public
      76 lines of code
      4 parameters
      17 conditional paths
      uses function uno_bframe(void) defined in uno_bounds.c
      uses variable BoundStack::curbounds defined in dflow.h
      uses variable boundstack defined in uno_bounds.c
      uses variable ArBound::nxt defined in dflow.h
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses variable debug defined in uno_bounds.c
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_bounds.c
      uses macro definition ZT defined in uno_lts.h
      uses function loose_bound(symentry_t *,int,int,int) defined in uno_bounds.c
      uses variable ArBound::s defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses variable ArBound::sameas defined in dflow.h
      uses variable ArBound::dup defined in dflow.h
      uses variable ArBound::level_set defined in dflow.h
      uses variable BoundStack::nxt defined in dflow.h
      uses function dual_work(State *) defined in uno_bounds.c
      uses function expr_bound(treenode *,treenode *) defined in uno_bounds.c
      uses function asgn_bound(State *) defined in uno_bounds.c
      uses function gather_bounds(State *) defined in uno_bounds.c
      uses function fix_dups(State *) defined in uno_bounds.c
      uses function unsatisfiable(ArBound *) defined in uno_bounds.c
      uses variable State::n defined in uno_lts.h
      uses variable State::pvb defined in uno_lts.h
      uses function same_bounds(ArBound *,ArBound *) defined in uno_bounds.c
      uses variable State::visited defined in uno_lts.h
   function bound_pop(void) in line 1186
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function uno_assert(int,char *) defined in uno_bounds.c
      uses variable boundstack defined in uno_bounds.c
      uses function uno_dumpbounds(ArBound *) defined in uno_bounds.c
      uses variable BoundStack::curbounds defined in dflow.h
      uses variable BoundStack::nxt defined in dflow.h
      uses variable freestack defined in uno_bounds.c
   function bound_reset(void) in line 1200
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable bounded defined in uno_bounds.c
      uses function uno_dumpbounds(ArBound *) defined in uno_bounds.c
      uses variable arsize defined in uno_bounds.c
      uses function uno_freears(ArSize *) defined in uno_bounds.c
      uses variable arnosize defined in uno_bounds.c
      uses variable v_reps defined in uno_bounds.c
   function dfs_bound(State *,treenode *,treenode *,State *) in line 1209
      protection public
      53 lines of code
      4 parameters
      1 conditional paths
      uses variable depth defined in uno_bounds.c
      uses variable debug defined in uno_bounds.c
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses function bound_push(State *,treenode *,treenode *,State *) defined in uno_bounds.c
      uses function uno_index(State *) defined in uno_bounds.c
      uses variable State::iscond defined in uno_lts.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses macro definition ZT defined in uno_lts.h
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses function infeasible(treenode *,treenode *) defined in uno_bounds.c
      uses variable Trans::cond defined in uno_lts.h
      uses function dfs_bound(State *,treenode *,treenode *,State *) defined in uno_bounds.c
      uses function bound_pop(void) defined in uno_bounds.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno_fcts.c
module uno_fcts.c
   variable longtrace in line 19
      protection public
   variable verbose in line 19
      protection public
   variable debug in line 20
      protection public
   variable fcts in line 22
      protection public
   variable prop_fct in line 22
      protection public
   variable free_sym in line 23
      protection public
   variable free_n in line 24
      protection public
   variable prop_start in line 25
      protection public
   variable free_pool in line 26
      protection public
   variable pool in line 27
      protection public
   variable report in line 28
      protection public
   variable rstack in line 29
      protection public
   variable free_rstack in line 29
      protection public
   variable stack in line 30
      protection public
   variable free_stack in line 30
      protection public
   variable init in line 30
      protection public
   variable free_v in line 31
      protection public
   variable free_var in line 32
      protection public
   variable glob_prop in line 33
      protection public
   variable ErrCnt in line 34
      protection public
   variable depth in line 35
      protection public
   variable oid in line 35
      protection public
   variable tabs in line 35
      protection public
   variable BuiltinCheck in line 46
      protection public
   function check_prop(Arc *) in line 37
      protection public
      68 lines of code
      1 parameters
      19 conditional paths
      uses variable Arc::to defined in uno_fcts.h
      uses function end_of_path(void) defined in uno_fcts.c
      uses function same_state(Arc *) defined in uno_fcts.c
      uses variable debug defined in uno_fcts.c
      uses variable Node::nid defined in uno_fcts.h
      uses variable Node::vis defined in uno_fcts.h
      uses variable Vis::uno_state defined in uno_fcts.h
      uses variable rstack defined in uno_fcts.c
      uses variable Rstack::n defined in uno_fcts.h
      uses variable depth defined in uno_fcts.c
      uses variable stack defined in uno_fcts.c
      uses variable Stack::uno_state defined in uno_lts.h
      uses variable Node::lab defined in uno_fcts.h
      uses variable Label::label defined in uno_fcts.h
      uses variable prop_start defined in uno_fcts.c
      uses function eval_prop(Node *,Node *) defined in uno_fcts.c
      uses variable Label::nxt defined in uno_fcts.h
      uses function fct_in_lab(char *) defined in uno_fcts.c
      uses variable BFct::visited defined in uno_fcts.h
      uses variable BFct::fnm defined in uno_fcts.h
      uses function do_fct_call(BFct *,Node *) defined in uno_fcts.c
      uses variable Node::succ defined in uno_fcts.h
      uses variable Arc::nxt defined in uno_fcts.h
      uses function list_sel(void) defined in uno_fcts.c
      uses variable Stack::sels defined in uno_lts.h
      uses function rev_release(Var *) defined in uno_fcts.c
      uses variable Stack::knz defined in uno_lts.h
      uses function rev_symrel(BSym *) defined in uno_fcts.c
      uses variable Stack::nxt defined in uno_lts.h
      uses variable free_stack defined in uno_fcts.c
   function end_of_path(void) in line 38
      protection public
      34 lines of code
      1 parameters
      9 conditional paths
      uses variable rstack defined in uno_fcts.c
      uses variable Rstack::nxt defined in uno_fcts.h
      uses variable stack defined in uno_fcts.c
      uses variable Stack::fr defined in uno_lts.h
      uses variable Rstack::f defined in uno_fcts.h
      uses variable debug defined in uno_fcts.c
      uses variable depth defined in uno_fcts.c
      uses variable BFct::fnm defined in uno_fcts.h
      uses variable Rstack::n defined in uno_fcts.h
      uses variable Node::succ defined in uno_fcts.h
      uses variable Arc::nxt defined in uno_fcts.h
      uses variable Node::nid defined in uno_fcts.h
      uses variable Arc::to defined in uno_fcts.h
      uses function check_prop(Arc *) defined in uno_fcts.c
   function handle_fct(char *) in line 40
      protection public
      74 lines of code
      1 parameters
      1 conditional paths
      uses function find_function(char *) defined in uno_fcts.c
      uses variable oid defined in uno_fcts.c
      uses function add_arc(BFct *,int,int) defined in uno_fcts.c
      uses function add_label(BFct *,Arc *,char *) defined in uno_fcts.c
   function add_fct(char *) in line 41
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses variable debug defined in uno_fcts.c
      uses variable fcts defined in uno_fcts.c
      uses variable BFct::nxt defined in uno_fcts.h
      uses variable BFct::fnm defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
      uses function new_str(char *) defined in uno_fcts.c
      uses variable BFct::root defined in uno_fcts.h
      uses variable Node::nid defined in uno_fcts.h
   function emalloc(size_t) in line 42
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
   function add_call(char *,char *) in line 43
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses function find_function(char *) defined in uno_fcts.c
      uses variable BFct::calls defined in uno_fcts.h
      uses variable BSym::nxt defined in uno_fcts.h
      uses variable BSym::s defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
      uses function new_str(char *) defined in uno_fcts.c
      uses function indirect_calls(char *) defined in uno_fcts.c
   function add_glob_defs(void) in line 44
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function handle_fct(char *) defined in uno_global.c
      uses variable Fct::defs defined in uno_global.h
      uses function find_roots(void) defined in uno_global.c
      uses variable Fct::n defined in uno_global.h
      uses variable Place::fnm defined in uno_global.h
      uses variable Place::line defined in uno_global.h
   function builtin_check(void) in line 90
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function add_fct(char *) defined in uno_fcts.c
      uses variable glob_prop defined in uno_fcts.c
      uses variable BuiltinCheck defined in uno_fcts.c
      uses function handle_fct(char *) defined in uno_fcts.c
   function new_str(char *) in line 99
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses variable pool defined in uno_fcts.c
      uses variable Pool::nxt defined in uno_fcts.h
      uses variable free_pool defined in uno_fcts.c
      uses variable Pool::s defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
   function new_var(char *) in line 118
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable free_var defined in uno_fcts.c
      uses variable Var::nxt defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
      uses variable Var::s defined in uno_fcts.h
      uses function new_str(char *) defined in uno_fcts.c
   function new_sym(char *) in line 133
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable free_sym defined in uno_fcts.c
      uses variable BSym::nxt defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
      uses variable BSym::s defined in uno_fcts.h
      uses function new_str(char *) defined in uno_fcts.c
   function rev_symrel(BSym *) in line 148
      protection public
      26 lines of code
      1 parameters
      4 conditional paths
      uses variable BSym::nxt defined in uno_fcts.h
      uses variable BSym::s defined in uno_fcts.h
      uses variable free_pool defined in uno_fcts.c
      uses variable Pool::nxt defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
      uses variable Pool::s defined in uno_fcts.h
      uses variable pool defined in uno_fcts.c
      uses variable free_sym defined in uno_fcts.c
   function rev_release(Var *) in line 176
      protection public
      26 lines of code
      1 parameters
      4 conditional paths
      uses variable Var::nxt defined in uno_fcts.h
      uses variable Var::s defined in uno_fcts.h
      uses variable free_pool defined in uno_fcts.c
      uses variable Pool::nxt defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
      uses variable Pool::s defined in uno_fcts.h
      uses variable pool defined in uno_fcts.c
      uses variable free_var defined in uno_fcts.c
   function find_function(char *) in line 204
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable fcts defined in uno_fcts.c
      uses variable BFct::nxt defined in uno_fcts.h
      uses variable BFct::fnm defined in uno_fcts.h
   function indirect_calls(char *) in line 255
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable Sym::nxt defined in uno_global.h
      uses variable Sym::s defined in uno_global.h
   function find_roots(void) in line 258
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
      uses variable fcts defined in uno_fcts.c
      uses variable BFct::nxt defined in uno_fcts.h
      uses variable BFct::fnm defined in uno_fcts.h
      uses variable BFct::calls defined in uno_fcts.h
      uses variable BSym::nxt defined in uno_fcts.h
      uses variable BSym::s defined in uno_fcts.h
      uses function indirect_calls(char *) defined in uno_fcts.c
   function find_node(BFct *,int) in line 287
      protection public
      15 lines of code
      2 parameters
      4 conditional paths
      uses variable BFct::root defined in uno_fcts.h
      uses variable Node::nxt defined in uno_fcts.h
      uses variable Node::nid defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
   function add_arc(BFct *,int,int) in line 304
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in uno_fcts.c
      uses function find_node(BFct *,int) defined in uno_fcts.c
      uses variable Arc::to defined in uno_fcts.h
      uses variable Arc::nxt defined in uno_fcts.h
      uses variable Node::succ defined in uno_fcts.h
   function add_label(BFct *,Arc *,char *) in line 318
      protection public
      50 lines of code
      3 parameters
      20 conditional paths
      uses function emalloc(size_t) defined in uno_fcts.c
      uses variable Label::label defined in uno_fcts.h
      uses function new_str(char *) defined in uno_fcts.c
      uses variable BFct::fnm defined in uno_fcts.h
      uses variable glob_prop defined in uno_fcts.c
      uses variable Label::nxt defined in uno_fcts.h
      uses variable Arc::lab defined in uno_fcts.h
      uses variable Arc::to defined in uno_fcts.h
      uses variable Node::lab defined in uno_fcts.h
   function ini_prop(void) in line 370
      protection public
      18 lines of code
      1 parameters
      5 conditional paths
      uses variable prop_fct defined in uno_fcts.c
      uses function find_function(char *) defined in uno_fcts.c
      uses variable glob_prop defined in uno_fcts.c
      uses variable verbose defined in uno_fcts.c
      uses function builtin_check(void) defined in uno_fcts.c
      uses function find_node(BFct *,int) defined in uno_fcts.c
      uses variable Node::succ defined in uno_fcts.h
      uses variable prop_start defined in uno_fcts.c
      uses variable Arc::to defined in uno_fcts.h
   function fct_in_lab(char *) in line 390
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses function find_function(char *) defined in uno_fcts.c
   function n_reported(Stack *) in line 406
      protection public
      22 lines of code
      1 parameters
      5 conditional paths
      uses variable Stack::move defined in uno_lts.h
      uses variable Arc::to defined in uno_fcts.h
      uses variable Node::nid defined in uno_fcts.h
      uses variable report defined in uno_fcts.c
      uses variable Report::nxt defined in uno_fcts.h
      uses variable Report::n defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
      uses variable debug defined in uno_fcts.c
   function print_fnm(Rstack *,char *) in line 430
      protection public
      10 lines of code
      2 parameters
      4 conditional paths
      uses variable Rstack::n defined in uno_fcts.h
      uses variable Node::lab defined in uno_fcts.h
      uses variable Label::label defined in uno_fcts.h
      uses variable Rstack::f defined in uno_fcts.h
      uses variable BFct::fnm defined in uno_fcts.h
   function print_rstack(Rstack *,char *) in line 442
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses function print_fnm(Rstack *,char *) defined in uno_fcts.c
      uses variable Rstack::nxt defined in uno_fcts.h
   function print_stack(Stack *,int) in line 449
      protection public
      31 lines of code
      2 parameters
      8 conditional paths
      uses variable Stack::nxt defined in uno_lts.h
      uses variable Stack::move defined in uno_lts.h
      uses variable Arc::to defined in uno_fcts.h
      uses variable Node::lab defined in uno_fcts.h
      uses variable Label::label defined in uno_fcts.h
      uses variable tabs defined in uno_fcts.c
      uses variable Node::nid defined in uno_fcts.h
      uses variable Stack::fc defined in uno_lts.h
      uses variable BFct::fnm defined in uno_fcts.h
      uses variable Stack::fr defined in uno_lts.h
   function do_fct_call(BFct *,Node *) in line 482
      protection public
      56 lines of code
      2 parameters
      11 conditional paths
      uses variable BFct::visited defined in uno_fcts.h
      uses variable free_rstack defined in uno_fcts.c
      uses variable Rstack::nxt defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
      uses variable Rstack::f defined in uno_fcts.h
      uses variable Rstack::n defined in uno_fcts.h
      uses variable rstack defined in uno_fcts.c
      uses variable stack defined in uno_fcts.c
      uses variable Stack::fc defined in uno_lts.h
      uses function find_node(BFct *,int) defined in uno_fcts.c
      uses variable Node::succ defined in uno_fcts.h
      uses variable debug defined in uno_fcts.c
      uses variable depth defined in uno_fcts.c
      uses function check_prop(Arc *) defined in uno_fcts.c
      uses variable BFct::calls defined in uno_fcts.h
      uses function end_of_path(void) defined in uno_fcts.c
      uses variable BSym::nxt defined in uno_fcts.h
      uses function find_function(char *) defined in uno_fcts.c
      uses variable BSym::s defined in uno_fcts.h
   function same_markings(Vis *) in line 540
      protection public
      35 lines of code
      1 parameters
      8 conditional paths
      uses variable Vis::v defined in uno_fcts.h
      uses variable stack defined in uno_fcts.c
      uses variable Stack::sels defined in uno_lts.h
      uses variable Vis::zeromarks defined in uno_fcts.h
      uses variable Var::nxt defined in uno_fcts.h
      uses variable VList::nxt defined in uno_fcts.h
      uses variable VList::v defined in uno_fcts.h
      uses variable Var::s defined in uno_fcts.h
      uses variable Var::mark defined in uno_fcts.h
      uses variable free_v defined in uno_fcts.c
      uses function emalloc(size_t) defined in uno_fcts.c
      uses function new_var(char *) defined in uno_fcts.c
   function same_callpts(Vis *) in line 577
      protection public
      32 lines of code
      1 parameters
      8 conditional paths
      uses variable Vis::r defined in uno_fcts.h
      uses variable rstack defined in uno_fcts.c
      uses variable Vis::zerostack defined in uno_fcts.h
      uses variable Rstack::nxt defined in uno_fcts.h
      uses variable NList::nxt defined in uno_fcts.h
      uses variable Rstack::n defined in uno_fcts.h
      uses variable NList::n defined in uno_fcts.h
      uses variable free_v defined in uno_fcts.c
      uses variable free_n defined in uno_fcts.c
      uses function emalloc(size_t) defined in uno_fcts.c
   function same_unostate(Vis *) in line 611
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable Vis::uno_state defined in uno_fcts.h
      uses variable stack defined in uno_fcts.c
      uses variable Stack::uno_state defined in uno_lts.h
   function same_state(Arc *) in line 620
      protection public
      43 lines of code
      1 parameters
      6 conditional paths
      uses variable Arc::to defined in uno_fcts.h
      uses variable Node::vis defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
      uses function same_unostate(Vis *) defined in uno_fcts.c
      uses function same_callpts(Vis *) defined in uno_fcts.c
      uses function same_markings(Vis *) defined in uno_fcts.c
      uses variable free_stack defined in uno_fcts.c
      uses variable Stack::nxt defined in uno_lts.h
      uses variable Stack::move defined in uno_lts.h
      uses variable Stack::uno_state defined in uno_lts.h
      uses variable stack defined in uno_fcts.c
      uses variable Stack::sels defined in uno_lts.h
      uses variable Var::nxt defined in uno_fcts.h
      uses function new_var(char *) defined in uno_fcts.c
      uses variable Var::s defined in uno_fcts.h
      uses variable Var::loc defined in uno_fcts.h
      uses variable Var::sel defined in uno_fcts.h
      uses variable Var::stat defined in uno_fcts.h
      uses variable Var::mark defined in uno_fcts.h
      uses variable Stack::knz defined in uno_lts.h
      uses variable BSym::nxt defined in uno_fcts.h
      uses function new_sym(char *) defined in uno_fcts.c
      uses variable BSym::s defined in uno_fcts.h
   function f2d_assert(int,char *) in line 701
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
   function has_fct_match(Label *,Label *) in line 710
      protection public
      37 lines of code
      2 parameters
      7 conditional paths
      uses variable Label::label defined in uno_fcts.h
      uses function f2d_assert(int,char *) defined in uno_fcts.c
   function unselect(void) in line 749
      protection public
      9 lines of code
      1 parameters
      4 conditional paths
      uses variable stack defined in uno_fcts.c
      uses variable Stack::sels defined in uno_lts.h
      uses variable Var::nxt defined in uno_fcts.h
      uses variable Var::sel defined in uno_fcts.h
      uses variable debug defined in uno_fcts.c
   function set_select(char *,char *,int) in line 760
      protection public
      18 lines of code
      3 parameters
      5 conditional paths
      uses variable stack defined in uno_fcts.c
      uses variable Stack::sels defined in uno_lts.h
      uses variable Var::nxt defined in uno_fcts.h
      uses variable Var::s defined in uno_fcts.h
      uses variable Var::sel defined in uno_fcts.h
      uses variable Var::stat defined in uno_fcts.h
      uses variable debug defined in uno_fcts.c
      uses function new_var(char *) defined in uno_fcts.c
      uses variable Var::loc defined in uno_fcts.h
      uses function new_str(char *) defined in uno_fcts.c
   function mark_select(int) in line 780
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable stack defined in uno_fcts.c
      uses variable Stack::sels defined in uno_lts.h
      uses variable Var::nxt defined in uno_fcts.h
      uses variable Var::sel defined in uno_fcts.h
      uses variable Var::mark defined in uno_fcts.h
      uses variable debug defined in uno_fcts.c
      uses variable Var::s defined in uno_fcts.h
   function list_sel(void) in line 794
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable stack defined in uno_fcts.c
      uses variable Stack::sels defined in uno_lts.h
      uses variable Var::nxt defined in uno_fcts.h
      uses variable Var::sel defined in uno_fcts.h
      uses variable depth defined in uno_fcts.c
      uses variable Var::s defined in uno_fcts.h
      uses variable Var::loc defined in uno_fcts.h
      uses variable Var::mark defined in uno_fcts.h
   function has_sel_match(Label *,int,int) in line 804
      protection public
      40 lines of code
      3 parameters
      11 conditional paths
      uses variable Label::label defined in uno_fcts.h
      uses macro definition DECL defined in dtags.h
      uses macro definition DEF defined in dtags.h
      uses macro definition USE defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses function f2d_assert(int,char *) defined in uno_fcts.c
      uses function set_select(char *,char *,int) defined in uno_fcts.c
   function has_ref_match(int,int,int) in line 846
      protection public
      28 lines of code
      3 parameters
      8 conditional paths
      uses variable debug defined in uno_fcts.c
      uses variable stack defined in uno_fcts.c
      uses variable Stack::sels defined in uno_lts.h
      uses variable Var::nxt defined in uno_fcts.h
      uses variable Var::s defined in uno_fcts.h
      uses variable Var::stat defined in uno_fcts.h
      uses variable Var::mark defined in uno_fcts.h
      uses variable Var::sel defined in uno_fcts.h
   function notyet(Label *,char *) in line 876
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable Label::label defined in uno_fcts.h
   function known_nz(void) in line 884
      protection public
      25 lines of code
      1 parameters
      11 conditional paths
      uses variable stack defined in uno_fcts.c
      uses variable Stack::sels defined in uno_lts.h
      uses variable Var::nxt defined in uno_fcts.h
      uses variable Var::sel defined in uno_fcts.h
      uses variable debug defined in uno_fcts.c
      uses variable Var::s defined in uno_fcts.h
      uses variable Stack::knz defined in uno_lts.h
      uses variable BSym::nxt defined in uno_fcts.h
      uses variable BSym::s defined in uno_fcts.h
      uses function suppress(char *,int) defined in uno_fcts.c
   function suppress(char *,int) in line 910
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses variable ST::nxt defined in uno_lts.c
      uses variable ST::line defined in uno_lts.c
      uses variable ST::name defined in uno_lts.c
      uses variable ST::reported defined in uno_lts.c
   function take_action(Label *) in line 913
      protection public
      100 lines of code
      1 parameters
      29 conditional paths
      uses variable Label::label defined in uno_fcts.h
      uses function f2d_assert(int,char *) defined in uno_fcts.c
      uses function n_reported(Stack *) defined in uno_fcts.c
      uses variable stack defined in uno_fcts.c
      uses variable ErrCnt defined in uno_fcts.c
      uses variable Stack::move defined in uno_lts.h
      uses variable Arc::to defined in uno_fcts.h
      uses variable Node::lab defined in uno_fcts.h
      uses variable Label::nxt defined in uno_fcts.h
      uses function print_fnm(Rstack *,char *) defined in uno_fcts.c
      uses variable rstack defined in uno_fcts.c
      uses function print_rstack(Rstack *,char *) defined in uno_fcts.c
      uses variable Rstack::nxt defined in uno_fcts.h
      uses variable debug defined in uno_fcts.c
      uses function list_sel(void) defined in uno_fcts.c
      uses variable longtrace defined in uno_fcts.c
      uses variable depth defined in uno_fcts.c
      uses variable tabs defined in uno_fcts.c
      uses function print_stack(Stack *,int) defined in uno_fcts.c
      uses function notyet(Label *,char *) defined in uno_fcts.c
      uses function mark_select(int) defined in uno_fcts.c
      uses variable Stack::uno_state defined in uno_lts.h
   function act_cond(Label *,int) in line 1015
      protection public
      38 lines of code
      2 parameters
      13 conditional paths
      uses variable Label::label defined in uno_fcts.h
      uses function notyet(Label *,char *) defined in uno_fcts.c
      uses macro definition DEF defined in dtags.h
      uses macro definition USE defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses function has_ref_match(int,int,int) defined in uno_fcts.c
      uses variable debug defined in uno_fcts.c
      uses function known_nz(void) defined in uno_fcts.c
   function act_select(Label *,Label *,int) in line 1055
      protection public
      107 lines of code
      3 parameters
      37 conditional paths
      uses variable Label::label defined in uno_fcts.h
      uses function has_fct_match(Label *,Label *) defined in uno_fcts.c
      uses variable debug defined in uno_fcts.c
      uses function notyet(Label *,char *) defined in uno_fcts.c
      uses macro definition DEF defined in dtags.h
      uses macro definition USE defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses function has_sel_match(Label *,int,int) defined in uno_fcts.c
      uses variable stack defined in uno_fcts.c
      uses variable Stack::uno_state defined in uno_lts.h
   function addtostack(char *) in line 1164
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses function new_sym(char *) defined in uno_fcts.c
      uses variable BSym::nxt defined in uno_fcts.h
      uses variable stack defined in uno_fcts.c
      uses variable Stack::knz defined in uno_lts.h
      uses variable debug defined in uno_fcts.c
   function eval_prop(Node *,Node *) in line 1182
      protection public
      66 lines of code
      2 parameters
      21 conditional paths
      uses variable Node::lab defined in uno_fcts.h
      uses variable Label::nxt defined in uno_fcts.h
      uses variable Label::label defined in uno_fcts.h
      uses function addtostack(char *) defined in uno_fcts.c
      uses variable Node::succ defined in uno_fcts.h
      uses variable Arc::nxt defined in uno_fcts.h
      uses variable Arc::lab defined in uno_fcts.h
      uses variable debug defined in uno_fcts.c
      uses function notyet(Label *,char *) defined in uno_fcts.c
      uses function take_action(Label *) defined in uno_fcts.c
      uses function act_cond(Label *,int) defined in uno_fcts.c
      uses function unselect(void) defined in uno_fcts.c
      uses function act_select(Label *,Label *,int) defined in uno_fcts.c
      uses variable Arc::to defined in uno_fcts.h
   function run_check(void) in line 1320
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses variable fcts defined in uno_fcts.c
      uses variable stack defined in uno_fcts.c
      uses variable init defined in uno_fcts.c
      uses function ini_prop(void) defined in uno_fcts.c
      uses function add_glob_defs(void) defined in uno_fcts.c
      uses function find_function(char *) defined in uno_fcts.c
      uses variable debug defined in uno_fcts.c
      uses variable BFct::fnm defined in uno_fcts.h
      uses function do_fct_call(BFct *,Node *) defined in uno_fcts.c
      uses variable verbose defined in uno_fcts.c
      uses variable ErrCnt defined in uno_fcts.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno_fcts.h
module uno_fcts.h
   typedef Arc in line 1341
      protection public
   typedef BSym in line 1341
      protection public
   typedef BFct in line 1341
      protection public
   typedef Label in line 1341
      protection public
   typedef NList in line 1341
      protection public
   typedef Node in line 1341
      protection public
   typedef Pool in line 1341
      protection public
   typedef Report in line 1341
      protection public
   typedef Rstack in line 1341
      protection public
   typedef Stack in line 1341
      protection public
   typedef VList in line 1341
      protection public
   typedef Var in line 1341
      protection public
   typedef Vis in line 1341
      protection public
   variable Report::n in line 26
      protection public
   variable Report::nxt in line 27
      protection public
   variable Var::loc in line 32
      protection public
   variable Var::mark in line 35
      protection public
   variable Var::nxt in line 36
      protection public
   variable Var::s in line 31
      protection public
   variable Var::sel in line 33
      protection public
   variable Var::stat in line 34
      protection public
   variable BSym::nxt in line 41
      protection public
   variable BSym::s in line 40
      protection public
   variable Label::label in line 45
      protection public
   variable Label::nxt in line 46
      protection public
   variable NList::n in line 50
      protection public
   variable NList::nxt in line 51
      protection public
   variable VList::nxt in line 55
      protection public
   variable VList::v in line 54
      protection public
   variable Vis::r in line 60
      protection public
   variable Vis::uno_state in line 61
      protection public
   variable Vis::v in line 59
      protection public
   variable Vis::zeromarks in line 63
      protection public
   variable Vis::zerostack in line 62
      protection public
   variable Node::lab in line 68
      protection public
   variable Node::nid in line 67
      protection public
   variable Node::nxt in line 71
      protection public
   variable Node::succ in line 69
      protection public
   variable Node::vis in line 70
      protection public
   variable Arc::lab in line 76
      protection public
   variable Arc::nxt in line 77
      protection public
   variable Arc::to in line 75
      protection public
   variable BFct::calls in line 82
      protection public
   variable BFct::fnm in line 81
      protection public
   variable BFct::nxt in line 86
      protection public
   variable BFct::root in line 83
      protection public
   variable BFct::visited in line 85
      protection public
   variable Stack::fc in line 98
      protection public
   variable Stack::fr in line 99
      protection public
   variable Stack::knz in line 96
      protection public
   variable Stack::move in line 90
      protection public
   variable Stack::n in line 30
      protection public
   variable Stack::n in line 97
      protection public
   variable Stack::nxt in line 100
      protection public
   variable Stack::sels in line 95
      protection public
   variable Stack::status in line 31
      protection public
   variable Stack::uno_state in line 94
      protection public
   variable Rstack::f in line 104
      protection public
   variable Rstack::n in line 105
      protection public
   variable Rstack::nxt in line 106
      protection public
   variable Pool::nxt in line 111
      protection public
   variable Pool::s in line 110
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno_generic.c
module uno_generic.c
   macro definition Add_track in line 65
      protection public
   macro definition List_select in line 66
      protection public
   macro definition Skip_name in line 67
      protection public
   macro definition Del_track in line 68
      protection public
   macro definition Del_name in line 69
      protection public
   macro definition On_track in line 70
      protection public
   macro definition Any_track in line 71
      protection public
   macro definition Match_track in line 72
      protection public
   macro definition Known_zero in line 73
      protection public
   macro definition Known_nonzero in line 74
      protection public
   macro definition Update in line 75
      protection public
   macro definition Unmark in line 76
      protection public
   typedef GenStack in line 18
      protection public
   variable debug in line 18
      protection public
   variable gen_stack in line 29
      protection public
   variable gen_free in line 30
      protection public
   variable witness in line 31
      protection public
   variable ruledout in line 32
      protection public
   variable uno_prop in line 34
      protection public
   variable curgraph in line 35
      protection public
   variable steps in line 37
      protection public
   variable path_ends in line 38
      protection public
   variable ErrCnt in line 39
      protection public
   variable depth in line 40
      protection public
   variable Verbose in line 40
      protection public
   variable nopaths in line 40
      protection public
   variable nogood in line 41
      protection public
   variable picky in line 41
      protection public
   variable allerrs in line 41
      protection public
   variable err_path in line 42
      protection public
   variable property in line 45
      protection public
   variable errname in line 47
      protection public
   variable callname in line 48
      protection public
   variable endname in line 49
      protection public
   variable selname in line 50
      protection public
   variable refname in line 51
      protection public
   variable matchname in line 52
      protection public
   variable markedname in line 53
      protection public
   variable excname in line 54
      protection public
   variable statename in line 57
      protection public
   variable s_name in line 58
      protection public
   variable s_val in line 59
      protection public
   variable user_name in line 61
      protection public
   variable user_val in line 62
      protection public
   variable cmds in line 846
      protection public
   variable evals in line 858
      protection public
   variable hit_cmds in line 860
      protection public
   variable hit_fcts in line 861
      protection public
   function rev_release(SymRef *) in line 78
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable SymRef::nxt defined in uno_lts.h
   function uno_getref(symentry_t *) in line 79
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::n defined in uno_lts.h
      uses macro definition ZT defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable SymRef::s_val defined in uno_lts.h
      uses function emalloc(size_t) defined in dflow.c
   function eval_const_expr(treenode *,treenode *) in line 80
      protection public
      76 lines of code
      2 parameters
      34 conditional paths
      uses function get_state_val(void) defined in uno_generic.c
      uses variable statename defined in uno_generic.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_INT defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable uno_prop defined in uno_bounds.c
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses function eval_fct(treenode *,treenode *) defined in uno_bounds.c
      uses enumvalue TN_EXPR defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses function eval_const_expr(treenode *,treenode *) defined in uno_bounds.c
      uses variable treenode::rnode defined in tree.h
      uses variable nogood defined in uno_bounds.c
      uses variable common::tok defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function toksym(int,int) defined in uno_bounds.c
      uses function x_stmnt(treenode *) defined in dflow.c
   function infeasible(treenode *,treenode *) in line 81
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_INT defined in tree.h
      uses variable common::tok defined in tree.h
   function snap_add(State *,SymRef *) in line 82
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable State::snapshot defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::n defined in uno_lts.h
   function v_matched(treenode *) in line 83
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable Stack::nxt defined in uno_lts.h
      uses variable Stack::n defined in uno_lts.h
      uses function suppress(char *,int) defined in uno_bounds.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
   function v_reported(treenode *) in line 84
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function dflow_mark(FILE *,int) in line 85
      protection public
      25 lines of code
      2 parameters
      1 conditional paths
   function dump_defuse(DefUse *,FILE *) in line 86
      protection public
      49 lines of code
      2 parameters
      1 conditional paths
   function uno_assert(int,char *) in line 87
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
   function selected_symbol(treenode *) in line 88
      protection public
      21 lines of code
      1 parameters
      9 conditional paths
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses macro definition SELECTED defined in dtags.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::selected defined in dflow.h
      uses variable SymList::sm defined in dflow.h
   function has_ident(treenode *,char *) in line 91
      protection public
      18 lines of code
      2 parameters
      7 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue TN_SWITCH defined in tree.h
      uses enumvalue TN_WHILE defined in tree.h
      uses enumvalue TN_DOWHILE defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function err_matched(GenStack *) in line 111
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable GenStack::nxt defined in uno_generic.c
      uses variable witness defined in uno_generic.c
      uses variable GenStack::e defined in uno_generic.c
      uses function v_matched(treenode *) defined in uno_generic.c
   function err_reversed(GenStack *) in line 122
      protection public
      42 lines of code
      1 parameters
      13 conditional paths
      uses variable nopaths defined in uno_generic.c
      uses variable GenStack::nxt defined in uno_generic.c
      uses variable debug defined in uno_generic.c
      uses variable witness defined in uno_generic.c
      uses variable GenStack::e defined in uno_generic.c
      uses function v_reported(treenode *) defined in uno_generic.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses macro definition ZT defined in uno_lts.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_SWITCH defined in tree.h
      uses enumvalue TN_WHILE defined in tree.h
      uses enumvalue TN_DOWHILE defined in tree.h
      uses variable GenStack::c defined in uno_generic.c
      uses variable steps defined in uno_generic.c
      uses function dump_defuse(DefUse *,FILE *) defined in uno_generic.c
      uses variable common::defuse defined in tree.h
   function same_expr(treenode *,treenode *) in line 166
      protection public
      41 lines of code
      2 parameters
      12 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable common::which defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue TN_INT defined in tree.h
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::ival defined in tree.h
      uses enumvalue TN_REAL defined in tree.h
      uses variable leafnode::dval defined in tree.h
      uses enumvalue TN_STRING defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_TYPE defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function path_not_feasible(void) in line 209
      protection public
      60 lines of code
      1 parameters
      16 conditional paths
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::nxt defined in uno_generic.c
      uses variable GenStack::c defined in uno_generic.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable GenStack::e defined in uno_generic.c
      uses variable common::defuse defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses macro definition DEF defined in dtags.h
      uses macro definition REF0 defined in dtags.h
      uses macro definition REF1 defined in dtags.h
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses macro definition USE defined in dtags.h
      uses variable debug defined in uno_generic.c
      uses function x_stmnt(treenode *) defined in dflow.c
      uses function same_expr(treenode *,treenode *) defined in uno_generic.c
      uses variable ruledout defined in uno_generic.c
      uses variable Verbose defined in uno_generic.c
   function err_report(char *,treenode *) in line 271
      protection public
      54 lines of code
      2 parameters
      12 conditional paths
      uses function path_not_feasible(void) defined in uno_generic.c
      uses variable debug defined in uno_generic.c
      uses function err_matched(GenStack *) defined in uno_generic.c
      uses variable gen_stack defined in uno_generic.c
      uses variable allerrs defined in uno_generic.c
      uses function v_reported(treenode *) defined in uno_generic.c
      uses variable GenStack::e defined in uno_generic.c
      uses variable witness defined in uno_generic.c
      uses variable picky defined in uno_generic.c
      uses variable GenStack::nxt defined in uno_generic.c
      uses variable GenStack::c defined in uno_generic.c
      uses variable ErrCnt defined in uno_generic.c
      uses variable curgraph defined in uno_generic.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses function selected_symbol(treenode *) defined in uno_generic.c
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable steps defined in uno_generic.c
      uses variable err_path defined in uno_generic.c
      uses function err_reversed(GenStack *) defined in uno_generic.c
   function gen_push(State *) in line 327
      protection public
      31 lines of code
      1 parameters
      5 conditional paths
      uses variable gen_free defined in uno_generic.c
      uses variable GenStack::nxt defined in uno_generic.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::uno_state defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses function snap_add(State *,SymRef *) defined in uno_generic.c
      uses function uno_getref(symentry_t *) defined in uno_generic.c
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable SymRef::s_val defined in uno_lts.h
      uses variable SymRef::n defined in uno_lts.h
   function gen_pop(GenStack *) in line 360
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable GenStack::symrefs defined in uno_generic.c
      uses function rev_release(SymRef *) defined in uno_generic.c
      uses variable GenStack::uno_state defined in uno_generic.c
      uses function uno_assert(int,char *) defined in uno_generic.c
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::nxt defined in uno_generic.c
      uses variable gen_free defined in uno_generic.c
   function good_target(treenode *,SymList *) in line 373
      protection public
      14 lines of code
      2 parameters
      4 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
   function basiczero(treenode *,SymList *) in line 389
      protection public
      44 lines of code
      2 parameters
      12 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses variable debug defined in uno_generic.c
      uses variable common::tok defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_INT defined in tree.h
      uses function good_target(treenode *,SymList *) defined in uno_generic.c
      uses variable treenode::lnode defined in tree.h
   function sym_unmark(treenode *,int,int) in line 435
      protection public
      15 lines of code
      3 parameters
      5 conditional paths
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses macro definition SELECTED defined in dtags.h
      uses variable debug defined in uno_generic.c
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymRef::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
   function sym_update(treenode *,int,int) in line 452
      protection public
      36 lines of code
      3 parameters
      11 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses macro definition SELECTED defined in dtags.h
      uses variable common::defuse defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::selected defined in dflow.h
      uses function uno_getref(symentry_t *) defined in uno_generic.c
      uses variable SymList::sm defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses variable SymRef::n defined in uno_lts.h
      uses variable debug defined in uno_generic.c
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable common::line defined in tree.h
      uses variable SymRef::s_val defined in uno_lts.h
   function known_details(treenode *,int) in line 490
      protection public
      103 lines of code
      2 parameters
      37 conditional paths
      uses macro definition USE defined in dtags.h
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable debug defined in uno_generic.c
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymRef::status defined in uno_lts.h
      uses macro definition SELECTED defined in dtags.h
      uses variable GenStack::nxt defined in uno_generic.c
      uses variable GenStack::e defined in uno_generic.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable GenStack::c defined in uno_generic.c
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::sm defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses macro definition USEafterdef defined in dtags.h
      uses function basiczero(treenode *,SymList *) defined in uno_generic.c
      uses variable want defined in dflow.c
      uses function x_stmnt(treenode *) defined in dflow.c
   function known_zero(treenode *,int,int) in line 594
      protection public
      5 lines of code
      3 parameters
      2 conditional paths
      uses function known_details(treenode *,int) defined in uno_generic.c
      uses variable debug defined in uno_generic.c
   function known_nonzero(treenode *,int,int) in line 600
      protection public
      5 lines of code
      3 parameters
      2 conditional paths
      uses function known_details(treenode *,int) defined in uno_generic.c
      uses variable debug defined in uno_generic.c
   function do_nothing(treenode *,int,int) in line 608
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function list_select(treenode *,int,int) in line 637
      protection public
      30 lines of code
      3 parameters
      5 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses macro definition SELECTED defined in dtags.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function dflow_mark(FILE *,int) defined in uno_generic.c
      uses variable SymRef::s_val defined in uno_lts.h
      uses variable common::defuse defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::selected defined in dflow.h
      uses variable SymList::sm defined in dflow.h
      uses variable SymList::mark defined in dflow.h
   function sym_add(treenode *,int,int) in line 669
      protection public
      35 lines of code
      3 parameters
      12 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable debug defined in uno_generic.c
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymList::mark defined in dflow.h
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses function uno_getref(symentry_t *) defined in uno_generic.c
      uses variable SymRef::n defined in uno_lts.h
      uses variable common::line defined in tree.h
   function sym_del(treenode *,int,int) in line 706
      protection public
      26 lines of code
      3 parameters
      9 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymList::sm defined in dflow.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable debug defined in uno_generic.c
   function sym_del_name(treenode *,int,int) in line 734
      protection public
      24 lines of code
      3 parameters
      9 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymList::sm defined in dflow.h
      uses variable debug defined in uno_generic.c
   function on_track(treenode *,int,int) in line 760
      protection public
      31 lines of code
      3 parameters
      12 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymList::sm defined in dflow.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable SymRef::n defined in uno_lts.h
      uses variable witness defined in uno_generic.c
      uses variable debug defined in uno_generic.c
      uses variable common::line defined in tree.h
   function match_track(treenode *,int,int) in line 793
      protection public
      22 lines of code
      3 parameters
      9 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymList::sm defined in dflow.h
      uses variable SymRef::n defined in uno_lts.h
      uses variable witness defined in uno_generic.c
      uses variable debug defined in uno_generic.c
      uses variable common::line defined in tree.h
   function any_track(treenode *,int,int) in line 817
      protection public
      16 lines of code
      3 parameters
      6 conditional paths
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable SymRef::n defined in uno_lts.h
      uses variable witness defined in uno_generic.c
      uses variable debug defined in uno_generic.c
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
   function prop_reached(State *) in line 864
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable State::n defined in uno_lts.h
      uses variable State::visited defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
   function gen_stats(void) in line 881
      protection public
      29 lines of code
      1 parameters
      1 conditional paths
      uses variable hit_cmds defined in uno_generic.c
      uses variable cmds defined in uno_generic.c
      uses variable hit_fcts defined in uno_generic.c
      uses variable evals defined in uno_generic.c
      uses function prop_reached(State *) defined in uno_generic.c
      uses variable uno_prop defined in uno_generic.c
      uses variable ruledout defined in uno_generic.c
   function exec_fct(treenode *,treenode *) in line 912
      protection public
      103 lines of code
      2 parameters
      22 conditional paths
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable err_path defined in uno_generic.c
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable cmds defined in uno_generic.c
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses variable Cmd::cmd defined in uno_generic.c
      uses macro definition Skip_name defined in uno_generic.c
      uses macro definition List_select defined in uno_generic.c
      uses variable debug defined in uno_generic.c
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_STRING defined in tree.h
      uses variable hit_cmds defined in uno_generic.c
      uses variable Cmd::fn defined in uno_generic.c
      uses macro definition Unmark defined in uno_generic.c
      uses variable nogood defined in uno_generic.c
      uses function doit(leafnode *,int) defined in dflow.c
      uses macro definition Update defined in uno_generic.c
      uses function eval_const_expr(treenode *,treenode *) defined in uno_generic.c
      uses enumvalue TN_EXPR_LIST defined in tree.h
      uses function dflow_mark(FILE *,int) defined in uno_generic.c
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable SymRef::status defined in uno_lts.h
      uses macro definition ANY defined in dtags.h
      uses variable errname defined in uno_generic.c
      uses variable leafnode::str defined in tree.h
      uses function err_report(char *,treenode *) defined in uno_generic.c
      uses variable witness defined in uno_generic.c
      uses macro definition ZT defined in uno_lts.h
   function do_oper(treenode *,int) in line 1017
      protection public
      17 lines of code
      2 parameters
      3 conditional paths
      uses variable treenode::rnode defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable statename defined in uno_generic.c
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::uno_state defined in uno_generic.c
   function exec_step(treenode *,treenode *) in line 1036
      protection public
      64 lines of code
      2 parameters
      26 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses enumvalue TN_LABEL defined in tree.h
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses function exec_fct(treenode *,treenode *) defined in uno_generic.c
      uses enumvalue TN_ASSIGN defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses variable statename defined in uno_generic.c
      uses variable nogood defined in uno_generic.c
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::uno_state defined in uno_generic.c
      uses function eval_const_expr(treenode *,treenode *) defined in uno_generic.c
      uses variable treenode::rnode defined in tree.h
      uses variable s_name defined in uno_generic.c
      uses enumvalue TN_STRING defined in tree.h
      uses variable user_name defined in uno_generic.c
      uses variable s_val defined in uno_generic.c
      uses variable user_val defined in uno_generic.c
      uses variable err_path defined in uno_generic.c
      uses function x_stmnt(treenode *) defined in dflow.c
      uses enumvalue TN_EXPR defined in tree.h
      uses variable common::tok defined in tree.h
      uses function do_oper(treenode *,int) defined in uno_generic.c
      uses function name_of_node(tn_t) defined in tree.c
   function get_state_val(void) in line 1102
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable gen_stack defined in uno_generic.c
      uses variable nogood defined in uno_generic.c
      uses variable GenStack::uno_state defined in uno_generic.c
   function dosel(treenode *,char *,int,int,int) in line 1112
      protection public
      47 lines of code
      5 parameters
      14 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::selected defined in dflow.h
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses macro definition SELECTED defined in dtags.h
      uses variable debug defined in uno_generic.c
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymList::mark defined in dflow.h
   function sel_args(treenode *,treenode *,int) in line 1161
      protection public
      44 lines of code
      3 parameters
      9 conditional paths
      uses variable GenStack::e defined in uno_generic.c
      uses variable treenode::rnode defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_EXPR_LIST defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable nogood defined in uno_generic.c
      uses function eval_const_expr(treenode *,treenode *) defined in uno_generic.c
      uses enumvalue TN_STRING defined in tree.h
      uses variable err_path defined in uno_generic.c
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable user_name defined in uno_generic.c
      uses variable debug defined in uno_generic.c
      uses function dosel(treenode *,char *,int,int,int) defined in uno_generic.c
   function doref(treenode *,int,int) in line 1207
      protection public
      23 lines of code
      3 parameters
      6 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable debug defined in uno_generic.c
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymList::mark defined in dflow.h
      uses variable SymList::selected defined in dflow.h
   function ref_args(treenode *,treenode *) in line 1232
      protection public
      34 lines of code
      2 parameters
      7 conditional paths
      uses variable GenStack::e defined in uno_generic.c
      uses variable treenode::rnode defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_EXPR_LIST defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable nogood defined in uno_generic.c
      uses function eval_const_expr(treenode *,treenode *) defined in uno_generic.c
      uses variable err_path defined in uno_generic.c
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable debug defined in uno_generic.c
      uses variable user_name defined in uno_generic.c
      uses variable user_val defined in uno_generic.c
      uses function doref(treenode *,int,int) defined in uno_generic.c
   function domatch(treenode *,int,int,int,int) in line 1268
      protection public
      42 lines of code
      5 parameters
      12 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable debug defined in uno_generic.c
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymRef::s_val defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses macro definition SELECTED defined in dtags.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::selected defined in dflow.h
      uses variable SymList::sm defined in dflow.h
   function match_args(treenode *,treenode *,int) in line 1312
      protection public
      43 lines of code
      3 parameters
      9 conditional paths
      uses variable GenStack::e defined in uno_generic.c
      uses variable treenode::rnode defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_EXPR_LIST defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable nogood defined in uno_generic.c
      uses function eval_const_expr(treenode *,treenode *) defined in uno_generic.c
      uses variable err_path defined in uno_generic.c
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable debug defined in uno_generic.c
      uses variable depth defined in uno_generic.c
      uses variable user_name defined in uno_generic.c
      uses function domatch(treenode *,int,int,int,int) defined in uno_generic.c
   function eval_fct(treenode *,treenode *) in line 1357
      protection public
      76 lines of code
      2 parameters
      20 conditional paths
      uses variable GenStack::e defined in uno_generic.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable err_path defined in uno_generic.c
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses variable endname defined in uno_generic.c
      uses variable path_ends defined in uno_generic.c
      uses variable callname defined in uno_generic.c
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_STRING defined in tree.h
      uses variable debug defined in uno_generic.c
      uses variable leafnode::str defined in tree.h
      uses function has_ident(treenode *,char *) defined in uno_generic.c
      uses variable selname defined in uno_generic.c
      uses function sel_args(treenode *,treenode *,int) defined in uno_generic.c
      uses variable refname defined in uno_generic.c
      uses function ref_args(treenode *,treenode *) defined in uno_generic.c
      uses variable excname defined in uno_generic.c
      uses variable matchname defined in uno_generic.c
      uses function match_args(treenode *,treenode *,int) defined in uno_generic.c
      uses variable markedname defined in uno_generic.c
      uses variable evals defined in uno_generic.c
      uses variable Fct::cmd defined in uno_global.h
      uses variable nogood defined in uno_generic.c
      uses variable Cmd::cmd defined in uno_generic.c
      uses function doit(leafnode *,int) defined in dflow.c
      uses enumvalue TN_EXPR_LIST defined in tree.h
      uses function eval_const_expr(treenode *,treenode *) defined in uno_generic.c
      uses variable hit_fcts defined in uno_generic.c
      uses variable Fct::fn defined in uno_global.h
   function eval_step(treenode *,treenode *,treenode *) in line 1435
      protection public
      91 lines of code
      3 parameters
      32 conditional paths
      uses function uno_assert(int,char *) defined in uno_generic.c
      uses variable GenStack::e defined in uno_generic.c
      uses variable debug defined in uno_generic.c
      uses function name_of_node(tn_t) defined in tree.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses enumvalue TN_IDENT defined in tree.h
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses variable statename defined in uno_generic.c
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::uno_state defined in uno_generic.c
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses function eval_fct(treenode *,treenode *) defined in uno_generic.c
      uses enumvalue TN_EXPR defined in tree.h
      uses variable nogood defined in uno_generic.c
      uses function eval_const_expr(treenode *,treenode *) defined in uno_generic.c
   function exec_lastfirst(State *,Trans *,treenode *,treenode *) in line 1528
      protection public
      22 lines of code
      4 parameters
      8 conditional paths
      uses variable Trans::branch defined in uno_lts.h
      uses variable debug defined in uno_generic.c
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
      uses macro definition ZS defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable GenStack::e defined in uno_generic.c
      uses function eval_step(treenode *,treenode *,treenode *) defined in uno_generic.c
      uses variable Trans::cond defined in uno_lts.h
   function exec_prop(State *,treenode *) in line 1552
      protection public
      24 lines of code
      2 parameters
      5 conditional paths
      uses macro definition ZT defined in uno_lts.h
      uses macro definition ZS defined in uno_lts.h
      uses variable debug defined in uno_generic.c
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses variable common::type defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable State::visited defined in uno_lts.h
      uses variable State::iscond defined in uno_lts.h
      uses enumvalue TN_IF defined in tree.h
      uses function exec_lastfirst(State *,Trans *,treenode *,treenode *) defined in uno_generic.c
      uses variable State::succ defined in uno_lts.h
      uses function exec_step(treenode *,treenode *) defined in uno_generic.c
      uses variable Trans::branch defined in uno_lts.h
   function dfs_generic(State *) in line 1578
      protection public
      84 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ZT defined in uno_lts.h
      uses variable State::n defined in uno_lts.h
      uses variable depth defined in uno_generic.c
      uses variable debug defined in uno_generic.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses function dump_defuse(DefUse *,FILE *) defined in uno_generic.c
      uses variable common::defuse defined in tree.h
      uses variable gen_stack defined in uno_generic.c
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable State::iscond defined in uno_lts.h
      uses function gen_push(State *) defined in uno_generic.c
      uses variable GenStack::e defined in uno_generic.c
      uses variable path_ends defined in uno_generic.c
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable user_val defined in uno_generic.c
      uses variable user_name defined in uno_generic.c
      uses function exec_prop(State *,treenode *) defined in uno_generic.c
      uses variable uno_prop defined in uno_generic.c
      uses variable GenStack::uno_state defined in uno_generic.c
      uses variable statename defined in uno_generic.c
      uses variable State::uno_state defined in uno_lts.h
      uses variable State::visited defined in uno_lts.h
      uses function pop(TreeStack *) defined in treestk.c
      uses variable Trans::nxt defined in uno_lts.h
      uses function infeasible(treenode *,treenode *) defined in uno_generic.c
      uses variable Trans::cond defined in uno_lts.h
      uses variable GenStack::c defined in uno_generic.c
      uses function dfs_generic(State *) defined in uno_generic.c
      uses function gen_pop(GenStack *) defined in uno_generic.c
   function gen_reset(void) in line 1664
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable gen_stack defined in uno_generic.c
      uses variable witness defined in uno_generic.c
      uses variable ruledout defined in uno_generic.c
   variable GenStack::c in line 25
      protection public
   variable GenStack::e in line 25
      protection public
   variable GenStack::nxt in line 26
      protection public
   variable GenStack::symrefs in line 23
      protection public
   variable GenStack::uno_state in line 24
      protection public
   variable Cmd::cmd in line 835
      protection public
   variable Cmd::fn in line 836
      protection public
   variable Fct::calls in line 51
      protection public
   variable Fct::cmd in line 849
      protection public
   variable Fct::defs in line 48
      protection public
   variable Fct::deref in line 50
      protection public
   variable Fct::fn in line 850
      protection public
   variable Fct::fnm in line 43
      protection public
   variable Fct::is_static in line 45
      protection public
   variable Fct::n in line 44
      protection public
   variable Fct::nxt in line 62
      protection public
   variable Fct::rval in line 46
      protection public
   variable Fct::special in line 47
      protection public
   variable Fct::uses in line 49
      protection public
   variable Fct::visited in line 56
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno_global.c
module uno_global.c
   variable debug in line 18
      protection public
   variable longtrace in line 19
      protection public
   variable verbose in line 20
      protection public
   variable want in line 21
      protection public
   variable fcts in line 23
      protection public
   variable fields in line 24
      protection public
   variable globuse in line 25
      protection public
   variable p_start in line 26
      protection public
   variable p_stop in line 27
      protection public
   variable p_query in line 28
      protection public
   variable reverse in line 29
      protection public
   variable usecheck in line 30
      protection public
   variable special in line 383
      protection public
   variable g_buf in line 384
      protection public
   variable indirects in line 511
      protection public
   function find_fct(char *) in line 32
      protection public
      24 lines of code
      1 parameters
      7 conditional paths
      uses variable fcts defined in uno_global.c
      uses variable Fct::nxt defined in uno_global.h
      uses variable Fct::fnm defined in uno_global.h
      uses function emalloc(size_t) defined in uno_global.c
      uses variable Place::fnm defined in uno_global.h
      uses function new_fct(Place *,char *,int) defined in uno_global.c
      uses function add_fct(char *) defined in uno_global.c
      uses variable debug defined in uno_global.c
      uses function find_roots(void) defined in uno_global.c
   function fcts_reset(void) in line 33
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable fcts defined in uno_global.c
      uses variable Fct::nxt defined in uno_global.h
      uses variable Fct::visited defined in uno_global.h
   function gen_fct(FILE *,Fct *) in line 34
      protection public
      24 lines of code
      2 parameters
      8 conditional paths
      uses variable Fct::visited defined in uno_global.h
      uses variable Fct::fnm defined in uno_global.h
      uses variable Fct::n defined in uno_global.h
      uses variable Place::line defined in uno_global.h
      uses variable reverse defined in uno_global.c
      uses variable fcts defined in uno_global.c
      uses variable Fct::nxt defined in uno_global.h
      uses variable Fct::calls defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses variable Sym::s defined in uno_global.h
      uses variable Sym::bits defined in uno_global.h
      uses macro definition HIDE defined in dtags.h
      uses function find_fct(char *) defined in uno_global.c
   function gen_fcts(FILE *) in line 35
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function fcts_reset(void) defined in uno_global.c
      uses function gen_fct(FILE *,Fct *) defined in uno_global.c
      uses function find_fct(char *) defined in uno_global.c
      uses variable want defined in uno_global.c
   function struct_check(void) in line 36
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable fields defined in uno_global.c
      uses variable PlaceName::nxt defined in uno_global.h
      uses variable PlaceName::used defined in uno_global.h
      uses variable PlaceName::s defined in uno_global.h
      uses variable PlaceName::n defined in uno_global.h
      uses variable Place::fnm defined in uno_global.h
      uses variable Place::line defined in uno_global.h
   function uno_load(char *) in line 37
      protection public
      27 lines of code
      1 parameters
      9 conditional paths
      uses function handle_fct(char *) defined in uno_global.c
      uses function handle_glb(char *,char *) defined in uno_global.c
   function unused_fcts(void) in line 38
      protection public
      82 lines of code
      1 parameters
      24 conditional paths
      uses function fcts_reset(void) defined in uno_global.c
      uses function dfs(Fct *) defined in uno_global.c
      uses function find_fct(char *) defined in uno_global.c
      uses variable fcts defined in uno_global.c
      uses variable Fct::nxt defined in uno_global.h
      uses variable Fct::rval defined in uno_global.h
      uses function wind_down(Fct *) defined in uno_global.c
      uses variable Fct::visited defined in uno_global.h
      uses variable Fct::special defined in uno_global.h
      uses variable Fct::fnm defined in uno_global.h
      uses variable Fct::n defined in uno_global.h
      uses variable Place::fnm defined in uno_global.h
      uses variable Place::line defined in uno_global.h
      uses variable Fct::calls defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses variable Sym::s defined in uno_global.h
      uses variable Sym::n defined in uno_global.h
      uses variable Sym::bits defined in uno_global.h
      uses macro definition USE defined in dtags.h
      uses macro definition HIDE defined in dtags.h
      uses macro definition DEF defined in dtags.h
      uses variable verbose defined in uno_global.c
   function handle_glb(char *,char *) in line 39
      protection public
      56 lines of code
      2 parameters
      25 conditional paths
      uses function emalloc(size_t) defined in uno_global.c
      uses variable Place::fnm defined in uno_global.h
      uses function mknm(char *) defined in uno_global.c
      uses variable Place::line defined in uno_global.h
      uses function new_fct(Place *,char *,int) defined in uno_global.c
      uses function add_fct(char *) defined in uno_global.c
      uses function retval(char *,int) defined in uno_global.c
      uses function glob_def(Place *,char *,char *) defined in uno_global.c
      uses function glob_use(Place *,char *,char *) defined in uno_global.c
      uses function glob_deref(Place *,char *,char *) defined in uno_global.c
      uses function loc_fcall(Place *,char *,char *,int) defined in uno_global.c
      uses macro definition DEF defined in dtags.h
      uses macro definition USE defined in dtags.h
      uses macro definition HIDE defined in dtags.h
      uses function glob_mark(Place *,char *,int) defined in uno_global.c
      uses macro definition ALIAS defined in dtags.h
      uses function struct_flds(Place *,char *,int) defined in uno_global.c
      uses function get_indirect(char *,int) defined in uno_global.c
   function run_check(void) in line 41
      protection public
      19 lines of code
      1 parameters
      5 conditional paths
      uses function add_glob_defs(void) defined in uno_fcts.c
      uses variable BFct::fnm defined in uno_fcts.h
      uses variable verbose defined in uno_fcts.c
   function add_fct(char *) in line 42
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable BFct::nxt defined in uno_fcts.h
      uses variable BFct::fnm defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
      uses variable BFct::root defined in uno_fcts.h
      uses variable Node::nid defined in uno_fcts.h
   function handle_fct(char *) in line 43
      protection public
      74 lines of code
      1 parameters
      23 conditional paths
   function add_call(char *,char *) in line 44
      protection public
      20 lines of code
      2 parameters
      4 conditional paths
      uses variable BFct::calls defined in uno_fcts.h
      uses variable BSym::nxt defined in uno_fcts.h
      uses variable BSym::s defined in uno_fcts.h
      uses function emalloc(size_t) defined in uno_fcts.c
      uses function indirect_calls(char *) defined in uno_fcts.c
   function emalloc(size_t) in line 47
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses macro definition ALGN defined in symtab.c
      uses variable progname defined in symtab.c
   function unostats(void) in line 60
      protection public
      28 lines of code
      1 parameters
      8 conditional paths
      uses variable fcts defined in uno_global.c
      uses variable Fct::nxt defined in uno_global.h
      uses variable Fct::defs defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses variable Fct::uses defined in uno_global.h
      uses variable Fct::deref defined in uno_global.h
      uses variable Fct::calls defined in uno_global.h
      uses variable globuse defined in uno_global.c
      uses function find_fct(char *) defined in uno_global.c
      uses variable Sym::s defined in uno_global.h
   function all_fcg(FILE *) in line 125
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable fcts defined in uno_global.c
      uses variable Fct::nxt defined in uno_global.h
      uses variable Fct::fnm defined in uno_global.h
      uses variable Fct::n defined in uno_global.h
      uses variable Place::line defined in uno_global.h
      uses variable Fct::calls defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses variable Sym::s defined in uno_global.h
   function glob_mark(Place *,char *,int) in line 142
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses variable globuse defined in uno_global.c
      uses variable Sym::nxt defined in uno_global.h
      uses variable Sym::s defined in uno_global.h
      uses variable Sym::bits defined in uno_global.h
      uses function emalloc(size_t) defined in uno_global.c
      uses variable Sym::n defined in uno_global.h
   function glob_check(void) in line 161
      protection public
      25 lines of code
      1 parameters
      8 conditional paths
      uses variable globuse defined in uno_global.c
      uses variable Sym::nxt defined in uno_global.h
      uses function find_fct(char *) defined in uno_global.c
      uses variable Sym::s defined in uno_global.h
      uses variable Sym::bits defined in uno_global.h
      uses variable Sym::n defined in uno_global.h
      uses variable Place::fnm defined in uno_global.h
      uses variable Place::line defined in uno_global.h
      uses macro definition USE defined in dtags.h
      uses variable usecheck defined in uno_global.c
      uses macro definition DEF defined in dtags.h
   function path_query(Fct *,Fct *) in line 188
      protection public
      29 lines of code
      2 parameters
      5 conditional paths
      uses variable Fct::visited defined in uno_global.h
      uses variable Fct::calls defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses function find_fct(char *) defined in uno_global.c
      uses variable Sym::s defined in uno_global.h
      uses variable Fct::fnm defined in uno_global.h
      uses variable Fct::n defined in uno_global.h
      uses variable Place::line defined in uno_global.h
   function main(int,char **) in line 219
      protection public
      81 lines of code
      2 parameters
      17 conditional paths
      uses variable verbose defined in uno_global.c
      uses variable usecheck defined in uno_global.c
      uses variable longtrace defined in uno_global.c
      uses variable reverse defined in uno_global.c
      uses variable p_start defined in uno_global.c
      uses variable p_query defined in uno_global.c
      uses variable p_stop defined in uno_global.c
      uses variable want defined in uno_global.c
      uses function uno_load(char *) defined in uno_global.c
      uses function all_fcg(FILE *) defined in uno_global.c
      uses function gen_fcts(FILE *) defined in uno_global.c
      uses function fcts_reset(void) defined in uno_global.c
      uses function path_query(Fct *,Fct *) defined in uno_global.c
      uses function find_fct(char *) defined in uno_global.c
      uses function struct_check(void) defined in uno_global.c
      uses function glob_check(void) defined in uno_global.c
      uses function unused_fcts(void) defined in uno_global.c
      uses function run_check(void) defined in uno_global.c
      uses function unostats(void) defined in uno_global.c
   function new_fct(Place *,char *,int) in line 302
      protection public
      29 lines of code
      3 parameters
      6 conditional paths
      uses variable fcts defined in uno_global.c
      uses variable Fct::nxt defined in uno_global.h
      uses variable Fct::fnm defined in uno_global.h
      uses variable Fct::n defined in uno_global.h
      uses variable Place::line defined in uno_global.h
      uses variable Place::fnm defined in uno_global.h
      uses variable Fct::is_static defined in uno_global.h
      uses function emalloc(size_t) defined in uno_global.c
   function find_roots(void) in line 358
      protection public
      27 lines of code
      1 parameters
      10 conditional paths
      uses variable BFct::nxt defined in uno_fcts.h
      uses variable BFct::fnm defined in uno_fcts.h
      uses variable BFct::calls defined in uno_fcts.h
      uses variable BSym::nxt defined in uno_fcts.h
      uses variable BSym::s defined in uno_fcts.h
      uses function indirect_calls(char *) defined in uno_fcts.c
   function retval(char *,int) in line 361
      protection public
      7 lines of code
      2 parameters
      3 conditional paths
      uses function find_fct(char *) defined in uno_global.c
      uses variable Fct::rval defined in uno_global.h
   function glob_def(Place *,char *,char *) in line 370
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses function find_fct(char *) defined in uno_global.c
      uses function emalloc(size_t) defined in uno_global.c
      uses variable Sym::s defined in uno_global.h
      uses variable Sym::n defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses variable Fct::defs defined in uno_global.h
   function build_glob(Sym *) in line 387
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable Sym::nxt defined in uno_global.h
      uses variable g_buf defined in uno_global.c
      uses variable special defined in uno_global.c
      uses function handle_fct(char *) defined in uno_global.c
      uses variable Sym::s defined in uno_global.h
      uses variable Sym::n defined in uno_global.h
      uses variable Place::fnm defined in uno_global.h
      uses variable Place::line defined in uno_global.h
   function add_glob_defs(void) in line 400
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses function find_fct(char *) defined in uno_global.c
      uses function handle_fct(char *) defined in uno_global.c
      uses function build_glob(Sym *) defined in uno_global.c
      uses variable Fct::defs defined in uno_global.h
      uses variable want defined in uno_global.c
      uses function find_roots(void) defined in uno_global.c
      uses variable g_buf defined in uno_global.c
      uses variable special defined in uno_global.c
      uses variable Fct::n defined in uno_global.h
      uses variable Place::fnm defined in uno_global.h
      uses variable Place::line defined in uno_global.h
   function loc_fcall(Place *,char *,char *,int) in line 421
      protection public
      20 lines of code
      4 parameters
      4 conditional paths
      uses function find_fct(char *) defined in uno_global.c
      uses function emalloc(size_t) defined in uno_global.c
      uses variable Sym::s defined in uno_global.h
      uses variable Sym::n defined in uno_global.h
      uses variable Sym::bits defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses variable Fct::calls defined in uno_global.h
      uses macro definition HIDE defined in dtags.h
      uses variable Fct::special defined in uno_global.h
      uses function add_call(char *,char *) defined in uno_global.c
   function glob_use(Place *,char *,char *) in line 443
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses function find_fct(char *) defined in uno_global.c
      uses function emalloc(size_t) defined in uno_global.c
      uses variable Sym::s defined in uno_global.h
      uses variable Sym::n defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses variable Fct::uses defined in uno_global.h
   function glob_deref(Place *,char *,char *) in line 457
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses function find_fct(char *) defined in uno_global.c
      uses function emalloc(size_t) defined in uno_global.c
      uses variable Sym::s defined in uno_global.h
      uses variable Sym::n defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses variable Fct::deref defined in uno_global.h
   function mknm(char *) in line 471
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in uno_global.c
   function struct_flds(Place *,char *,int) in line 480
      protection public
      19 lines of code
      3 parameters
      4 conditional paths
      uses variable fields defined in uno_global.c
      uses variable PlaceName::nxt defined in uno_global.h
      uses variable PlaceName::n defined in uno_global.h
      uses variable Place::line defined in uno_global.h
      uses variable Place::fnm defined in uno_global.h
      uses variable PlaceName::s defined in uno_global.h
      uses variable PlaceName::used defined in uno_global.h
      uses function emalloc(size_t) defined in uno_global.c
   function get_indirect(char *,int) in line 514
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in uno_global.c
      uses variable Sym::s defined in uno_global.h
      uses variable Sym::bits defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses variable indirects defined in uno_global.c
   function indirect_calls(char *) in line 526
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable indirects defined in uno_global.c
      uses variable Sym::nxt defined in uno_global.h
      uses variable Sym::s defined in uno_global.h
   function dfs(Fct *) in line 631
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable Fct::visited defined in uno_global.h
      uses variable Fct::calls defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses function find_fct(char *) defined in uno_global.c
      uses variable Sym::s defined in uno_global.h
   function wind_down(Fct *) in line 643
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable Fct::calls defined in uno_global.h
      uses variable Sym::nxt defined in uno_global.h
      uses function find_fct(char *) defined in uno_global.c
      uses variable Sym::s defined in uno_global.h
      uses variable Fct::rval defined in uno_global.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno_global.h
module uno_global.h
   typedef CallStack in line 657
      protection public
   typedef Fct in line 657
      protection public
   typedef Place in line 657
      protection public
   typedef PlaceName in line 657
      protection public
   typedef Seen in line 657
      protection public
   typedef Sym in line 657
      protection public
   variable Place::fnm in line 19
      protection public
   variable Place::line in line 20
      protection public
   variable PlaceName::n in line 24
      protection public
   variable PlaceName::nxt in line 27
      protection public
   variable PlaceName::s in line 25
      protection public
   variable PlaceName::used in line 26
      protection public
   variable Seen::n in line 31
      protection public
   variable Seen::nxt in line 32
      protection public
   variable Sym::bits in line 38
      protection public
   variable Sym::n in line 37
      protection public
   variable Sym::nxt in line 39
      protection public
   variable Sym::s in line 36
      protection public
   variable Fct::calls in line 51
      protection public
   variable Fct::cmd in line 849
      protection public
   variable Fct::defs in line 48
      protection public
   variable Fct::deref in line 50
      protection public
   variable Fct::fn in line 850
      protection public
   variable Fct::fnm in line 43
      protection public
   variable Fct::is_static in line 45
      protection public
   variable Fct::n in line 44
      protection public
   variable Fct::nxt in line 62
      protection public
   variable Fct::rval in line 46
      protection public
   variable Fct::special in line 47
      protection public
   variable Fct::uses in line 49
      protection public
   variable Fct::visited in line 56
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno_intervals.c
module uno_intervals.c
   variable debug in line 19
      protection public
   variable size_ok in line 20
      protection public
   variable size_nok in line 20
      protection public
   function explain_bound(char *,ArBound *,treenode *) in line 22
      protection public
      59 lines of code
      3 parameters
      1 conditional paths
   function uno_assert(int,char *) in line 23
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
   function and_bounds(ArBound *,ArBound *) in line 26
      protection public
      111 lines of code
      2 parameters
      40 conditional paths
      uses variable debug defined in uno_intervals.c
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_intervals.c
      uses macro definition ZT defined in uno_lts.h
      uses function sanitize(ArBound *) defined in uno_intervals.c
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition NEG defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses macro definition LB defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses macro definition FROMASGN defined in dflow.h
      uses macro definition FROMEXPR defined in dflow.h
   function copy_bound(ArBound *,ArBound *) in line 27
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable ArBound::s defined in dflow.h
      uses variable ArBound::sameas defined in dflow.h
      uses variable ArBound::dup defined in dflow.h
      uses variable ArBound::bounds defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
   function negate_bound(ArBound *) in line 29
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses variable debug defined in uno_intervals.c
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_intervals.c
      uses macro definition ZT defined in uno_lts.h
      uses function uno_assert(int,char *) defined in uno_intervals.c
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition DUP defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses macro definition LB defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses macro definition NEG defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
   function check_bounds(ArBound *,int,treenode *) in line 30
      protection public
      51 lines of code
      3 parameters
      15 conditional paths
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition DUP defined in dflow.h
      uses variable ArBound::dup defined in dflow.h
      uses variable debug defined in uno_intervals.c
      uses function unsatisfiable(ArBound *) defined in uno_intervals.c
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_intervals.c
      uses macro definition NEG defined in dflow.h
      uses macro definition LB defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses function uno_assert(int,char *) defined in uno_intervals.c
      uses variable size_nok defined in uno_intervals.c
      uses function uno_warn(char *,treenode *,symentry_t *) defined in uno_intervals.c
      uses variable ArBound::s defined in dflow.h
      uses variable size_ok defined in uno_intervals.c
   function merge_bounds(ArBound *,ArBound *) in line 31
      protection public
      38 lines of code
      2 parameters
      9 conditional paths
      uses variable debug defined in uno_intervals.c
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_intervals.c
      uses macro definition ZT defined in uno_lts.h
      uses function uno_assert(int,char *) defined in uno_intervals.c
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses macro definition DUP defined in dflow.h
      uses function first_inside_second(ArBound *,ArBound *) defined in uno_intervals.c
      uses function copy_bound(ArBound *,ArBound *) defined in uno_intervals.c
      uses function and_bounds(ArBound *,ArBound *) defined in uno_intervals.c
   function same_bounds(ArBound *,ArBound *) in line 32
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable ArBound::s defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses function first_inside_second(ArBound *,ArBound *) defined in uno_intervals.c
   function sanitize(ArBound *) in line 33
      protection public
      30 lines of code
      1 parameters
      8 conditional paths
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses macro definition DUP defined in dflow.h
      uses macro definition LB defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_intervals.c
      uses macro definition ZT defined in uno_lts.h
      uses function uno_assert(int,char *) defined in uno_intervals.c
      uses variable ArBound::ub defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
      uses macro definition NEG defined in dflow.h
   function uno_warn(char *,treenode *,symentry_t *) in line 35
      protection public
      63 lines of code
      3 parameters
      1 conditional paths
      uses function suppress(char *,int) defined in uno_lts.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable symentry::fn defined in symtab.h
      uses variable symentry::ln defined in symtab.h
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_EMPTY defined in tree.h
      uses variable symentry::node defined in symtab.h
      uses enumvalue TN_IF defined in tree.h
   function unsatisfiable(ArBound *) in line 67
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses macro definition LB defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
   function first_inside_second(ArBound *,ArBound *) in line 75
      protection public
      24 lines of code
      2 parameters
      6 conditional paths
      uses function sanitize(ArBound *) defined in uno_intervals.c
      uses function unsatisfiable(ArBound *) defined in uno_intervals.c
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition NEG defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno_local.c
module uno_local.c
   variable file_name in line 20
      protection public
   variable ParseStack in line 21
      protection public
   variable Parse_TOS in line 22
      protection public
   variable DoneStack in line 23
      protection public
   variable do_dflow in line 25
      protection public
   variable nopre in line 25
      protection public
   variable keeptmps in line 25
      protection public
   variable show_syms in line 25
      protection public
   variable no_va in line 25
      protection public
   variable preproc_info in line 26
      protection public
   variable never in line 26
      protection public
   variable master_dfn in line 26
      protection public
   variable CPRE in line 27
      protection public
   variable parse_tree in line 28
      protection public
   variable cpp1 in line 29
      protection public
   variable cpp2 in line 29
      protection public
   variable cpp_cmd in line 29
      protection public
   variable Verbose in line 31
      protection public
   variable type_check in line 31
      protection public
   variable uno in line 32
      protection public
   variable list_typedefs in line 32
      protection public
   variable cyclo in line 32
      protection public
   variable localonly in line 33
      protection public
   variable nopaths in line 33
      protection public
   variable usecheck in line 34
      protection public
   variable allerr in line 34
      protection public
   variable allerrs in line 34
      protection public
   variable lintlike in line 34
      protection public
   variable picky in line 34
      protection public
   variable show_sharing in line 34
      protection public
   variable see_static_fcts in line 35
      protection public
   variable see_extern_fcts in line 35
      protection public
   variable want in line 36
      protection public
   variable cur_file in line 36
      protection public
   variable cur_dir in line 36
      protection public
   variable cur_path in line 36
      protection public
   variable progname in line 37
      protection public
   variable working_dir in line 38
      protection public
   variable contxt in line 40
      protection public
   function current_filename(void) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function name_scope(context_t *,char *,int) in line 43
      protection public
      15 lines of code
      3 parameters
      3 conditional paths
      uses variable context::syms defined in symtab.h
      uses variable symtab::current defined in symtab.h
      uses variable symtab::clevel defined in symtab.h
      uses variable scopetab::level defined in symtab.h
      uses function set_owner(scopetab_t *,char *,int) defined in symtab.c
      uses variable Verbose defined in symtab.c
   function walk_tree(treenode *,unsigned long) in line 44
      protection public
      524 lines of code
      2 parameters
      114 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
      uses function name_of_nodetype(node_type) defined in tree.c
      uses variable common::which defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses variable common::type defined in tree.h
      uses function dflow_mark(FILE *,int) defined in dflow.c
      uses enumvalue LEAF_T defined in tree.h
      uses variable leafnode::hdr defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses variable Verbose defined in dflow.c
      uses variable leafnode::syment defined in tree.h
      uses variable symentry::used defined in symtab.h
      uses variable uno defined in dflow.c
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses function new_symentry(void) defined in dflow.c
      uses variable symentry::nme defined in symtab.h
      uses variable symentry::node defined in symtab.h
      uses variable symentry::ln defined in symtab.h
      uses variable symentry::fn defined in symtab.h
      uses variable common::fnm defined in tree.h
      uses function is_typedef(symentry_t *) defined in symtab.c
      uses variable symentry::nes defined in symtab.h
      uses variable scopetab::owner_t defined in symtab.h
      uses enumvalue TN_OBJ_DEF defined in tree.h
      uses macro definition FCALL defined in dtags.h
      uses function nmestr(str_t *) defined in nmetab.c
      uses variable symentry::decl_level defined in symtab.h
      uses macro definition USE defined in dtags.h
      uses macro definition REF0 defined in dtags.h
      uses macro definition REF1 defined in dtags.h
      uses macro definition REF2 defined in dtags.h
      uses function doit(leafnode *,int) defined in dflow.c
      uses variable scopetab::owner defined in symtab.h
      uses function emalloc(size_t) defined in dflow.c
      uses macro definition PARAM defined in dtags.h
      uses variable symentry::kind defined in symtab.h
      uses macro definition PARAM_ENTRY defined in symtab.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable symentry::container defined in symtab.h
      uses variable DefUse::der_type defined in dflow.h
      uses variable DefUse::other defined in dflow.h
      uses function symadd(symentry_t *,int) defined in dflow.c
      uses variable DefUse::special defined in dflow.h
      uses macro definition ALIAS defined in dtags.h
      uses variable DefUse::use defined in dflow.h
      uses macro definition DEF defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses variable DefUse::def defined in dflow.h
      uses macro definition DECL defined in dtags.h
      uses macro definition ARRAY_DECL defined in dtags.h
      uses function dump_defuse(DefUse *,FILE *) defined in dflow.c
      uses enumvalue IF_T defined in tree.h
      uses variable if_node::hdr defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses function zero_test(treenode *) defined in dflow.c
      uses variable if_node::cond defined in tree.h
      uses function walk_tree(treenode *,unsigned long) defined in dflow.c
      uses macro definition INCOND defined in dtags.h
      uses function attach_defuse(treenode *,char *,DefUse *) defined in dflow.c
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
      uses enumvalue TN_COND_EXPR defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses variable for_node::init defined in tree.h
      uses variable for_node::hdr defined in tree.h
      uses enumvalue TN_FUNC_DEF defined in tree.h
      uses variable for_node::test defined in tree.h
      uses enumvalue TN_FOR defined in tree.h
      uses variable for_node::incr defined in tree.h
      uses variable for_node::stemnt defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable want defined in dflow.c
      uses variable vis defined in dflow.c
      uses function set_fbase(int,char *) defined in dflow.c
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses enumvalue TN_DECL defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses macro definition IS_PTR defined in dtags.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses enumvalue TN_SELECT defined in tree.h
      uses variable common::tok defined in tree.h
      uses enumvalue TN_CAST defined in tree.h
      uses variable type_check defined in dflow.c
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses function storefname(treenode *) defined in dflow.c
      uses enumvalue TN_EXPR defined in tree.h
      uses macro definition IN_SIZEOF defined in dtags.h
      uses variable progname defined in dflow.c
      uses enumvalue TN_SWITCH defined in tree.h
      uses enumvalue TN_WHILE defined in tree.h
      uses enumvalue TN_DOWHILE defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses enumvalue TN_DEREF defined in tree.h
      uses macro definition USEafterdef defined in dtags.h
      uses variable picky defined in dflow.c
      uses enumvalue TN_INT defined in tree.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses enumvalue TN_STRING defined in tree.h
      uses enumvalue TN_JUMP defined in tree.h
      uses enumvalue TN_INDEX defined in tree.h
      uses enumvalue TN_TRANS_LIST defined in tree.h
      uses enumvalue TN_TYPE_LIST defined in tree.h
      uses enumvalue NONE_T defined in tree.h
   function emalloc(size_t) in line 45
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
   function dot_start(treenode *) in line 46
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function dflow_reset(void) in line 47
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function rel_all(SymList *) defined in dflow.c
   function memstats(void) in line 48
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function custom_exit(const char *) in line 49
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in dflow.c
      uses variable EX::f defined in uno_lts.c
      uses variable EX::has_arg defined in uno_lts.c
      uses variable EX::arg_val defined in uno_lts.c
      uses variable EX::nxt defined in uno_lts.c
   function lts_start(treenode *) in line 50
      protection public
      58 lines of code
      1 parameters
      1 conditional paths
      uses function rev_release(SymRef *) defined in uno_lts.c
      uses variable depth defined in uno_lts.c
      uses variable uno_prop defined in uno_lts.c
      uses function bound_reset(void) defined in uno_lts.c
      uses function gen_reset(void) defined in uno_lts.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable file_name defined in uno_lts.c
      uses variable common::line defined in tree.h
      uses variable Graphs::cfg defined in uno_lts.h
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable uno defined in dflow.c
      uses variable cyclo defined in uno_lts.c
      uses variable show_sharing defined in uno_lts.c
      uses variable localonly defined in uno_lts.c
   function read_suppress(void) in line 51
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
      uses variable working_dir defined in uno_lts.c
      uses function emalloc(size_t) defined in dflow.c
   function find_suppress_lines(char *) in line 52
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in dflow.c
      uses variable ST::name defined in uno_lts.c
      uses variable ST::line defined in uno_lts.c
      uses variable ST::nxt defined in uno_lts.c
   function Usage(char *) in line 55
      protection public
      41 lines of code
      1 parameters
      1 conditional paths
   function add_never(FILE *) in line 98
      protection public
      59 lines of code
      1 parameters
      3 conditional paths
      uses variable never defined in uno_local.c
      uses macro definition NONE defined in dtags.h
      uses macro definition ANY defined in dtags.h
      uses macro definition DEF defined in dtags.h
      uses macro definition FCALL defined in dtags.h
      uses macro definition USE defined in dtags.h
      uses macro definition REF0 defined in dtags.h
      uses macro definition REF1 defined in dtags.h
      uses macro definition REF2 defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses macro definition ALIAS defined in dtags.h
      uses macro definition ARRAY_DECL defined in dtags.h
      uses macro definition HIDE defined in dtags.h
      uses macro definition DECL defined in dtags.h
      uses macro definition USEafterdef defined in dtags.h
      uses macro definition USEbeforedef defined in dtags.h
      uses macro definition UNO_CONST defined in dtags.h
      uses macro definition PARAM defined in dtags.h
      uses macro definition IN_SIZEOF defined in dtags.h
      uses macro definition IS_PTR defined in dtags.h
      uses macro definition INCOND defined in dtags.h
   function add_pieces(FILE *,char *) in line 159
      protection public
      43 lines of code
      2 parameters
      8 conditional paths
      uses variable nopre defined in uno_local.c
      uses variable no_va defined in uno_local.c
      uses variable master_dfn defined in uno_local.c
      uses variable cur_file defined in uno_local.c
      uses variable never defined in uno_local.c
      uses function add_never(FILE *) defined in uno_local.c
   function split_filename(const char *) in line 212
      protection public
      24 lines of code
      1 parameters
      4 conditional paths
      uses variable cur_path defined in uno_local.c
      uses function emalloc(size_t) defined in uno_local.c
      uses variable cur_dir defined in uno_local.c
      uses variable cur_file defined in uno_local.c
   function clean_tmps(void) in line 238
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable keeptmps defined in uno_local.c
      uses variable cpp2 defined in uno_local.c
      uses variable cpp1 defined in uno_local.c
   function process_input(char *) in line 247
      protection public
      122 lines of code
      1 parameters
      19 conditional paths
      uses variable CPRE defined in uno_local.c
      uses function Usage(char *) defined in uno_local.c
      uses function split_filename(const char *) defined in uno_local.c
      uses variable working_dir defined in uno_local.c
      uses variable cpp2 defined in uno_local.c
      uses function emalloc(size_t) defined in uno_local.c
      uses variable cur_file defined in uno_local.c
      uses variable cpp1 defined in uno_local.c
      uses variable cur_dir defined in uno_local.c
      uses variable cpp_cmd defined in uno_local.c
      uses variable preproc_info defined in uno_local.c
      uses variable nopre defined in uno_local.c
      uses function add_pieces(FILE *,char *) defined in uno_local.c
      uses variable never defined in uno_local.c
      uses function add_never(FILE *) defined in uno_local.c
      uses variable Verbose defined in uno_local.c
      uses function init_nmetab(void) defined in nmetab.c
      uses variable ParseStack defined in uno_local.c
      uses function new_treestk(void) defined in treestk.c
      uses variable DoneStack defined in uno_local.c
      uses variable contxt defined in uno_local.c
      uses function new_context(void) defined in symtab.c
      uses variable treestk::contxt defined in treestk.h
      uses function handle_new_file(TreeStack *,FILE *,char *) defined in treestk.c
      uses variable file_name defined in uno_local.c
      uses function enter_scope(context_t *) defined in symtab.c
      uses function tree_parse(TreeStack *,int) defined in treestk.c
      uses function name_scope(context_t *,char *,int) defined in uno_local.c
      uses function current_filename(void) defined in uno_local.c
      uses enumvalue NONE_T defined in tree.h
      uses variable parse_tree defined in uno_local.c
      uses function top_of_stack(TreeStack *) defined in treestk.c
      uses variable do_dflow defined in uno_local.c
      uses function dflow_reset(void) defined in uno_local.c
      uses function walk_tree(treenode *,unsigned long) defined in uno_local.c
      uses function clean_tmps(void) defined in uno_local.c
      uses function exit_scope(context_t *) defined in symtab.c
   function main(int,char **) in line 371
      protection public
      159 lines of code
      2 parameters
      40 conditional paths
      uses variable file_name defined in uno_local.c
      uses variable allerr defined in uno_local.c
      uses variable allerrs defined in uno_local.c
      uses variable uno defined in uno_local.c
      uses variable want defined in uno_local.c
      uses variable cyclo defined in uno_local.c
      uses variable localonly defined in uno_local.c
      uses variable lintlike defined in uno_local.c
      uses variable picky defined in uno_local.c
      uses variable usecheck defined in uno_local.c
      uses variable nopaths defined in uno_local.c
      uses variable no_va defined in uno_local.c
      uses variable nopre defined in uno_local.c
      uses variable never defined in uno_local.c
      uses function emalloc(size_t) defined in uno_local.c
      uses variable see_static_fcts defined in uno_local.c
      uses variable show_sharing defined in uno_local.c
      uses variable list_typedefs defined in uno_local.c
      uses variable see_extern_fcts defined in uno_local.c
      uses function custom_exit(const char *) defined in uno_local.c
      uses variable master_dfn defined in uno_local.c
      uses variable working_dir defined in uno_local.c
      uses variable Verbose defined in uno_local.c
      uses variable keeptmps defined in uno_local.c
      uses variable show_syms defined in uno_local.c
      uses variable type_check defined in uno_local.c
      uses variable CPRE defined in uno_local.c
      uses variable preproc_info defined in uno_local.c
      uses function Usage(char *) defined in uno_local.c
      uses function read_suppress(void) defined in uno_local.c
      uses function find_suppress_lines(char *) defined in uno_local.c
      uses function process_input(char *) defined in uno_local.c
      uses variable parse_tree defined in uno_local.c
      uses function lts_start(treenode *) defined in uno_local.c
      uses function show_symtab(symtab_t *,FILE *) defined in symtab.c
      uses variable contxt defined in uno_local.c
      uses variable context::syms defined in symtab.h
      uses function memstats(void) defined in uno_local.c
      uses function free_context(context_t *) defined in symtab.c
      uses function is_empty(TreeStack *) defined in treestk.c
      uses variable ParseStack defined in uno_local.c
      uses function delete_stk_item(Stk_Item *) defined in treestk.c
      uses function pop(TreeStack *) defined in treestk.c
      uses variable DoneStack defined in uno_local.c
      uses variable Parse_TOS defined in uno_local.c
   function x_stmnt(treenode *) in line 532
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function buf_recur(treenode *) defined in prnttree.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno_lts.c
module uno_lts.c
   typedef Gst in line 48
      protection public
   typedef ST in line 129
      protection public
   typedef EX in line 628
      protection public
   variable property in line 22
      protection public
   variable localonly in line 23
      protection public
   variable lintlike in line 23
      protection public
   variable usecheck in line 23
      protection public
   variable show_sharing in line 23
      protection public
   variable picky in line 23
      protection public
   variable cyclo in line 23
      protection public
   variable file_name in line 24
      protection public
   variable working_dir in line 25
      protection public
   variable debug in line 27
      protection public
   variable dfs_frame in line 29
      protection public
   variable dfstack in line 30
      protection public
   variable safe_stack in line 31
      protection public
   variable fd_uno in line 33
      protection public
   variable curgraph in line 35
      protection public
   variable glob_decls in line 37
      protection public
   variable graph in line 38
      protection public
   variable freegraph in line 39
      protection public
   variable lnodes in line 41
      protection public
   variable pathcond in line 43
      protection public
   variable pathfree in line 44
      protection public
   variable eol in line 46
      protection public
   variable fol in line 47
      protection public
   variable sol in line 48
      protection public
   variable grst in line 57
      protection public
   variable frst in line 58
      protection public
   variable freesymext in line 60
      protection public
   variable freesymref in line 61
      protection public
   variable freetrans in line 62
      protection public
   variable freestate in line 63
      protection public
   variable NS in line 64
      protection public
   variable stck in line 80
      protection public
   variable swol in line 81
      protection public
   variable dfs_free in line 83
      protection public
   variable globs in line 84
      protection public
   variable globuse in line 85
      protection public
   variable cur_path in line 87
      protection public
   variable cur_dir in line 87
      protection public
   variable cur_file in line 87
      protection public
   variable is_static_fct in line 90
      protection public
   variable not_a_prototype in line 91
      protection public
   variable sawdefault in line 92
      protection public
   variable depth in line 120
      protection public
   variable saw_a_typedef_name in line 121
      protection public
   variable uno_prop in line 122
      protection public
   variable st in line 131
      protection public
   variable fallthru in line 396
      protection public
   variable freelabels in line 511
      protection public
   variable exs in line 644
      protection public
   variable Cnt in line 884
      protection public
   variable cnodes in line 3192
      protection public
   variable cedges in line 3192
      protection public
   function find_graph(char *) in line 36
      protection public
      13 lines of code
      1 parameters
      5 conditional paths
      uses variable graph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable glob_decls defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
   function lts_dowhile(State *,treenode *) in line 65
      protection public
      64 lines of code
      2 parameters
      3 conditional paths
      uses variable treenode::lnode defined in tree.h
      uses function mk_int(int) defined in uno_lts.h
      uses variable treenode::rnode defined in tree.h
      uses function mk_ident(void) defined in uno_lts.h
      uses function mk_label_node(leafnode *,treenode *,char *) defined in uno_lts.c
      uses function mk_goto_node(leafnode *) defined in uno_lts.c
      uses function lts_push_start(treenode *) defined in uno_lts.c
      uses function lts_push_end(treenode *) defined in uno_lts.c
      uses function create_state(Graphs *) defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses variable State::n defined in uno_lts.h
      uses function get_trans(void) defined in uno_lts.c
      uses variable Trans::cond defined in uno_lts.h
      uses function mk_bool(char *) defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses function lts_tree(State *,treenode *) defined in uno_lts.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable if_node::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable if_node::cond defined in tree.h
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
      uses function add_seq(State *,treenode *) defined in uno_lts.c
      uses variable State::succ defined in uno_lts.h
      uses function lts_pop_start(void) defined in uno_lts.c
      uses function lts_pop_end(void) defined in uno_lts.c
   function lts_for(State *,for_node *) in line 66
      protection public
      105 lines of code
      2 parameters
      10 conditional paths
      uses variable for_node::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_FUNC_DEF defined in tree.h
      uses variable for_node::stemnt defined in tree.h
      uses function leftmost(treenode *) defined in tree.c
      uses variable for_node::init defined in tree.h
      uses variable is_static_fct defined in uno_lts.c
      uses variable leafnode::hdr defined in tree.h
      uses variable common::tok defined in tree.h
      uses function lts_tree(State *,treenode *) defined in uno_lts.c
      uses variable NS defined in uno_lts.c
      uses variable not_a_prototype defined in uno_lts.c
      uses function find_func_decl(treenode *) defined in uno_lts.c
      uses variable for_node::test defined in tree.h
      uses variable curgraph defined in uno_lts.c
      uses variable glob_decls defined in uno_lts.c
      uses variable Graphs::all defined in uno_lts.h
      uses function mk_int(int) defined in uno_lts.h
      uses variable for_node::incr defined in tree.h
      uses function mk_ident(void) defined in uno_lts.h
      uses function mk_label_node(leafnode *,treenode *,char *) defined in uno_lts.c
      uses function mk_goto_node(leafnode *) defined in uno_lts.c
      uses function lts_push_start(treenode *) defined in uno_lts.c
      uses function lts_push_end(treenode *) defined in uno_lts.c
      uses function create_state(Graphs *) defined in uno_lts.c
      uses variable State::n defined in uno_lts.h
      uses function get_trans(void) defined in uno_lts.c
      uses variable Trans::cond defined in uno_lts.h
      uses function mk_bool(char *) defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue FOR_T defined in tree.h
      uses function name_of_nodetype(node_type) defined in tree.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable if_node::hdr defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable if_node::cond defined in tree.h
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
      uses function add_seq(State *,treenode *) defined in uno_lts.c
      uses variable State::succ defined in uno_lts.h
      uses function lts_pop_start(void) defined in uno_lts.c
      uses function lts_pop_end(void) defined in uno_lts.c
   function lts_if(State *,if_node *) in line 67
      protection public
      53 lines of code
      2 parameters
      5 conditional paths
      uses variable if_node::hdr defined in tree.h
      uses variable common::tok defined in tree.h
      uses function lts_tree(State *,treenode *) defined in uno_lts.c
      uses variable NS defined in uno_lts.c
      uses variable if_node::cond defined in tree.h
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses function name_of_nodetype(node_type) defined in tree.c
      uses function create_state(Graphs *) defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses function get_trans(void) defined in uno_lts.c
      uses variable Trans::cond defined in uno_lts.h
      uses function mk_bool(char *) defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable State::succ defined in uno_lts.h
      uses function mk_ident(void) defined in uno_lts.h
      uses function mk_goto_node(leafnode *) defined in uno_lts.c
      uses function mk_label_node(leafnode *,treenode *,char *) defined in uno_lts.c
   function lts_node(State *,treenode *) in line 68
      protection public
      156 lines of code
      2 parameters
      49 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses variable not_a_prototype defined in uno_lts.c
      uses function new_graph(treenode *,char *) defined in uno_lts.c
      uses function nmestr(str_t *) defined in nmetab.c
      uses variable treenode::lnode defined in tree.h
      uses variable Graphs::cfg defined in uno_lts.h
      uses enumvalue TN_DECL defined in tree.h
      uses variable curgraph defined in uno_lts.c
      uses variable glob_decls defined in uno_lts.c
      uses function add_seq(State *,treenode *) defined in uno_lts.c
      uses variable Graphs::all defined in uno_lts.h
      uses enumvalue TN_LABEL defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable st defined in uno_lts.c
      uses function lts_top_switch(treenode *) defined in uno_lts.c
      uses function mk_ident(void) defined in uno_lts.h
      uses function mk_label_node(leafnode *,treenode *,char *) defined in uno_lts.c
      uses function mk_goto_node(leafnode *) defined in uno_lts.c
      uses function record_label(treenode *,State *) defined in uno_lts.c
      uses function create_state(Graphs *) defined in uno_lts.c
      uses function get_trans(void) defined in uno_lts.c
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::cond defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable State::succ defined in uno_lts.h
      uses variable sawdefault defined in uno_lts.c
      uses variable treenode::rnode defined in tree.h
      uses function want_break(treenode *) defined in uno_lts.c
      uses function lts_tree(State *,treenode *) defined in uno_lts.c
      uses enumvalue TN_JUMP defined in tree.h
      uses function lts_top_start(void) defined in uno_lts.c
      uses function saw_break(void) defined in uno_lts.c
      uses function lts_top_end(void) defined in uno_lts.c
      uses function fct_retval(treenode *) defined in uno_lts.c
      uses enumvalue TN_SWITCH defined in tree.h
      uses function lts_switch(State *,treenode *) defined in uno_lts.c
      uses enumvalue TN_WHILE defined in tree.h
      uses function lts_while(State *,treenode *) defined in uno_lts.c
      uses enumvalue TN_DOWHILE defined in tree.h
      uses function lts_dowhile(State *,treenode *) defined in uno_lts.c
      uses enumvalue TN_TYPE_NME defined in tree.h
      uses enumvalue TN_NAME_LIST defined in tree.h
      uses enumvalue TN_FIELD_LIST defined in tree.h
      uses enumvalue TN_IDENT_LIST defined in tree.h
      uses enumvalue TN_TYPE_LIST defined in tree.h
      uses enumvalue TN_TRANS_LIST defined in tree.h
      uses enumvalue TN_INIT_LIST defined in tree.h
      uses enumvalue TN_PARAM_LIST defined in tree.h
      uses enumvalue TN_ENUM_LIST defined in tree.h
      uses enumvalue TN_EXPR_LIST defined in tree.h
      uses enumvalue TN_BLOCK defined in tree.h
      uses enumvalue TN_STEMNT_LIST defined in tree.h
      uses enumvalue TN_DECL_LIST defined in tree.h
      uses enumvalue TN_DECLS defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses enumvalue TN_SELECT defined in tree.h
      uses enumvalue TN_DEREF defined in tree.h
      uses enumvalue TN_ARRAY_DECL defined in tree.h
      uses enumvalue TN_COMP_DECL defined in tree.h
      uses enumvalue TN_BIT_FIELD defined in tree.h
      uses enumvalue TN_PNTR defined in tree.h
      uses enumvalue TN_OBJ_DEF defined in tree.h
      uses enumvalue TN_OBJ_REF defined in tree.h
      uses enumvalue TN_INIT_BLK defined in tree.h
      uses enumvalue TN_ASSIGN defined in tree.h
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses enumvalue TN_INDEX defined in tree.h
      uses enumvalue TN_EMPTY defined in tree.h
      uses enumvalue TN_STEMNT defined in tree.h
      uses enumvalue TN_CAST defined in tree.h
      uses variable common::line defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
   function lts_switch(State *,treenode *) in line 69
      protection public
      54 lines of code
      2 parameters
      3 conditional paths
      uses function mk_ident(void) defined in uno_lts.h
      uses function mk_label_node(leafnode *,treenode *,char *) defined in uno_lts.c
      uses function mk_goto_node(leafnode *) defined in uno_lts.c
      uses function lts_push_end(treenode *) defined in uno_lts.c
      uses variable treenode::lnode defined in tree.h
      uses function mk_int(int) defined in uno_lts.h
      uses function lts_push_switch(State *) defined in uno_lts.c
      uses variable State::n defined in uno_lts.h
      uses variable sawdefault defined in uno_lts.c
      uses function lts_tree(State *,treenode *) defined in uno_lts.c
      uses variable treenode::rnode defined in tree.h
      uses variable st defined in uno_lts.c
      uses function want_break(treenode *) defined in uno_lts.c
      uses function create_state(Graphs *) defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses function lts_top_end(void) defined in uno_lts.c
      uses function lts_top_switch(treenode *) defined in uno_lts.c
      uses function get_trans(void) defined in uno_lts.c
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::cond defined in uno_lts.h
      uses function mk_deflt(void) defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable State::succ defined in uno_lts.h
      uses function add_seq(State *,treenode *) defined in uno_lts.c
      uses function lts_pop_end(void) defined in uno_lts.c
      uses function lts_pop_switch(void) defined in uno_lts.c
   function lts_tree(State *,treenode *) in line 70
      protection public
      29 lines of code
      2 parameters
      7 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses function lts_if(State *,if_node *) defined in uno_lts.c
      uses enumvalue FOR_T defined in tree.h
      uses function lts_for(State *,for_node *) defined in uno_lts.c
      uses enumvalue NODE_T defined in tree.h
      uses function lts_node(State *,treenode *) defined in uno_lts.c
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue NONE_T defined in tree.h
      uses function name_of_nodetype(node_type) defined in tree.c
   function lts_while(State *,treenode *) in line 71
      protection public
      65 lines of code
      2 parameters
      3 conditional paths
      uses variable treenode::lnode defined in tree.h
      uses function mk_int(int) defined in uno_lts.h
      uses variable treenode::rnode defined in tree.h
      uses function mk_ident(void) defined in uno_lts.h
      uses function mk_label_node(leafnode *,treenode *,char *) defined in uno_lts.c
      uses function mk_goto_node(leafnode *) defined in uno_lts.c
      uses function lts_push_start(treenode *) defined in uno_lts.c
      uses function lts_push_end(treenode *) defined in uno_lts.c
      uses function create_state(Graphs *) defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses variable State::n defined in uno_lts.h
      uses function get_trans(void) defined in uno_lts.c
      uses variable Trans::cond defined in uno_lts.h
      uses function mk_bool(char *) defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses function lts_tree(State *,treenode *) defined in uno_lts.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable if_node::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue IF_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable if_node::cond defined in tree.h
      uses variable if_node::then_n defined in tree.h
      uses variable if_node::else_n defined in tree.h
      uses function add_seq(State *,treenode *) defined in uno_lts.c
      uses variable State::succ defined in uno_lts.h
      uses function lts_pop_start(void) defined in uno_lts.c
      uses function lts_pop_end(void) defined in uno_lts.c
   function debug_node(treenode *,int,char *) in line 75
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function simple_zero(symentry_t *,treenode *) in line 76
      protection public
      46 lines of code
      2 parameters
      10 conditional paths
      uses variable debug defined in uno_lts.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function name_of_node(tn_t) defined in tree.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses enumvalue TN_IDENT defined in tree.h
      uses variable treenode::syment defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses macro definition ZT defined in uno_lts.h
      uses function is_zero_val(treenode *) defined in uno_lts.c
   function simple_nonzero(symentry_t *,treenode *) in line 77
      protection public
      48 lines of code
      2 parameters
      13 conditional paths
      uses variable debug defined in uno_lts.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function name_of_node(tn_t) defined in tree.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses enumvalue TN_IDENT defined in tree.h
      uses variable treenode::syment defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses macro definition ZT defined in uno_lts.h
      uses function is_zero_val(treenode *) defined in uno_lts.c
   function dflow_mark(FILE *,int) in line 78
      protection public
      25 lines of code
      2 parameters
      20 conditional paths
      uses macro definition ANY defined in dtags.h
      uses macro definition DEF defined in dtags.h
      uses macro definition FCALL defined in dtags.h
      uses macro definition USE defined in dtags.h
      uses macro definition REF0 defined in dtags.h
      uses macro definition REF1 defined in dtags.h
      uses macro definition REF2 defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses macro definition ALIAS defined in dtags.h
      uses macro definition ARRAY_DECL defined in dtags.h
      uses macro definition HIDE defined in dtags.h
      uses macro definition DECL defined in dtags.h
      uses macro definition USEafterdef defined in dtags.h
      uses macro definition USEbeforedef defined in dtags.h
      uses macro definition UNO_CONST defined in dtags.h
      uses macro definition PARAM defined in dtags.h
      uses macro definition IN_SIZEOF defined in dtags.h
      uses macro definition IS_PTR defined in dtags.h
      uses macro definition INCOND defined in dtags.h
   function checkpathcond(symentry_t *,treenode *,int) in line 89
      protection public
      48 lines of code
      3 parameters
      22 conditional paths
      uses variable debug defined in uno_lts.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function name_of_node(tn_t) defined in tree.c
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses function simple_nonzero(symentry_t *,treenode *) defined in uno_lts.c
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable pathcond defined in uno_lts.c
      uses variable PathCond::nxt defined in uno_lts.h
      uses function toksym(int,int) defined in uno_lts.c
      uses variable PathCond::val defined in uno_lts.h
      uses variable common::tok defined in tree.h
      uses variable PathCond::exp defined in uno_lts.h
      uses function has_symbol(symentry_t *,treenode *) defined in uno_lts.c
      uses function simple_form(symentry_t *,PathCond *) defined in uno_lts.c
      uses function debug_node(treenode *,int,char *) defined in uno_lts.c
      uses variable common::which defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function mk_label_node(leafnode *,treenode *,char *) in line 94
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in dflow.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_LABEL defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable treenode::lnode defined in tree.h
   function mk_goto_node(leafnode *) in line 95
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in dflow.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_JUMP defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable treenode::lnode defined in tree.h
   function new_graph(treenode *,char *) in line 96
      protection public
      60 lines of code
      2 parameters
      14 conditional paths
      uses variable graph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable glob_decls defined in uno_lts.c
      uses variable Graphs::cfg defined in uno_lts.h
      uses variable uno_prop defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable debug defined in uno_lts.c
      uses variable usecheck defined in uno_lts.c
      uses variable is_static_fct defined in uno_lts.c
      uses variable Graphs::scope defined in uno_lts.h
      uses variable cur_path defined in uno_lts.c
      uses function dup_graph(Graphs *,treenode *) defined in uno_lts.c
      uses variable freegraph defined in uno_lts.c
      uses function emalloc(size_t) defined in dflow.c
      uses function create_state(Graphs *) defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::status defined in uno_lts.h
   function add_gstack(symentry_t *,treenode *,int) in line 97
      protection public
      54 lines of code
      3 parameters
      11 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable dfstack defined in uno_lts.c
      uses variable debug defined in uno_lts.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable DfStack::globrefs defined in uno_lts.h
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::n defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses macro definition DEF defined in dtags.h
   function getpathframe(void) in line 98
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable pathfree defined in uno_lts.c
      uses variable PathCond::nxt defined in uno_lts.h
      uses function emalloc(size_t) defined in dflow.c
   function dfs_uno(State *) in line 100
      protection public
      98 lines of code
      1 parameters
      22 conditional paths
      uses macro definition ZT defined in uno_lts.h
      uses variable depth defined in uno_lts.c
      uses variable debug defined in uno_lts.c
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses variable common::type defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses function dump_defuse(DefUse *,FILE *) defined in uno_lts.c
      uses function dfs_push(State *) defined in uno_lts.c
      uses variable State::visited defined in uno_lts.h
      uses function ana_defuse(treenode *) defined in uno_lts.c
      uses variable State::iscond defined in uno_lts.h
      uses enumvalue TN_IF defined in tree.h
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable Trans::cond defined in uno_lts.h
      uses function infeasible(treenode *,treenode *) defined in uno_lts.c
      uses function newpathcond(treenode *,treenode *) defined in uno_lts.c
      uses variable pathcond defined in uno_lts.c
      uses function prevpathcond(void) defined in uno_lts.c
      uses variable Trans::knz defined in uno_lts.h
      uses function setknownzeros(treenode *,Trans *,PathCond *) defined in uno_lts.c
      uses function dumknow(treenode *,Trans *) defined in uno_lts.c
      uses variable dfstack defined in uno_lts.c
      uses variable DfStack::state defined in uno_lts.h
      uses function getpathframe(void) defined in uno_lts.c
      uses variable PathCond::exp defined in uno_lts.h
      uses variable PathCond::val defined in uno_lts.h
      uses variable PathCond::nxt defined in uno_lts.h
      uses variable pathfree defined in uno_lts.c
      uses function dfs_pop(void) defined in uno_lts.c
   function attach_nut(char *,symentry_t *,treenode *) in line 104
      protection public
      29 lines of code
      3 parameters
      6 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
      uses variable common::fnm defined in tree.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable common::nuts defined in tree.h
      uses variable Nuts::nxt defined in tree.h
      uses variable Nuts::nut defined in tree.h
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::hasnuts defined in uno_lts.h
   function has_node_type(treenode *,int) in line 106
      protection public
      14 lines of code
      2 parameters
      4 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses function has_node_type(treenode *,int) defined in uno_bounds.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function has_node_comp_ops(treenode *) in line 107
      protection public
      29 lines of code
      1 parameters
      14 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses variable common::tok defined in tree.h
      uses enumvalue TN_EMPTY defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses function has_node_comp_ops(treenode *) defined in uno_bounds.c
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function dump_defuse(DefUse *,FILE *) in line 108
      protection public
      49 lines of code
      2 parameters
      25 conditional paths
      uses variable DefUse::def defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable DefUse::use defined in dflow.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses macro definition DEF defined in dtags.h
      uses macro definition USE defined in dtags.h
      uses macro definition FCALL defined in dtags.h
      uses macro definition REF0 defined in dtags.h
      uses macro definition REF1 defined in dtags.h
      uses macro definition REF2 defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses macro definition ALIAS defined in dtags.h
      uses macro definition ARRAY_DECL defined in dtags.h
      uses macro definition HIDE defined in dtags.h
      uses macro definition DECL defined in dtags.h
      uses macro definition USEafterdef defined in dtags.h
      uses macro definition USEbeforedef defined in dtags.h
      uses macro definition PARAM defined in dtags.h
      uses macro definition IN_SIZEOF defined in dtags.h
      uses macro definition IS_PTR defined in dtags.h
      uses variable DefUse::aio defined in dflow.h
      uses variable ArList::nxt defined in dflow.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable ArList::tn defined in dflow.h
   function v_reported(treenode *) in line 109
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function v_matched(treenode *) defined in uno_bounds.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable Stack::n defined in uno_lts.h
      uses variable Stack::nxt defined in uno_lts.h
   function dfs_bound(State *,treenode *,treenode *,State *) in line 110
      protection public
      53 lines of code
      4 parameters
      17 conditional paths
      uses variable depth defined in uno_bounds.c
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses function uno_index(State *) defined in uno_bounds.c
      uses variable State::iscond defined in uno_lts.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses macro definition ZT defined in uno_lts.h
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses function infeasible(treenode *,treenode *) defined in uno_bounds.c
      uses variable Trans::cond defined in uno_lts.h
      uses function dfs_bound(State *,treenode *,treenode *,State *) defined in uno_bounds.c
   function explain_bound(char *,ArBound *,treenode *) in line 111
      protection public
      59 lines of code
      3 parameters
      19 conditional paths
      uses variable ArBound::bounds defined in dflow.h
      uses macro definition UNK defined in dflow.h
      uses macro definition DUP defined in dflow.h
      uses variable ArBound::s defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable ArBound::sameas defined in dflow.h
      uses macro definition NEG defined in dflow.h
      uses macro definition LB defined in dflow.h
      uses macro definition UB defined in dflow.h
      uses variable ArBound::lb defined in dflow.h
      uses variable ArBound::ub defined in dflow.h
      uses macro definition FROMASGN defined in dflow.h
      uses macro definition FROMEXPR defined in dflow.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable ArBound::level_set defined in dflow.h
   function gen_stats(void) in line 112
      protection public
      29 lines of code
      1 parameters
      12 conditional paths
      uses variable uno_prop defined in uno_generic.c
   function dfs_generic(State *) in line 113
      protection public
      84 lines of code
      1 parameters
      20 conditional paths
      uses macro definition ZT defined in uno_lts.h
      uses variable State::n defined in uno_lts.h
      uses variable depth defined in uno_generic.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses function dump_defuse(DefUse *,FILE *) defined in uno_generic.c
      uses variable common::defuse defined in tree.h
      uses variable GenStack::symrefs defined in uno_generic.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable State::iscond defined in uno_lts.h
      uses variable GenStack::e defined in uno_generic.c
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable uno_prop defined in uno_generic.c
      uses variable GenStack::uno_state defined in uno_generic.c
      uses variable statename defined in uno_generic.c
      uses variable State::uno_state defined in uno_lts.h
      uses variable State::visited defined in uno_lts.h
      uses function pop(TreeStack *) defined in treestk.c
      uses variable Trans::nxt defined in uno_lts.h
      uses function infeasible(treenode *,treenode *) defined in uno_generic.c
      uses variable Trans::cond defined in uno_lts.h
      uses variable GenStack::c defined in uno_generic.c
      uses function dfs_generic(State *) defined in uno_generic.c
   function is_constant(char *) in line 114
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable Cname::nxt defined in symtab.c
      uses variable Cname::vn defined in symtab.c
   function struct_fields(FILE *) in line 115
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable contxt defined in uno_local.c
      uses function check_struct_use(FILE *,scopetab_t *) defined in symtab.c
      uses variable context::syms defined in symtab.h
      uses variable symtab::root defined in symtab.h
   function bound_reset(void) in line 116
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function gen_reset(void) in line 117
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function toksym(int,int) in line 118
      protection public
      246 lines of code
      2 parameters
      121 conditional paths
   function get_suppressors(FILE *) in line 134
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses function emalloc(size_t) defined in dflow.c
      uses variable ST::name defined in uno_lts.c
      uses variable ST::line defined in uno_lts.c
      uses variable ST::nxt defined in uno_lts.c
      uses variable st defined in uno_lts.c
   function find_suppress_lines(char *) in line 157
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses function emalloc(size_t) defined in dflow.c
      uses variable ST::name defined in uno_lts.c
      uses variable ST::line defined in uno_lts.c
      uses variable ST::nxt defined in uno_lts.c
      uses variable st defined in uno_lts.c
   function read_suppress(void) in line 182
      protection public
      20 lines of code
      1 parameters
      4 conditional paths
      uses function get_suppressors(FILE *) defined in uno_lts.c
      uses variable working_dir defined in uno_lts.c
      uses function emalloc(size_t) defined in dflow.c
   function suppress(char *,int) in line 204
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses variable st defined in uno_lts.c
      uses variable ST::nxt defined in uno_lts.c
      uses variable ST::line defined in uno_lts.c
      uses variable ST::name defined in uno_lts.c
      uses variable ST::reported defined in uno_lts.c
   function uno_assert(int,char *) in line 224
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
   function uno_ignore(symentry_t *) in line 233
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable symentry::fn defined in symtab.h
   function uno_warn(char *,treenode *,symentry_t *) in line 240
      protection public
      63 lines of code
      3 parameters
      16 conditional paths
      uses function suppress(char *,int) defined in uno_lts.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable symentry::fn defined in symtab.h
      uses variable symentry::ln defined in symtab.h
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_EMPTY defined in tree.h
      uses variable symentry::node defined in symtab.h
      uses enumvalue TN_IF defined in tree.h
   function create_state(Graphs *) in line 305
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable freestate defined in uno_lts.c
      uses variable State::all defined in uno_lts.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable Graphs::all defined in uno_lts.h
   function lts_push_switch(State *) in line 321
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in dflow.c
      uses variable SwStack::s defined in uno_lts.h
      uses variable st defined in uno_lts.c
      uses variable SwStack::nxt defined in uno_lts.h
      uses variable swol defined in uno_lts.c
   function lts_top_switch(treenode *) in line 331
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable swol defined in uno_lts.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable SwStack::s defined in uno_lts.h
   function lts_pop_switch(void) in line 339
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable swol defined in uno_lts.c
      uses variable SwStack::nxt defined in uno_lts.h
   function lts_new_stack(void) in line 346
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable fol defined in uno_lts.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable Stack::nxt defined in uno_lts.h
   function lts_push_start(treenode *) in line 359
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function lts_new_stack(void) defined in uno_lts.c
      uses variable Stack::n defined in uno_lts.h
      uses variable Stack::nxt defined in uno_lts.h
      uses variable sol defined in uno_lts.c
   function lts_push_end(treenode *) in line 369
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function lts_new_stack(void) defined in uno_lts.c
      uses variable Stack::status defined in uno_lts.h
      uses variable Stack::n defined in uno_lts.h
      uses variable Stack::nxt defined in uno_lts.h
      uses variable eol defined in uno_lts.c
   function has_fctcalls(DefUse *) in line 380
      protection public
      9 lines of code
      1 parameters
      4 conditional paths
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses macro definition FCALL defined in dtags.h
   function saw_break(void) in line 391
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable eol defined in uno_lts.c
      uses variable Stack::status defined in uno_lts.h
   function show_fall(void) in line 399
      protection public
      41 lines of code
      1 parameters
      13 conditional paths
      uses variable fallthru defined in uno_lts.c
      uses variable Stack::nxt defined in uno_lts.h
      uses variable Stack::n defined in uno_lts.h
      uses variable Stack::status defined in uno_lts.h
      uses function suppress(char *,int) defined in uno_lts.c
      uses function x_stmnt(treenode *) defined in dflow.c
   function want_break(treenode *) in line 442
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable eol defined in uno_lts.c
      uses variable lintlike defined in uno_lts.c
      uses variable Stack::status defined in uno_lts.h
      uses variable fol defined in uno_lts.c
      uses variable Stack::nxt defined in uno_lts.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable Stack::n defined in uno_lts.h
      uses variable fallthru defined in uno_lts.c
   function rel_sframe(Stack *) in line 461
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable Stack::nxt defined in uno_lts.h
      uses variable fol defined in uno_lts.c
   function lts_pop_start(void) in line 472
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable sol defined in uno_lts.c
      uses variable Stack::nxt defined in uno_lts.h
      uses variable fol defined in uno_lts.c
   function lts_pop_end(void) in line 484
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable eol defined in uno_lts.c
      uses variable Stack::nxt defined in uno_lts.h
      uses variable fol defined in uno_lts.c
   function lts_top_start(void) in line 497
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable sol defined in uno_lts.c
      uses variable Stack::n defined in uno_lts.h
   function lts_top_end(void) in line 504
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable eol defined in uno_lts.c
      uses variable Stack::status defined in uno_lts.h
      uses variable Stack::n defined in uno_lts.h
   function rel_label(LNode *) in line 514
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable LNode::nxt defined in uno_lts.h
      uses variable freelabels defined in uno_lts.c
   function record_label(treenode *,State *) in line 525
      protection public
      18 lines of code
      2 parameters
      2 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable freelabels defined in uno_lts.c
      uses variable LNode::nxt defined in uno_lts.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable LNode::s defined in uno_lts.h
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses variable LNode::f defined in uno_lts.h
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable LNode::n defined in uno_lts.h
      uses variable lnodes defined in uno_lts.c
   function lts_label_find(char *) in line 545
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable lnodes defined in uno_lts.c
      uses variable LNode::nxt defined in uno_lts.h
      uses variable LNode::s defined in uno_lts.h
      uses variable LNode::f defined in uno_lts.h
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable LNode::n defined in uno_lts.h
      uses variable State::n defined in uno_lts.h
      uses variable NS defined in uno_lts.c
   function lts_redirect(State *) in line 563
      protection public
      52 lines of code
      1 parameters
      16 conditional paths
      uses variable st defined in uno_lts.c
      uses variable State::n defined in uno_lts.h
      uses variable stck defined in uno_lts.c
      uses variable SwStack::nxt defined in uno_lts.h
      uses variable SwStack::s defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable common::which defined in tree.h
      uses enumvalue NODE_T defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_JUMP defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses function lts_label_find(char *) defined in uno_lts.c
      uses variable leafnode::data defined in tree.h
      uses variable leafnode::sval defined in tree.h
      uses variable string_str::str defined in nmetab.h
      uses enumvalue TN_BLOCK defined in tree.h
      uses enumvalue TN_STEMNT defined in tree.h
      uses enumvalue TN_LABEL defined in tree.h
      uses variable State::succ defined in uno_lts.h
      uses variable State::nxt defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
   function rev_release(SymRef *) in line 617
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable dfs_free defined in uno_lts.c
   function cfg_unvisit(State *) in line 628
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable State::all defined in uno_lts.h
      uses variable State::visited defined in uno_lts.h
      uses variable State::snapshot defined in uno_lts.h
      uses function rev_release(SymRef *) defined in uno_lts.c
   function custom_exit(const char *) in line 647
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses function emalloc(size_t) defined in dflow.c
      uses variable EX::f defined in uno_lts.c
      uses variable EX::has_arg defined in uno_lts.c
      uses variable EX::arg_val defined in uno_lts.c
      uses variable EX::nxt defined in uno_lts.c
      uses variable exs defined in uno_lts.c
   function no_return(char *,int,int) in line 670
      protection public
      10 lines of code
      3 parameters
      3 conditional paths
      uses variable exs defined in uno_lts.c
      uses variable EX::nxt defined in uno_lts.c
      uses variable EX::f defined in uno_lts.c
      uses variable EX::has_arg defined in uno_lts.c
      uses variable EX::arg_val defined in uno_lts.c
   function get_trans(void) in line 682
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable freetrans defined in uno_lts.c
      uses variable Trans::nxt defined in uno_lts.h
      uses function emalloc(size_t) defined in dflow.c
   function killpath(treenode *) in line 695
      protection public
      28 lines of code
      1 parameters
      6 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses enumvalue TN_FUNC_CALL defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_EXPR_LIST defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses enumvalue TN_INT defined in tree.h
      uses function no_return(char *,int,int) defined in uno_lts.c
   function prep_graph(Graphs *) in line 725
      protection public
      61 lines of code
      1 parameters
      11 conditional paths
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::all defined in uno_lts.h
      uses variable State::all defined in uno_lts.h
      uses variable State::visited defined in uno_lts.h
      uses variable State::succ defined in uno_lts.h
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::tok defined in tree.h
      uses function killpath(treenode *) defined in uno_lts.c
      uses variable State::nxt defined in uno_lts.h
      uses variable common::fnm defined in tree.h
      uses variable Graphs::status defined in uno_lts.h
      uses variable common::line defined in tree.h
      uses function toksym(int,int) defined in uno_lts.c
      uses variable debug defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable common::type defined in tree.h
      uses function get_trans(void) defined in uno_lts.c
      uses variable Trans::branch defined in uno_lts.h
      uses function lts_redirect(State *) defined in uno_lts.c
      uses variable Trans::nxt defined in uno_lts.h
      uses variable State::iscond defined in uno_lts.h
      uses variable picky defined in uno_lts.c
      uses function suppress(char *,int) defined in uno_lts.c
      uses enumvalue TN_IF defined in tree.h
   function nut_prepare(State *,State *) in line 788
      protection public
      24 lines of code
      2 parameters
      7 conditional paths
      uses variable State::n defined in uno_lts.h
      uses variable State::visited defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::nuts defined in tree.h
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable State::direct defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses function get_trans(void) defined in uno_lts.c
   function nuts_forward(Graphs *,State *) in line 814
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses variable State::direct defined in uno_lts.h
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses function cfg_unvisit(State *) defined in uno_lts.c
      uses variable Graphs::all defined in uno_lts.h
      uses variable State::visited defined in uno_lts.h
      uses function nut_prepare(State *,State *) defined in uno_lts.c
      uses variable Trans::branch defined in uno_lts.h
   function dumknow(treenode *,Trans *) in line 826
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable Trans::knz defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
   function clone_node(treenode *) in line 838
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function emalloc(size_t) defined in dflow.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::nuts defined in tree.h
      uses variable common::defuse defined in tree.h
   function nut_insertion(Graphs *,State *,Trans *) in line 848
      protection public
      21 lines of code
      3 parameters
      3 conditional paths
      uses variable Trans::knz defined in uno_lts.h
      uses variable debug defined in uno_lts.c
      uses function dumknow(treenode *,Trans *) defined in uno_lts.c
      uses variable State::n defined in uno_lts.h
      uses function get_trans(void) defined in uno_lts.c
      uses variable Trans::branch defined in uno_lts.h
      uses function create_state(Graphs *) defined in uno_lts.c
      uses function clone_node(treenode *) defined in uno_lts.c
      uses variable State::succ defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses function attach_nut(char *,symentry_t *,treenode *) defined in uno_lts.c
      uses variable SymRef::sm defined in uno_lts.h
   function nut_setup(Graphs *) in line 871
      protection public
      12 lines of code
      1 parameters
      5 conditional paths
      uses variable Graphs::all defined in uno_lts.h
      uses variable State::all defined in uno_lts.h
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable Trans::knz defined in uno_lts.h
      uses function nut_insertion(Graphs *,State *,Trans *) defined in uno_lts.c
      uses function nuts_forward(Graphs *,State *) defined in uno_lts.c
   function nut_hunt(FILE *,State *) in line 887
      protection public
      25 lines of code
      2 parameters
      6 conditional paths
      uses variable State::n defined in uno_lts.h
      uses variable State::visited defined in uno_lts.h
      uses variable State::uno_state defined in uno_lts.h
      uses variable Cnt defined in uno_lts.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::nuts defined in tree.h
      uses variable Nuts::nxt defined in tree.h
      uses variable Nuts::nut defined in tree.h
      uses variable State::direct defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
   function fct_details(FILE *,State *) in line 914
      protection public
      36 lines of code
      2 parameters
      9 conditional paths
      uses variable State::n defined in uno_lts.h
      uses variable State::visited defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses enumvalue TN_LABEL defined in tree.h
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable State::uno_state defined in uno_lts.h
      uses variable Cnt defined in uno_lts.c
      uses variable Trans::cond defined in uno_lts.h
   function nut_start(void) in line 952
      protection public
      29 lines of code
      1 parameters
      6 conditional paths
      uses variable graph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable glob_decls defined in uno_lts.c
      uses function cfg_unvisit(State *) defined in uno_lts.c
      uses variable Graphs::all defined in uno_lts.h
      uses variable fd_uno defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable Graphs::status defined in uno_lts.h
      uses variable Graphs::cfg defined in uno_lts.h
      uses variable uno_prop defined in uno_lts.c
      uses variable err_path defined in uno_generic.c
      uses function fct_details(FILE *,State *) defined in uno_lts.c
      uses variable Graphs::hasnuts defined in uno_lts.h
      uses function nut_setup(Graphs *) defined in uno_lts.c
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::nuts defined in tree.h
      uses variable State::direct defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses function nut_hunt(FILE *,State *) defined in uno_lts.c
   function gen_lts(State *) in line 983
      protection public
      51 lines of code
      1 parameters
      10 conditional paths
      uses variable State::n defined in uno_lts.h
      uses variable State::visited defined in uno_lts.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
      uses function name_of_node(tn_t) defined in tree.c
      uses variable common::type defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable State::iscond defined in uno_lts.h
      uses enumvalue TN_IF defined in tree.h
      uses function dump_defuse(DefUse *,FILE *) defined in uno_lts.c
      uses variable common::defuse defined in tree.h
      uses variable State::pvb defined in uno_lts.h
      uses variable ArBound::nxt defined in dflow.h
      uses function explain_bound(char *,ArBound *,treenode *) defined in uno_lts.c
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
   function uno_getref(symentry_t *) in line 1036
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses variable dfs_free defined in uno_lts.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::n defined in uno_lts.h
      uses macro definition ZT defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable SymRef::s_val defined in uno_lts.h
      uses function emalloc(size_t) defined in dflow.c
   function uno_copy_ref(SymRef *) in line 1056
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::n defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable SymRef::s_val defined in uno_lts.h
   function uno_getext(symentry_t *) in line 1066
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable freesymext defined in uno_lts.c
      uses variable SymExt::nxt defined in uno_lts.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable SymExt::sm defined in uno_lts.h
   function uno_getframe(void) in line 1081
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable dfs_frame defined in uno_lts.c
      uses variable DfStack::nxt defined in uno_lts.h
      uses variable DfStack::symrefs defined in uno_lts.h
      uses variable DfStack::globrefs defined in uno_lts.h
      uses function emalloc(size_t) defined in dflow.c
   function uno_report0(FILE *,char *,int,SymRef *) in line 1097
      protection public
      12 lines of code
      4 parameters
      3 conditional paths
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymRef::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
   function uno_report1(FILE *,char *,int,SymExt *) in line 1111
      protection public
      12 lines of code
      4 parameters
      3 conditional paths
      uses variable SymExt::nxt defined in uno_lts.h
      uses variable SymExt::status defined in uno_lts.h
      uses variable SymExt::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymExt::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
   function add_glob(symentry_t *,treenode *,int) in line 1125
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses variable debug defined in uno_lts.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable globs defined in uno_lts.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable st defined in uno_lts.c
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::n defined in uno_lts.h
   function on_glob(symentry_t *) in line 1144
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable globs defined in uno_lts.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
   function mark_guse(symentry_t *,treenode *,int) in line 1154
      protection public
      27 lines of code
      3 parameters
      6 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable st defined in uno_lts.c
      uses function is_enum_const(symentry_t *) defined in symtab.c
      uses variable globuse defined in uno_lts.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::n defined in uno_lts.h
      uses variable show_sharing defined in uno_lts.c
   function uno_complain(SymRef *,char *,char *) in line 1183
      protection public
      13 lines of code
      3 parameters
      4 conditional paths
      uses variable SymRef::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
   function uno_shared(void) in line 1198
      protection public
      23 lines of code
      1 parameters
      8 conditional paths
      uses variable st defined in uno_lts.c
      uses variable globuse defined in uno_lts.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable Verbose defined in dflow.c
      uses variable SymRef::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
   function uno_guse(void) in line 1223
      protection public
      100 lines of code
      1 parameters
      32 conditional paths
      uses variable usecheck defined in uno_lts.c
      uses variable globuse defined in uno_lts.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable st defined in uno_lts.c
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable SymRef::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable file_name defined in uno_lts.c
      uses function uno_complain(SymRef *,char *,char *) defined in uno_lts.c
      uses variable picky defined in uno_lts.c
      uses variable Verbose defined in dflow.c
      uses function on_glob(symentry_t *) defined in uno_lts.c
      uses variable lintlike defined in uno_lts.c
      uses variable graph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable glob_decls defined in uno_lts.c
      uses variable Graphs::cfg defined in uno_lts.h
      uses variable uno_prop defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
   function fct_retval(treenode *) in line 1325
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable treenode::lnode defined in tree.h
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::status defined in uno_lts.h
      uses variable debug defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
   function make_suspect(symentry_t *,treenode *,int) in line 1335
      protection public
      19 lines of code
      3 parameters
      5 conditional paths
      uses variable localonly defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::suspect defined in uno_lts.h
      uses variable SymExt::nxt defined in uno_lts.h
      uses variable SymExt::sm defined in uno_lts.h
      uses variable SymExt::n defined in uno_lts.h
      uses variable SymExt::status defined in uno_lts.h
      uses function uno_getext(symentry_t *) defined in uno_lts.c
   function not_fcall(symentry_t *) in line 1356
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::fcalls defined in uno_lts.h
      uses variable SymExt::nxt defined in uno_lts.h
      uses variable SymExt::sm defined in uno_lts.h
   function add_fcall(symentry_t *,treenode *,int) in line 1366
      protection public
      31 lines of code
      3 parameters
      12 conditional paths
      uses variable debug defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable Graphs::fcalls defined in uno_lts.h
      uses variable SymExt::nxt defined in uno_lts.h
      uses variable SymExt::sm defined in uno_lts.h
      uses macro definition DEF defined in dtags.h
      uses variable SymExt::n defined in uno_lts.h
      uses function uno_getext(symentry_t *) defined in uno_lts.c
      uses variable SymExt::status defined in uno_lts.h
      uses function attach_nut(char *,symentry_t *,treenode *) defined in uno_lts.c
      uses macro definition USE defined in dtags.h
      uses macro definition HIDE defined in dtags.h
   function add_locs(symentry_t *,treenode *) in line 1414
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::locs defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::n defined in uno_lts.h
   function is_local(symentry_t *) in line 1428
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::locs defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
   function could_be_fct(char *) in line 1438
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
      uses variable graph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable debug defined in uno_lts.c
      uses variable Graphs::status defined in uno_lts.h
   function mark_locs(symentry_t *,treenode *,int) in line 1451
      protection public
      43 lines of code
      3 parameters
      10 conditional paths
      uses variable debug defined in uno_lts.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::line defined in tree.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::locs defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses macro definition USEbeforedef defined in dtags.h
      uses variable SymRef::n defined in uno_lts.h
      uses macro definition USE defined in dtags.h
      uses macro definition FCALL defined in dtags.h
      uses variable graph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable Graphs::status defined in uno_lts.h
      uses variable symentry::decl_level defined in symtab.h
      uses variable common::fnm defined in tree.h
      uses function add_fcall(symentry_t *,treenode *,int) defined in uno_lts.c
      uses macro definition HIDE defined in dtags.h
      uses variable Verbose defined in dflow.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable Gst::gnm defined in uno_lts.c
      uses function find_graph(char *) defined in uno_lts.c
      uses variable Gst::nxt defined in uno_lts.c
      uses variable frst defined in uno_lts.c
   function ana_locs(Graphs *) in line 1496
      protection public
      69 lines of code
      1 parameters
      17 conditional paths
      uses variable uno defined in dflow.c
      uses variable Graphs::locs defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses macro definition PARAM defined in dtags.h
      uses macro definition REF0 defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses variable SymRef::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable symentry::fn defined in symtab.h
      uses variable symentry::ln defined in symtab.h
      uses function dflow_mark(FILE *,int) defined in uno_lts.c
      uses macro definition ALIAS defined in dtags.h
      uses macro definition USEbeforedef defined in dtags.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses function simple_zero(symentry_t *,treenode *) defined in uno_lts.c
      uses function simple_nonzero(symentry_t *,treenode *) defined in uno_lts.c
      uses variable debug defined in uno_lts.c
      uses function uno_warn(char *,treenode *,symentry_t *) defined in uno_lts.c
      uses function could_be_fct(char *) defined in uno_lts.c
      uses macro definition IN_SIZEOF defined in dtags.h
      uses macro definition ISTATIC defined in dtags.h
      uses variable lintlike defined in uno_lts.c
      uses variable saw_a_typedef_name defined in uno_lts.c
      uses function buf_recur(treenode *) defined in prnttree.c
      uses variable symentry::node defined in symtab.h
      uses macro definition DEF defined in dtags.h
      uses variable usecheck defined in uno_lts.c
      uses function not_fcall(symentry_t *) defined in uno_lts.c
      uses macro definition USE defined in dtags.h
   function mark_defuse(symentry_t *,treenode *,int) in line 1567
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::def_use defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable st defined in uno_lts.c
      uses macro definition DEREF defined in dtags.h
      uses variable SymRef::n defined in uno_lts.h
      uses function uno_getref(symentry_t *) defined in uno_lts.c
   function add_defs(symentry_t *,treenode *) in line 1617
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function mark_defuse(symentry_t *,treenode *,int) defined in uno_lts.c
      uses macro definition DEF defined in dtags.h
      uses function attach_nut(char *,symentry_t *,treenode *) defined in uno_lts.c
   function add_uses(symentry_t *,treenode *) in line 1624
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function mark_defuse(symentry_t *,treenode *,int) defined in uno_lts.c
      uses macro definition USE defined in dtags.h
      uses function on_glob(symentry_t *) defined in uno_lts.c
      uses function make_suspect(symentry_t *,treenode *,int) defined in uno_lts.c
      uses function attach_nut(char *,symentry_t *,treenode *) defined in uno_lts.c
   function add_derefs(symentry_t *,treenode *) in line 1635
      protection public
      8 lines of code
      2 parameters
      4 conditional paths
      uses function mark_defuse(symentry_t *,treenode *,int) defined in uno_lts.c
      uses macro definition USE defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses function on_glob(symentry_t *) defined in uno_lts.c
      uses function make_suspect(symentry_t *,treenode *,int) defined in uno_lts.c
      uses function attach_nut(char *,symentry_t *,treenode *) defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::def_use defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
   function add_safe(symentry_t *,treenode *) in line 1657
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::n defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable safe_stack defined in uno_lts.c
      uses variable DfStack::symrefs defined in uno_lts.h
   function add_stack(symentry_t *,treenode *) in line 1724
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable dfstack defined in uno_lts.c
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::n defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable DfStack::symrefs defined in uno_lts.h
      uses variable debug defined in uno_lts.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
   function del_stack(symentry_t *,int) in line 1738
      protection public
      19 lines of code
      2 parameters
      6 conditional paths
      uses variable dfstack defined in uno_lts.c
      uses variable DfStack::symrefs defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable dfs_free defined in uno_lts.c
      uses variable debug defined in uno_lts.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
   function on_stack(symentry_t *) in line 1759
      protection public
      9 lines of code
      1 parameters
      4 conditional paths
      uses variable dfstack defined in uno_lts.c
      uses variable DfStack::symrefs defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
   function on_safe(symentry_t *) in line 1770
      protection public
      9 lines of code
      1 parameters
      4 conditional paths
      uses variable safe_stack defined in uno_lts.c
      uses variable DfStack::symrefs defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
   function snap_add(State *,SymRef *) in line 1781
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable State::snapshot defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::n defined in uno_lts.h
   function copy_list(SymRef *) in line 1799
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::n defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable SymRef::s_val defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
   function relevant(treenode *) in line 1814
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses variable treenode::syment defined in tree.h
      uses function on_glob(symentry_t *) defined in uno_lts.c
      uses function on_stack(symentry_t *) defined in uno_lts.c
      uses variable debug defined in uno_lts.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function copy_pc(PathCond *) in line 1833
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses function relevant(treenode *) defined in uno_lts.c
      uses variable PathCond::exp defined in uno_lts.h
      uses variable PathCond::nxt defined in uno_lts.h
      uses function getpathframe(void) defined in uno_lts.c
      uses variable PathCond::val defined in uno_lts.h
   function in_lst(SymRef *,SymRef *) in line 1851
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses macro definition DEF defined in dtags.h
   function same_pc(State *) in line 1862
      protection public
      79 lines of code
      1 parameters
      26 conditional paths
      uses variable pathcond defined in uno_lts.c
      uses variable State::seennone defined in uno_lts.h
      uses variable debug defined in uno_lts.c
      uses variable State::pc defined in uno_lts.h
      uses function copy_pc(PathCond *) defined in uno_lts.c
      uses variable State::ip defined in uno_lts.h
      uses variable PathCond::nxt defined in uno_lts.h
      uses function relevant(treenode *) defined in uno_lts.c
      uses variable PathCond::exp defined in uno_lts.h
      uses variable PathCond::val defined in uno_lts.h
      uses function getpathframe(void) defined in uno_lts.c
      uses function x_stmnt(treenode *) defined in dflow.c
   function covered(State *,SymRef *) in line 1943
      protection public
      72 lines of code
      2 parameters
      18 conditional paths
      uses macro definition DEF defined in dtags.h
      uses variable State::seenempty defined in uno_lts.h
      uses variable State::gi defined in uno_lts.h
      uses function copy_list(SymRef *) defined in uno_lts.c
      uses variable State::il defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses function uno_copy_ref(SymRef *) defined in uno_lts.c
      uses function in_lst(SymRef *,SymRef *) defined in uno_lts.c
      uses variable debug defined in uno_lts.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
   function dfs_push(State *) in line 2017
      protection public
      49 lines of code
      1 parameters
      11 conditional paths
      uses function uno_getframe(void) defined in uno_lts.c
      uses variable debug defined in uno_lts.c
      uses variable dfstack defined in uno_lts.c
      uses variable DfStack::symrefs defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymRef::status defined in uno_lts.h
      uses function snap_add(State *,SymRef *) defined in uno_lts.c
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::n defined in uno_lts.h
      uses function covered(State *,SymRef *) defined in uno_lts.c
      uses variable DfStack::globrefs defined in uno_lts.h
      uses function same_pc(State *) defined in uno_lts.c
      uses function copy_list(SymRef *) defined in uno_lts.c
      uses variable DfStack::nxt defined in uno_lts.h
      uses variable safe_stack defined in uno_lts.c
   function dfs_pop(void) in line 2068
      protection public
      32 lines of code
      1 parameters
      4 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable dfstack defined in uno_lts.c
      uses variable safe_stack defined in uno_lts.c
      uses variable DfStack::symrefs defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable dfs_free defined in uno_lts.c
      uses variable DfStack::globrefs defined in uno_lts.h
      uses variable DfStack::nxt defined in uno_lts.h
      uses variable dfs_frame defined in uno_lts.c
   function global_var(SymList *,treenode *) in line 2102
      protection public
      81 lines of code
      2 parameters
      22 conditional paths
      uses variable SymList::mark defined in dflow.h
      uses macro definition DECL defined in dtags.h
      uses function leftmost(treenode *) defined in tree.c
      uses macro definition DEF defined in dtags.h
      uses macro definition ARRAY_DECL defined in dtags.h
      uses macro definition PARAM defined in dtags.h
      uses macro definition USE defined in dtags.h
      uses macro definition UNO_CONST defined in dtags.h
      uses variable leafnode::hdr defined in tree.h
      uses variable common::tok defined in tree.h
      uses function mark_guse(symentry_t *,treenode *,int) defined in uno_lts.c
      uses variable SymList::sm defined in dflow.h
      uses macro definition IS_PTR defined in dtags.h
      uses function add_glob(symentry_t *,treenode *,int) defined in uno_lts.c
      uses function add_defs(symentry_t *,treenode *) defined in uno_lts.c
      uses function is_constant(char *) defined in uno_lts.c
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses macro definition USEafterdef defined in dtags.h
      uses macro definition REF0 defined in dtags.h
      uses macro definition REF1 defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses function add_gstack(symentry_t *,treenode *,int) defined in uno_lts.c
      uses macro definition ALIAS defined in dtags.h
      uses function on_glob(symentry_t *) defined in uno_lts.c
      uses function on_safe(symentry_t *) defined in uno_lts.c
      uses function add_safe(symentry_t *,treenode *) defined in uno_lts.c
      uses function checkpathcond(symentry_t *,treenode *,int) defined in uno_lts.c
      uses function add_uses(symentry_t *,treenode *) defined in uno_lts.c
      uses macro definition FCALL defined in dtags.h
      uses function add_derefs(symentry_t *,treenode *) defined in uno_lts.c
      uses function x_stmnt(treenode *) defined in dflow.c
   function local_var(SymList *,treenode *) in line 2185
      protection public
      93 lines of code
      2 parameters
      23 conditional paths
      uses variable debug defined in uno_lts.c
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymList::mark defined in dflow.h
      uses macro definition DECL defined in dtags.h
      uses function leftmost(treenode *) defined in tree.c
      uses variable leafnode::hdr defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable symentry::decl_level defined in symtab.h
      uses macro definition FILE_SCOPE defined in symtab.h
      uses function global_var(SymList *,treenode *) defined in uno_lts.c
      uses macro definition USE defined in dtags.h
      uses macro definition USEafterdef defined in dtags.h
      uses function add_locs(symentry_t *,treenode *) defined in uno_lts.c
      uses macro definition PARAM defined in dtags.h
      uses function mark_locs(symentry_t *,treenode *,int) defined in uno_lts.c
      uses macro definition FCALL defined in dtags.h
      uses macro definition IS_PTR defined in dtags.h
      uses macro definition ISTATIC defined in dtags.h
      uses macro definition DEF defined in dtags.h
      uses macro definition ARRAY_DECL defined in dtags.h
      uses function add_stack(symentry_t *,treenode *) defined in uno_lts.c
      uses macro definition IN_SIZEOF defined in dtags.h
      uses macro definition ALIAS defined in dtags.h
      uses function del_stack(symentry_t *,int) defined in uno_lts.c
      uses macro definition REF1 defined in dtags.h
      uses macro definition REF0 defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses variable treenode::hdr defined in tree.h
      uses variable err_path defined in uno_generic.c
      uses function is_local(symentry_t *) defined in uno_lts.c
      uses function has_fctcalls(DefUse *) defined in uno_lts.c
      uses variable common::defuse defined in tree.h
      uses function suppress(char *,int) defined in uno_lts.c
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable Verbose defined in dflow.c
      uses function dflow_mark(FILE *,int) defined in uno_lts.c
      uses function dump_defuse(DefUse *,FILE *) defined in uno_lts.c
      uses function on_stack(symentry_t *) defined in uno_lts.c
      uses macro definition USEbeforedef defined in dtags.h
      uses macro definition INCOND defined in dtags.h
      uses macro definition UNO_CONST defined in dtags.h
   function ana_work(DefUse *,SymList *,treenode *) in line 2280
      protection public
      53 lines of code
      3 parameters
      13 conditional paths
      uses variable debug defined in uno_lts.c
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses function dump_defuse(DefUse *,FILE *) defined in uno_lts.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable SymList::mark defined in dflow.h
      uses function x_stmnt(treenode *) defined in dflow.c
      uses function uno_ignore(symentry_t *) defined in uno_lts.c
      uses macro definition REF2 defined in dtags.h
      uses variable uno defined in dflow.c
      uses function uno_bounds(SymList *,ArList *,treenode *) defined in uno_bounds.c
      uses variable DefUse::aio defined in dflow.h
      uses macro definition FCALL defined in dtags.h
      uses function add_fcall(symentry_t *,treenode *,int) defined in uno_lts.c
      uses macro definition USE defined in dtags.h
      uses macro definition DEF defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses variable Verbose defined in dflow.c
      uses variable curgraph defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses function emalloc(size_t) defined in dflow.c
      uses variable Gst::gnm defined in uno_lts.c
      uses variable Gst::nxt defined in uno_lts.c
      uses variable grst defined in uno_lts.c
      uses variable symentry::decl_level defined in symtab.h
      uses macro definition FUNCTION_SCOPE defined in symtab.h
      uses function global_var(SymList *,treenode *) defined in uno_lts.c
      uses function local_var(SymList *,treenode *) defined in uno_lts.c
   function ana_reversed(DefUse *,SymList *,treenode *) in line 2335
      protection public
      6 lines of code
      3 parameters
      2 conditional paths
      uses variable SymList::nxt defined in dflow.h
      uses function ana_work(DefUse *,SymList *,treenode *) defined in uno_lts.c
   function ana_defuse(treenode *) in line 2343
      protection public
      35 lines of code
      1 parameters
      9 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable lintlike defined in uno_lts.c
      uses function suppress(char *,int) defined in uno_lts.c
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function has_node_type(treenode *,int) defined in uno_lts.c
      uses enumvalue TN_ASSIGN defined in tree.h
      uses function has_node_comp_ops(treenode *) defined in uno_lts.c
      uses function v_reported(treenode *) defined in uno_lts.c
      uses function x_stmnt(treenode *) defined in dflow.c
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::mark defined in dflow.h
      uses macro definition DEF defined in dtags.h
      uses macro definition UNO_CONST defined in dtags.h
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable common::defuse defined in tree.h
      uses variable debug defined in uno_lts.c
      uses function dump_defuse(DefUse *,FILE *) defined in uno_lts.c
      uses function ana_reversed(DefUse *,SymList *,treenode *) defined in uno_lts.c
   function newpathcond(treenode *,treenode *) in line 2393
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable debug defined in uno_lts.c
      uses function x_stmnt(treenode *) defined in dflow.c
      uses function getpathframe(void) defined in uno_lts.c
      uses variable PathCond::exp defined in uno_lts.h
      uses variable PathCond::val defined in uno_lts.h
      uses variable PathCond::nxt defined in uno_lts.h
      uses variable pathcond defined in uno_lts.c
   function prevpathcond(void) in line 2406
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable pathcond defined in uno_lts.c
      uses variable PathCond::nxt defined in uno_lts.h
      uses variable pathfree defined in uno_lts.c
   function has_symbol(symentry_t *,treenode *) in line 2416
      protection public
      12 lines of code
      2 parameters
      4 conditional paths
      uses variable treenode::syment defined in tree.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::which defined in tree.h
      uses enumvalue LEAF_T defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function infeasible(treenode *,treenode *) in line 2430
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_INT defined in tree.h
      uses variable common::tok defined in tree.h
   function is_zero_val(treenode *) in line 2450
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_CAST defined in tree.h
      uses variable treenode::rnode defined in tree.h
      uses enumvalue TN_INT defined in tree.h
   function zero_test(treenode *) in line 2462
      protection public
      39 lines of code
      1 parameters
      9 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IDENT defined in tree.h
      uses enumvalue TN_EXPR defined in tree.h
      uses variable common::tok defined in tree.h
      uses variable treenode::lnode defined in tree.h
      uses macro definition ZT defined in uno_lts.h
      uses variable treenode::rnode defined in tree.h
      uses function is_zero_val(treenode *) defined in uno_lts.c
   function simple_form(symentry_t *,PathCond *) in line 2601
      protection public
      15 lines of code
      2 parameters
      5 conditional paths
      uses variable PathCond::exp defined in uno_lts.h
      uses variable PathCond::val defined in uno_lts.h
      uses variable debug defined in uno_lts.c
      uses function simple_nonzero(symentry_t *,treenode *) defined in uno_lts.c
      uses function simple_zero(symentry_t *,treenode *) defined in uno_lts.c
   function setknownzeros(treenode *,Trans *,PathCond *) in line 2717
      protection public
      23 lines of code
      3 parameters
      7 conditional paths
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_IF defined in tree.h
      uses variable common::defuse defined in tree.h
      uses variable DefUse::other defined in dflow.h
      uses variable SymList::nxt defined in dflow.h
      uses variable SymList::sm defined in dflow.h
      uses variable symentry::decl_level defined in symtab.h
      uses macro definition FUNCTION_SCOPE defined in symtab.h
      uses variable SymList::mark defined in dflow.h
      uses macro definition USE defined in dtags.h
      uses function simple_form(symentry_t *,PathCond *) defined in uno_lts.c
      uses function uno_getref(symentry_t *) defined in uno_lts.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable Trans::knz defined in uno_lts.h
   function uno_statistics(void) in line 2842
      protection public
      29 lines of code
      1 parameters
      9 conditional paths
      uses variable Verbose defined in dflow.c
      uses variable lintlike defined in uno_lts.c
      uses variable debug defined in uno_lts.c
      uses function bound_stats(void) defined in uno_bounds.c
      uses variable uno_prop defined in uno_lts.c
      uses function gen_stats(void) defined in uno_lts.c
      uses function find_graph(char *) defined in uno_lts.c
      uses variable graph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable glob_decls defined in uno_lts.c
      uses variable localonly defined in uno_lts.c
      uses variable globs defined in uno_lts.c
      uses variable SymRef::nxt defined in uno_lts.h
   function uno_indirect_calls(FILE *) in line 2873
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable grst defined in uno_lts.c
      uses variable Gst::nxt defined in uno_lts.c
      uses variable frst defined in uno_lts.c
      uses variable Gst::gnm defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable Graphs::status defined in uno_lts.h
   function uno_snapshot(Graphs *) in line 2892
      protection public
      47 lines of code
      1 parameters
      6 conditional paths
      uses variable localonly defined in uno_lts.c
      uses variable fd_uno defined in uno_lts.c
      uses variable Graphs::scope defined in uno_lts.h
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable Graphs::cfg defined in uno_lts.h
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses variable Graphs::status defined in uno_lts.h
      uses variable debug defined in uno_lts.c
      uses variable Graphs::def_use defined in uno_lts.h
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymRef::status defined in uno_lts.h
      uses function uno_report0(FILE *,char *,int,SymRef *) defined in uno_lts.c
      uses macro definition DEF defined in dtags.h
      uses macro definition USE defined in dtags.h
      uses macro definition DEREF defined in dtags.h
      uses macro definition UNO_CONST defined in dtags.h
      uses function uno_report1(FILE *,char *,int,SymExt *) defined in uno_lts.c
      uses variable Graphs::suspect defined in uno_lts.h
      uses variable Graphs::fcalls defined in uno_lts.h
      uses macro definition HIDE defined in dtags.h
   function gen_graph(Graphs *) in line 2941
      protection public
      27 lines of code
      1 parameters
      8 conditional paths
      uses variable Graphs::visited defined in uno_lts.h
      uses variable curgraph defined in uno_lts.c
      uses function dfs_uno(State *) defined in uno_lts.c
      uses variable Graphs::cfg defined in uno_lts.h
      uses variable uno_prop defined in uno_lts.c
      uses function ana_locs(Graphs *) defined in uno_lts.c
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable dfstack defined in uno_lts.c
      uses variable uno defined in dflow.c
      uses variable localonly defined in uno_lts.c
      uses function uno_snapshot(Graphs *) defined in uno_lts.c
      uses function cfg_unvisit(State *) defined in uno_lts.c
      uses variable Graphs::all defined in uno_lts.h
      uses variable debug defined in uno_lts.c
      uses function dfs_bound(State *,treenode *,treenode *,State *) defined in uno_lts.c
      uses macro definition ZT defined in uno_lts.h
      uses macro definition ZS defined in uno_lts.h
      uses function dfs_generic(State *) defined in uno_lts.c
   function dfs_reset(void) in line 2970
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable graph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable Graphs::visited defined in uno_lts.h
   function dup_graph(Graphs *,treenode *) in line 2986
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable Graphs::scope defined in uno_lts.h
      uses variable is_static_fct defined in uno_lts.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable Graphs::cfg defined in uno_lts.h
      uses variable State::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
   function uno_local(void) in line 3063
      protection public
      128 lines of code
      1 parameters
      47 conditional paths
      uses variable uno defined in dflow.c
      uses variable localonly defined in uno_lts.c
      uses variable cur_file defined in uno_lts.c
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable working_dir defined in uno_lts.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable cur_dir defined in uno_lts.c
      uses variable fd_uno defined in uno_lts.c
      uses variable dfstack defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses variable glob_decls defined in uno_lts.c
      uses variable debug defined in uno_lts.c
      uses function dfs_uno(State *) defined in uno_lts.c
      uses variable Graphs::cfg defined in uno_lts.h
      uses function dfs_reset(void) defined in uno_lts.c
      uses variable graph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable property defined in uno_lts.c
      uses variable uno_prop defined in uno_lts.c
      uses function gen_graph(Graphs *) defined in uno_lts.c
      uses function uno_report0(FILE *,char *,int,SymRef *) defined in uno_lts.c
      uses macro definition DEF defined in dtags.h
      uses variable Graphs::def_use defined in uno_lts.h
      uses macro definition USE defined in dtags.h
      uses variable globuse defined in uno_lts.c
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable SymRef::status defined in uno_lts.h
      uses variable st defined in uno_lts.c
      uses variable SymRef::sm defined in uno_lts.h
      uses variable symentry::nme defined in symtab.h
      uses variable string_str::str defined in nmetab.h
      uses variable SymRef::n defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable common::line defined in tree.h
      uses function struct_fields(FILE *) defined in uno_lts.c
      uses function uno_indirect_calls(FILE *) defined in uno_lts.c
   function cyclo_dfs(State *) in line 3195
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses variable State::n defined in uno_lts.h
      uses variable State::visited defined in uno_lts.h
      uses variable cnodes defined in uno_lts.c
      uses variable State::succ defined in uno_lts.h
      uses variable Trans::branch defined in uno_lts.h
      uses variable Trans::nxt defined in uno_lts.h
      uses variable cedges defined in uno_lts.c
      uses variable State::iscond defined in uno_lts.h
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_JUMP defined in tree.h
   function cyclomatic(void) in line 3220
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable graph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable cnodes defined in uno_lts.c
      uses variable cedges defined in uno_lts.c
      uses function cfg_unvisit(State *) defined in uno_lts.c
      uses variable Graphs::all defined in uno_lts.h
      uses function cyclo_dfs(State *) defined in uno_lts.c
      uses variable Graphs::cfg defined in uno_lts.h
   function gen_dot(void) in line 3237
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable graph defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable want defined in dflow.c
      uses variable Graphs::fctnm defined in uno_lts.h
      uses variable Graphs::cfg defined in uno_lts.h
      uses variable State::n defined in uno_lts.h
      uses function cfg_unvisit(State *) defined in uno_lts.c
      uses variable Graphs::all defined in uno_lts.h
      uses function gen_lts(State *) defined in uno_lts.c
   function add_seq(State *,treenode *) in line 3257
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses function create_state(Graphs *) defined in uno_lts.c
      uses variable curgraph defined in uno_lts.c
      uses variable State::n defined in uno_lts.h
      uses variable State::nxt defined in uno_lts.h
   function find_func_decl(treenode *) in line 3517
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function uno_assert(int,char *) defined in uno_lts.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::type defined in tree.h
      uses enumvalue TN_FUNC_DECL defined in tree.h
      uses variable treenode::rnode defined in tree.h
   function rel_symext(SymExt *) in line 3857
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable SymExt::nxt defined in uno_lts.h
      uses variable freesymext defined in uno_lts.c
   function rel_symref(SymRef *) in line 3868
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable SymRef::nxt defined in uno_lts.h
      uses variable freesymref defined in uno_lts.c
   function rel_trans(Trans *) in line 3879
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable Trans::nxt defined in uno_lts.h
      uses variable Trans::knz defined in uno_lts.h
      uses function rel_symref(SymRef *) defined in uno_lts.c
      uses variable freetrans defined in uno_lts.c
   function rel_state(State *) in line 3892
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable State::all defined in uno_lts.h
      uses variable State::gi defined in uno_lts.h
      uses function rel_symref(SymRef *) defined in uno_lts.c
      uses variable State::il defined in uno_lts.h
      uses variable State::snapshot defined in uno_lts.h
      uses variable State::succ defined in uno_lts.h
      uses function rel_trans(Trans *) defined in uno_lts.c
      uses variable State::direct defined in uno_lts.h
      uses variable freestate defined in uno_lts.c
   function rel_graph(Graphs *) in line 3909
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable Graphs::nxt defined in uno_lts.h
      uses variable Graphs::all defined in uno_lts.h
      uses function rel_state(State *) defined in uno_lts.c
      uses variable Graphs::fcalls defined in uno_lts.h
      uses function rel_symext(SymExt *) defined in uno_lts.c
      uses variable Graphs::suspect defined in uno_lts.h
      uses variable Graphs::def_use defined in uno_lts.h
      uses function rel_symref(SymRef *) defined in uno_lts.c
      uses variable Graphs::locs defined in uno_lts.h
      uses variable freegraph defined in uno_lts.c
   function lts_start(treenode *) in line 3926
      protection public
      58 lines of code
      1 parameters
      7 conditional paths
      uses variable stck defined in uno_lts.c
      uses variable graph defined in uno_lts.c
      uses function rel_graph(Graphs *) defined in uno_lts.c
      uses variable glob_decls defined in uno_lts.c
      uses variable globs defined in uno_lts.c
      uses function rev_release(SymRef *) defined in uno_lts.c
      uses variable globuse defined in uno_lts.c
      uses variable lnodes defined in uno_lts.c
      uses function rel_label(LNode *) defined in uno_lts.c
      uses variable depth defined in uno_lts.c
      uses variable uno_prop defined in uno_lts.c
      uses function bound_reset(void) defined in uno_lts.c
      uses function gen_reset(void) defined in uno_lts.c
      uses variable fallthru defined in uno_lts.c
      uses function rel_sframe(Stack *) defined in uno_lts.c
      uses function emalloc(size_t) defined in dflow.c
      uses variable treenode::hdr defined in tree.h
      uses variable common::fnm defined in tree.h
      uses variable file_name defined in uno_lts.c
      uses variable common::line defined in tree.h
      uses function new_graph(treenode *,char *) defined in uno_lts.c
      uses variable Graphs::cfg defined in uno_lts.h
      uses variable curgraph defined in uno_lts.c
      uses function lts_tree(State *,treenode *) defined in uno_lts.c
      uses variable Graphs::nxt defined in uno_lts.h
      uses function prep_graph(Graphs *) defined in uno_lts.c
      uses variable uno defined in dflow.c
      uses function gen_dot(void) defined in uno_lts.c
      uses variable cyclo defined in uno_lts.c
      uses function cyclomatic(void) defined in uno_lts.c
      uses function uno_local(void) defined in uno_lts.c
      uses variable show_sharing defined in uno_lts.c
      uses function uno_shared(void) defined in uno_lts.c
      uses function uno_guse(void) defined in uno_lts.c
      uses function show_fall(void) defined in uno_lts.c
      uses function uno_statistics(void) defined in uno_lts.c
      uses variable localonly defined in uno_lts.c
      uses function nut_start(void) defined in uno_lts.c
      uses variable fd_uno defined in uno_lts.c
   variable Gst::gnm in line 53
      protection public
   variable Gst::nxt in line 54
      protection public
   variable ST::line in line 126
      protection public
   variable ST::name in line 125
      protection public
   variable ST::nxt in line 128
      protection public
   variable ST::reported in line 127
      protection public
   variable EX::arg_val in line 641
      protection public
   variable EX::f in line 639
      protection public
   variable EX::has_arg in line 640
      protection public
   variable EX::nxt in line 642
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno_lts.h
module uno_lts.h
   macro definition ZT in line 136
      protection public
   macro definition ZS in line 137
      protection public
   typedef Trans in line 642
      protection public
   typedef State in line 642
      protection public
   typedef Graphs in line 642
      protection public
   typedef LNode in line 642
      protection public
   typedef Stack in line 642
      protection public
   typedef SwStack in line 642
      protection public
   typedef DfStack in line 642
      protection public
   typedef SymRef in line 642
      protection public
   typedef SymExt in line 642
      protection public
   typedef PathCond in line 642
      protection public
   variable want in line 123
      protection public
   variable file_name in line 123
      protection public
   variable uno in line 125
      protection public
   variable Verbose in line 125
      protection public
   function x_stmnt(treenode *) in line 124
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function buf_recur(treenode *) defined in prnttree.c
   function mk_ident(void) in line 127
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mk_bool(char *) in line 128
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mk_deflt(void) in line 129
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mk_int(int) in line 130
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function uno_bounds(SymList *,ArList *,treenode *) in line 131
      protection public
      6 lines of code
      3 parameters
      2 conditional paths
      uses variable ArList::nxt defined in dflow.h
      uses variable ArList::tn defined in dflow.h
   function bound_stats(void) in line 132
      protection public
      40 lines of code
      1 parameters
      13 conditional paths
      uses variable Verbose defined in uno_bounds.c
      uses variable size_ok defined in uno_bounds.c
      uses variable size_nok defined in uno_bounds.c
   function emalloc(size_t) in line 133
      protection public
      28 lines of code
      1 parameters
      3 conditional paths
      uses macro definition ALGN defined in symtab.c
      uses variable progname defined in symtab.c
   function efree(void *) in line 134
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   variable Trans::branch in line 25
      protection public
   variable Trans::cond in line 23
      protection public
   variable Trans::knz in line 24
      protection public
   variable Trans::nxt in line 26
      protection public
   variable Stack::fc in line 98
      protection public
   variable Stack::fr in line 99
      protection public
   variable Stack::knz in line 96
      protection public
   variable Stack::move in line 90
      protection public
   variable Stack::n in line 30
      protection public
   variable Stack::n in line 97
      protection public
   variable Stack::nxt in line 100
      protection public
   variable Stack::sels in line 95
      protection public
   variable Stack::status in line 31
      protection public
   variable Stack::uno_state in line 94
      protection public
   variable SwStack::nxt in line 37
      protection public
   variable SwStack::s in line 36
      protection public
   variable SymRef::n in line 42
      protection public
   variable SymRef::nxt in line 45
      protection public
   variable SymRef::s_val in line 44
      protection public
   variable SymRef::sm in line 41
      protection public
   variable SymRef::status in line 43
      protection public
   variable SymExt::n in line 50
      protection public
   variable SymExt::nxt in line 52
      protection public
   variable SymExt::sm in line 49
      protection public
   variable SymExt::status in line 51
      protection public
   variable DfStack::globrefs in line 57
      protection public
   variable DfStack::nxt in line 59
      protection public
   variable DfStack::state in line 58
      protection public
   variable DfStack::symrefs in line 56
      protection public
   variable State::all in line 86
      protection public
   variable State::direct in line 83
      protection public
   variable State::gi in line 67
      protection public
   variable State::il in line 68
      protection public
   variable State::ip in line 71
      protection public
   variable State::iscond in line 79
      protection public
   variable State::n in line 63
      protection public
   variable State::nxt in line 84
      protection public
   variable State::pc in line 70
      protection public
   variable State::pvb in line 76
      protection public
   variable State::seenempty in line 73
      protection public
   variable State::seennone in line 74
      protection public
   variable State::snapshot in line 65
      protection public
   variable State::succ in line 82
      protection public
   variable State::uno_state in line 77
      protection public
   variable State::visited in line 80
      protection public
   variable Graphs::all in line 92
      protection public
   variable Graphs::cfg in line 91
      protection public
   variable Graphs::def_use in line 94
      protection public
   variable Graphs::fcalls in line 97
      protection public
   variable Graphs::fctnm in line 90
      protection public
   variable Graphs::hasnuts in line 106
      protection public
   variable Graphs::locs in line 95
      protection public
   variable Graphs::nxt in line 107
      protection public
   variable Graphs::scope in line 103
      protection public
   variable Graphs::status in line 105
      protection public
   variable Graphs::suspect in line 98
      protection public
   variable Graphs::visited in line 104
      protection public
   variable LNode::f in line 112
      protection public
   variable LNode::n in line 113
      protection public
   variable LNode::nxt in line 114
      protection public
   variable LNode::s in line 111
      protection public
   variable PathCond::exp in line 118
      protection public
   variable PathCond::nxt in line 120
      protection public
   variable PathCond::val in line 119
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/uno/uno/src/uno_version.h
module uno_version.h
   variable VERSION in line 3
      protection public
