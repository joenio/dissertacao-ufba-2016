@INPROCEEDINGS{7335422,
  author={G. Szőke and C. Nagy and L. J. Fülöp and R. Ferenc and T. Gyimóthy},
  booktitle={2015 IEEE 15th International Working Conference on Source Code Analysis and Manipulation (SCAM)},
  title={FaultBuster: An automatic code smell refactoring toolset},
  year={2015},
  pages={253-258},
  abstract={One solution to prevent the quality erosion of a software product is to maintain its quality by continuous refac-toring. However, refactoring is not always easy. Developers need to identify the piece of code that should be improved and decide how to rewrite it. Furthermore, refactoring can also be risky; that is, the modified code needs to be re-tested, so developers can see if they broke something. Many IDEs offer a range of refactorings to support so-called automatic refactoring, but tools which are really able to automatically refactor code smells are still under research. In this paper we introduce FaultBuster, a refactoring toolset which is able to support automatic refactoring: identifying the problematic code parts via static code analysis, running automatic algorithms to fix selected code smells, and executing integrated testing tools. In the heart of the toolset lies a refactoring framework to control the analysis and the execution of automatic algorithms. FaultBuster provides IDE plugins to interact with developers via popular IDEs (Eclipse, Netbeans and IntelliJ IDEA). All the tools were developed and tested in a 2-year project with 6 software development companies where thousands of code smells were identified and fixed in 5 systems having altogether over 5 million lines of code.},
  keywords={DP industry;program diagnostics;program testing;software maintenance;Eclipse;Faultbuster;IDE plugins;IntelliJ IDEA;Netbeans;automatic code smell refactoring toolset;automatic refactoring;continuous refactoring;integrated testing tools;software development companies;static code analysis;time 2 year;Algorithm design and analysis;Companies;Control systems;Encoding;Java;Software;Testing;Automatic refactoring;Columbus;SourceMeter;antipatterns;code smells;coding issues},
  doi={10.1109/SCAM.2015.7335422},
  month={Sept},
  review={artigo selecionado na revisão estruturada},
  really_refers_to_software={yes},
  contribution_weight={1},
  step={structured-review},
  conference={SCAM},
}
