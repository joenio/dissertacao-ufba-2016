@INPROCEEDINGS{6909321,
  author={K. P. Dileep and A. Raghavendra and M. Suman and G. Devesh and S. V. Srikanth},
  booktitle={International Conference on Recent Advances and Innovations in Engineering (ICRAIE-2014)},
  title={Rules based automatic Linux Device Driver Verifier And Code Assistance},
  year={2014},
  pages={1-6},
  abstract={Development of Linux Device Drivers involves lot of complex data structures and functions. The developer should carefully apply these to the drivers otherwise code will misbehave in the Linux Kernel and degrades the performance of the system. Majorly Linux device driver code requires stability so as to provide correctness and reliability. To achieve this, the need of the hour is a proper and efficient verification tools. Linux driver code verification is a vast application area consisting of different verification methods on proper functional placement, safety and security usages. In this paper we are proposing a tool embedded into Eclipse IDE as a plug-in and this tool works on the principle of “Rules based Linux Device Driver Automatic Verifier and Code Assistance” for the bugs fixation. Majorly the rules are based on Kernel API violations, proper allocations & deallocations, synchronization mechanisms & usage, proper return type usage and interrupt context issues.},
  keywords={Linux;application program interfaces;data structures;device drivers;program verification;security of data;software reliability;Eclipse IDE;bugs fixation;code assistance;complex data structures;functional placement;kernel API violations;rule based automatic Linux device driver verifier;safety;synchronization mechanisms;Computer bugs;Indexes;Kernel;Linux;Monitoring;Navigation;Reliability;Database;Device Drivers;Eclipse;Linux Kernel;Verification tools},
  doi={10.1109/ICRAIE.2014.6909321},
  month={May},
}

@INPROCEEDINGS{4681598,
  author={N. Blanc and D. Kroening},
  booktitle={2008 IEEE/ACM International Conference on Computer-Aided Design},
  title={Race analysis for SystemC using model checking},
  year={2008},
  pages={356-363},
  abstract={SystemC is a system-level modeling language that offers a wide range of features to describe concurrent systems at different levels of abstraction. The SystemC standard permits simulators to implement a deterministic scheduling policy, which often hides concurrency-related design flaws. We present a novel compiler for SystemC that integrates a formal and scalable race analysis. This analysis combines both classic static analysis and model checking techniques. The outcome of the analysis is not only valuable to diagnose the effect of race conditions, but can also be used to improve simulation performance dramatically. Our compiler produces a simulator that uses the race analysis information at runtime to perform partial-order reduction, thereby eliminating context switches that do not affect the result of the simulation. Experimental results show simulation speedups of one order of magnitude and better.},
  keywords={C language;object-oriented languages;program verification;scheduling;SystemC;deterministic scheduling policy;formal race analysis;model checking;scalable race analysis;system-level modeling language;Analytical models;Computational modeling;Concurrent computing;Context modeling;Interleaved codes;Job shop scheduling;Performance analysis;Processor scheduling;Runtime;Yarn},
  doi={10.1109/ICCAD.2008.4681598},
  ISSN={1092-3152},
  month={Nov},
}
