@INPROCEEDINGS{5402900,
  author={Z. Wei and R. Dong and X. Luo and F. Liu},
  booktitle={2009 Third International Conference on Genetic and Evolutionary Computing},
  title={Model Checking Airline Tickets Reservation System Based on BPEL},
  year={2009},
  pages={248-251},
  abstract={BPEL is a business flow language which describes the composition of web services. Since business flow is very complex, the method of formalized analysis can help ensure the accuracy of composition of web services. For the Airline Tickets Reservation System described by BPEL, we provide a formalized analysis process with FSM in this paper, and finally translate it into programs described by Promela. The safety property and behavior property are verified with model checking tool SPIN, the results of experiment show no flaw in this system.},
  keywords={Web services;formal verification;reservation computer systems;BPEL;FSM;Promela;Web services;airline tickets reservation system;business flow language;model checking;Automata;Formal verification;Genetics;Petri nets;Protocols;Safety;Software design;Software systems;Web services;Writing},
  doi={10.1109/WGEC.2009.86},
  month={Oct},
}

@INPROCEEDINGS{4233695,
  author={Y. Zheng and P. Krause},
  booktitle={2007 Inaugural IEEE-IES Digital EcoSystems and Technologies Conference},
  title={Automata Semantics and Analysis of BPEL},
  year={2007},
  pages={147-152},
  abstract={Web service is an emerging paradigm for distributed computing. In order to verify web services rigorously, it is important to provide a formal semantics for flow-based web service languages such as BPEL. A suitable formal model should cover most features of BPEL. The existing formal models either abstract from data, cover a simple subset of BPEL, or omit the interactions between BPEL activities. This paper presents Web Service Automata, an extension of Mealy machines, to fulfil the formal model requirements of the web service domain. Secondly, the paper analyses the control handling and data handling of BPEL, so that these can be verified in a clear manner.},
  keywords={Web services;data handling;finite state machines;formal languages;formal verification;BPEL analysis;Mealy machines;Web service;automata semantics;business process execution language;control handling;data handling;distributed computing;finite state machine;formal model;formal semantics;Automata;Automatic control;Computer architecture;Data analysis;Data handling;Distributed computing;Ecosystems;Message passing;Testing;Web services;BPEL;Web service;design model analysis;finite state machine},
  doi={10.1109/DEST.2007.371961},
  ISSN={2150-4938},
  month={Feb},
}

@INPROCEEDINGS{989834,
  author={T. Bultan and T. Yavuz-Kahveci},
  booktitle={Proceedings 16th Annual International Conference on Automated Software Engineering (ASE 2001)},
  title={Action Language Verifier},
  year={2001},
  pages={382-386},
  abstract={Action Language is a specification language for reactive software systems. We present the Action Language Verifier which consists of: 1) a compiler that converts Action Language specifications to composite symbolic representations, and 2) an infinite-state symbolic model checker which verifies (or falsifies) CTL properties of Action Language specifications. Our symbolic manipulator (Composite Symbolic Library) combines a BDD manipulator (for boolean and enumerated types) and a Presburger arithmetic manipulator (for integers) to handle multiple variable types. Since we allow unbounded integer variables, model checking queries become undecidable. We present several heuristics used by the Action Language Verifier to achieve convergence.},
  keywords={binary decision diagrams;compiler generators;decidability;formal specification;program verification;specification languages;Action Language Verifier;Action Language specifications;BDD manipulator;CTL properties;Composite Symbolic Library;Presburger arithmetic manipulator;boolean types;compiler;composite symbolic representations;decidability;enumerated types;heuristics;infinite-state symbolic model checker;model checking queries;multiple variable types;reactive software systems;specification language;symbolic manipulator;unbounded integer variables;Arithmetic;Binary decision diagrams;Computer science;Formal specifications;Object oriented modeling;Software libraries;Software systems;Specification languages;Switches;Thyristors},
  doi={10.1109/ASE.2001.989834},
  ISSN={1938-4300},
  month={Nov},
}

@INPROCEEDINGS{1420984,
  author={H. Huang and W. T. Tsai and R. Paul},
  booktitle={Eighth IEEE International Symposium on Object-Oriented Real-Time Distributed Computing (ISORC'05)},
  title={Automated model checking and testing for composite Web services},
  year={2005},
  pages={300-307},
  abstract={Web services form a new distributed computing paradigm. Collaborative verification and validation are important when Web services from different vendors are integrated together to carry out a coherent task. This paper presents a new approach to verify Web services by model checking the process model of OWL-S (Web ontology language for Web services) and to validate them by the test cases automatically generated in the model checking process. We extend the BLAST, a model checker that handles control flow model naturally, to handle the concurrency in OWL-S. We also propose enhancement in OWL-S and PDDL (Planning Domain Definition Language) to facilitate the automated test case generation. Experiments on realistic examples are provided to illustrate the process.},
  keywords={Internet;automatic programming;data flow analysis;formal verification;ontologies (artificial intelligence);program testing;specification languages;BLAST model checker;OWL-S;PDDL;Planning Domain Definition Language;Web ontology language;automated model checking;automated test case generation;collaborative verification;composite Web service;control flow model;distributed computing;testing;validation;Automatic control;Automatic testing;Concurrent computing;Distributed computing;Logic;Object oriented modeling;Specification languages;Switches;Web services;XML},
  doi={10.1109/ISORC.2005.16},
  ISSN={1555-0885},
  month={May},
}

@ARTICLE{708566,
  author={W. Chan and R. J. Anderson and P. Beame and S. Burns and F. Modugno and D. Notkin and J. D. Reese},
  journal={IEEE Transactions on Software Engineering},
  title={Model checking large software specifications},
  year={1998},
  volume={24},
  number={7},
  pages={498-520},
  abstract={In this paper, we present our experiences in using symbolic model checking to analyze a specification of a software system for aircraft collision avoidance. Symbolic model checking has been highly successful when applied to hardware systems. We are interested in whether model checking can be effectively applied to large software specifications. To investigate this, we translated a portion of the state-based system requirements specification of Traffic Alert and Collision Avoidance System II (TCAS II) into input to a symbolic model checker (SMV). We successfully used the symbolic model checker to analyze a number of properties of the system. We report on our experiences, describing our approach to translating the specification to the SMV language, explaining our methods for achieving acceptable performance, and giving a summary of the properties analyzed. Based on our experiences, we discuss the possibility of using model checking to aid specification development by iteratively applying the technique early in the development cycle. We consider the paper to be a data point for optimism about the potential for more widespread application of model checking to software systems},
  keywords={air traffic control;formal specification;formal verification;safety-critical software;Traffic Alert and Collision Avoidance System II;aircraft collision avoidance;large software specifications;specification development;state-based system requirements specification;symbolic model checking;Aerospace electronics;Air traffic control;Aircraft;Boolean functions;Collision avoidance;Data structures;Hardware;Road accidents;Software systems;Traffic control},
  doi={10.1109/32.708566},
  ISSN={0098-5589},
  month={Jul},
}

@INPROCEEDINGS{1695895,
  author={T. Bultan and C. Heitmeyer},
  booktitle={Fourth ACM and IEEE International Conference on Formal Methods and Models for Co-Design, 2006. MEMOCODE '06. Proceedings.},
  title={Analyzing tabular requirements specifications using infinite state model checking},
  year={2006},
  pages={7-16},
  abstract={This paper investigates the application of infinite state model checking to the formal analysis of requirements specifications in the SCR (software cost reduction) tabular notation using action language verifier (ALV). After reviewing the SCR method and tools and the action language, experimental results are presented of formally analyzing two SCR specifications using ALV, The application of ALV to verify or falsify (by generating counterexamples) the state and transition invariants of SCR specifications and to check disjointness and coverage properties is described. ALV is compared with the verification techniques that have been integrated into the SCR toolset},
  keywords={cost reduction;formal specification;program verification;software cost estimation;action language verifier;coverage property;disjointness property;formal analysis;infinite state model checking;requirements specifications;software cost reduction;tabular requirements specification;Air traffic control;Application software;Control systems;Costs;Creep;Formal languages;Laboratories;Power generation;Software safety;Thyristors},
  doi={10.1109/MEMCOD.2006.1695895},
  month={July},
}

@inproceedings{Fu:2004:AIB:988672.988756,
  author = {Fu, Xiang and Bultan, Tevfik and Su, Jianwen},
  title = {Analysis of Interacting BPEL Web Services},
  booktitle = {Proceedings of the 13th International Conference on World Wide Web},
  series = {WWW '04},
  year = {2004},
  isbn = {1-58113-844-X},
  location = {New York, NY, USA},
  pages = {621--630},
  numpages = {10},
  url = {http://doi.acm.org/10.1145/988672.988756},
  doi = {10.1145/988672.988756},
  acmid = {988756},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {BPEL, asynchronous communication, conversation, model checking, spin, synchronizability, web service, xpath},
}

@inproceedings{Hall:2007:RMV:1321631.1321714,
  author = {Hall, Robert J.},
  title = {Rteq: Modeling and Validating Infinite-state Hard-real-time Systems},
  booktitle = {Proceedings of the Twenty-second IEEE/ACM International Conference on Automated Software Engineering},
  series = {ASE '07},
  year = {2007},
  isbn = {978-1-59593-882-4},
  location = {Atlanta, Georgia, USA},
  pages = {481--484},
  numpages = {4},
  url = {http://doi.acm.org/10.1145/1321631.1321714},
  doi = {10.1145/1321631.1321714},
  acmid = {1321714},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {GSTView, ISAT, OMML, hard real time, openmodel, reactive system, validation},
}

@inproceedings{ZijiangYang:2006:MSR:2674328.2674349,
  author = {Zijiang Yang and Chao Wang and Gupta, A. and Ivancic, F.},
  title = {Mixed Symbolic Representations for Model Checking Software Programs},
  booktitle = {Proceedings of the Fourth ACM and IEEE International Conference on Formal Methods and Models for Co-Design, 2006. MEMOCODE '06. Proceedings.},
  series = {MEMOCODE '06},
  year = {2006},
  isbn = {1-4244-0421-5},
  pages = {17--26},
  numpages = {10},
  url = {http://dx.doi.org/10.1109/MEMCOD.2006.1695896},
  doi = {10.1109/MEMCOD.2006.1695896},
  acmid = {2674349},
  publisher = {IEEE Computer Society},
  address = {Washington, DC, USA},
  keywords = {Boolean-level model checking, mixed symbolic representation, symbolic search algorithm, software model checking, Boolean representation, integer representation, C program modeling, sequential programs},
}

@inproceedings{Yu:2007:ASA:1287624.1287671,
  author = {Yu, Fang and Bultan, Tevfik and Peterson, Erik},
  title = {Automated Size Analysis for OCL},
  booktitle = {Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
  series = {ESEC-FSE '07},
  year = {2007},
  isbn = {978-1-59593-811-4},
  location = {Dubrovnik, Croatia},
  pages = {331--340},
  numpages = {10},
  url = {http://doi.acm.org/10.1145/1287624.1287671},
  doi = {10.1145/1287624.1287671},
  acmid = {1287671},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {OCL, size abstraction, size analysis},
}

@article{Yang:2009:MCS:1455229.1455239,
  author = {Yang, Zijiang and Wang, Chao and Gupta, Aarti and Ivan\v{c}i\'{c}, Franjo},
  title = {Model Checking Sequential Software Programs via Mixed Symbolic Analysis},
  journal = {ACM Trans. Des. Autom. Electron. Syst.},
  issue_date = {January 2009},
  volume = {14},
  number = {1},
  month = {jan},
  year = {2009},
  issn = {1084-4309},
  pages = {10:1--10:26},
  articleno = {10},
  numpages = {26},
  url = {http://doi.acm.org/10.1145/1455229.1455239},
  doi = {10.1145/1455229.1455239},
  acmid = {1455239},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {Model checking, binary decision diagram, composite symbolic formula, image computation, presburger arithmetic, reachability analysis},
}

@inproceedings{Zhang:2005:ETQ:1101908.1101915,
  author = {Zhang, Dezhuang and Cleaveland, Rance},
  title = {Efficient Temporal-logic Query Checking for Presburger Systems},
  booktitle = {Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering},
  series = {ASE '05},
  year = {2005},
  isbn = {1-58113-993-4},
  location = {Long Beach, CA, USA},
  pages = {24--33},
  numpages = {10},
  url = {http://doi.acm.org/10.1145/1101908.1101915},
  doi = {10.1145/1101908.1101915},
  acmid = {1101915},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {Presburger systems, formal methods, model checking, on-the-fly symbolic model checking, query checking},
}
