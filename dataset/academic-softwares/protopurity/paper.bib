@INPROCEEDINGS{7335406,
  author={J. Nicolay and C. Noguera and C. De Roover and W. De Meuter},
  booktitle={2015 IEEE 15th International Working Conference on Source Code Analysis and Manipulation (SCAM)},
  title={Detecting function purity in JavaScript},
  year={2015},
  pages={101-110},
  abstract={We present an approach to detect function purity in JavaScript. A function is pure if none of its applications cause observable side-effects. The approach is based on a pushdown flow analysis that besides traditional control and value flow also keeps track of write effects. To increase the precision of our purity analysis, we combine it with an intraprocedural analysis to determine freshness of variables and object references. We formalize the core aspects of our analysis, and discuss our implementation used to analyze several common JavaScript benchmarks. Experiments show that our technique is capable of detecting function purity, even in the presence of higher-order functions, dynamic property expressions, and prototypal inheritance.},
  keywords={Java;program diagnostics;JavaScript;function purity detection;pushdown flow analysis;Arrays;Benchmark testing;Context;Reactive power;Resource management;Semantics;Standards},
  doi={10.1109/SCAM.2015.7335406},
  month={Sept},
  reference_weight={1},
}
