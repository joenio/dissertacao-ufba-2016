@INPROCEEDINGS{7372077,
  author={L. Ma and C. Artho and C. Zhang and H. Sato and J. Gmeiner and R. Ramler},
  booktitle={2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  title={GRT: An Automated Test Generator Using Orchestrated Program Analysis},
  year={2015},
  pages={842-847},
  keywords={program diagnostics;program testing;GRT;automated test generator;black-box approach;defect detection ability;low code coverage;orchestrated program analysis;program analysis components;random testing;software under test;static analysis;test coverage report;Data mining;Generators;Impurities;Libraries;Software systems;Testing;Automatic test generation;bug detection;dynamic analysis;random testing;static analysis},
  doi={10.1109/ASE.2015.102},
  month={Nov},
}

@INPROCEEDINGS{7173592,
  author={L. Ma and C. Artho and C. Zhang and H. Sato and M. Hagiya and Y. Tanabe and M. Yamamoto},
  booktitle={2015 IEEE/ACM 8th International Workshop on Search-Based Software Testing},
  title={GRT at the SBST 2015 Tool Competition},
  year={2015},
  pages={48-51},
  keywords={Java;automatic testing;program diagnostics;public domain software;GRT;Java code;SBST 2015 Tool Competition;Search-based Software Testing;automatic test generation tool;dynamic program analysis;guided random testing;open-source software projects;run-time test generation;static program analysis;Benchmark testing;Impurities;Java;Manuals;Protocols;Software;Software testing;automatic test case generation;program analysis;random testing},
  doi={10.1109/SBST.2015.19},
  month={May},
}

@INPROCEEDINGS{7503725,
  author={Lei Ma and Cheng Zhang and Bing Yu and Jianjun Zhao},
  booktitle={2016 IEEE 24th International Conference on Program Comprehension (ICPC)},
  title={Retrofitting automatic testing through library tests reusing},
  year={2016},
  pages={1-4},
  keywords={automatic testing;program diagnostics;program testing;software libraries;software maintenance;software metrics;software reusability;automated testing techniques;automatic testing;code fragments;dependency metrics;in-depth analysis;library tests reusing;program analysis;random test generator GRT;retrofitting;test cases;Automatic testing;Generators;Libraries;Measurement;Receivers;Software;Automated test generation;program analysis;random testing;software reuse},
  doi={10.1109/ICPC.2016.7503725},
  month={May},
}

@INPROCEEDINGS{7927983,
  author={C. Artho and Q. Gros and G. Rousset and K. Banzai and L. Ma and T. Kitamura and M. Hagiya and Y. Tanabe and M. Yamamoto},
  booktitle={2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)},
  title={Model-Based API Testing of Apache ZooKeeper},
  year={2017},
  pages={288-298},
  keywords={application program interfaces;distributed databases;formal verification;program testing;storage management;Apache ZooKeeper;Modbat;asynchronous callbacks;branch coverage;concurrent client sessions;core classes;coverage evaluation;distributed data storage;embedded model checker;feature coverage;model-based API testing;modeling effort;network communication;nondeterministic outcomes;synchronous callbacks;test cases;Complexity theory;Computational modeling;Computer science;Electronic mail;Servers;Testing;Tools;Apache ZooKeeper;Model-based testing;asynchronous systems;concurrency;networked systems;test oracle},
  doi={10.1109/ICST.2017.33},
  month={March},
}

@INPROCEEDINGS{7927969,
  author={A. Arcuri and G. Fraser and R. Just},
  booktitle={2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)},
  title={Private API Access and Functional Mocking in Automated Unit Test Generation},
  year={2017},
  pages={126-137},
  keywords={application program interfaces;object-oriented methods;program debugging;program testing;software maintenance;Defects4J benchmarks;EvoSuite unit test generation tool;Mockito framework;SF110 benchmarks;automated unit test generation;bug finding;code coverage;dependency objects;functional mocking;mock objects;object oriented code;object-oriented encapsulation;private API access;semantics-preserving refactoring;test generator;Generators;Java;Search problems;Software;Software testing;Tools;mocking;search-based software engineering;search-based testing;test case generation;testing classes},
  doi={10.1109/ICST.2017.19},
  month={March},
}

@ARTICLE{7840029,
  author={A. Panichella and F. Kifetew and P. Tonella},
  journal={IEEE Transactions on Software Engineering},
  title={Automated Test Case Generation as a Many-Objective Optimisation Problem with Dynamic Selection of the Targets},
  year={2017},
  volume={PP},
  number={99},
  pages={1-1},
  keywords={Algorithm design and analysis;Genetic algorithms;Heuristic algorithms;Optimization;Software algorithms;Sorting;Testing;Automatic Test Case Generation;Evolutionary Testing;Many-Objective Optimisation},
  doi={10.1109/TSE.2017.2663435},
  ISSN={0098-5589},
  month={},
}

@INPROCEEDINGS{7810701,
  author={U. Rueda and R. Just and J. P. Galeotti and T. E. J. Vos},
  booktitle={2016 IEEE/ACM 9th International Workshop on Search-Based Software Testing (SBST)},
  title={Unit Testing Tool Competition #x2014; Round Four},
  year={2016},
  pages={19-28},
  keywords={Java;program testing;Java unit testing tool competition;automated test generation tools;multiple time budgets;test effectiveness metrics;test generation tools;unit testing tool competition;Benchmark testing;Java;Measurement;Software reliability;Virtual machining;Defects4J;Java;automated unit testing;benchmark;mutation testing;tool competition},
  doi={10.1109/SBST.2016.012},
  month={May},
}

@INPROCEEDINGS{7476758,
  author={C. Artho and L. Ma},
  booktitle={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
  title={Classification of Randomly Generated Test Cases},
  year={2016},
  volume={2},
  pages={29-32},
  keywords={Java;program testing;@NonNull annotation;Java 8;false positive elimination;machine-readable documentation;randomly generated test case classification;test sequences;Documentation;Generators;Java;Libraries;Software;Testing;Tin},
  doi={10.1109/SANER.2016.32},
  month={March},
}

@ARTICLE{7763728,
  author={H. Sato},
  journal={IT Professional},
  title={Practical Correctness in ICT Environments},
  year={2016},
  volume={18},
  number={6},
  pages={4-8},
  keywords={Internet of Things;cybersecurity;information technology and communications;software engineering},
  doi={10.1109/MITP.2016.107},
  ISSN={1520-9202},
  month={Nov},
}

@INPROCEEDINGS{7810699,
  author={F. Palomba and D. Di Nucci and A. Panichella and R. Oliveto and A. De Lucia},
  booktitle={2016 IEEE/ACM 9th International Workshop on Search-Based Software Testing (SBST)},
  title={On the Diffusion of Test Smells in Automatically Generated Test Code: An Empirical Study},
  year={2016},
  pages={5-14},
  keywords={program testing;software engineering;automatic unit test generation tools;automatically generated test code;software development process;software testing;Context;Correlation;Production;Software testing;Usability;Automatically Generated Test Classes;Empirical Studies;Mining Software Repositories;Software Quality;Test Smells},
  doi={10.1109/SBST.2016.010},
  month={May},
}

@INPROCEEDINGS{7372010,
  author={L. Ma and C. Artho and C. Zhang and H. Sato and J. Gmeiner and R. Ramler},
  booktitle={2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  title={GRT: Program-Analysis-Guided Random Testing (T)},
  year={2015},
  pages={212-223},
  keywords={object-oriented programming;program testing;GRT;automated test generation;continuous coverage analysis;fault detection capability;peer techniques;program analysis guided random testing;program types;static analysis;Computer bugs;Data mining;Frequency measurement;Impurities;Software;Testing;Tin;Automatic test generation;dynamic analysis;random testing;static analysis},
  doi={10.1109/ASE.2015.49},
  month={Nov},
}
