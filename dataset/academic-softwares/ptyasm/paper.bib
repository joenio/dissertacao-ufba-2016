@INPROCEEDINGS{4639373,
  author={T. E. Hart and K. Ku and A. Gurfinkel and M. Chechik and D. Lie},
  booktitle={2008 23rd IEEE/ACM International Conference on Automated Software Engineering},
  title={PtYasm: Software Model Checking with Proof Templates},
  year={2008},
  pages={479-480},
  abstract={We describe PTYASM, an enhanced version of the YASM software model checker which uses proof templates. These templates associate correctness arguments with common programming idioms, thus enabling efficient verification. We have used PTYASM to verify the safety of array accesses in programs derived from the Verisec suite. PTYASM is able to verify this property in the majority of testcases, while existing software model checkers fail to do so due to loop unrolling.},
  keywords={formal specification;program control structures;program verification;PTYASM;Verisec suite;YASM software model checker;loop unrolling;program verification;programming idioms;proof templates;software model checking;Arithmetic;Computer science;Kelvin;Performance analysis;Safety;Sliding mode control;Software performance;Software testing;Software tools;System testing},
  doi={10.1109/ASE.2008.80},
  ISSN={1938-4300},
  month={Sept},
  review={artigo selecionado na revisão estruturada},
  really_refers_to_software={yes},
  contribution_weight={0.5},
  step={structured-review},
  conference={ASE},
}

@INPROCEEDINGS{4639348,
  author={T. E. Hart and K. Ku and A. Gurfinkel and M. Chechik and D. Lie},
  booktitle={2008 23rd IEEE/ACM International Conference on Automated Software Engineering},
  title={Augmenting Counterexample-Guided Abstraction Refinement with Proof Templates},
  year={2008},
  pages={387-390},
  abstract={Existing software model checkers based on predicate abstraction and refinement typically perform poorly at verifying the absence of buffer overflows, with analyses depending on the sizes of the arrays checked. We observe that many of these analyses can be made efficient by providing proof templates for common array traversal idioms idioms, which guide the model checker towards proofs that are independent of array size. We have integrated this technique into our software model checker, PtYasm, and have evaluated our approach on a set of testcases derived from the Verisec suite, demonstrating that our technique enables verification of the safety of array accesses independently of array size.},
  keywords={program verification;PtYasm;Verisec suite;array traversal idioms;buffer overflows verification;counterexample-guided abstraction refinement;predicate abstraction;proof templates;safety verification;software model checkers;Application software;Buffer overflow;Computer errors;Computer science;Kelvin;Performance analysis;Sliding mode control;Software performance;Software safety;Software testing},
  doi={10.1109/ASE.2008.55},
  ISSN={1938-4300},
  month={Sept},
  review={artigo selecionado na revisão estruturada},
  really_refers_to_software={yes},
  contribution_weight={0.5},
  step={structured-review},
  conference={ASE},
}
