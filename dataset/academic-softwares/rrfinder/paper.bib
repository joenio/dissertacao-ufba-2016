@INPROCEEDINGS{6100058,
  author={Q. Wu and G. Liang and Q. Wang and T. Xie and H. Mei},
  booktitle={2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)},
  title={Iterative mining of resource-releasing specifications},
  year={2011},
  pages={233-242},
  abstract={Software systems commonly use resources such as network connections or external file handles. Once finish using the resources, the software systems must release these resources by explicitly calling specific resource-releasing API methods. Failing to release resources properly could result in resource leaks or even outright system failures. Existing verification techniques could analyze software systems to detect defects related to failing to release resources. However, these techniques require resource-releasing specifications for specifying which API method acquires/releases certain resources, and such specifications are not well documented in practice, due to the large amount of manual effort required to document them. To address this issue, we propose an iterative mining approach, called RRFinder, to automatically mining resource-releasing specifications for API libraries in the form of (resource-acquiring, resource-releasing) API method pairs. RRFinder first identifies resource-releasing API methods, for which RRFinder then identifies the corresponding resource-acquiring API methods. To identify resource-releasing API methods, RRFinder performs an iterative process including three steps: model-based prediction, call-graph-based propagation, and class-hierarchy-based propagation. From heterogeneous information (e.g., source code, natural language), the model-based prediction employs a classification model to predict the likelihood that an API method is a resource-releasing method. The call-graph-based and class-hierarchy-based propagation propagates the likelihood information across methods. We evaluated RRFinder on eight open source libraries, and the results show that RRFinder achieved an average recall of 94.0% with precision of 86.6% in mining resource-releasing specifications, and the mined specifications are useful in detecting resource leak defects.},
  keywords={application program interfaces;data mining;graph theory;iterative methods;pattern classification;program verification;public domain software;API libraries;RRFinder;call graph based propagation;class hierarchy based propagation;classification model;iterative mining;model based prediction;open source libraries;resource releasing API methods;resource releasing specifications;software systems;system failures;verification techniques;Feature extraction;Iterative methods;Java;Libraries;Object oriented modeling;Predictive models;Resource management;resource leak detection;resource-releasing specification;specification mining},
  doi={10.1109/ASE.2011.6100058},
  ISSN={1938-4300},
  month={Nov},
  review={artigo selecionado na revis√£o estruturada},
  really_refers_to_software={yes},
  contribution_weight={10},
  step={structured-review},
}
