@INPROCEEDINGS{6200090,
  author={M. Kim and Y. Kim and G. Rothermel},
  booktitle={2012 IEEE Fifth International Conference on Software Testing, Verification and Validation},
  title={A Scalable Distributed Concolic Testing Approach: An Empirical Evaluation},
  year={2012},
  pages={340-349},
  keywords={program testing;software fault tolerance;software quality;automatic test case generation;fault detection;orders-of-magnitude;scalable distributed concolic testing approach;software quality improvement method;software testing methods;Concrete;Java;Partitioning algorithms;Scalability;Servers;Testing;Virtual machining},
  doi={10.1109/ICST.2012.114},
  ISSN={2159-4848},
  month={April},
  review={apenas cita o artigo que publicou o software},
  really_refers_to_software={no},
}

@INPROCEEDINGS{4221616,
  author={M. B. Dwyer and J. Hatcliff and R. Robby and C. S. Pasareanu and W. Visser},
  booktitle={Future of Software Engineering, 2007. FOSE '07},
  title={Formal Software Analysis Emerging Trends in Software Model Checking},
  year={2007},
  pages={120-136},
  keywords={software engineering;algorithmic formal reasoning;formal software analysis;program behavior;software model checking;Algorithm design and analysis;Computational Intelligence Society;Computer languages;Computer science;Embedded software;Information analysis;NASA;Object oriented modeling;Software algorithms;Software engineering},
  doi={10.1109/FOSE.2007.6},
  month={May},
  review={cita o software como um exemplo de combinação entre técnicas de execução simbólica, checagem de modelos e 'automated deduction to modularly reason about deep semantic properties of open object-oriented systems'},
  really_refers_to_software={yes},
}

@INPROCEEDINGS{7886898,
  author={E. F. Rizzi and S. Elbaum and M. B. Dwyer},
  booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE)},
  title={On the Techniques We Create, the Tools We Build, and Their Misalignments: A Study of KLEE},
  year={2016},
  pages={132-143},
  keywords={software engineering;KLEE tool;artifact complexity;performance gain;software techniques;Buildings;Complexity theory;Computer bugs;Engineering profession;Optimization;Software;Software engineering;Research incentives;replication;research tools and infrastructure},
  doi={10.1145/2884781.2884835},
  month={May},
  review={apenas cita o artigo que publicou o software},
  really_refers_to_software={no},
}

@INPROCEEDINGS{7027430,
  author={X. Fu and Z. Chen and Y. Zhang and C. Huang and W. Dong and J. Wang},
  booktitle={2015 IEEE 16th International Symposium on High Assurance Systems Engineering},
  title={MPISE: Symbolic Execution of MPI Programs},
  year={2015},
  pages={181-188},
  keywords={message passing;parallel programming;program debugging;program diagnostics;scheduling;system recovery;MPI programs;MPISE;automatic deadlock detection;benchmark programs;bug finding;bug understanding;diagnostic information;input coverage;interleaving exploration reduction;message passing interfaces;nondeterminism coverage;on-the-fly schedule algorithm;parallel applications;parallel computing;replay mechanism;runtime bug detection;symbolic execution;Computer bugs;Runtime;Scheduling;Switches;Synchronization;System recovery;Testing;Message Passing Interfaces;deadlock detection;symbolic execution},
  doi={10.1109/HASE.2015.35},
  ISSN={1530-2059},
  month={Jan},
  review={apenas cita o artigo que publicou o software},
  really_refers_to_software={no},
}

@INPROCEEDINGS{6032591,
  author={C. Cadar and P. Godefroid and S. Khurshid and C. S. Pasareanu and K. Sen and N. Tillmann and W. Visser},
  booktitle={2011 33rd International Conference on Software Engineering (ICSE)},
  title={Symbolic execution for software testing in practice: preliminary assessment},
  year={2011},
  pages={1066-1071},
  keywords={program testing;computational power;preliminary assessment;program analysis;software testing;symbolic execution;Computer bugs;Concrete;Java;Security;Software;Testing;Unified modeling language;dynamic test generation;generalized symbolic execution},
  doi={10.1145/1985793.1985995},
  ISSN={0270-5257},
  month={May},
  review={cita o artigo selecionado na revisão estruturada},
  really_refers_to_software={no},
}

@INPROCEEDINGS{6405256,
  author={C. R. Rupakheti and D. Hou},
  booktitle={2012 28th IEEE International Conference on Software Maintenance (ICSM)},
  title={Finding errors from reverse-engineered equality models using a constraint solver},
  year={2012},
  pages={77-86},
  keywords={Java;data structures;formal verification;program debugging;reverse engineering;Alloy Analyzer;EQ checker;Java object;constraint solver;contract conformance;equality contract;equality implementation bug;list data structure;map data structure;reverse-engineered equality model;scalability term;set data structure;usefulness term;Abstracts;Arrays;Detectors;Java;Metals;Standards;Testing;Abstraction Recognition;Alloy;Java;Model Finding;Object Equality;Path-Based Analysis;Soot},
  doi={10.1109/ICSM.2012.6405256},
  ISSN={1063-6773},
  month={Sept},
  review={apenas cita o artigo que publicou o software},
  really_refers_to_software={no},
}

@INPROCEEDINGS{4685803,
  author={C. Gladisch},
  booktitle={2008 Sixth IEEE International Conference on Software Engineering and Formal Methods},
  title={Verification-Based Test Case Generation for Full Feasible Branch Coverage},
  year={2008},
  pages={159-168},
  keywords={formal specification;program control structures;program verification;exhaustive inspection;full feasible branch coverage;loop invariant;program testing;symbolic program execution;verification-based test case generation;Arithmetic;Calculus;Computer science;Concrete;Inspection;Java;Logic testing;Programming;Software engineering;Software testing;Branch Coverage;Dynamic Logic;Java;Precondition;Specification-based Testing;Verification-based Testing;White-box Testing},
  doi={10.1109/SEFM.2008.22},
  ISSN={1551-0255},
  month={Nov},
  review={apenas cita o artigo que publicou o software},
  really_refers_to_software={no},
}

@INPROCEEDINGS{6285773,
  author={N. Aleb and S. Kechid},
  booktitle={2012 International Conference on Communications and Information Technology (ICCIT)},
  title={Path coverage testing in the cloud},
  year={2012},
  pages={118-123},
  keywords={cloud computing;program testing;resource allocation;automated software testing;coordinator;path coverage testing;program modeling;symbolic execution;task allocation;testing scalable parallelization;workers;Cloud computing;Computational modeling;Concrete;Data models;Software testing;Cloud Computing;Software Testing;Symbolic Execution;Testing as a Service},
  doi={10.1109/ICCITechnol.2012.6285773},
  month={June},
  review={apenas cita o artigo que publicou o software},
  really_refers_to_software={no},
}

@INPROCEEDINGS{1691665,
  author={M. B. Dwyer and J. Hatcliff},
  booktitle={Testing: Academic Industrial Conference - Practice And Research Techniques (TAIC PART'06)},
  title={Bogor: A Flexible Framework for Creating Software Model Checkers},
  year={2006},
  pages={3-22},
  keywords={object-oriented programming;program debugging;program testing;program verification;quality assurance;software quality;Bogor software model checking framework;distributed computing;domain-specific model checking engine creation;multicore architecture;object-oriented design modeling support;object-oriented modeling language;software debugging;software inspection;software model checking tool;software quality assurance technique;software system requirements;software testing;software verification;Computer architecture;Context modeling;Distributed computing;Engines;Hardware;Inspection;Object oriented modeling;Software debugging;Software quality;Software testing},
  doi={10.1109/TAIC-PART.2006.5},
  month={Aug},
  review={o software é implementado usando o framework Bogor, o autor não deixa claro onde estão as contribuições ao Bogor, mas no repositório do Bogor existe uma pasta com o nome do software Kiasan, aparentemente são as contribuições feitas ao framework},
  really_refers_to_software={yes},
}

@INPROCEEDINGS{7163725,
  author={A. Andrianova and V. Itsykson},
  booktitle={2013 Tools Methods of Program Analysis},
  title={Generating unit tests using static analysis and contracts},
  year={2013},
  pages={83-88},
  keywords={Java;contracts;program diagnostics;program testing;software quality;source code (software);CoFoJa;JUnit format;Java-based program;automated software testing;automated synthesis;automated unit test creation;black box approach;contracts;information extraction;software engineering;software quality assurance;source code;static analysis;white box approach;Computational modeling;Computers;Generators;SMT-solver;automated software testing;code analysis;contract-based programming;unit test synthesis},
  doi={10.1109/TMPA.2013.7163725},
  month={Oct},
  review={cita o software como trabalho relacionado},
  really_refers_to_software={yes},
}

@INPROCEEDINGS{4344093,
  author={X. Deng and Robby and J. Hatcliff},
  booktitle={Testing: Academic and Industrial Conference Practice and Research Techniques - MUTATION (TAICPART-MUTATION 2007)},
  title={Kiasan/KUnit: Automatic Test Case Generation and Analysis Feedback for Open Object-oriented Systems},
  year={2007},
  pages={3-12},
  keywords={Java;automatic test pattern generation;object-oriented programming;open systems;program testing;Bogor/Kiasan symbolic execution engine;Kiasan/KUnit automatic test case generation;automatic mock object creation;open object-oriented system;sequential heap-intensive Java programs;static analysis feedback;Application software;Automatic testing;Contracts;Costs;Engines;Feedback;Java;Open systems;Sequential analysis;System testing},
  doi={10.1109/TAIC.PART.2007.32},
  month={Sept},
  review={extende o software com um framework chamado KUnit para geração automáticaa de testes JUnit e visualização de objetos da pilha, são os mesmos autores do software original, apenas um autor diferente},
  really_refers_to_software={yes},
}

@ARTICLE{5487640,
  author={O. Tkachuk and M. B. Dwyer},
  journal={IET Software},
  title={Environment generation for validating event-driven software using model checking},
  year={2010},
  volume={4},
  number={3},
  pages={194-209},
  keywords={Internet;graphical user interfaces;program testing;program verification;Web-based applications;Web-based services;bandera environment generator;business logic;distributed programs;environment generation;event-driven software validation;graphical user interfaces;interface software;software model checking techniques;storage tier functionality},
  doi={10.1049/iet-sen.2009.0017},
  ISSN={1751-8806},
  month={June},
  review={cita o software como exemplo de framework para geração de casos de teste baseados em execução simbólica},
  really_refers_to_software={yes},
}

@INPROCEEDINGS{4343944,
  author={X. Deng and J. H. Robby and J. Hatcliff},
  booktitle={Fifth IEEE International Conference on Software Engineering and Formal Methods (SEFM 2007)},
  title={Towards A Case-Optimal Symbolic Execution Algorithm for Analyzing Strong Properties of Object-Oriented Programs},
  year={2007},
  pages={273-282},
  keywords={Java;object-oriented programming;software packages;Java data structure package;case-optimal symbolic execution algorithm;object-oriented programming;Algorithm design and analysis;Context-aware services;Contracts;Data structures;Information analysis;Java;Packaging;Performance analysis;Shape;Software algorithms},
  doi={10.1109/SEFM.2007.43},
  ISSN={1551-0255},
  month={Sept},
  review={implementa melhorias no algoritmo de execução simbólica para programas orientado a objetos, mesmos autores},
  really_refers_to_software={yes},
}

@INPROCEEDINGS{4019571,
  author={X. Deng and J. Lee and Robby},
  booktitle={21st IEEE/ACM International Conference on Automated Software Engineering (ASE'06)},
  title={Bogor/Kiasan: A k-bounded Symbolic Execution for Checking Strong Heap Properties of Open Systems},
  year={2006},
  pages={157-166},
  keywords={fault diagnosis;formal specification;open systems;program diagnostics;reasoning about programs;Bogor model checking;Kiasan technique;compositional reasoning;error traces;fault evidence;heap property checking;k-bounded symbolic execution;noncompositional reasoning;open systems;specification checking;Computer languages;Contracts;Costs;Java;Open systems;Programming;Software maintenance;Software performance;Software reusability;Software tools},
  doi={10.1109/ASE.2006.26},
  ISSN={1938-4300},
  month={Sept},
  review={é o mesmo artigo que publicou o software},
  really_refers_to_software={no},
}

@INPROCEEDINGS{7194640,
  author={G. Denaro and A. Margara and M. Pezzè and M. Vivanti},
  booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering},
  title={Dynamic Data Flow Testing of Object Oriented Systems},
  year={2015},
  volume={1},
  pages={947-958},
  keywords={data flow computing;object-oriented programming;program diagnostics;source code (software);dynamic data flow testing;interprocedural data flow information;object oriented systems;source code;state based method interactions;static analysis;Context;Data models;Object oriented modeling;Object recognition;Performance analysis;Runtime;Testing},
  doi={10.1109/ICSE.2015.104},
  ISSN={0270-5257},
  month={May},
  review={cita o software como trabalho relacionado},
  really_refers_to_software={yes},
}

@INPROCEEDINGS{6100071,
  author={S. Anand and M. J. Harrold},
  booktitle={2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)},
  title={Heap cloning: Enabling dynamic symbolic execution of java programs},
  year={2011},
  pages={33-42},
  keywords={Java;program diagnostics;program interpreters;software performance evaluation;Cinger;Java programs;dynamic symbolic-execution technique;heap cloning;program-analysis technique;program-transformation technique;Cloning;Computational modeling;Concrete;Instruments;Java;Libraries;Manuals},
  doi={10.1109/ASE.2011.6100071},
  ISSN={1938-4300},
  month={Nov},
  review={apenas cita o artigo que publicou o software},
  really_refers_to_software={no},
}

@INPROCEEDINGS{4019612,
  author={Robby and M. B. Dwyer and J. Hatcliff},
  booktitle={21st IEEE/ACM International Conference on Automated Software Engineering (ASE'06)},
  title={Domain-specific Model Checking Using The Bogor Framework},
  year={2006},
  pages={369-370},
  keywords={object-oriented programming;program debugging;program verification;Bogor infrastructure;domain-specific model checking;object-oriented design;program debugging;program verification;software system requirements;Algorithm design and analysis;Context modeling;Dynamic programming;Engines;Java;Object oriented modeling;Power system modeling;Software algorithms;Software systems;Yarn},
  doi={10.1109/ASE.2006.34},
  ISSN={1938-4300},
  month={Sept},
  review={cita o artigo selecionado na revisão estruturada},
  really_refers_to_software={no},
}

@INPROCEEDINGS{6062090,
  author={M. Gligoric and T. Gvero and V. Jagannath and S. Khurshid and V. Kuncak and D. Marinov},
  booktitle={2010 ACM/IEEE 32nd International Conference on Software Engineering},
  title={Test generation through programming in UDITA},
  year={2010},
  volume={1},
  pages={225-234},
  keywords={Java;data structures;program testing;JPF;Java PathFinder;Java based language;Java programs;UDITA programming;UDITA programs;data structures;test generation;Computer bugs;Concrete;Data structures;Engines;Generators;Java;Testing;Java PathFinder;Pex;UDITA;automated testing;test filtering;test generation;test predicates;test programs},
  doi={10.1145/1806799.1806835},
  ISSN={0270-5257},
  month={May},
  review={apenas cita o artigo que publicou o software},
  really_refers_to_software={no},
}
