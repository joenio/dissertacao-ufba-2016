#!/usr/bin/perl
use Modern::Perl '2014';
use experimental 'signatures';
use File::Basename;
use YAML qw( LoadFile );
use Text::BibTeX;
use Mojo::Template;
use DateTime::Format::HTTP;
use open ':locale';
use utf8;

sub read_paper_file($filepath) {
    my %paper = ();
    unless (-z $filepath) {
      if (my $bib = Text::BibTeX::File->new($filepath)) {
        while (my $entry = Text::BibTeX::Entry->new({binmode => 'utf-8'}, $bib)) {
          next unless $entry->parse_ok;
          my ($first_author) = $entry->split('author');
          $paper{author} = $first_author;
          $paper{title} = $entry->get('title');
        }
        $bib->close;
      }
    }
    return %paper;
}

sub read_citations_file($filepath) {
  my %citations = ();
  unless (-z $filepath) {
    if (my $bib = Text::BibTeX::File->new($filepath)) {
      while (my $entry = Text::BibTeX::Entry->new($bib)) {
        next unless $entry->parse_ok;
        my $really_refers_to_software = $entry->get('really_refers_to_software');
        if ($really_refers_to_software && $really_refers_to_software eq 'yes') {
          my $key = $entry->key;
          my ($first_author) = $entry->split('author');
          $citations{$key}{author} = $first_author;
          $citations{$key}{title} = $entry->get('title');
        }
      }
      $bib->close;
    }
  }
  return %citations;
}

sub load_collected_data($software_dir) {
  # read YAML: software.yml
  my $yaml = LoadFile("$software_dir/software.yml");
  my %software = %{ $yaml };
  # read BIBTEX: paper.bib
  my %paper = read_paper_file("$software_dir/paper.bib");
  $software{paper}{bibfile} = \%paper;
  # read BIBTEX: citations/ieeexplore.bib
  my %ieeexplore = read_citations_file("$software_dir/citations/ieeexplore.bib");
  $software{citations}{ieeexplore}{bibfile} = \%ieeexplore;
  $software{citations}{ieeexplore}{really_refers_to_software_count} = scalar keys %ieeexplore;
  # read BIBTEX: citations/acm.bib
  my %acm = read_citations_file("$software_dir/citations/acm.bib");
  $software{citations}{acm}{bibfile} = \%acm;
  $software{citations}{acm}{really_refers_to_software_count} = scalar keys %acm;
  # check if collected data miss something
  if ($software{address}{download_available} eq 'yes') {
    if ($software{software}{distribution} =~ /^gratis|foss$/) {
      unless (-d "$software_dir/source-code") {
        $software{debug}{source_code_missing} = 1;
      }
      else {
        $software{debug}{source_code_missing} = 0;
      }
    }
  }
  unless (-l "$software_dir/paper.pdf") {
    $software{debug}{symlink_to_paper_missing} = 1;
  }
  else {
    $software{debug}{symlink_to_paper_missing} = 0;
  }

  return %software;
}

sub load_all_collected_data($softwares_dir) {
  my %softwares = ();
  foreach my $dir (grep { -d $_ } glob("$softwares_dir/*")) {
    my %software_data = load_collected_data($dir);
    my $software_key = basename $dir;
    $softwares{$software_key} = \%software_data;

  }
  return %softwares;
}

sub format_collected_data {
  my $softwares = shift;
  foreach (keys %$softwares) {
    my ($searched_at, $date);
    # format IEEEXPLORE searched_at as dd/mm/yyyy
    $searched_at = $softwares->{$_}{citations}{ieeexplore}{searched_at};
    $date = DateTime::Format::HTTP->parse_datetime($searched_at);
    $softwares->{$_}{citations}{ieeexplore}{searched_at} = $date->dmy('/');
    # format ACM searched_at as dd/mm/yyyy
    $searched_at = $softwares->{$_}{citations}{acm}{searched_at};
    $date = DateTime::Format::HTTP->parse_datetime($searched_at);
    $softwares->{$_}{citations}{acm}{searched_at} = $date->dmy('/');
    # format address checked_at as dd/mm/yyyy
    my $checked_at = $softwares->{$_}{address}{checked_at};
    $date = DateTime::Format::HTTP->parse_datetime($checked_at);
    $softwares->{$_}{address}{checked_at} = $date->dmy('/');
    # format distribution as pt_BR
    if ($softwares->{$_}{software}{distribution} eq 'foss') {
      $softwares->{$_}{software}{distribution} = 'como software livre';
    }
    elsif ($softwares->{$_}{software}{distribution} eq 'gratis') {
      $softwares->{$_}{software}{distribution} = 'gratuitamente';
    }
    if ($softwares->{$_}{address}{url_available} eq 'yes') {
      $softwares->{$_}{address}{url_available} = 'com sucesso';
    }
    else {
      $softwares->{$_}{address}{url_available} = 'sem sucesso';
    }
    # format license=demo as pt_BR
    if ($softwares->{$_}{software}{license} eq 'demo') {
      $softwares->{$_}{software}{license} = 'de demonstração';
    }
    # format releases as pt_BR
    if ($softwares->{$_}{features}{releases} eq 'Frequently') {
      $softwares->{$_}{features}{releases} = 'frequentes';
    }
    elsif ($softwares->{$_}{features}{releases} eq 'Occasionally') {
      $softwares->{$_}{features}{releases} = 'ocsaionais';
    }
  }
}

if ($#ARGV < 1 || $ARGV[0] ne '-o' || length($ARGV[1]) == 0) {
  warn "E: missing options!";
  print "Usage: $0 -o <output-filename>\n";
  exit 1;
}
our $OUTPUT_FILENAME = $ARGV[1];
our $DATASET_DIR = "$ENV{PWD}/dataset";
my %softwares = load_all_collected_data("$DATASET_DIR/academic-softwares");
format_collected_data \%softwares;
my $t = Mojo::Template->new(auto_escape => 1);
my $output = $t->render_file("$ENV{PWD}/bin/softwares-summary.tex.epl", %softwares);
open my $SUMMARY, '>', $OUTPUT_FILENAME or die $!;
print $SUMMARY $output;
close $SUMMARY;
