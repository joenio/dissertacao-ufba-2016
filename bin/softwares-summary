#!/usr/bin/perl
use Modern::Perl '2014';
use experimental 'signatures';
use File::Basename;
use YAML qw( LoadFile );
use Text::BibTeX;
use Mojo::Template;
use DateTime::Format::HTTP;
use List::Util qw( uniq );
use Set::Tiny;
use open ':locale';
use utf8;

sub read_paper_file($filepath) {
  my %paper = ();
  unless (-z $filepath) {
    if (my $bib = Text::BibTeX::File->new($filepath)) {
      while (my $entry = Text::BibTeX::Entry->new({binmode => 'utf-8'}, $bib)) {
        next unless $entry->parse_ok;
        my ($first_author) = $entry->split('author');
        $paper{author} = $first_author;
        $paper{title} = $entry->get('title');
        $paper{review} = $entry->get('review');
        $paper{really_refers_to_software} = $entry->get('really_refers_to_software') // 'undefined';
        my @authors = $entry->split('author');
        $paper{authors} = \@authors;
        $paper{year} = $entry->get('year');
        $paper{contribution_weight} = $entry->get('contribution_weight');
        if (my $weightless_contributions = $entry->get('contribution_weight')) {
          $paper{weightless_contributions} = $weightless_contributions;
        }
        $paper{entry_key} = $entry->key;
        $paper{step} = $entry->get('step') // 'structred-review';
      }
      $bib->close;
    }
  }
  return %paper;
}

sub read_citations_file($filepath) {
  my %citations = ();
  unless (-z $filepath) {
    if (my $bib = Text::BibTeX::File->new($filepath)) {
      while (my $entry = Text::BibTeX::Entry->new({binmode => 'utf-8'}, $bib)) {
        next unless $entry->parse_ok;
        my $key = $entry->key;
        my ($first_author) = $entry->split('author');
        $citations{$key}{author} = $first_author;
        $citations{$key}{title} = $entry->get('title');
        $citations{$key}{review} = $entry->get('review');
        $citations{$key}{really_refers_to_software} = $entry->get('really_refers_to_software') // 'undefined';
        my @authors = $entry->split('author');
        $citations{$key}{authors} = \@authors;
        $citations{$key}{year} = $entry->get('year');
        $citations{$key}{contribution_weight} = $entry->get('contribution_weight');
        if (my $weightless_contributions = $entry->get('contribution_weight')) {
          $citations{$key}{weightless_contributions} = $weightless_contributions;
        }
        $citations{$key}{step} = $entry->get('step') // 'review-citations';
      }
      $bib->close;
    }
  }
  return %citations;
}

# returns a uniq list of entries that really refers to software
sub compact_citations {
  my %citations = @_;
  my %uniq = ();
  foreach my $entry_key (grep { $citations{$_}{really_refers_to_software} eq 'yes' } keys %citations) {
    if (grep { lc($uniq{$_}{title}) eq lc($citations{$entry_key}{title}) } keys %uniq) {
      next;
    }
    elsif (grep { $citations{$entry_key}{doi} && $uniq{$_}{doi} && $citations{$entry_key}{doi} eq $uniq{$_}{doi} } keys %uniq) {
      next;
    }
    $uniq{$entry_key} = $citations{$entry_key};
  }
  return %uniq;
}

sub authors_are_the_same {
  my @citation_authors = @{ $_[0]->{authors} };
  my @paper_authors = @{ $_[1]->{authors} };
  my @same_authors = ();
  foreach my $paper_author (@paper_authors) {
    foreach my $citation_author (@citation_authors) {
      if ($paper_author eq $citation_author) {
        push @same_authors, $paper_author;
      }
    }
  }
  return @same_authors == @paper_authors;
}

# normalize author names using format "Last F.", eg:
#  * Bajaj, Kon          = Bajaj K.
#  * Costa, Kim A.       = Costa K. A.
#  * Rajan, Sreeranga P. = Rajan S. P.
#  * Pol, Jaco van de    = Pol J. van de
#  * Zijiang Yang        = Yang Z.
#  * Chao Wang           = Wang C.
sub normalize_author_names {
  my %entry = @_;
  my @names = @{ $entry{authors} };
  my @normalized_names = ();
  for (my $i = 0; $i <= $#names; $i++) {
    my @normalized_name = ();
    if ($names[$i] =~ /,/) {
      my ($last, $first) = split /\s*,\s*/, $names[$i];
      foreach my $name (split /\s+/, $first) {
        if ($name =~ /^[[:upper:]]/) {
          $name =~ s/(.).*/$1./;
        }
        push @normalized_name, $name;
      }
      if ($last =~ /\s+/) {
        my @last_name = split /\s+/, $last;
        $last = pop @last_name;
        map { $_ =~ s/(.).*/$1./ } @last_name;
        $last = join(' ', @last_name, $last);
      }
      push @normalized_name, $last;
    }
    else {
      @normalized_name = split /\s+/, $names[$i];
      for (my $j = 0; $j < $#normalized_name; $j++) {
        if ($normalized_name[$j] =~ /^[[:upper:]]/) {
          $normalized_name[$j] =~ s/(.).*/$1./;
        }
      }
    }
    push @normalized_names, join(' ', reverse @normalized_name);
  }
  $entry{authors} = \@normalized_names;
  return %entry;
}

sub normalize_citations {
  my %citations = @_;
  foreach (keys %citations) {
    my %normalized = normalize_author_names %{ $citations{$_} };
    $citations{$_} = \%normalized;
  }
  return %citations;
}

sub group_citations_by_year {
  my %citations = @_;
  my %citations_by_year = ();
  foreach (keys %citations) {
    my $year = $citations{$_}{year};
    $citations_by_year{$year}{$_} = $citations{$_};
  }
  return %citations_by_year;
}

sub sum_weight_by {
  my $key = shift;
  my %citations_by_year = @_;
  my %weight_by_year_sum = ();
  foreach my $year (keys %citations_by_year) {
    $weight_by_year_sum{$year} = 0;
    foreach (keys %{ $citations_by_year{$year} }) {
      $citations_by_year{$year}{$_}{$key} //= 0;
      $weight_by_year_sum{$year} += $citations_by_year{$year}{$_}{$key};
    }
  }
  return %weight_by_year_sum;
}

sub measure_authorship_weight {
  my %citations = @_;
  my %citations_by_year = group_citations_by_year(@_);
  my $past_years_authors = Set::Tiny->new();
  foreach my $year (sort keys %citations_by_year) {
    my $authors_these_year = Set::Tiny->new();
    foreach (keys %{ $citations_by_year{$year} }) {
      $authors_these_year->insert(@{ $citations{$_}{authors} });
      # são os primeiros autores a publicar sobre o software
      if ($past_years_authors->is_empty) {
        $citations{$_}{authorship_weight} = 0;
      }
      # nenhum dos autores jamais publicou
      elsif ($authors_these_year->is_disjoint($past_years_authors)) {
        $citations{$_}{authorship_weight} = 0.5;
      }
      # uma parte dos autores já publicou sobre o software em anos anteriores
      elsif ($authors_these_year->is_properly_intersecting($past_years_authors)) {
        $citations{$_}{authorship_weight} = 0.25;
      }
      # todos os autores já publicaram sobre o software em anos anteriores
      elsif ($authors_these_year->is_subset($past_years_authors)) {
        $citations{$_}{authorship_weight} = 0;
      }
    }
    $past_years_authors->insert($authors_these_year->members);
  }
  return %citations;
}

sub load_collected_data($software_dir) {
  # read YAML: software.yml
  my $yaml = LoadFile("$software_dir/software.yml");
  my %software = %{ $yaml };
  ($software{software}{short_name}) = split '-', $software{software}{name};
  # read BIBTEX: paper.bib
  my %paper = read_paper_file("$software_dir/paper.bib");
  $software{paper}{bibfile} = \%paper;

  # read BIBTEX: citations/ieeexplore.bib
  my %ieeexplore = read_citations_file("$software_dir/citations/ieeexplore.bib");
  # read BIBTEX: citations/acm.bib
  my %acm = read_citations_file("$software_dir/citations/acm.bib");

  # summarize in a uniq citation list
  my %uniq = normalize_citations compact_citations(%ieeexplore, %acm, $paper{entry_key} => \%paper);
  
  # add paper selected on structured review
  #my %_uniq = %uniq;
  #$_uniq{$paper{entry_key}} = \%paper;
  #%_uniq = normalize_citations compact_citations %_uniq;

  # peso das autorias
  %uniq = measure_authorship_weight %uniq;

  $software{citations}{bibfile} = \%uniq;
  $software{citations}{really_refers_to_software_count} = scalar keys %uniq;

  # group citations by year
  my %citations_by_year = group_citations_by_year(%uniq);
  $software{citations}{by_year} = \%citations_by_year;

  # sum contribution weight by year
  my %contribution_weight_by_year = sum_weight_by('contribution_weight', %citations_by_year);
  $software{citations}{contribution_weight_by_year_sum} = \%contribution_weight_by_year;

  # sum authorship weight by year
  my %authorship_weight_by_year = sum_weight_by('authorship_weight', %citations_by_year);
  $software{citations}{authorship_weight_by_year_sum} = \%authorship_weight_by_year;

  # check if collected data miss something
  if ($software{address}{download_available} eq 'yes') {
    if ($software{software}{distribution} =~ /^gratis|foss$/) {
      unless (-d "$software_dir/source-code") {
        $software{debug}{source_code_missing} = 1;
      }
      else {
        $software{debug}{source_code_missing} = 0;
      }
    }
  }
  unless (-l "$software_dir/paper.pdf") {
    $software{debug}{symlink_to_paper_missing} = 1;
  }
  else {
    $software{debug}{symlink_to_paper_missing} = 0;
  }
  # set {address}{url} as {address}{urls}[0]
  unless ($software{address}{url}) {
    $software{address}{url} = $software{address}{urls}->[0];
  }
  # set {releases}{source} as {releases}{sources}[0]
  unless ($software{releases}{source}) {
    $software{releases}{source} = $software{releases}{sources}->[0];
  }
  # set {releases}{first_date} and {releases}{last_date}
  if ($software{releases}{dates}) {
    ($software{releases}{first_date}) = split(' ', $software{releases}{dates}->[-1]);
    ($software{releases}{last_date}) = split(' ', $software{releases}{dates}->[0]);
  }

  # quantos autores distintos cita o software
  my @all_citations_authors = uniq map { @{$software{citations}{bibfile}{$_}{authors}} } keys %{$software{citations}{bibfile}};
  $software{citations}{authors} = \@all_citations_authors;

  #my $paper_authors = Set::Infinite->new(@{ $software{paper}{bibfile}{authors} });
  #foreach (keys %{ $software{citations}{uniq} }) {
  #  my $citation_authors = Set::Infinite->new(@{ $software{citations}{uniq}{$_}{authors} });
  #  my @intersection = $paper_authors->intersection($citation_authors);
  #  $software{citations}{uniq}{$_}{authors_are_the_same} = "@intersection";
  #  if ($software{paper}{bibfile}{authors}->[0] eq $software{citations}{uniq}{$_}{authors}->[0]) {
  #    $software{citations}{uniq}{$_}{main_author_is_the_same} = yes;
  #  }
  #  else {
  #    $software{citations}{uniq}{$_}{main_authors_are_the_same} = 'no';
  #  }
  #}

  return %software;
}

sub load_all_collected_data($softwares_dir) {
  my %softwares = ();
  foreach my $dir (grep { -d $_ } glob("$softwares_dir/*")) {
    my %software_data = load_collected_data($dir);
    my $software_key = basename $dir;
    $softwares{$software_key} = \%software_data;

  }
  return %softwares;
}

sub format_collected_data {
  my $softwares = shift;
  foreach (keys %$softwares) {
    my ($searched_at, $date);
    # format IEEEXPLORE searched_at as dd/mm/yyyy
    $searched_at = $softwares->{$_}{citations}{ieeexplore}{searched_at};
    $date = DateTime::Format::HTTP->parse_datetime($searched_at);
    $softwares->{$_}{citations}{ieeexplore}{searched_at} = $date->dmy('/');
    # format ACM searched_at as dd/mm/yyyy
    $searched_at = $softwares->{$_}{citations}{acm}{searched_at};
    $date = DateTime::Format::HTTP->parse_datetime($searched_at);
    $softwares->{$_}{citations}{acm}{searched_at} = $date->dmy('/');
    # format address checked_at as dd/mm/yyyy
    my $checked_at = $softwares->{$_}{address}{checked_at};
    $date = DateTime::Format::HTTP->parse_datetime($checked_at);
    $softwares->{$_}{address}{checked_at} = $date->dmy('/');
    # format distribution as pt_BR
    if ($softwares->{$_}{software}{distribution} eq 'foss') {
      $softwares->{$_}{software}{distribution} = 'como software livre';
    }
    elsif ($softwares->{$_}{software}{distribution} eq 'gratis') {
      $softwares->{$_}{software}{distribution} = 'gratuitamente';
    }
    if ($softwares->{$_}{address}{url_available} eq 'yes') {
      $softwares->{$_}{address}{url_available} = 'com sucesso';
    }
    else {
      $softwares->{$_}{address}{url_available} = 'sem sucesso';
    }
    # format license=demo as pt_BR
    if ($softwares->{$_}{software}{license} eq 'demo') {
      $softwares->{$_}{software}{license} = 'de demonstração';
    }
    # format releases as pt_BR
    if ($softwares->{$_}{features}{releases} eq 'Frequently') {
      $softwares->{$_}{features}{releases} = 'frequentes';
    }
    elsif ($softwares->{$_}{features}{releases} eq 'Occasionally') {
      $softwares->{$_}{features}{releases} = 'ocasionais';
    }
    # format first release date as yyyy
    if ($softwares->{$_}{releases}{first_date} && $softwares->{$_}{releases}{first_date} !~ /undefined/) {
      my $first_date = $softwares->{$_}{releases}{first_date};
      $date = DateTime::Format::HTTP->parse_datetime($first_date);
      $softwares->{$_}{releases}{first_date} = $date->year;
    }
    # format last release date as yyyy
    if ($softwares->{$_}{releases}{last_date} && $softwares->{$_}{releases}{last_date} !~ /undefined/) {
      my $last_date = $softwares->{$_}{releases}{last_date};
      $date = DateTime::Format::HTTP->parse_datetime($last_date);
      $softwares->{$_}{releases}{last_date} = $date->year;
    }
  }
}

if ($#ARGV < 1 || $ARGV[0] ne '-o' || length($ARGV[1]) == 0) {
  warn "E: missing options!";
  print "Usage: $0 -o <output-filename>\n";
  exit 1;
}
our $OUTPUT_FILENAME = $ARGV[1];
our $DATASET_DIR = "$ENV{PWD}/dataset";
my %softwares = load_all_collected_data("$DATASET_DIR/academic-softwares");
format_collected_data \%softwares;
my $t = Mojo::Template->new(auto_escape => 1);
my $output = $t->render_file("$ENV{PWD}/bin/softwares-summary.tex.epl", %softwares);
open my $SUMMARY, '>', $OUTPUT_FILENAME or die $!;
print $SUMMARY $output;
close $SUMMARY;
