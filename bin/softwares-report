#!/usr/bin/perl
use Modern::Perl '2014';
use experimental 'signatures';
use File::Basename;
use Statistics::Descriptive;
use YAML qw( LoadFile );
use open ':locale';
use Term::ANSIColor;
use Text::BibTeX;
use utf8;

our $DATASET_DIR = "$ENV{PWD}/dataset";

sub read_paper_file($filepath) {
    my %paper = ();
    unless (-z $filepath) {
      if (my $bib = Text::BibTeX::File->new($filepath)) {
        while (my $entry = Text::BibTeX::Entry->new($bib)) {
          next unless $entry->parse_ok;
          my ($first_author) = $entry->split('author');
          $paper{author} = $first_author;
        }
        $bib->close;
      }
    }
    return %paper;
}

sub read_references_file($filepath) {
  my %references = ();
  unless (-z $filepath) {
    if (my $bib = Text::BibTeX::File->new($filepath)) {
      $references{count} = 0;
      while (my $entry = Text::BibTeX::Entry->new($bib)) {
        next unless $entry->parse_ok;
        $references{count}++;
      }
      $bib->close;
    }
  }
  return %references;
}

sub load_collected_data($software_dir) {
  # read YAML: software.yml
  my $yaml = LoadFile("$software_dir/software.yml");
  my %software = %{ $yaml };
  # read BIBTEX: paper.bib
  my %paper = read_paper_file("$software_dir/paper.bib");
  $software{paper}{bibtex} = \%paper;
  # read BIBTEX: references.bib
  my %references = read_references_file("$software_dir/references.bib");
  $software{references} = \%references;

  # check if collected data miss something
  if ($software{features}{download_available} eq 'yes') {
    if ($software{software}{distribution} =~ /^gratis|foss$/) {
      unless (-d "$software_dir/source-code") {
        $software{debug}{source_code_missing} = 1;
      }
      else {
        $software{debug}{source_code_missing} = 0;
      }
    }
  }
  unless (-l "$software_dir/paper.pdf") {
    $software{debug}{symlink_to_paper_missing} = 1;
  }
  else {
    $software{debug}{symlink_to_paper_missing} = 0;
  }

  return %software;
}

sub load_all_collected_data($softwares_dir) {
  my %softwares = ();
  foreach my $dir (grep { -d $_ } glob("$softwares_dir/*")) {
    my %software_data = load_collected_data($dir);
    my $software_key = basename $dir;
    $softwares{$software_key} = \%software_data;

  }
  return %softwares;
}

sub output_software_data(%software) {
  print colored($software{software}{name}, 'bold'), ': ', $software{software}{description};
  if ($software{features}{source_code} ne 'undefined') {
    print colored(' source:', 'yellow'), colored($software{features}{source_code}, "bright_yellow");
  }
  if ($software{features}{releases} ne 'undefined') {
    print colored(' releases:', 'yellow'), colored($software{features}{releases}, "bright_yellow");
  }
  if ($software{references}{count}) {
    print colored(' references:', 'yellow'), colored($software{references}{count}, 'bright_yellow');
  }
  say "";
  print '  ', $software{software}{url};
  if ($software{features}{url_available} eq 'yes') {
    print colored(' available:', 'yellow'), colored("yes", "bright_green");
  }
  else {
    print colored(' available:', 'yellow'), colored("no", "bright_red");
  }
  if ($software{features}{download_available} eq 'yes') {
    print colored(' download:', 'yellow'), colored("yes", "bright_green");
  }
  else {
    print colored(' download:', 'yellow'), colored("no", "bright_red");
  }
  say "";
  print '  ', $software{paper}{title}, ' ',
    colored($software{paper}{conference} . ':', 'yellow'),
    colored($software{paper}{year}, 'bright_yellow');
  if ($software{paper}{bibtex}{author}) {
    print colored(' author:', 'yellow'), colored($software{paper}{bibtex}{author}, 'bright_yellow');
  }
  say "";
  print ' ';
  if ($software{debug}{symlink_to_paper_missing}) {
    print colored(' paper.pdf(symlink):', 'yellow'), colored('missing', 'bright_red');
  }
  if ($software{debug}{source_code_missing}) {
    print colored(' source-code(dir):', 'yellow'), colored('missing', 'bright_red');
  }
  say "";
}

my %softwares = ();

if (@ARGV) {
  my $software_name = $ARGV[0];
  unless (-d "$DATASET_DIR/academic-softwares/$software_name") {
    die "diretório não existe: $DATASET_DIR/academic-softwares/$software_name";
  }
  else {
    my %software = load_collected_data("$DATASET_DIR/academic-softwares/$software_name");
    $softwares{$software_name} = \%software;
  }
}
else {
  %softwares = load_all_collected_data("$DATASET_DIR/academic-softwares");
}

foreach my $software (sort keys %softwares) {
  output_software_data(%{ $softwares{$software} });
}

say colored('total:', 'yellow'), colored(scalar(keys %softwares), 'bold');
