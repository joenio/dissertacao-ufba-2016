#!/usr/bin/perl
use utf8;
use open ':locale';
use Modern::Perl '2014';
use File::Basename;
use YAML qw( LoadFile Dump );
use File::Spec::Functions;
use lib 'lib';
use Dissertacao qw( unique bibtex_load metrics_load );

=head1 NAME

cache - read dataset and summarize into one single YAML structure

=head1 SYNOPSIS

  ./bin/cache <dataset-dir>

=head1 DESCRIPTION

Write to the stdout a multi-document YAML composed by all data for each
project, each software.yml and search/*.bib, search.yml, references.yml,
releases.yml file are read and loaded into a single YAML structure.

=cut

sub bibtex_project_load {
  my $file = shift;
  my %bib = bibtex_load $file;
  my %data = map { $_ => {title => $bib{$_}->get('title'), doi => $bib{$_}->get('doi')} } keys %bib;
  return \%data;
}

sub load_project_data {
  my $dir = shift;
  my %dataset = %{ LoadFile("$dir/software.yml") };
  ($dataset{software}{short_name}) = split ' - ', $dataset{software}{name};
  $dataset{files}{'paper.bib'} = bibtex_project_load "$dir/paper.bib";
  $dataset{files}{'search/acm.bib'} = bibtex_project_load "$dir/search/acm.bib";
  $dataset{files}{'search/ieee.bib'} = bibtex_project_load "$dir/search/ieee.bib";
  $dataset{references} = \%{ LoadFile("$dir/references.yml") } if -e "$dir/references.yml";
  $dataset{search} = \%{ LoadFile("$dir/search.yml") };
  $dataset{releases} = \%{ LoadFile("$dir/releases.yml") } if -e "$dir/releases.yml";
  foreach my $v (@{ $dataset{releases}{versions} }) {
    if ($v->{source} && -s "$dir/releases/version-$v->{version}.metrics") {
      $dataset{metrics}{"version-$v->{version}"} = metrics_load "$dir/releases/version-$v->{version}.metrics";
    }
  }
  foreach my $r (grep { $dataset{references}{$_}{is_software_mentioned} eq 'yes' } keys %{ $dataset{references} }) {
    if ($dataset{references}{$r}{step} && $dataset{references}{$r}{step} eq 'study1') {
      $dataset{conference} = $dataset{references}{$r}{conference};
      last;
    }
  }
  return %dataset;
}

sub load_projects_dataset {
  my $dir = shift;
  my %dataset = ();
  foreach my $d (grep { -d $_ } glob( catfile($dir, '*'))) {
    my %data = load_project_data($d);
    $data{path} = $d;
    $dataset{$data{software}{id}} = \%data;
  }
  return %dataset;
}

if (@ARGV < 1) {
  warn "E: missing options!";
  say "Usage: $0 <dataset-dir>";
  exit 1;
}
our $DATASET_DIR = shift @ARGV;
my %dataset = load_projects_dataset($DATASET_DIR);
print Dump(%dataset);
